{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Island Time Island Time is a Kotlin Multiplatform library for working with dates and times. Heavily inspired by the java.time library, Island Time aims to provide a powerful API that works across platforms while taking full advantage of the features offered by the Kotlin language. Features A full set of date-time primitives such as Date , Time , DateTime , Instant , and ZonedDateTime Time zone database support Date ranges and time intervals, integrating with Kotlin ranges and progressions Read and write strings in ISO formats DSL-based definition of custom parsers Access localized text for names of months, days of the week, time zones, etc. Convenience operators like date.next(MONDAY) , dateTime.startOfWeek , or date.weekRange(WeekSettings.systemDefault()) Convert to and from platform-specific date-time types Works on JVM, Android, iOS, macOS, tvOS, and watchOS Current Limitations No custom format strings (must write platform-specific code to do this) Doesn't support all week-related fields or week-based dates Only supports the ISO calendar system","title":"About"},{"location":"#island-time","text":"Island Time is a Kotlin Multiplatform library for working with dates and times. Heavily inspired by the java.time library, Island Time aims to provide a powerful API that works across platforms while taking full advantage of the features offered by the Kotlin language.","title":"Island Time"},{"location":"#features","text":"A full set of date-time primitives such as Date , Time , DateTime , Instant , and ZonedDateTime Time zone database support Date ranges and time intervals, integrating with Kotlin ranges and progressions Read and write strings in ISO formats DSL-based definition of custom parsers Access localized text for names of months, days of the week, time zones, etc. Convenience operators like date.next(MONDAY) , dateTime.startOfWeek , or date.weekRange(WeekSettings.systemDefault()) Convert to and from platform-specific date-time types Works on JVM, Android, iOS, macOS, tvOS, and watchOS","title":"Features"},{"location":"#current-limitations","text":"No custom format strings (must write platform-specific code to do this) Doesn't support all week-related fields or week-based dates Only supports the ISO calendar system","title":"Current Limitations"},{"location":"getting-started/","text":"Getting Started Supported Platforms As a Kotlin Multiplatform library, Island Time isn't restricted to just the JVM or Android. Currently, the following platforms are supported: JVM Android iOS ARM64/x64 macOS x64 watchOS ARM64/x86 tvOS ARM64/x64 Version Requirements Important Your project's Kotlin compiler version must match the version used by Island Time. Due to the experimental status of inline classes , which are used in Island Time's public API, the version of Kotlin that you use in your project must match the version used by Island Time -- even for non-native targets. Those of you who are using Kotlin/Native are probably already accustomed to dealing with this since there is no binary compatibility between releases yet. Island Time Version Kotlin Version 0.1.x 1.3.6x 0.2.x 1.3.7x JVM Island Time requires Java 8 or above. Android Island Time requires a minimum compile SDK of API 15 or later and Java 8 support should be turned on . Gradle Setup Common Add the following dependency to your project's Gradle script: Groovy dependencies { implementation \"io.islandtime:core:1.2.2\" } Kotlin dependencies { implementation ( \"io.islandtime:core:1.2.2\" ) } Note Island Time publishes Gradle Module Metadata for all multiplatform artifacts. The listed \"common\" artifacts may be used in the dependency block of any target, common or platform-specific. Android Android Studio 4.0 or later Make sure that core library desugaring is enabled. Groovy android { defaultConfig { // Required when setting minSdkVersion to 20 or lower multiDexEnabled true } compileOptions { // Flag to enable support for the new language APIs coreLibraryDesugaringEnabled true // Sets Java compatibility to Java 8 sourceCompatibility JavaVersion . VERSION_1_8 targetCompatibility JavaVersion . VERSION_1_8 } } dependencies { coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:1.0.9' } Kotlin android { defaultConfig { // Required when setting minSdkVersion to 20 or lower multiDexEnabled = true } compileOptions { // Flag to enable support for the new language APIs coreLibraryDesugaringEnabled = true // Sets Java compatibility to Java 8 sourceCompatibility = JavaVersion . VERSION_1_8 targetCompatibility = JavaVersion . VERSION_1_8 } } dependencies { coreLibraryDesugaring ( \"com.android.tools:desugar_jdk_libs:1.0.9\" ) } Android Studio 3.6 or earlier You'll need to add an additional dependency on the ThreeTen Android Backport. You can find details here . Snapshot builds Development snapshot builds are available in the Sonatype OSS Snapshot Repository. To use one, you'll need to add that repository to your project's Gradle script: Groovy repositories { maven { url \"https://oss.sonatype.org/content/repositories/snapshots/\" } } Kotlin repositories { maven ( url = \"https://oss.sonatype.org/content/repositories/snapshots/\" ) }","title":"Getting Started"},{"location":"getting-started/#getting-started","text":"","title":"Getting Started"},{"location":"getting-started/#supported-platforms","text":"As a Kotlin Multiplatform library, Island Time isn't restricted to just the JVM or Android. Currently, the following platforms are supported: JVM Android iOS ARM64/x64 macOS x64 watchOS ARM64/x86 tvOS ARM64/x64","title":"Supported Platforms"},{"location":"getting-started/#version-requirements","text":"Important Your project's Kotlin compiler version must match the version used by Island Time. Due to the experimental status of inline classes , which are used in Island Time's public API, the version of Kotlin that you use in your project must match the version used by Island Time -- even for non-native targets. Those of you who are using Kotlin/Native are probably already accustomed to dealing with this since there is no binary compatibility between releases yet. Island Time Version Kotlin Version 0.1.x 1.3.6x 0.2.x 1.3.7x","title":"Version Requirements"},{"location":"getting-started/#jvm","text":"Island Time requires Java 8 or above.","title":"JVM"},{"location":"getting-started/#android","text":"Island Time requires a minimum compile SDK of API 15 or later and Java 8 support should be turned on .","title":"Android"},{"location":"getting-started/#gradle-setup","text":"","title":"Gradle Setup"},{"location":"getting-started/#common","text":"Add the following dependency to your project's Gradle script: Groovy dependencies { implementation \"io.islandtime:core:1.2.2\" } Kotlin dependencies { implementation ( \"io.islandtime:core:1.2.2\" ) } Note Island Time publishes Gradle Module Metadata for all multiplatform artifacts. The listed \"common\" artifacts may be used in the dependency block of any target, common or platform-specific.","title":"Common"},{"location":"getting-started/#android_1","text":"","title":"Android"},{"location":"getting-started/#android-studio-40-or-later","text":"Make sure that core library desugaring is enabled. Groovy android { defaultConfig { // Required when setting minSdkVersion to 20 or lower multiDexEnabled true } compileOptions { // Flag to enable support for the new language APIs coreLibraryDesugaringEnabled true // Sets Java compatibility to Java 8 sourceCompatibility JavaVersion . VERSION_1_8 targetCompatibility JavaVersion . VERSION_1_8 } } dependencies { coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:1.0.9' } Kotlin android { defaultConfig { // Required when setting minSdkVersion to 20 or lower multiDexEnabled = true } compileOptions { // Flag to enable support for the new language APIs coreLibraryDesugaringEnabled = true // Sets Java compatibility to Java 8 sourceCompatibility = JavaVersion . VERSION_1_8 targetCompatibility = JavaVersion . VERSION_1_8 } } dependencies { coreLibraryDesugaring ( \"com.android.tools:desugar_jdk_libs:1.0.9\" ) }","title":"Android Studio 4.0 or later"},{"location":"getting-started/#android-studio-36-or-earlier","text":"You'll need to add an additional dependency on the ThreeTen Android Backport. You can find details here .","title":"Android Studio 3.6 or earlier"},{"location":"getting-started/#snapshot-builds","text":"Development snapshot builds are available in the Sonatype OSS Snapshot Repository. To use one, you'll need to add that repository to your project's Gradle script: Groovy repositories { maven { url \"https://oss.sonatype.org/content/repositories/snapshots/\" } } Kotlin repositories { maven ( url = \"https://oss.sonatype.org/content/repositories/snapshots/\" ) }","title":"Snapshot builds"},{"location":"advanced/custom-providers/","text":"Custom Providers By default, Island Time uses platform APIs to access time zone database information and localized text. Each platform and version of that platform exposes different information though, so there are compromises involved and Island Time may not always behave the way you'd like. Using custom providers, you can work around certain edge cases or make use of different data sources. Initialization Prior to using Island Time, it may be initialized with custom providers for time zone rules or localized text. The platform default providers will be used for any that aren't specified explicitly. It's only necessary to initialize Island Time if you're using custom providers. IslandTime . initialize { // Override all of the platform default providers with our own timeZoneRulesProvider = MyTimeZoneRulesProvider dateTimeTextProvider = MyDateTimeTextProvider timeZoneTextProvider = MyTimeZoneTextProvider }","title":"Custom Providers"},{"location":"advanced/custom-providers/#custom-providers","text":"By default, Island Time uses platform APIs to access time zone database information and localized text. Each platform and version of that platform exposes different information though, so there are compromises involved and Island Time may not always behave the way you'd like. Using custom providers, you can work around certain edge cases or make use of different data sources.","title":"Custom Providers"},{"location":"advanced/custom-providers/#initialization","text":"Prior to using Island Time, it may be initialized with custom providers for time zone rules or localized text. The platform default providers will be used for any that aren't specified explicitly. It's only necessary to initialize Island Time if you're using custom providers. IslandTime . initialize { // Override all of the platform default providers with our own timeZoneRulesProvider = MyTimeZoneRulesProvider dateTimeTextProvider = MyDateTimeTextProvider timeZoneTextProvider = MyTimeZoneTextProvider }","title":"Initialization"},{"location":"api/core/","text":"core The core set of date-time classes, supporting the ISO calendar system. Packages Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) io.islandtime Date-time primitives and core concepts, such as Date , Time , Instant , and ZonedDateTime . (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) io.islandtime.base Experimental : Framework-level interfaces, allowing aspects of date and time to be abstracted. This area is unstable and likely to see significant change. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) io.islandtime.calendar Platform-independent calendar properties. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) io.islandtime.clock The default clock implementation, providing access to the system clock at millisecond precision and a FixedClock for testing purposes. (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) io.islandtime.darwin Various extensions specifically for the Apple platform. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) io.islandtime.format Classes involved in the formatting of dates and times. (jvm) io.islandtime.jvm Various extensions specifically for the JVM. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) io.islandtime.locale Platform-independent locale. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) io.islandtime.measures Classes related to the measurement of time, including Duration , Period , and more specific units, such as IntHours or LongYears . (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) io.islandtime.operators A set of convenience operators for various date-time primitives, enabling things like date.next(TUESDAY) , date.startOfWeek , or dateTime.truncatedTo(HOURS) . (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) io.islandtime.parser A set of predefined parsers that can be used to convert strings in various ISO formats into date-time primitives, along with a parsing engine that provides the ability to define custom parsers. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) io.islandtime.ranges Date ranges, time intervals, and the ability to iterate over them and perform various operations. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) io.islandtime.zone Time zone database support. Index All Types","title":"core"},{"location":"api/core/#packages","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) io.islandtime Date-time primitives and core concepts, such as Date , Time , Instant , and ZonedDateTime . (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) io.islandtime.base Experimental : Framework-level interfaces, allowing aspects of date and time to be abstracted. This area is unstable and likely to see significant change. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) io.islandtime.calendar Platform-independent calendar properties. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) io.islandtime.clock The default clock implementation, providing access to the system clock at millisecond precision and a FixedClock for testing purposes. (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) io.islandtime.darwin Various extensions specifically for the Apple platform. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) io.islandtime.format Classes involved in the formatting of dates and times. (jvm) io.islandtime.jvm Various extensions specifically for the JVM. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) io.islandtime.locale Platform-independent locale. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) io.islandtime.measures Classes related to the measurement of time, including Duration , Period , and more specific units, such as IntHours or LongYears . (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) io.islandtime.operators A set of convenience operators for various date-time primitives, enabling things like date.next(TUESDAY) , date.startOfWeek , or dateTime.truncatedTo(HOURS) . (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) io.islandtime.parser A set of predefined parsers that can be used to convert strings in various ISO formats into date-time primitives, along with a parsing engine that provides the ability to define custom parsers. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) io.islandtime.ranges Date ranges, time intervals, and the ability to iterate over them and perform various operations. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) io.islandtime.zone Time zone database support.","title":"Packages"},{"location":"api/core/#index","text":"All Types","title":"Index"},{"location":"api/core/alltypes/","text":"The core set of date-time classes, supporting the ISO calendar system. All Types Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) io.islandtime.clock.Clock A time source. |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) io.islandtime.Date A date in an arbitrary region. |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) io.islandtime.ranges.DateDayProgression |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) io.islandtime.ranges.DateIterator |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) io.islandtime.ranges.DateMonthProgression |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) io.islandtime.ranges.DateRange An inclusive range of dates. |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) io.islandtime.DateTime A date and time of day in an arbitrary region. |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) io.islandtime.DateTimeException |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) io.islandtime.base.DateTimeField A field describing a property of a date, time, or measurement of time. |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) io.islandtime.ranges.DateTimeInterval An interval between two arbitrary date-times. |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) io.islandtime.parser.DateTimeParseException |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) io.islandtime.parser.DateTimeParser A parser that converts text into a collection of date-time fields that are understood throughout Island Time. |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) io.islandtime.parser.DateTimeParserBuilder |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) io.islandtime.parser.DateTimeParserDsl |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) io.islandtime.parser.DateTimeParseResult The result of a parsing operation. |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) io.islandtime.parser.DateTimeParsers A set of predefined parsers. |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) io.islandtime.parser.DateTimeParserSettings Settings that control the parsing behavior. |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) io.islandtime.format.DateTimeTextProvider An abstraction that allows localized date-time text to be supplied from different data sources. |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) io.islandtime.DayOfWeek A day of the week. |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) io.islandtime.parser.DecimalNumberParserBuilder |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) io.islandtime.measures.Duration A duration of time at nanosecond precision. |(jvm) (extensions in package io.islandtime.measures) kotlin.time.Duration |(jvm) (extensions in package io.islandtime.jvm) java.time.Duration |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) io.islandtime.clock.FixedClock A clock with fixed time, suitable for testing. |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) io.islandtime.parser.GroupedDateTimeParser |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) io.islandtime.parser.GroupedDateTimeParserBuilder |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) io.islandtime.Instant An instant in time with nanosecond precision. |(jvm) (extensions in package io.islandtime.jvm) java.time.Instant |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) io.islandtime.ranges.InstantInterval A half-open interval between two instants. |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) (extensions in package io.islandtime.measures) kotlin.Int |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) (extensions in package io.islandtime) kotlin.Int |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) io.islandtime.measures.IntCenturies A number of centuries. |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) io.islandtime.measures.IntDays A number of days. |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) io.islandtime.measures.IntDecades A number of decades. |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) io.islandtime.measures.IntHours A number of hours. |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) io.islandtime.measures.IntMicroseconds A number of microseconds. |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) io.islandtime.measures.IntMilliseconds A number of milliseconds. |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) io.islandtime.measures.IntMinutes A number of minutes. |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) io.islandtime.measures.IntMonths A number of months. |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) io.islandtime.measures.IntNanoseconds A number of nanoseconds. |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) io.islandtime.measures.IntSeconds A number of seconds. |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) io.islandtime.measures.IntWeeks A number of weeks. |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) io.islandtime.measures.IntYears A number of years. |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) io.islandtime.IslandTime Global configuration for Island Time. |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) io.islandtime.parser.LiteralParserBuilder |(jvm) (extensions in package io.islandtime.jvm) java.time.LocalDate |(jvm) (extensions in package io.islandtime.jvm) java.time.LocalDateTime |(jvm) (extensions in package io.islandtime.format) java.util.Locale |(jvm) (extensions in package io.islandtime.jvm) java.time.LocalTime |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) (extensions in package io.islandtime.measures) kotlin.Long |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) io.islandtime.measures.LongCenturies A number of centuries. |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) io.islandtime.measures.LongDays A number of days. |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) io.islandtime.measures.LongDecades A number of decades. |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) io.islandtime.measures.LongHours A number of hours. |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) io.islandtime.measures.LongMicroseconds A number of microseconds. |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) io.islandtime.measures.LongMilliseconds A number of milliseconds. |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) io.islandtime.measures.LongMinutes A number of minutes. |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) io.islandtime.measures.LongMonths A number of months. |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) io.islandtime.measures.LongNanoseconds A number of nanoseconds. |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) io.islandtime.measures.LongSeconds A number of seconds. |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) io.islandtime.measures.LongWeeks A number of weeks. |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) io.islandtime.measures.LongYears A number of years. |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) io.islandtime.Month A month of the year. |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) io.islandtime.parser.NumberParserBuilder |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) io.islandtime.format.NumberStyle Defines the set of characters that should be used when parsing or formatting numbers. |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) io.islandtime.OffsetDateTime A date and time of day with an offset from UTC. |(jvm) (extensions in package io.islandtime.jvm) java.time.OffsetDateTime |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) io.islandtime.ranges.OffsetDateTimeInterval A half-open interval between two offset date-times based on timeline order. |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) io.islandtime.OffsetTime A time of day with an offset from UTC. |(jvm) (extensions in package io.islandtime.jvm) java.time.OffsetTime |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) io.islandtime.format.ParsableTextList |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) io.islandtime.measures.Period A date-based period of time, such as \"2 years, 5 months, 16 days\". Unlike Duration , which uses exact increments, a Period works with conceptual days, months, and years, ignoring daylight savings and length differences. |(jvm) (extensions in package io.islandtime.jvm) java.time.Period |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) io.islandtime.format.PlatformDateTimeTextProvider The default provider of localized date-time text for the current platform. |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) io.islandtime.zone.PlatformTimeZoneRulesProvider The default time zone rules provider implementation for the current platform. |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) io.islandtime.format.PlatformTimeZoneTextProvider The default provider of localized time zone text for the current platform. |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) io.islandtime.parser.SignParserBuilder |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) io.islandtime.parser.SignStyle |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) (extensions in package io.islandtime.measures) kotlin.String |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) (extensions in package io.islandtime) kotlin.String |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) (extensions in package io.islandtime.ranges) kotlin.String |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) io.islandtime.parser.StringParseAction |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) io.islandtime.parser.StringParserBuilder |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) io.islandtime.clock.SystemClock A clock that provides the time from the current system. |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) io.islandtime.format.TextStyle A style of text. The meaning may vary depending on the context. Standalone styles should be used when displaying text by itself since some languages have different names in the context of a date and time. |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) io.islandtime.Time A time of day in an arbitrary region. |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) io.islandtime.ranges.TimeInterval A half-open time interval. |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) io.islandtime.base.TimePoint An object that can be placed exactly in time. |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) io.islandtime.ranges.TimePointInterval A half-open interval of time points. |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) io.islandtime.ranges.TimePointIterator |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) io.islandtime.ranges.TimePointNanosecondProgression |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) io.islandtime.ranges.TimePointProgressionBuilder A time point progression builder. |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) io.islandtime.ranges.TimePointSecondProgression |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) io.islandtime.measures.TimeUnit A unit of time measurement. |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) io.islandtime.TimeZone A time zone. |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) io.islandtime.zone.TimeZoneOffsetTransition A discontinuity in the local timeline, usually caused by daylight savings time changes. |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) io.islandtime.zone.TimeZoneRules The set of rules for a particular time zone. |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) io.islandtime.zone.TimeZoneRulesException |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) io.islandtime.zone.TimeZoneRulesProvider An abstraction that allows time zone rules to be supplied from any data source. |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) io.islandtime.format.TimeZoneTextProvider An abstraction that allows localized time zone names to be supplied from different data sources. |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) io.islandtime.format.TimeZoneTextStyle A time zone text style. |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) io.islandtime.UtcOffset The time shift between a local time and UTC. |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) io.islandtime.calendar.WeekSettings Week-related calendar settings. |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) io.islandtime.parser.WholeNumberParserBuilder |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) io.islandtime.Year |(jvm) (extensions in package io.islandtime.jvm) java.time.Year |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) io.islandtime.YearMonth A month in a particular year. |(jvm) (extensions in package io.islandtime.jvm) java.time.YearMonth |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) io.islandtime.ZonedDateTime A date and time of day in a particular region. |(jvm) (extensions in package io.islandtime.jvm) java.time.ZonedDateTime |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) io.islandtime.ranges.ZonedDateTimeInterval A half-open interval of zoned date-times based on timeline order. |(jvm) (extensions in package io.islandtime.jvm) java.time.ZoneId |(jvm) (extensions in package io.islandtime.jvm) java.time.ZoneOffset","title":"Index"},{"location":"api/core/alltypes/#all-types","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86)","title":"All Types"},{"location":"api/core/alltypes/#ioislandtimeclockclock","text":"A time source. |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86)","title":"io.islandtime.clock.Clock"},{"location":"api/core/alltypes/#ioislandtimedate","text":"A date in an arbitrary region. |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86)","title":"io.islandtime.Date"},{"location":"api/core/alltypes/#ioislandtimerangesdatedayprogression","text":"|(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86)","title":"io.islandtime.ranges.DateDayProgression"},{"location":"api/core/alltypes/#ioislandtimerangesdateiterator","text":"|(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86)","title":"io.islandtime.ranges.DateIterator"},{"location":"api/core/alltypes/#ioislandtimerangesdatemonthprogression","text":"|(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86)","title":"io.islandtime.ranges.DateMonthProgression"},{"location":"api/core/alltypes/#ioislandtimerangesdaterange","text":"An inclusive range of dates. |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86)","title":"io.islandtime.ranges.DateRange"},{"location":"api/core/alltypes/#ioislandtimedatetime","text":"A date and time of day in an arbitrary region. |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86)","title":"io.islandtime.DateTime"},{"location":"api/core/alltypes/#ioislandtimedatetimeexception","text":"|(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86)","title":"io.islandtime.DateTimeException"},{"location":"api/core/alltypes/#ioislandtimebasedatetimefield","text":"A field describing a property of a date, time, or measurement of time. |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86)","title":"io.islandtime.base.DateTimeField"},{"location":"api/core/alltypes/#ioislandtimerangesdatetimeinterval","text":"An interval between two arbitrary date-times. |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86)","title":"io.islandtime.ranges.DateTimeInterval"},{"location":"api/core/alltypes/#ioislandtimeparserdatetimeparseexception","text":"|(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86)","title":"io.islandtime.parser.DateTimeParseException"},{"location":"api/core/alltypes/#ioislandtimeparserdatetimeparser","text":"A parser that converts text into a collection of date-time fields that are understood throughout Island Time. |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86)","title":"io.islandtime.parser.DateTimeParser"},{"location":"api/core/alltypes/#ioislandtimeparserdatetimeparserbuilder","text":"|(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86)","title":"io.islandtime.parser.DateTimeParserBuilder"},{"location":"api/core/alltypes/#ioislandtimeparserdatetimeparserdsl","text":"|(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86)","title":"io.islandtime.parser.DateTimeParserDsl"},{"location":"api/core/alltypes/#ioislandtimeparserdatetimeparseresult","text":"The result of a parsing operation. |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86)","title":"io.islandtime.parser.DateTimeParseResult"},{"location":"api/core/alltypes/#ioislandtimeparserdatetimeparsers","text":"A set of predefined parsers. |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86)","title":"io.islandtime.parser.DateTimeParsers"},{"location":"api/core/alltypes/#ioislandtimeparserdatetimeparsersettings","text":"Settings that control the parsing behavior. |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86)","title":"io.islandtime.parser.DateTimeParserSettings"},{"location":"api/core/alltypes/#ioislandtimeformatdatetimetextprovider","text":"An abstraction that allows localized date-time text to be supplied from different data sources. |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86)","title":"io.islandtime.format.DateTimeTextProvider"},{"location":"api/core/alltypes/#ioislandtimedayofweek","text":"A day of the week. |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86)","title":"io.islandtime.DayOfWeek"},{"location":"api/core/alltypes/#ioislandtimeparserdecimalnumberparserbuilder","text":"|(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86)","title":"io.islandtime.parser.DecimalNumberParserBuilder"},{"location":"api/core/alltypes/#ioislandtimemeasuresduration","text":"A duration of time at nanosecond precision. |(jvm) (extensions in package io.islandtime.measures)","title":"io.islandtime.measures.Duration"},{"location":"api/core/alltypes/#kotlintimeduration","text":"|(jvm) (extensions in package io.islandtime.jvm)","title":"kotlin.time.Duration"},{"location":"api/core/alltypes/#javatimeduration","text":"|(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86)","title":"java.time.Duration"},{"location":"api/core/alltypes/#ioislandtimeclockfixedclock","text":"A clock with fixed time, suitable for testing. |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86)","title":"io.islandtime.clock.FixedClock"},{"location":"api/core/alltypes/#ioislandtimeparsergroupeddatetimeparser","text":"|(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86)","title":"io.islandtime.parser.GroupedDateTimeParser"},{"location":"api/core/alltypes/#ioislandtimeparsergroupeddatetimeparserbuilder","text":"|(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86)","title":"io.islandtime.parser.GroupedDateTimeParserBuilder"},{"location":"api/core/alltypes/#ioislandtimeinstant","text":"An instant in time with nanosecond precision. |(jvm) (extensions in package io.islandtime.jvm)","title":"io.islandtime.Instant"},{"location":"api/core/alltypes/#javatimeinstant","text":"|(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86)","title":"java.time.Instant"},{"location":"api/core/alltypes/#ioislandtimerangesinstantinterval","text":"A half-open interval between two instants. |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) (extensions in package io.islandtime.measures)","title":"io.islandtime.ranges.InstantInterval"},{"location":"api/core/alltypes/#kotlinint","text":"|(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) (extensions in package io.islandtime)","title":"kotlin.Int"},{"location":"api/core/alltypes/#kotlinint_1","text":"|(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86)","title":"kotlin.Int"},{"location":"api/core/alltypes/#ioislandtimemeasuresintcenturies","text":"A number of centuries. |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86)","title":"io.islandtime.measures.IntCenturies"},{"location":"api/core/alltypes/#ioislandtimemeasuresintdays","text":"A number of days. |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86)","title":"io.islandtime.measures.IntDays"},{"location":"api/core/alltypes/#ioislandtimemeasuresintdecades","text":"A number of decades. |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86)","title":"io.islandtime.measures.IntDecades"},{"location":"api/core/alltypes/#ioislandtimemeasuresinthours","text":"A number of hours. |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86)","title":"io.islandtime.measures.IntHours"},{"location":"api/core/alltypes/#ioislandtimemeasuresintmicroseconds","text":"A number of microseconds. |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86)","title":"io.islandtime.measures.IntMicroseconds"},{"location":"api/core/alltypes/#ioislandtimemeasuresintmilliseconds","text":"A number of milliseconds. |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86)","title":"io.islandtime.measures.IntMilliseconds"},{"location":"api/core/alltypes/#ioislandtimemeasuresintminutes","text":"A number of minutes. |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86)","title":"io.islandtime.measures.IntMinutes"},{"location":"api/core/alltypes/#ioislandtimemeasuresintmonths","text":"A number of months. |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86)","title":"io.islandtime.measures.IntMonths"},{"location":"api/core/alltypes/#ioislandtimemeasuresintnanoseconds","text":"A number of nanoseconds. |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86)","title":"io.islandtime.measures.IntNanoseconds"},{"location":"api/core/alltypes/#ioislandtimemeasuresintseconds","text":"A number of seconds. |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86)","title":"io.islandtime.measures.IntSeconds"},{"location":"api/core/alltypes/#ioislandtimemeasuresintweeks","text":"A number of weeks. |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86)","title":"io.islandtime.measures.IntWeeks"},{"location":"api/core/alltypes/#ioislandtimemeasuresintyears","text":"A number of years. |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86)","title":"io.islandtime.measures.IntYears"},{"location":"api/core/alltypes/#ioislandtimeislandtime","text":"Global configuration for Island Time. |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86)","title":"io.islandtime.IslandTime"},{"location":"api/core/alltypes/#ioislandtimeparserliteralparserbuilder","text":"|(jvm) (extensions in package io.islandtime.jvm)","title":"io.islandtime.parser.LiteralParserBuilder"},{"location":"api/core/alltypes/#javatimelocaldate","text":"|(jvm) (extensions in package io.islandtime.jvm)","title":"java.time.LocalDate"},{"location":"api/core/alltypes/#javatimelocaldatetime","text":"|(jvm) (extensions in package io.islandtime.format)","title":"java.time.LocalDateTime"},{"location":"api/core/alltypes/#javautillocale","text":"|(jvm) (extensions in package io.islandtime.jvm)","title":"java.util.Locale"},{"location":"api/core/alltypes/#javatimelocaltime","text":"|(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) (extensions in package io.islandtime.measures)","title":"java.time.LocalTime"},{"location":"api/core/alltypes/#kotlinlong","text":"|(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86)","title":"kotlin.Long"},{"location":"api/core/alltypes/#ioislandtimemeasureslongcenturies","text":"A number of centuries. |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86)","title":"io.islandtime.measures.LongCenturies"},{"location":"api/core/alltypes/#ioislandtimemeasureslongdays","text":"A number of days. |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86)","title":"io.islandtime.measures.LongDays"},{"location":"api/core/alltypes/#ioislandtimemeasureslongdecades","text":"A number of decades. |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86)","title":"io.islandtime.measures.LongDecades"},{"location":"api/core/alltypes/#ioislandtimemeasureslonghours","text":"A number of hours. |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86)","title":"io.islandtime.measures.LongHours"},{"location":"api/core/alltypes/#ioislandtimemeasureslongmicroseconds","text":"A number of microseconds. |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86)","title":"io.islandtime.measures.LongMicroseconds"},{"location":"api/core/alltypes/#ioislandtimemeasureslongmilliseconds","text":"A number of milliseconds. |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86)","title":"io.islandtime.measures.LongMilliseconds"},{"location":"api/core/alltypes/#ioislandtimemeasureslongminutes","text":"A number of minutes. |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86)","title":"io.islandtime.measures.LongMinutes"},{"location":"api/core/alltypes/#ioislandtimemeasureslongmonths","text":"A number of months. |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86)","title":"io.islandtime.measures.LongMonths"},{"location":"api/core/alltypes/#ioislandtimemeasureslongnanoseconds","text":"A number of nanoseconds. |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86)","title":"io.islandtime.measures.LongNanoseconds"},{"location":"api/core/alltypes/#ioislandtimemeasureslongseconds","text":"A number of seconds. |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86)","title":"io.islandtime.measures.LongSeconds"},{"location":"api/core/alltypes/#ioislandtimemeasureslongweeks","text":"A number of weeks. |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86)","title":"io.islandtime.measures.LongWeeks"},{"location":"api/core/alltypes/#ioislandtimemeasureslongyears","text":"A number of years. |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86)","title":"io.islandtime.measures.LongYears"},{"location":"api/core/alltypes/#ioislandtimemonth","text":"A month of the year. |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86)","title":"io.islandtime.Month"},{"location":"api/core/alltypes/#ioislandtimeparsernumberparserbuilder","text":"|(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86)","title":"io.islandtime.parser.NumberParserBuilder"},{"location":"api/core/alltypes/#ioislandtimeformatnumberstyle","text":"Defines the set of characters that should be used when parsing or formatting numbers. |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86)","title":"io.islandtime.format.NumberStyle"},{"location":"api/core/alltypes/#ioislandtimeoffsetdatetime","text":"A date and time of day with an offset from UTC. |(jvm) (extensions in package io.islandtime.jvm)","title":"io.islandtime.OffsetDateTime"},{"location":"api/core/alltypes/#javatimeoffsetdatetime","text":"|(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86)","title":"java.time.OffsetDateTime"},{"location":"api/core/alltypes/#ioislandtimerangesoffsetdatetimeinterval","text":"A half-open interval between two offset date-times based on timeline order. |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86)","title":"io.islandtime.ranges.OffsetDateTimeInterval"},{"location":"api/core/alltypes/#ioislandtimeoffsettime","text":"A time of day with an offset from UTC. |(jvm) (extensions in package io.islandtime.jvm)","title":"io.islandtime.OffsetTime"},{"location":"api/core/alltypes/#javatimeoffsettime","text":"|(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86)","title":"java.time.OffsetTime"},{"location":"api/core/alltypes/#ioislandtimeformatparsabletextlist","text":"|(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86)","title":"io.islandtime.format.ParsableTextList"},{"location":"api/core/alltypes/#ioislandtimemeasuresperiod","text":"A date-based period of time, such as \"2 years, 5 months, 16 days\". Unlike Duration , which uses exact increments, a Period works with conceptual days, months, and years, ignoring daylight savings and length differences. |(jvm) (extensions in package io.islandtime.jvm)","title":"io.islandtime.measures.Period"},{"location":"api/core/alltypes/#javatimeperiod","text":"|(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86)","title":"java.time.Period"},{"location":"api/core/alltypes/#ioislandtimeformatplatformdatetimetextprovider","text":"The default provider of localized date-time text for the current platform. |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86)","title":"io.islandtime.format.PlatformDateTimeTextProvider"},{"location":"api/core/alltypes/#ioislandtimezoneplatformtimezonerulesprovider","text":"The default time zone rules provider implementation for the current platform. |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86)","title":"io.islandtime.zone.PlatformTimeZoneRulesProvider"},{"location":"api/core/alltypes/#ioislandtimeformatplatformtimezonetextprovider","text":"The default provider of localized time zone text for the current platform. |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86)","title":"io.islandtime.format.PlatformTimeZoneTextProvider"},{"location":"api/core/alltypes/#ioislandtimeparsersignparserbuilder","text":"|(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86)","title":"io.islandtime.parser.SignParserBuilder"},{"location":"api/core/alltypes/#ioislandtimeparsersignstyle","text":"|(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) (extensions in package io.islandtime.measures)","title":"io.islandtime.parser.SignStyle"},{"location":"api/core/alltypes/#kotlinstring","text":"|(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) (extensions in package io.islandtime)","title":"kotlin.String"},{"location":"api/core/alltypes/#kotlinstring_1","text":"|(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) (extensions in package io.islandtime.ranges)","title":"kotlin.String"},{"location":"api/core/alltypes/#kotlinstring_2","text":"|(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86)","title":"kotlin.String"},{"location":"api/core/alltypes/#ioislandtimeparserstringparseaction","text":"|(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86)","title":"io.islandtime.parser.StringParseAction"},{"location":"api/core/alltypes/#ioislandtimeparserstringparserbuilder","text":"|(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86)","title":"io.islandtime.parser.StringParserBuilder"},{"location":"api/core/alltypes/#ioislandtimeclocksystemclock","text":"A clock that provides the time from the current system. |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86)","title":"io.islandtime.clock.SystemClock"},{"location":"api/core/alltypes/#ioislandtimeformattextstyle","text":"A style of text. The meaning may vary depending on the context. Standalone styles should be used when displaying text by itself since some languages have different names in the context of a date and time. |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86)","title":"io.islandtime.format.TextStyle"},{"location":"api/core/alltypes/#ioislandtimetime","text":"A time of day in an arbitrary region. |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86)","title":"io.islandtime.Time"},{"location":"api/core/alltypes/#ioislandtimerangestimeinterval","text":"A half-open time interval. |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86)","title":"io.islandtime.ranges.TimeInterval"},{"location":"api/core/alltypes/#ioislandtimebasetimepoint","text":"An object that can be placed exactly in time. |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86)","title":"io.islandtime.base.TimePoint"},{"location":"api/core/alltypes/#ioislandtimerangestimepointinterval","text":"A half-open interval of time points. |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86)","title":"io.islandtime.ranges.TimePointInterval"},{"location":"api/core/alltypes/#ioislandtimerangestimepointiterator","text":"|(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86)","title":"io.islandtime.ranges.TimePointIterator"},{"location":"api/core/alltypes/#ioislandtimerangestimepointnanosecondprogression","text":"|(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86)","title":"io.islandtime.ranges.TimePointNanosecondProgression"},{"location":"api/core/alltypes/#ioislandtimerangestimepointprogressionbuilder","text":"A time point progression builder. |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86)","title":"io.islandtime.ranges.TimePointProgressionBuilder"},{"location":"api/core/alltypes/#ioislandtimerangestimepointsecondprogression","text":"|(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86)","title":"io.islandtime.ranges.TimePointSecondProgression"},{"location":"api/core/alltypes/#ioislandtimemeasurestimeunit","text":"A unit of time measurement. |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86)","title":"io.islandtime.measures.TimeUnit"},{"location":"api/core/alltypes/#ioislandtimetimezone","text":"A time zone. |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86)","title":"io.islandtime.TimeZone"},{"location":"api/core/alltypes/#ioislandtimezonetimezoneoffsettransition","text":"A discontinuity in the local timeline, usually caused by daylight savings time changes. |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86)","title":"io.islandtime.zone.TimeZoneOffsetTransition"},{"location":"api/core/alltypes/#ioislandtimezonetimezonerules","text":"The set of rules for a particular time zone. |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86)","title":"io.islandtime.zone.TimeZoneRules"},{"location":"api/core/alltypes/#ioislandtimezonetimezonerulesexception","text":"|(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86)","title":"io.islandtime.zone.TimeZoneRulesException"},{"location":"api/core/alltypes/#ioislandtimezonetimezonerulesprovider","text":"An abstraction that allows time zone rules to be supplied from any data source. |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86)","title":"io.islandtime.zone.TimeZoneRulesProvider"},{"location":"api/core/alltypes/#ioislandtimeformattimezonetextprovider","text":"An abstraction that allows localized time zone names to be supplied from different data sources. |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86)","title":"io.islandtime.format.TimeZoneTextProvider"},{"location":"api/core/alltypes/#ioislandtimeformattimezonetextstyle","text":"A time zone text style. |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86)","title":"io.islandtime.format.TimeZoneTextStyle"},{"location":"api/core/alltypes/#ioislandtimeutcoffset","text":"The time shift between a local time and UTC. |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86)","title":"io.islandtime.UtcOffset"},{"location":"api/core/alltypes/#ioislandtimecalendarweeksettings","text":"Week-related calendar settings. |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86)","title":"io.islandtime.calendar.WeekSettings"},{"location":"api/core/alltypes/#ioislandtimeparserwholenumberparserbuilder","text":"|(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86)","title":"io.islandtime.parser.WholeNumberParserBuilder"},{"location":"api/core/alltypes/#ioislandtimeyear","text":"|(jvm) (extensions in package io.islandtime.jvm)","title":"io.islandtime.Year"},{"location":"api/core/alltypes/#javatimeyear","text":"|(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86)","title":"java.time.Year"},{"location":"api/core/alltypes/#ioislandtimeyearmonth","text":"A month in a particular year. |(jvm) (extensions in package io.islandtime.jvm)","title":"io.islandtime.YearMonth"},{"location":"api/core/alltypes/#javatimeyearmonth","text":"|(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86)","title":"java.time.YearMonth"},{"location":"api/core/alltypes/#ioislandtimezoneddatetime","text":"A date and time of day in a particular region. |(jvm) (extensions in package io.islandtime.jvm)","title":"io.islandtime.ZonedDateTime"},{"location":"api/core/alltypes/#javatimezoneddatetime","text":"|(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86)","title":"java.time.ZonedDateTime"},{"location":"api/core/alltypes/#ioislandtimerangeszoneddatetimeinterval","text":"A half-open interval of zoned date-times based on timeline order. |(jvm) (extensions in package io.islandtime.jvm)","title":"io.islandtime.ranges.ZonedDateTimeInterval"},{"location":"api/core/alltypes/#javatimezoneid","text":"|(jvm) (extensions in package io.islandtime.jvm)","title":"java.time.ZoneId"},{"location":"api/core/alltypes/#javatimezoneoffset","text":"","title":"java.time.ZoneOffset"},{"location":"api/core/io.islandtime/","text":"core / io.islandtime Package io.islandtime Date-time primitives and core concepts, such as Date , Time , Instant , and ZonedDateTime . Types Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) Date A date in an arbitrary region. class Date : Comparable < Date > (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) DateTime A date and time of day in an arbitrary region. class DateTime : Comparable < DateTime > DateTimeException (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) open class DateTimeException (jvm) open class DateTimeException : Exception (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) DayOfWeek A day of the week. enum class DayOfWeek (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) Instant An instant in time with nanosecond precision. class Instant : TimePoint < Instant >, Comparable < Instant > (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) IslandTime Global configuration for Island Time. object IslandTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) Month A month of the year. enum class Month (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) OffsetDateTime A date and time of day with an offset from UTC. class OffsetDateTime : TimePoint < OffsetDateTime > (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) OffsetTime A time of day with an offset from UTC. class OffsetTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) Time A time of day in an arbitrary region. class Time : Comparable < Time > (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) TimeZone A time zone. sealed class TimeZone : Comparable < TimeZone > (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) UtcOffset The time shift between a local time and UTC. class UtcOffset : Comparable < UtcOffset > (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) Year class Year : Comparable < Year > (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) YearMonth A month in a particular year. class YearMonth : Comparable < YearMonth > (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) ZonedDateTime A date and time of day in a particular region. class ZonedDateTime : TimePoint < ZonedDateTime > Extensions for External Classes Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) kotlin.Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) kotlin.String Properties Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) endOfDay The DateTime at the end of the day. val Date .endOfDay: DateTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) startOfDay The DateTime at the start of the day. val Date .startOfDay: DateTime Functions Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) asOffsetDateTime fun ZonedDateTime .~~asOffsetDateTime~~(): OffsetDateTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) asTimeZone Convert a UTC offset into a TimeZone with a fixed offset. fun UtcOffset .asTimeZone(): TimeZone (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) asUtcOffset Convert a duration of hours into a UTC time offset of the same length. fun IntHours .asUtcOffset(): UtcOffset Convert a duration of minutes into a UTC time offset of the same length. fun IntMinutes .asUtcOffset(): UtcOffset Convert a duration of seconds into a UTC time offset of the same length. fun IntSeconds .asUtcOffset(): UtcOffset (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) asZonedDateTime Convert to a ZonedDateTime with a fixed offset time zone. fun OffsetDateTime .asZonedDateTime(): ZonedDateTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) at Combine a Date with a Time to create a DateTime . infix fun Date .at(time: Time ): DateTime Combine a local date and time with a UTC offset to create an OffsetDateTime . infix fun DateTime .at(offset: UtcOffset ): OffsetDateTime Combine a local date with a time and UTC offset to create an OffsetDateTime . infix fun Date .at(offsetTime: OffsetTime ): OffsetDateTime Combine an instant with a UTC offset to create an OffsetDateTime . infix fun Instant .at(offset: UtcOffset ): OffsetDateTime Combine a local time with a UTC offset to create an OffsetTime . infix fun Time .at(offset: UtcOffset ): OffsetTime Combine a year and month to create a YearMonth . infix fun Year .at(month: Month ): YearMonth Combine an instant with a time zone to create a ZonedDateTime . infix fun Instant .at(zone: TimeZone ): ZonedDateTime Combine a local date and time with a time zone to create a ZonedDateTime . infix fun DateTime .at(zone: TimeZone ): ZonedDateTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) atDay Combine a YearMonth with a day of the month to create a Date . fun YearMonth .atDay(day: Int ): Date (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) atMonth Combine a year and month number to create a YearMonth . fun Year .atMonth(number: Int ): YearMonth (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) atTime Combine a Date with a time to create a DateTime . fun Date .atTime(hour: Int , minute: Int , second: Int = 0, nanosecond: Int = 0): DateTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) Date Create a Date from a year and day of year fun Date(year: Int , dayOfYear: Int ): Date (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) dateTimeAt The ZonedDateTime with the same date and time at zone . The offset will be preserved if possible, but may require adjustment. fun OffsetDateTime .dateTimeAt(zone: TimeZone ): ZonedDateTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) endOfDayAt The ZonedDateTime at the last representable instant of this date in a particular time zone, taking into account any daylight savings transitions. fun Date .endOfDayAt(zone: TimeZone ): ZonedDateTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) Instant Create the Instant represented by a number of seconds relative to the Unix epoch of 1970-01-01T00:00Z. fun Instant(secondsSinceUnixEpoch: LongSeconds ): Instant Create the Instant represented by a number of seconds and additional nanoseconds relative to the Unix epoch of 1970-01-01T00:00Z. fun Instant(secondsSinceUnixEpoch: LongSeconds , nanosecondAdjustment: IntNanoseconds ): Instant fun Instant(secondsSinceUnixEpoch: LongSeconds , nanosecondAdjustment: LongNanoseconds ): Instant Create the Instant represented by a number of milliseconds relative to the Unix epoch of 1970-01-01T00:00Z. fun Instant(millisecondsSinceUnixEpoch: LongMilliseconds ): Instant (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) instantAt The ZonedDateTime representing the same instant in time at zone . The local date, time, and offset may differ. fun OffsetDateTime .instantAt(zone: TimeZone ): ZonedDateTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) sameInstantAt fun OffsetDateTime .~~sameInstantAt~~(zone: TimeZone ): ZonedDateTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) similarLocalTimeAt fun OffsetDateTime .~~similarLocalTimeAt~~(zone: TimeZone ): ZonedDateTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) startOfDayAt The ZonedDateTime at the start of this date in a particular time zone, taking into account any daylight savings transitions. fun Date .startOfDayAt(zone: TimeZone ): ZonedDateTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) TimeZone Create a TimeZone from an identifier. fun TimeZone(id: String ): TimeZone (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toDateAt Convert an Instant into the Date represented by it at a particular UTC offset. fun Instant .toDateAt(offset: UtcOffset ): Date Convert an Instant into the Date represented by it in a particular time zone. fun Instant .toDateAt(zone: TimeZone ): Date (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toDateTimeAt Convert to a DateTime at a particular offset from UTC. fun Instant .toDateTimeAt(offset: UtcOffset ): DateTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) UtcOffset Create a UTC offset of hours, minutes, and seconds. Each component must be within its valid range and without any mixed positive and negative values. fun UtcOffset(hours: IntHours , minutes: IntMinutes = 0.minutes, seconds: IntSeconds = 0.seconds): UtcOffset (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) ZonedDateTime Create a ZonedDateTime from a local date and time. fun ZonedDateTime(year: Int , month: Month , day: Int , hour: Int , minute: Int , second: Int , nanosecond: Int , zone: TimeZone ): ZonedDateTime fun ZonedDateTime(year: Int , monthNumber: Int , day: Int , hour: Int , minute: Int , second: Int , nanosecond: Int , zone: TimeZone ): ZonedDateTime fun ZonedDateTime(year: Int , dayOfYear: Int , hour: Int , minute: Int , second: Int , nanosecond: Int , zone: TimeZone ): ZonedDateTime fun ZonedDateTime(date: Date , time: Time , zone: TimeZone ): ZonedDateTime fun ZonedDateTime(dateTime: DateTime , zone: TimeZone ): ZonedDateTime","title":"Index"},{"location":"api/core/io.islandtime/#package-ioislandtime","text":"Date-time primitives and core concepts, such as Date , Time , Instant , and ZonedDateTime .","title":"Package io.islandtime"},{"location":"api/core/io.islandtime/#types","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) Date A date in an arbitrary region. class Date : Comparable < Date > (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) DateTime A date and time of day in an arbitrary region. class DateTime : Comparable < DateTime > DateTimeException (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) open class DateTimeException (jvm) open class DateTimeException : Exception (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) DayOfWeek A day of the week. enum class DayOfWeek (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) Instant An instant in time with nanosecond precision. class Instant : TimePoint < Instant >, Comparable < Instant > (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) IslandTime Global configuration for Island Time. object IslandTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) Month A month of the year. enum class Month (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) OffsetDateTime A date and time of day with an offset from UTC. class OffsetDateTime : TimePoint < OffsetDateTime > (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) OffsetTime A time of day with an offset from UTC. class OffsetTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) Time A time of day in an arbitrary region. class Time : Comparable < Time > (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) TimeZone A time zone. sealed class TimeZone : Comparable < TimeZone > (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) UtcOffset The time shift between a local time and UTC. class UtcOffset : Comparable < UtcOffset > (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) Year class Year : Comparable < Year > (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) YearMonth A month in a particular year. class YearMonth : Comparable < YearMonth > (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) ZonedDateTime A date and time of day in a particular region. class ZonedDateTime : TimePoint < ZonedDateTime >","title":"Types"},{"location":"api/core/io.islandtime/#extensions-for-external-classes","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) kotlin.Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) kotlin.String","title":"Extensions for External Classes"},{"location":"api/core/io.islandtime/#properties","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) endOfDay The DateTime at the end of the day. val Date .endOfDay: DateTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) startOfDay The DateTime at the start of the day. val Date .startOfDay: DateTime","title":"Properties"},{"location":"api/core/io.islandtime/#functions","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) asOffsetDateTime fun ZonedDateTime .~~asOffsetDateTime~~(): OffsetDateTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) asTimeZone Convert a UTC offset into a TimeZone with a fixed offset. fun UtcOffset .asTimeZone(): TimeZone (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) asUtcOffset Convert a duration of hours into a UTC time offset of the same length. fun IntHours .asUtcOffset(): UtcOffset Convert a duration of minutes into a UTC time offset of the same length. fun IntMinutes .asUtcOffset(): UtcOffset Convert a duration of seconds into a UTC time offset of the same length. fun IntSeconds .asUtcOffset(): UtcOffset (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) asZonedDateTime Convert to a ZonedDateTime with a fixed offset time zone. fun OffsetDateTime .asZonedDateTime(): ZonedDateTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) at Combine a Date with a Time to create a DateTime . infix fun Date .at(time: Time ): DateTime Combine a local date and time with a UTC offset to create an OffsetDateTime . infix fun DateTime .at(offset: UtcOffset ): OffsetDateTime Combine a local date with a time and UTC offset to create an OffsetDateTime . infix fun Date .at(offsetTime: OffsetTime ): OffsetDateTime Combine an instant with a UTC offset to create an OffsetDateTime . infix fun Instant .at(offset: UtcOffset ): OffsetDateTime Combine a local time with a UTC offset to create an OffsetTime . infix fun Time .at(offset: UtcOffset ): OffsetTime Combine a year and month to create a YearMonth . infix fun Year .at(month: Month ): YearMonth Combine an instant with a time zone to create a ZonedDateTime . infix fun Instant .at(zone: TimeZone ): ZonedDateTime Combine a local date and time with a time zone to create a ZonedDateTime . infix fun DateTime .at(zone: TimeZone ): ZonedDateTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) atDay Combine a YearMonth with a day of the month to create a Date . fun YearMonth .atDay(day: Int ): Date (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) atMonth Combine a year and month number to create a YearMonth . fun Year .atMonth(number: Int ): YearMonth (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) atTime Combine a Date with a time to create a DateTime . fun Date .atTime(hour: Int , minute: Int , second: Int = 0, nanosecond: Int = 0): DateTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) Date Create a Date from a year and day of year fun Date(year: Int , dayOfYear: Int ): Date (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) dateTimeAt The ZonedDateTime with the same date and time at zone . The offset will be preserved if possible, but may require adjustment. fun OffsetDateTime .dateTimeAt(zone: TimeZone ): ZonedDateTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) endOfDayAt The ZonedDateTime at the last representable instant of this date in a particular time zone, taking into account any daylight savings transitions. fun Date .endOfDayAt(zone: TimeZone ): ZonedDateTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) Instant Create the Instant represented by a number of seconds relative to the Unix epoch of 1970-01-01T00:00Z. fun Instant(secondsSinceUnixEpoch: LongSeconds ): Instant Create the Instant represented by a number of seconds and additional nanoseconds relative to the Unix epoch of 1970-01-01T00:00Z. fun Instant(secondsSinceUnixEpoch: LongSeconds , nanosecondAdjustment: IntNanoseconds ): Instant fun Instant(secondsSinceUnixEpoch: LongSeconds , nanosecondAdjustment: LongNanoseconds ): Instant Create the Instant represented by a number of milliseconds relative to the Unix epoch of 1970-01-01T00:00Z. fun Instant(millisecondsSinceUnixEpoch: LongMilliseconds ): Instant (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) instantAt The ZonedDateTime representing the same instant in time at zone . The local date, time, and offset may differ. fun OffsetDateTime .instantAt(zone: TimeZone ): ZonedDateTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) sameInstantAt fun OffsetDateTime .~~sameInstantAt~~(zone: TimeZone ): ZonedDateTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) similarLocalTimeAt fun OffsetDateTime .~~similarLocalTimeAt~~(zone: TimeZone ): ZonedDateTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) startOfDayAt The ZonedDateTime at the start of this date in a particular time zone, taking into account any daylight savings transitions. fun Date .startOfDayAt(zone: TimeZone ): ZonedDateTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) TimeZone Create a TimeZone from an identifier. fun TimeZone(id: String ): TimeZone (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toDateAt Convert an Instant into the Date represented by it at a particular UTC offset. fun Instant .toDateAt(offset: UtcOffset ): Date Convert an Instant into the Date represented by it in a particular time zone. fun Instant .toDateAt(zone: TimeZone ): Date (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toDateTimeAt Convert to a DateTime at a particular offset from UTC. fun Instant .toDateTimeAt(offset: UtcOffset ): DateTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) UtcOffset Create a UTC offset of hours, minutes, and seconds. Each component must be within its valid range and without any mixed positive and negative values. fun UtcOffset(hours: IntHours , minutes: IntMinutes = 0.minutes, seconds: IntSeconds = 0.seconds): UtcOffset (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) ZonedDateTime Create a ZonedDateTime from a local date and time. fun ZonedDateTime(year: Int , month: Month , day: Int , hour: Int , minute: Int , second: Int , nanosecond: Int , zone: TimeZone ): ZonedDateTime fun ZonedDateTime(year: Int , monthNumber: Int , day: Int , hour: Int , minute: Int , second: Int , nanosecond: Int , zone: TimeZone ): ZonedDateTime fun ZonedDateTime(year: Int , dayOfYear: Int , hour: Int , minute: Int , second: Int , nanosecond: Int , zone: TimeZone ): ZonedDateTime fun ZonedDateTime(date: Date , time: Time , zone: TimeZone ): ZonedDateTime fun ZonedDateTime(dateTime: DateTime , zone: TimeZone ): ZonedDateTime","title":"Functions"},{"location":"api/core/io.islandtime/-date/","text":"core / io.islandtime / Date Date (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Date(year: Int , dayOfYear: Int ): Date Create a Date from a year and day of year Parameters year - the year dayOfYear - the day of the calendar year Exceptions DateTimeException - if the year or day of year are invalid","title":" date"},{"location":"api/core/io.islandtime/-date/#date","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Date(year: Int , dayOfYear: Int ): Date Create a Date from a year and day of year","title":"Date"},{"location":"api/core/io.islandtime/-date/#parameters","text":"year - the year dayOfYear - the day of the calendar year","title":"Parameters"},{"location":"api/core/io.islandtime/-date/#exceptions","text":"DateTimeException - if the year or day of year are invalid","title":"Exceptions"},{"location":"api/core/io.islandtime/-instant/","text":"core / io.islandtime / Instant Instant (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Instant(secondsSinceUnixEpoch: LongSeconds ): Instant Create the Instant represented by a number of seconds relative to the Unix epoch of 1970-01-01T00:00Z. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Instant(secondsSinceUnixEpoch: LongSeconds , nanosecondAdjustment: IntNanoseconds ): Instant fun Instant(secondsSinceUnixEpoch: LongSeconds , nanosecondAdjustment: LongNanoseconds ): Instant Create the Instant represented by a number of seconds and additional nanoseconds relative to the Unix epoch of 1970-01-01T00:00Z. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Instant(millisecondsSinceUnixEpoch: LongMilliseconds ): Instant Create the Instant represented by a number of milliseconds relative to the Unix epoch of 1970-01-01T00:00Z.","title":" instant"},{"location":"api/core/io.islandtime/-instant/#instant","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Instant(secondsSinceUnixEpoch: LongSeconds ): Instant Create the Instant represented by a number of seconds relative to the Unix epoch of 1970-01-01T00:00Z. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Instant(secondsSinceUnixEpoch: LongSeconds , nanosecondAdjustment: IntNanoseconds ): Instant fun Instant(secondsSinceUnixEpoch: LongSeconds , nanosecondAdjustment: LongNanoseconds ): Instant Create the Instant represented by a number of seconds and additional nanoseconds relative to the Unix epoch of 1970-01-01T00:00Z. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Instant(millisecondsSinceUnixEpoch: LongMilliseconds ): Instant Create the Instant represented by a number of milliseconds relative to the Unix epoch of 1970-01-01T00:00Z.","title":"Instant"},{"location":"api/core/io.islandtime/-time-zone/","text":"core / io.islandtime / TimeZone TimeZone (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun TimeZone(id: String ): TimeZone Create a TimeZone from an identifier.","title":" time zone"},{"location":"api/core/io.islandtime/-time-zone/#timezone","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun TimeZone(id: String ): TimeZone Create a TimeZone from an identifier.","title":"TimeZone"},{"location":"api/core/io.islandtime/-utc-offset/","text":"core / io.islandtime / UtcOffset UtcOffset (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun UtcOffset(hours: IntHours , minutes: IntMinutes = 0.minutes, seconds: IntSeconds = 0.seconds): UtcOffset Create a UTC offset of hours, minutes, and seconds. Each component must be within its valid range and without any mixed positive and negative values. Parameters hours - hours to offset by, within +/-18 minutes - minutes to offset by, within +/-59 seconds - seconds to offset by, within +/-59 Exceptions DateTimeException - if any of the individual components is outside the valid range Return a UtcOffset","title":" utc offset"},{"location":"api/core/io.islandtime/-utc-offset/#utcoffset","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun UtcOffset(hours: IntHours , minutes: IntMinutes = 0.minutes, seconds: IntSeconds = 0.seconds): UtcOffset Create a UTC offset of hours, minutes, and seconds. Each component must be within its valid range and without any mixed positive and negative values.","title":"UtcOffset"},{"location":"api/core/io.islandtime/-utc-offset/#parameters","text":"hours - hours to offset by, within +/-18 minutes - minutes to offset by, within +/-59 seconds - seconds to offset by, within +/-59","title":"Parameters"},{"location":"api/core/io.islandtime/-utc-offset/#exceptions","text":"DateTimeException - if any of the individual components is outside the valid range Return a UtcOffset","title":"Exceptions"},{"location":"api/core/io.islandtime/-zoned-date-time/","text":"core / io.islandtime / ZonedDateTime ZonedDateTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun ZonedDateTime(year: Int , month: Month , day: Int , hour: Int , minute: Int , second: Int , nanosecond: Int , zone: TimeZone ): ZonedDateTime fun ZonedDateTime(year: Int , monthNumber: Int , day: Int , hour: Int , minute: Int , second: Int , nanosecond: Int , zone: TimeZone ): ZonedDateTime fun ZonedDateTime(year: Int , dayOfYear: Int , hour: Int , minute: Int , second: Int , nanosecond: Int , zone: TimeZone ): ZonedDateTime fun ZonedDateTime(date: Date , time: Time , zone: TimeZone ): ZonedDateTime fun ZonedDateTime(dateTime: DateTime , zone: TimeZone ): ZonedDateTime Create a ZonedDateTime from a local date and time. Due to daylight savings time transitions, there a few complexities to be aware of. If the local time falls within a gap (meaning it doesn't exist), it will be adjusted forward by the length of the gap. If it falls within an overlap (meaning the local time exists twice), the earlier offset will be used.","title":" zoned date time"},{"location":"api/core/io.islandtime/-zoned-date-time/#zoneddatetime","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun ZonedDateTime(year: Int , month: Month , day: Int , hour: Int , minute: Int , second: Int , nanosecond: Int , zone: TimeZone ): ZonedDateTime fun ZonedDateTime(year: Int , monthNumber: Int , day: Int , hour: Int , minute: Int , second: Int , nanosecond: Int , zone: TimeZone ): ZonedDateTime fun ZonedDateTime(year: Int , dayOfYear: Int , hour: Int , minute: Int , second: Int , nanosecond: Int , zone: TimeZone ): ZonedDateTime fun ZonedDateTime(date: Date , time: Time , zone: TimeZone ): ZonedDateTime fun ZonedDateTime(dateTime: DateTime , zone: TimeZone ): ZonedDateTime Create a ZonedDateTime from a local date and time. Due to daylight savings time transitions, there a few complexities to be aware of. If the local time falls within a gap (meaning it doesn't exist), it will be adjusted forward by the length of the gap. If it falls within an overlap (meaning the local time exists twice), the earlier offset will be used.","title":"ZonedDateTime"},{"location":"api/core/io.islandtime/as-offset-date-time/","text":"core / io.islandtime / asOffsetDateTime asOffsetDateTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun ZonedDateTime .~~asOffsetDateTime~~(): OffsetDateTime Deprecated: Use the 'offsetDateTime' property on ZonedDateTime instead.","title":"As offset date time"},{"location":"api/core/io.islandtime/as-offset-date-time/#asoffsetdatetime","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun ZonedDateTime .~~asOffsetDateTime~~(): OffsetDateTime Deprecated: Use the 'offsetDateTime' property on ZonedDateTime instead.","title":"asOffsetDateTime"},{"location":"api/core/io.islandtime/as-time-zone/","text":"core / io.islandtime / asTimeZone asTimeZone (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun UtcOffset .asTimeZone(): TimeZone Convert a UTC offset into a TimeZone with a fixed offset.","title":"As time zone"},{"location":"api/core/io.islandtime/as-time-zone/#astimezone","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun UtcOffset .asTimeZone(): TimeZone Convert a UTC offset into a TimeZone with a fixed offset.","title":"asTimeZone"},{"location":"api/core/io.islandtime/as-utc-offset/","text":"core / io.islandtime / asUtcOffset asUtcOffset (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun IntHours .asUtcOffset(): UtcOffset Convert a duration of hours into a UTC time offset of the same length. Exceptions ArithmeticException - if overflow occurs(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun IntMinutes .asUtcOffset(): UtcOffset Convert a duration of minutes into a UTC time offset of the same length. Exceptions ArithmeticException - if overflow occurs(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun IntSeconds .asUtcOffset(): UtcOffset Convert a duration of seconds into a UTC time offset of the same length.","title":"As utc offset"},{"location":"api/core/io.islandtime/as-utc-offset/#asutcoffset","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun IntHours .asUtcOffset(): UtcOffset Convert a duration of hours into a UTC time offset of the same length.","title":"asUtcOffset"},{"location":"api/core/io.islandtime/as-utc-offset/#exceptions","text":"ArithmeticException - if overflow occurs(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun IntMinutes .asUtcOffset(): UtcOffset Convert a duration of minutes into a UTC time offset of the same length.","title":"Exceptions"},{"location":"api/core/io.islandtime/as-utc-offset/#exceptions_1","text":"ArithmeticException - if overflow occurs(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun IntSeconds .asUtcOffset(): UtcOffset Convert a duration of seconds into a UTC time offset of the same length.","title":"Exceptions"},{"location":"api/core/io.islandtime/as-zoned-date-time/","text":"core / io.islandtime / asZonedDateTime asZonedDateTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun OffsetDateTime .asZonedDateTime(): ZonedDateTime Convert to a ZonedDateTime with a fixed offset time zone. See Also instantAt dateTimeAt","title":"As zoned date time"},{"location":"api/core/io.islandtime/as-zoned-date-time/#aszoneddatetime","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun OffsetDateTime .asZonedDateTime(): ZonedDateTime Convert to a ZonedDateTime with a fixed offset time zone. See Also instantAt dateTimeAt","title":"asZonedDateTime"},{"location":"api/core/io.islandtime/at-day/","text":"core / io.islandtime / atDay atDay (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun YearMonth .atDay(day: Int ): Date Combine a YearMonth with a day of the month to create a Date . Parameters day - the day of the month","title":"At day"},{"location":"api/core/io.islandtime/at-day/#atday","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun YearMonth .atDay(day: Int ): Date Combine a YearMonth with a day of the month to create a Date .","title":"atDay"},{"location":"api/core/io.islandtime/at-day/#parameters","text":"day - the day of the month","title":"Parameters"},{"location":"api/core/io.islandtime/at-month/","text":"core / io.islandtime / atMonth atMonth (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Year .atMonth(number: Int ): YearMonth Combine a year and month number to create a YearMonth .","title":"At month"},{"location":"api/core/io.islandtime/at-month/#atmonth","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Year .atMonth(number: Int ): YearMonth Combine a year and month number to create a YearMonth .","title":"atMonth"},{"location":"api/core/io.islandtime/at-time/","text":"core / io.islandtime / atTime atTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Date .atTime(hour: Int , minute: Int , second: Int = 0, nanosecond: Int = 0): DateTime Combine a Date with a time to create a DateTime .","title":"At time"},{"location":"api/core/io.islandtime/at-time/#attime","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Date .atTime(hour: Int , minute: Int , second: Int = 0, nanosecond: Int = 0): DateTime Combine a Date with a time to create a DateTime .","title":"atTime"},{"location":"api/core/io.islandtime/at/","text":"core / io.islandtime / at at (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) infix fun Date .at(time: Time ): DateTime Combine a Date with a Time to create a DateTime . (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) infix fun DateTime .at(offset: UtcOffset ): OffsetDateTime Combine a local date and time with a UTC offset to create an OffsetDateTime . (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) infix fun Date .at(offsetTime: OffsetTime ): OffsetDateTime Combine a local date with a time and UTC offset to create an OffsetDateTime . (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) infix fun Instant .at(offset: UtcOffset ): OffsetDateTime Combine an instant with a UTC offset to create an OffsetDateTime . (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) infix fun Time .at(offset: UtcOffset ): OffsetTime Combine a local time with a UTC offset to create an OffsetTime . (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) infix fun Year .at(month: Month ): YearMonth Combine a year and month to create a YearMonth . (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) infix fun Instant .at(zone: TimeZone ): ZonedDateTime Combine an instant with a time zone to create a ZonedDateTime . (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) infix fun DateTime .at(zone: TimeZone ): ZonedDateTime Combine a local date and time with a time zone to create a ZonedDateTime . Due to daylight savings time transitions, there a few complexities to be aware of. If the local time falls within a gap (meaning it doesn't exist), it will be adjusted forward by the length of the gap. If it falls within an overlap (meaning the local time exists twice), the earlier offset will be used.","title":"At"},{"location":"api/core/io.islandtime/at/#at","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) infix fun Date .at(time: Time ): DateTime Combine a Date with a Time to create a DateTime . (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) infix fun DateTime .at(offset: UtcOffset ): OffsetDateTime Combine a local date and time with a UTC offset to create an OffsetDateTime . (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) infix fun Date .at(offsetTime: OffsetTime ): OffsetDateTime Combine a local date with a time and UTC offset to create an OffsetDateTime . (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) infix fun Instant .at(offset: UtcOffset ): OffsetDateTime Combine an instant with a UTC offset to create an OffsetDateTime . (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) infix fun Time .at(offset: UtcOffset ): OffsetTime Combine a local time with a UTC offset to create an OffsetTime . (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) infix fun Year .at(month: Month ): YearMonth Combine a year and month to create a YearMonth . (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) infix fun Instant .at(zone: TimeZone ): ZonedDateTime Combine an instant with a time zone to create a ZonedDateTime . (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) infix fun DateTime .at(zone: TimeZone ): ZonedDateTime Combine a local date and time with a time zone to create a ZonedDateTime . Due to daylight savings time transitions, there a few complexities to be aware of. If the local time falls within a gap (meaning it doesn't exist), it will be adjusted forward by the length of the gap. If it falls within an overlap (meaning the local time exists twice), the earlier offset will be used.","title":"at"},{"location":"api/core/io.islandtime/date-time-at/","text":"core / io.islandtime / dateTimeAt dateTimeAt (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun OffsetDateTime .dateTimeAt(zone: TimeZone ): ZonedDateTime The ZonedDateTime with the same date and time at zone . The offset will be preserved if possible, but may require adjustment. See Also instantAt asZonedDateTime","title":"Date time at"},{"location":"api/core/io.islandtime/date-time-at/#datetimeat","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun OffsetDateTime .dateTimeAt(zone: TimeZone ): ZonedDateTime The ZonedDateTime with the same date and time at zone . The offset will be preserved if possible, but may require adjustment. See Also instantAt asZonedDateTime","title":"dateTimeAt"},{"location":"api/core/io.islandtime/end-of-day-at/","text":"core / io.islandtime / endOfDayAt endOfDayAt (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Date .endOfDayAt(zone: TimeZone ): ZonedDateTime The ZonedDateTime at the last representable instant of this date in a particular time zone, taking into account any daylight savings transitions.","title":"End of day at"},{"location":"api/core/io.islandtime/end-of-day-at/#endofdayat","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Date .endOfDayAt(zone: TimeZone ): ZonedDateTime The ZonedDateTime at the last representable instant of this date in a particular time zone, taking into account any daylight savings transitions.","title":"endOfDayAt"},{"location":"api/core/io.islandtime/end-of-day/","text":"core / io.islandtime / endOfDay endOfDay (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val Date .endOfDay: DateTime The DateTime at the end of the day.","title":"End of day"},{"location":"api/core/io.islandtime/end-of-day/#endofday","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val Date .endOfDay: DateTime The DateTime at the end of the day.","title":"endOfDay"},{"location":"api/core/io.islandtime/instant-at/","text":"core / io.islandtime / instantAt instantAt (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun OffsetDateTime .instantAt(zone: TimeZone ): ZonedDateTime The ZonedDateTime representing the same instant in time at zone . The local date, time, and offset may differ. See Also dateTimeAt asZonedDateTime","title":"Instant at"},{"location":"api/core/io.islandtime/instant-at/#instantat","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun OffsetDateTime .instantAt(zone: TimeZone ): ZonedDateTime The ZonedDateTime representing the same instant in time at zone . The local date, time, and offset may differ. See Also dateTimeAt asZonedDateTime","title":"instantAt"},{"location":"api/core/io.islandtime/same-instant-at/","text":"core / io.islandtime / sameInstantAt sameInstantAt (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun OffsetDateTime .~~sameInstantAt~~(zone: TimeZone ): ZonedDateTime Deprecated: Renamed to 'instantAt'.","title":"Same instant at"},{"location":"api/core/io.islandtime/same-instant-at/#sameinstantat","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun OffsetDateTime .~~sameInstantAt~~(zone: TimeZone ): ZonedDateTime Deprecated: Renamed to 'instantAt'.","title":"sameInstantAt"},{"location":"api/core/io.islandtime/similar-local-time-at/","text":"core / io.islandtime / similarLocalTimeAt similarLocalTimeAt (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun OffsetDateTime .~~similarLocalTimeAt~~(zone: TimeZone ): ZonedDateTime Deprecated: Renamed to 'dateTimeAt'.","title":"Similar local time at"},{"location":"api/core/io.islandtime/similar-local-time-at/#similarlocaltimeat","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun OffsetDateTime .~~similarLocalTimeAt~~(zone: TimeZone ): ZonedDateTime Deprecated: Renamed to 'dateTimeAt'.","title":"similarLocalTimeAt"},{"location":"api/core/io.islandtime/start-of-day-at/","text":"core / io.islandtime / startOfDayAt startOfDayAt (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Date .startOfDayAt(zone: TimeZone ): ZonedDateTime The ZonedDateTime at the start of this date in a particular time zone, taking into account any daylight savings transitions.","title":"Start of day at"},{"location":"api/core/io.islandtime/start-of-day-at/#startofdayat","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Date .startOfDayAt(zone: TimeZone ): ZonedDateTime The ZonedDateTime at the start of this date in a particular time zone, taking into account any daylight savings transitions.","title":"startOfDayAt"},{"location":"api/core/io.islandtime/start-of-day/","text":"core / io.islandtime / startOfDay startOfDay (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val Date .startOfDay: DateTime The DateTime at the start of the day.","title":"Start of day"},{"location":"api/core/io.islandtime/start-of-day/#startofday","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val Date .startOfDay: DateTime The DateTime at the start of the day.","title":"startOfDay"},{"location":"api/core/io.islandtime/to-date-at/","text":"core / io.islandtime / toDateAt toDateAt (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Instant .toDateAt(offset: UtcOffset ): Date Convert an Instant into the Date represented by it at a particular UTC offset. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Instant .toDateAt(zone: TimeZone ): Date Convert an Instant into the Date represented by it in a particular time zone.","title":"To date at"},{"location":"api/core/io.islandtime/to-date-at/#todateat","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Instant .toDateAt(offset: UtcOffset ): Date Convert an Instant into the Date represented by it at a particular UTC offset. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Instant .toDateAt(zone: TimeZone ): Date Convert an Instant into the Date represented by it in a particular time zone.","title":"toDateAt"},{"location":"api/core/io.islandtime/to-date-time-at/","text":"core / io.islandtime / toDateTimeAt toDateTimeAt (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Instant .toDateTimeAt(offset: UtcOffset ): DateTime Convert to a DateTime at a particular offset from UTC.","title":"To date time at"},{"location":"api/core/io.islandtime/to-date-time-at/#todatetimeat","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Instant .toDateTimeAt(offset: UtcOffset ): DateTime Convert to a DateTime at a particular offset from UTC.","title":"toDateTimeAt"},{"location":"api/core/io.islandtime/-date/","text":"core / io.islandtime / Date Date (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) class Date : Comparable < Date > A date in an arbitrary region. Constructors Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init> Create a Date from a year, ISO month number, and day of month. <init>(year: Int , monthNumber: Int , day: Int ) Create a Date from a year, month, and day of month. <init>(year: Int , month: Month , day: Int ) Properties Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) dayOfMonth The day of the month. val dayOfMonth: Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) dayOfWeek The day of the week. val dayOfWeek: DayOfWeek (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) dayOfYear The day of the year -- also known as the ordinal date in ISO-8601. val dayOfYear: Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) daysSinceUnixEpoch The number of days away from the Unix epoch ( 1970-01-01T00:00Z ) that this date falls. val daysSinceUnixEpoch: LongDays (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isInLeapYear Check if this date falls within a leap year. val isInLeapYear: Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isLeapDay Check if this is a leap day. val isLeapDay: Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) lengthOfMonth The length of this date's month in days. val lengthOfMonth: IntDays (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) lengthOfYear The length of this date's year in days. val lengthOfYear: IntDays (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) month The month of the year. val month: Month (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) monthNumber The ISO month number, from 1-12. val monthNumber: Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) unixEpochDay The day of the Unix epoch. val unixEpochDay: Long (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) year The year. val year: Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) yearMonth The combined year and month. val yearMonth: YearMonth Functions Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) compareTo fun compareTo(other: Date ): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) component1 operator fun component1(): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) component2 operator fun component2(): Month (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) component3 operator fun component3(): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) copy Return a copy of this Date , replacing individual components with new values as desired. fun copy(year: Int = this.year, month: Month = this.month, dayOfMonth: Int = this.day): Date fun copy(year: Int = this.year, monthNumber: Int , dayOfMonth: Int = this.day): Date fun copy(year: Int = this.year, dayOfYear: Int = this.dayOfYear): Date (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) equals fun equals(other: Any ?): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) hashCode fun hashCode(): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) minus Return a Date with period subtracted from it. operator fun minus(period: Period ): Date operator fun minus(years: IntYears ): Date operator fun minus(years: LongYears ): Date operator fun minus(months: IntMonths ): Date operator fun minus(months: LongMonths ): Date operator fun minus(weeks: IntWeeks ): Date operator fun minus(weeks: LongWeeks ): Date operator fun minus(days: IntDays ): Date operator fun minus(days: LongDays ): Date (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) plus Return a Date with period added to it. operator fun plus(period: Period ): Date operator fun plus(years: IntYears ): Date operator fun plus(years: LongYears ): Date operator fun plus(months: IntMonths ): Date operator fun plus(months: LongMonths ): Date operator fun plus(weeks: IntWeeks ): Date operator fun plus(weeks: LongWeeks ): Date operator fun plus(days: IntDays ): Date operator fun plus(days: LongDays ): Date (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) rangeTo operator fun rangeTo(other: Date ): DateRange toString (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toString(): <ERROR CLASS> (jvm) fun toString(): String Companion Object Properties Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MAX The largest supported Date , which can be used as a \"far future\" sentinel. val MAX: Date (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MIN The smallest supported Date , which can be used as a \"far past\" sentinel. val MIN: Date Companion Object Functions Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fromDayOfUnixEpoch Create a Date from the day of the Unix epoch. fun fromDayOfUnixEpoch(day: Long ): Date (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fromDaysSinceUnixEpoch Create a Date from a duration of days relative to the Unix epoch of 1970-01-01. fun fromDaysSinceUnixEpoch(days: LongDays ): Date (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fromUnixEpochDay fun ~~fromUnixEpochDay~~(day: Long ): Date Extension Functions Name Summary (jvm) endOfWeek The date at the end of the week that this date falls in. The first day of the week will be determined by locale . fun Date .endOfWeek(locale: Locale ): Date (jvm) startOfWeek The date at the start of the week that this date falls in. The first day of the week will be determined by locale . fun Date .startOfWeek(locale: Locale ): Date (jvm) toJavaLocalDate Convert to an equivalent Java LocalDate . fun Date .toJavaLocalDate(): LocalDate (jvm) weekRange The date range of the week that this date falls within. The first day of the week will be determined by locale . fun Date .weekRange(locale: Locale ): DateRange","title":"Index"},{"location":"api/core/io.islandtime/-date/#date","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) class Date : Comparable < Date > A date in an arbitrary region.","title":"Date"},{"location":"api/core/io.islandtime/-date/#constructors","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init> Create a Date from a year, ISO month number, and day of month. <init>(year: Int , monthNumber: Int , day: Int ) Create a Date from a year, month, and day of month. <init>(year: Int , month: Month , day: Int )","title":"Constructors"},{"location":"api/core/io.islandtime/-date/#properties","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) dayOfMonth The day of the month. val dayOfMonth: Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) dayOfWeek The day of the week. val dayOfWeek: DayOfWeek (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) dayOfYear The day of the year -- also known as the ordinal date in ISO-8601. val dayOfYear: Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) daysSinceUnixEpoch The number of days away from the Unix epoch ( 1970-01-01T00:00Z ) that this date falls. val daysSinceUnixEpoch: LongDays (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isInLeapYear Check if this date falls within a leap year. val isInLeapYear: Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isLeapDay Check if this is a leap day. val isLeapDay: Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) lengthOfMonth The length of this date's month in days. val lengthOfMonth: IntDays (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) lengthOfYear The length of this date's year in days. val lengthOfYear: IntDays (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) month The month of the year. val month: Month (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) monthNumber The ISO month number, from 1-12. val monthNumber: Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) unixEpochDay The day of the Unix epoch. val unixEpochDay: Long (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) year The year. val year: Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) yearMonth The combined year and month. val yearMonth: YearMonth","title":"Properties"},{"location":"api/core/io.islandtime/-date/#functions","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) compareTo fun compareTo(other: Date ): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) component1 operator fun component1(): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) component2 operator fun component2(): Month (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) component3 operator fun component3(): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) copy Return a copy of this Date , replacing individual components with new values as desired. fun copy(year: Int = this.year, month: Month = this.month, dayOfMonth: Int = this.day): Date fun copy(year: Int = this.year, monthNumber: Int , dayOfMonth: Int = this.day): Date fun copy(year: Int = this.year, dayOfYear: Int = this.dayOfYear): Date (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) equals fun equals(other: Any ?): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) hashCode fun hashCode(): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) minus Return a Date with period subtracted from it. operator fun minus(period: Period ): Date operator fun minus(years: IntYears ): Date operator fun minus(years: LongYears ): Date operator fun minus(months: IntMonths ): Date operator fun minus(months: LongMonths ): Date operator fun minus(weeks: IntWeeks ): Date operator fun minus(weeks: LongWeeks ): Date operator fun minus(days: IntDays ): Date operator fun minus(days: LongDays ): Date (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) plus Return a Date with period added to it. operator fun plus(period: Period ): Date operator fun plus(years: IntYears ): Date operator fun plus(years: LongYears ): Date operator fun plus(months: IntMonths ): Date operator fun plus(months: LongMonths ): Date operator fun plus(weeks: IntWeeks ): Date operator fun plus(weeks: LongWeeks ): Date operator fun plus(days: IntDays ): Date operator fun plus(days: LongDays ): Date (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) rangeTo operator fun rangeTo(other: Date ): DateRange toString (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toString(): <ERROR CLASS> (jvm) fun toString(): String","title":"Functions"},{"location":"api/core/io.islandtime/-date/#companion-object-properties","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MAX The largest supported Date , which can be used as a \"far future\" sentinel. val MAX: Date (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MIN The smallest supported Date , which can be used as a \"far past\" sentinel. val MIN: Date","title":"Companion Object Properties"},{"location":"api/core/io.islandtime/-date/#companion-object-functions","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fromDayOfUnixEpoch Create a Date from the day of the Unix epoch. fun fromDayOfUnixEpoch(day: Long ): Date (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fromDaysSinceUnixEpoch Create a Date from a duration of days relative to the Unix epoch of 1970-01-01. fun fromDaysSinceUnixEpoch(days: LongDays ): Date (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fromUnixEpochDay fun ~~fromUnixEpochDay~~(day: Long ): Date","title":"Companion Object Functions"},{"location":"api/core/io.islandtime/-date/#extension-functions","text":"Name Summary (jvm) endOfWeek The date at the end of the week that this date falls in. The first day of the week will be determined by locale . fun Date .endOfWeek(locale: Locale ): Date (jvm) startOfWeek The date at the start of the week that this date falls in. The first day of the week will be determined by locale . fun Date .startOfWeek(locale: Locale ): Date (jvm) toJavaLocalDate Convert to an equivalent Java LocalDate . fun Date .toJavaLocalDate(): LocalDate (jvm) weekRange The date range of the week that this date falls within. The first day of the week will be determined by locale . fun Date .weekRange(locale: Locale ): DateRange","title":"Extension Functions"},{"location":"api/core/io.islandtime/-date/-init-/","text":"core / io.islandtime / Date / <init> <init> (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init>(year: Int , monthNumber: Int , day: Int ) Create a Date from a year, ISO month number, and day of month. Parameters year - the year monthNumber - the ISO month number, from 1-12 day - the day of the month Exceptions DateTimeException - if the year, month, or day is invalid(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init>(year: Int , month: Month , day: Int ) Create a Date from a year, month, and day of month. Parameters year - the year month - the month day - the day of the month Exceptions DateTimeException - if the year or day is invalid Constructor Create a Date from a year, month, and day of month.","title":" init "},{"location":"api/core/io.islandtime/-date/-init-/#init","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init>(year: Int , monthNumber: Int , day: Int ) Create a Date from a year, ISO month number, and day of month.","title":"&lt;init&gt;"},{"location":"api/core/io.islandtime/-date/-init-/#parameters","text":"year - the year monthNumber - the ISO month number, from 1-12 day - the day of the month","title":"Parameters"},{"location":"api/core/io.islandtime/-date/-init-/#exceptions","text":"DateTimeException - if the year, month, or day is invalid(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init>(year: Int , month: Month , day: Int ) Create a Date from a year, month, and day of month.","title":"Exceptions"},{"location":"api/core/io.islandtime/-date/-init-/#parameters_1","text":"year - the year month - the month day - the day of the month","title":"Parameters"},{"location":"api/core/io.islandtime/-date/-init-/#exceptions_1","text":"DateTimeException - if the year or day is invalid Constructor Create a Date from a year, month, and day of month.","title":"Exceptions"},{"location":"api/core/io.islandtime/-date/-m-a-x/","text":"core / io.islandtime / Date / MAX MAX (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val MAX: Date The largest supported Date , which can be used as a \"far future\" sentinel.","title":" m a x"},{"location":"api/core/io.islandtime/-date/-m-a-x/#max","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val MAX: Date The largest supported Date , which can be used as a \"far future\" sentinel.","title":"MAX"},{"location":"api/core/io.islandtime/-date/-m-i-n/","text":"core / io.islandtime / Date / MIN MIN (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val MIN: Date The smallest supported Date , which can be used as a \"far past\" sentinel.","title":" m i n"},{"location":"api/core/io.islandtime/-date/-m-i-n/#min","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val MIN: Date The smallest supported Date , which can be used as a \"far past\" sentinel.","title":"MIN"},{"location":"api/core/io.islandtime/-date/compare-to/","text":"core / io.islandtime / Date / compareTo compareTo (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun compareTo(other: Date ): Int","title":"Compare to"},{"location":"api/core/io.islandtime/-date/compare-to/#compareto","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun compareTo(other: Date ): Int","title":"compareTo"},{"location":"api/core/io.islandtime/-date/component1/","text":"core / io.islandtime / Date / component1 component1 (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun component1(): Int","title":"Component1"},{"location":"api/core/io.islandtime/-date/component1/#component1","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun component1(): Int","title":"component1"},{"location":"api/core/io.islandtime/-date/component2/","text":"core / io.islandtime / Date / component2 component2 (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun component2(): Month","title":"Component2"},{"location":"api/core/io.islandtime/-date/component2/#component2","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun component2(): Month","title":"component2"},{"location":"api/core/io.islandtime/-date/component3/","text":"core / io.islandtime / Date / component3 component3 (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun component3(): Int","title":"Component3"},{"location":"api/core/io.islandtime/-date/component3/#component3","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun component3(): Int","title":"component3"},{"location":"api/core/io.islandtime/-date/copy/","text":"core / io.islandtime / Date / copy copy (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun copy(year: Int = this.year, month: Month = this.month, dayOfMonth: Int = this.day): Date fun copy(year: Int = this.year, monthNumber: Int , dayOfMonth: Int = this.day): Date fun copy(year: Int = this.year, dayOfYear: Int = this.dayOfYear): Date Return a copy of this Date , replacing individual components with new values as desired. Exceptions DateTimeException - if the resulting date is invalid","title":"Copy"},{"location":"api/core/io.islandtime/-date/copy/#copy","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun copy(year: Int = this.year, month: Month = this.month, dayOfMonth: Int = this.day): Date fun copy(year: Int = this.year, monthNumber: Int , dayOfMonth: Int = this.day): Date fun copy(year: Int = this.year, dayOfYear: Int = this.dayOfYear): Date Return a copy of this Date , replacing individual components with new values as desired.","title":"copy"},{"location":"api/core/io.islandtime/-date/copy/#exceptions","text":"DateTimeException - if the resulting date is invalid","title":"Exceptions"},{"location":"api/core/io.islandtime/-date/day-of-month/","text":"core / io.islandtime / Date / dayOfMonth dayOfMonth (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val dayOfMonth: Int The day of the month.","title":"Day of month"},{"location":"api/core/io.islandtime/-date/day-of-month/#dayofmonth","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val dayOfMonth: Int The day of the month.","title":"dayOfMonth"},{"location":"api/core/io.islandtime/-date/day-of-week/","text":"core / io.islandtime / Date / dayOfWeek dayOfWeek (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val dayOfWeek: DayOfWeek The day of the week.","title":"Day of week"},{"location":"api/core/io.islandtime/-date/day-of-week/#dayofweek","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val dayOfWeek: DayOfWeek The day of the week.","title":"dayOfWeek"},{"location":"api/core/io.islandtime/-date/day-of-year/","text":"core / io.islandtime / Date / dayOfYear dayOfYear (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val dayOfYear: Int The day of the year -- also known as the ordinal date in ISO-8601.","title":"Day of year"},{"location":"api/core/io.islandtime/-date/day-of-year/#dayofyear","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val dayOfYear: Int The day of the year -- also known as the ordinal date in ISO-8601.","title":"dayOfYear"},{"location":"api/core/io.islandtime/-date/days-since-unix-epoch/","text":"core / io.islandtime / Date / daysSinceUnixEpoch daysSinceUnixEpoch (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline val daysSinceUnixEpoch: LongDays The number of days away from the Unix epoch ( 1970-01-01T00:00Z ) that this date falls.","title":"Days since unix epoch"},{"location":"api/core/io.islandtime/-date/days-since-unix-epoch/#dayssinceunixepoch","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline val daysSinceUnixEpoch: LongDays The number of days away from the Unix epoch ( 1970-01-01T00:00Z ) that this date falls.","title":"daysSinceUnixEpoch"},{"location":"api/core/io.islandtime/-date/equals/","text":"core / io.islandtime / Date / equals equals (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun equals(other: Any ?): Boolean","title":"Equals"},{"location":"api/core/io.islandtime/-date/equals/#equals","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun equals(other: Any ?): Boolean","title":"equals"},{"location":"api/core/io.islandtime/-date/from-day-of-unix-epoch/","text":"core / io.islandtime / Date / fromDayOfUnixEpoch fromDayOfUnixEpoch (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun fromDayOfUnixEpoch(day: Long ): Date Create a Date from the day of the Unix epoch. Parameters day - the day of the Unix epoch Exceptions DateTimeException - if outside of the supported date range","title":"From day of unix epoch"},{"location":"api/core/io.islandtime/-date/from-day-of-unix-epoch/#fromdayofunixepoch","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun fromDayOfUnixEpoch(day: Long ): Date Create a Date from the day of the Unix epoch.","title":"fromDayOfUnixEpoch"},{"location":"api/core/io.islandtime/-date/from-day-of-unix-epoch/#parameters","text":"day - the day of the Unix epoch","title":"Parameters"},{"location":"api/core/io.islandtime/-date/from-day-of-unix-epoch/#exceptions","text":"DateTimeException - if outside of the supported date range","title":"Exceptions"},{"location":"api/core/io.islandtime/-date/from-days-since-unix-epoch/","text":"core / io.islandtime / Date / fromDaysSinceUnixEpoch fromDaysSinceUnixEpoch (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun fromDaysSinceUnixEpoch(days: LongDays ): Date Create a Date from a duration of days relative to the Unix epoch of 1970-01-01. Parameters days - the number of days relative to the Unix epoch Exceptions DateTimeException - if outside of the supported date range","title":"From days since unix epoch"},{"location":"api/core/io.islandtime/-date/from-days-since-unix-epoch/#fromdayssinceunixepoch","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun fromDaysSinceUnixEpoch(days: LongDays ): Date Create a Date from a duration of days relative to the Unix epoch of 1970-01-01.","title":"fromDaysSinceUnixEpoch"},{"location":"api/core/io.islandtime/-date/from-days-since-unix-epoch/#parameters","text":"days - the number of days relative to the Unix epoch","title":"Parameters"},{"location":"api/core/io.islandtime/-date/from-days-since-unix-epoch/#exceptions","text":"DateTimeException - if outside of the supported date range","title":"Exceptions"},{"location":"api/core/io.islandtime/-date/from-unix-epoch-day/","text":"core / io.islandtime / Date / fromUnixEpochDay fromUnixEpochDay (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun ~~fromUnixEpochDay~~(day: Long ): Date Deprecated: Use fromDayOfUnixEpoch() instead.","title":"From unix epoch day"},{"location":"api/core/io.islandtime/-date/from-unix-epoch-day/#fromunixepochday","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun ~~fromUnixEpochDay~~(day: Long ): Date Deprecated: Use fromDayOfUnixEpoch() instead.","title":"fromUnixEpochDay"},{"location":"api/core/io.islandtime/-date/hash-code/","text":"core / io.islandtime / Date / hashCode hashCode (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun hashCode(): Int","title":"Hash code"},{"location":"api/core/io.islandtime/-date/hash-code/#hashcode","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun hashCode(): Int","title":"hashCode"},{"location":"api/core/io.islandtime/-date/is-in-leap-year/","text":"core / io.islandtime / Date / isInLeapYear isInLeapYear (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val isInLeapYear: Boolean Check if this date falls within a leap year.","title":"Is in leap year"},{"location":"api/core/io.islandtime/-date/is-in-leap-year/#isinleapyear","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val isInLeapYear: Boolean Check if this date falls within a leap year.","title":"isInLeapYear"},{"location":"api/core/io.islandtime/-date/is-leap-day/","text":"core / io.islandtime / Date / isLeapDay isLeapDay (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val isLeapDay: Boolean Check if this is a leap day.","title":"Is leap day"},{"location":"api/core/io.islandtime/-date/is-leap-day/#isleapday","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val isLeapDay: Boolean Check if this is a leap day.","title":"isLeapDay"},{"location":"api/core/io.islandtime/-date/length-of-month/","text":"core / io.islandtime / Date / lengthOfMonth lengthOfMonth (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val lengthOfMonth: IntDays The length of this date's month in days.","title":"Length of month"},{"location":"api/core/io.islandtime/-date/length-of-month/#lengthofmonth","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val lengthOfMonth: IntDays The length of this date's month in days.","title":"lengthOfMonth"},{"location":"api/core/io.islandtime/-date/length-of-year/","text":"core / io.islandtime / Date / lengthOfYear lengthOfYear (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val lengthOfYear: IntDays The length of this date's year in days.","title":"Length of year"},{"location":"api/core/io.islandtime/-date/length-of-year/#lengthofyear","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val lengthOfYear: IntDays The length of this date's year in days.","title":"lengthOfYear"},{"location":"api/core/io.islandtime/-date/minus/","text":"core / io.islandtime / Date / minus minus (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun minus(period: Period ): Date Return a Date with period subtracted from it. Years are subtracted first, then months, then days. If the day exceeds the maximum month length at any step, it will be coerced into the valid range. This behavior is consistent with the order of operations for period addition as defined in ISO-8601-2. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun minus(years: IntYears ): Date operator fun minus(years: LongYears ): Date operator fun minus(months: IntMonths ): Date operator fun minus(months: LongMonths ): Date operator fun minus(weeks: IntWeeks ): Date operator fun minus(weeks: LongWeeks ): Date operator fun minus(days: IntDays ): Date operator fun minus(days: LongDays ): Date","title":"Minus"},{"location":"api/core/io.islandtime/-date/minus/#minus","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun minus(period: Period ): Date Return a Date with period subtracted from it. Years are subtracted first, then months, then days. If the day exceeds the maximum month length at any step, it will be coerced into the valid range. This behavior is consistent with the order of operations for period addition as defined in ISO-8601-2. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun minus(years: IntYears ): Date operator fun minus(years: LongYears ): Date operator fun minus(months: IntMonths ): Date operator fun minus(months: LongMonths ): Date operator fun minus(weeks: IntWeeks ): Date operator fun minus(weeks: LongWeeks ): Date operator fun minus(days: IntDays ): Date operator fun minus(days: LongDays ): Date","title":"minus"},{"location":"api/core/io.islandtime/-date/month-number/","text":"core / io.islandtime / Date / monthNumber monthNumber (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline val monthNumber: Int The ISO month number, from 1-12.","title":"Month number"},{"location":"api/core/io.islandtime/-date/month-number/#monthnumber","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline val monthNumber: Int The ISO month number, from 1-12.","title":"monthNumber"},{"location":"api/core/io.islandtime/-date/month/","text":"core / io.islandtime / Date / month month (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val month: Month The month of the year.","title":"Month"},{"location":"api/core/io.islandtime/-date/month/#month","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val month: Month The month of the year.","title":"month"},{"location":"api/core/io.islandtime/-date/plus/","text":"core / io.islandtime / Date / plus plus (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun plus(period: Period ): Date Return a Date with period added to it. Years are added first, then months, then days. If the day exceeds the maximum month length at any step, it will be coerced into the valid range. This behavior is consistent with the order of operations for period addition as defined in ISO-8601-2. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun plus(years: IntYears ): Date operator fun plus(years: LongYears ): Date operator fun plus(months: IntMonths ): Date operator fun plus(months: LongMonths ): Date operator fun plus(weeks: IntWeeks ): Date operator fun plus(weeks: LongWeeks ): Date operator fun plus(days: IntDays ): Date operator fun plus(days: LongDays ): Date","title":"Plus"},{"location":"api/core/io.islandtime/-date/plus/#plus","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun plus(period: Period ): Date Return a Date with period added to it. Years are added first, then months, then days. If the day exceeds the maximum month length at any step, it will be coerced into the valid range. This behavior is consistent with the order of operations for period addition as defined in ISO-8601-2. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun plus(years: IntYears ): Date operator fun plus(years: LongYears ): Date operator fun plus(months: IntMonths ): Date operator fun plus(months: LongMonths ): Date operator fun plus(weeks: IntWeeks ): Date operator fun plus(weeks: LongWeeks ): Date operator fun plus(days: IntDays ): Date operator fun plus(days: LongDays ): Date","title":"plus"},{"location":"api/core/io.islandtime/-date/range-to/","text":"core / io.islandtime / Date / rangeTo rangeTo (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun rangeTo(other: Date ): DateRange","title":"Range to"},{"location":"api/core/io.islandtime/-date/range-to/#rangeto","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun rangeTo(other: Date ): DateRange","title":"rangeTo"},{"location":"api/core/io.islandtime/-date/to-string/","text":"core / io.islandtime / Date / toString toString (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toString(): <ERROR CLASS> (jvm) fun toString(): String","title":"To string"},{"location":"api/core/io.islandtime/-date/to-string/#tostring","text":"(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toString(): <ERROR CLASS> (jvm) fun toString(): String","title":"toString"},{"location":"api/core/io.islandtime/-date/unix-epoch-day/","text":"core / io.islandtime / Date / unixEpochDay unixEpochDay (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val unixEpochDay: Long The day of the Unix epoch.","title":"Unix epoch day"},{"location":"api/core/io.islandtime/-date/unix-epoch-day/#unixepochday","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val unixEpochDay: Long The day of the Unix epoch.","title":"unixEpochDay"},{"location":"api/core/io.islandtime/-date/year-month/","text":"core / io.islandtime / Date / yearMonth yearMonth (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline val yearMonth: YearMonth The combined year and month.","title":"Year month"},{"location":"api/core/io.islandtime/-date/year-month/#yearmonth","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline val yearMonth: YearMonth The combined year and month.","title":"yearMonth"},{"location":"api/core/io.islandtime/-date/year/","text":"core / io.islandtime / Date / year year (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val year: Int The year.","title":"Year"},{"location":"api/core/io.islandtime/-date/year/#year","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val year: Int The year.","title":"year"},{"location":"api/core/io.islandtime/-date-time/","text":"core / io.islandtime / DateTime DateTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) class DateTime : Comparable < DateTime > A date and time of day in an arbitrary region. Constructors Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init> Create a DateTime . <init>(year: Int , month: Month , day: Int , hour: Int , minute: Int , second: Int = 0, nanosecond: Int = 0) <init>(year: Int , monthNumber: Int , day: Int , hour: Int , minute: Int , second: Int = 0, nanosecond: Int = 0) <init>(year: Int , dayOfYear: Int , hour: Int , minute: Int , second: Int , nanosecond: Int ) Create a DateTime by combining a Date and Time . <init>(date: Date , time: Time ) Properties Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) additionalNanosecondsSinceUnixEpoch The number of additional nanoseconds that should be applied on top of the number of seconds since the Unix epoch returned by secondsSinceUnixEpochAt . val additionalNanosecondsSinceUnixEpoch: IntNanoseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) date The date. val date: Date (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) dayOfMonth The day of the month. val dayOfMonth: Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) dayOfWeek The day of the week. val dayOfWeek: DayOfWeek (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) dayOfYear The day of the year -- also known as the ordinal date in ISO-8601. val dayOfYear: Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) hour The hour of the day. val hour: Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isInLeapYear Check if this date falls within a leap year. val isInLeapYear: Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isLeapDay Check if this is a leap day. val isLeapDay: Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) lengthOfMonth The length of the date's month in days. val lengthOfMonth: IntDays (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) lengthOfYear The length of the date's year in days. val lengthOfYear: IntDays (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) minute The minute of the hour. val minute: Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) month The month of the year. val month: Month (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) monthNumber The ISO month number, from 1-12. val monthNumber: Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) nanoOfSecondsSinceUnixEpoch val ~~nanoOfSecondsSinceUnixEpoch~~: IntNanoseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) nanosecond The nanosecond of the second. val nanosecond: Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) second The second of the minute. val second: Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) time The time of day. val time: Time (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) unixEpochNanoOfSecond val ~~unixEpochNanoOfSecond~~: Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) year The year. val year: Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) yearMonth The combined year and month. val yearMonth: YearMonth Functions Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) compareTo fun compareTo(other: DateTime ): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) component1 operator fun component1(): Date (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) component2 operator fun component2(): Time (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) copy Return a copy of this DateTime , replacing individual components with new values as desired. fun copy(date: Date = this.date, time: Time = this.time): DateTime fun copy(year: Int = this.year, dayOfYear: Int = this.dayOfYear, hour: Int = this.hour, minute: Int = this.minute, second: Int = this.second, nanosecond: Int = this.nanosecond): DateTime fun copy(year: Int = this.year, month: Month = this.month, dayOfMonth: Int = this.dayOfMonth, hour: Int = this.hour, minute: Int = this.minute, second: Int = this.second, nanosecond: Int = this.nanosecond): DateTime fun copy(year: Int = this.year, monthNumber: Int , dayOfMonth: Int = this.dayOfMonth, hour: Int = this.hour, minute: Int = this.minute, second: Int = this.second, nanosecond: Int = this.nanosecond): DateTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) equals fun equals(other: Any ?): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) hashCode fun hashCode(): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) instantAt The Instant represented by this date-time at a particular offset from UTC. fun instantAt(offset: UtcOffset ): Instant (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) millisecondOfUnixEpochAt The millisecond of the Unix epoch. fun millisecondOfUnixEpochAt(offset: UtcOffset ): Long (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) millisecondsSinceUnixEpochAt The number of milliseconds relative to the Unix epoch of 1970-01-01T00:00Z at a particular offset. This is a \"floor\" value, so 1 nanosecond before the Unix epoch will be at a distance of 1 millisecond. fun millisecondsSinceUnixEpochAt(offset: UtcOffset ): LongMilliseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) minus Return a DateTime with period subtracted from it. operator fun minus(period: Period ): DateTime operator fun minus(duration: Duration ): DateTime operator fun minus(years: IntYears ): DateTime operator fun minus(years: LongYears ): DateTime operator fun minus(months: IntMonths ): DateTime operator fun minus(months: LongMonths ): DateTime operator fun minus(weeks: IntWeeks ): DateTime operator fun minus(weeks: LongWeeks ): DateTime operator fun minus(days: IntDays ): DateTime operator fun minus(days: LongDays ): DateTime operator fun minus(hours: IntHours ): DateTime operator fun minus(hours: LongHours ): DateTime operator fun minus(minutes: IntMinutes ): DateTime operator fun minus(minutes: LongMinutes ): DateTime operator fun minus(seconds: IntSeconds ): DateTime operator fun minus(seconds: LongSeconds ): DateTime operator fun minus(milliseconds: IntMilliseconds ): DateTime operator fun minus(milliseconds: LongMilliseconds ): DateTime operator fun minus(microseconds: IntMicroseconds ): DateTime operator fun minus(microseconds: LongMicroseconds ): DateTime operator fun minus(nanoseconds: IntNanoseconds ): DateTime operator fun minus(nanoseconds: LongNanoseconds ): DateTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) plus Return a DateTime with period added to it. operator fun plus(period: Period ): DateTime operator fun plus(duration: Duration ): DateTime operator fun plus(years: IntYears ): DateTime operator fun plus(years: LongYears ): DateTime operator fun plus(months: IntMonths ): DateTime operator fun plus(months: LongMonths ): DateTime operator fun plus(weeks: IntWeeks ): DateTime operator fun plus(weeks: LongWeeks ): DateTime operator fun plus(days: IntDays ): DateTime operator fun plus(days: LongDays ): DateTime operator fun plus(hours: IntHours ): DateTime operator fun plus(hours: LongHours ): DateTime operator fun plus(minutes: IntMinutes ): DateTime operator fun plus(minutes: LongMinutes ): DateTime operator fun plus(seconds: IntSeconds ): DateTime operator fun plus(seconds: LongSeconds ): DateTime operator fun plus(milliseconds: IntMilliseconds ): DateTime operator fun plus(milliseconds: LongMilliseconds ): DateTime operator fun plus(microseconds: IntMicroseconds ): DateTime operator fun plus(microseconds: LongMicroseconds ): DateTime operator fun plus(nanoseconds: IntNanoseconds ): DateTime operator fun plus(nanoseconds: LongNanoseconds ): DateTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) rangeTo operator fun rangeTo(other: DateTime ): DateTimeInterval (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) secondOfUnixEpochAt The second of the Unix epoch. fun secondOfUnixEpochAt(offset: UtcOffset ): Long (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) secondsSinceUnixEpochAt The number of seconds relative to the Unix epoch of 1970-01-01T00:00Z at a particular offset. This is a \"floor\" value, so 1 nanosecond before the Unix epoch will be at a distance of 1 second. fun secondsSinceUnixEpochAt(offset: UtcOffset ): LongSeconds toString (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toString(): <ERROR CLASS> (jvm) fun toString(): String (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) unixEpochMillisecondAt fun ~~unixEpochMillisecondAt~~(offset: UtcOffset ): Long (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) unixEpochSecondAt fun ~~unixEpochSecondAt~~(offset: UtcOffset ): Long Companion Object Properties Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MAX The largest supported DateTime , which can be used as a \"far future\" sentinel. val MAX: DateTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MIN The smallest supported DateTime , which can be used as a \"far past\" sentinel. val MIN: DateTime Companion Object Functions Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fromMillisecondOfUnixEpoch Create a DateTime from the millisecond of the Unix epoch at offset . fun fromMillisecondOfUnixEpoch(millisecond: Long , offset: UtcOffset ): DateTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fromMillisecondsSinceUnixEpoch Create a DateTime from a duration of milliseconds relative to the Unix epoch at offset . fun fromMillisecondsSinceUnixEpoch(millisecondsSinceUnixEpoch: LongMilliseconds , offset: UtcOffset ): DateTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fromSecondOfUnixEpoch Create a DateTime from the second of the Unix epoch at offset and optionally, the nanosecond of the second. fun fromSecondOfUnixEpoch(second: Long , nanosecond: Int = 0, offset: UtcOffset ): DateTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fromSecondsSinceUnixEpoch Create a DateTime from a duration of seconds relative to the Unix epoch at offset , optionally, with some number of additional nanoseconds added to it. fun fromSecondsSinceUnixEpoch(secondsSinceUnixEpoch: LongSeconds , nanosecondAdjustment: IntNanoseconds = 0.nanoseconds, offset: UtcOffset ): DateTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fromUnixEpochMillisecond fun ~~fromUnixEpochMillisecond~~(millisecond: Long , offset: UtcOffset ): DateTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fromUnixEpochSecond fun ~~fromUnixEpochSecond~~(second: Long , nanosecondAdjustment: Int = 0, offset: UtcOffset ): DateTime Extension Functions Name Summary (jvm) endOfWeek The date-time at the last representable instant of the week that this date-time falls in. The first day of the week will be determined by locale . fun DateTime .endOfWeek(locale: Locale ): DateTime (jvm) startOfWeek The date-time at the first instant of the week that this date-time falls in. The first day of the week will be determined by locale . fun DateTime .startOfWeek(locale: Locale ): DateTime (jvm) toJavaLocalDateTime Convert to an equivalent Java LocalDateTime . fun DateTime .toJavaLocalDateTime(): LocalDateTime (jvm) weekInterval The interval of the week that this date falls within. The first day of the week will be determined by locale . fun DateTime .weekInterval(locale: Locale ): DateTimeInterval","title":"Index"},{"location":"api/core/io.islandtime/-date-time/#datetime","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) class DateTime : Comparable < DateTime > A date and time of day in an arbitrary region.","title":"DateTime"},{"location":"api/core/io.islandtime/-date-time/#constructors","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init> Create a DateTime . <init>(year: Int , month: Month , day: Int , hour: Int , minute: Int , second: Int = 0, nanosecond: Int = 0) <init>(year: Int , monthNumber: Int , day: Int , hour: Int , minute: Int , second: Int = 0, nanosecond: Int = 0) <init>(year: Int , dayOfYear: Int , hour: Int , minute: Int , second: Int , nanosecond: Int ) Create a DateTime by combining a Date and Time . <init>(date: Date , time: Time )","title":"Constructors"},{"location":"api/core/io.islandtime/-date-time/#properties","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) additionalNanosecondsSinceUnixEpoch The number of additional nanoseconds that should be applied on top of the number of seconds since the Unix epoch returned by secondsSinceUnixEpochAt . val additionalNanosecondsSinceUnixEpoch: IntNanoseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) date The date. val date: Date (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) dayOfMonth The day of the month. val dayOfMonth: Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) dayOfWeek The day of the week. val dayOfWeek: DayOfWeek (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) dayOfYear The day of the year -- also known as the ordinal date in ISO-8601. val dayOfYear: Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) hour The hour of the day. val hour: Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isInLeapYear Check if this date falls within a leap year. val isInLeapYear: Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isLeapDay Check if this is a leap day. val isLeapDay: Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) lengthOfMonth The length of the date's month in days. val lengthOfMonth: IntDays (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) lengthOfYear The length of the date's year in days. val lengthOfYear: IntDays (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) minute The minute of the hour. val minute: Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) month The month of the year. val month: Month (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) monthNumber The ISO month number, from 1-12. val monthNumber: Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) nanoOfSecondsSinceUnixEpoch val ~~nanoOfSecondsSinceUnixEpoch~~: IntNanoseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) nanosecond The nanosecond of the second. val nanosecond: Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) second The second of the minute. val second: Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) time The time of day. val time: Time (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) unixEpochNanoOfSecond val ~~unixEpochNanoOfSecond~~: Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) year The year. val year: Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) yearMonth The combined year and month. val yearMonth: YearMonth","title":"Properties"},{"location":"api/core/io.islandtime/-date-time/#functions","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) compareTo fun compareTo(other: DateTime ): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) component1 operator fun component1(): Date (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) component2 operator fun component2(): Time (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) copy Return a copy of this DateTime , replacing individual components with new values as desired. fun copy(date: Date = this.date, time: Time = this.time): DateTime fun copy(year: Int = this.year, dayOfYear: Int = this.dayOfYear, hour: Int = this.hour, minute: Int = this.minute, second: Int = this.second, nanosecond: Int = this.nanosecond): DateTime fun copy(year: Int = this.year, month: Month = this.month, dayOfMonth: Int = this.dayOfMonth, hour: Int = this.hour, minute: Int = this.minute, second: Int = this.second, nanosecond: Int = this.nanosecond): DateTime fun copy(year: Int = this.year, monthNumber: Int , dayOfMonth: Int = this.dayOfMonth, hour: Int = this.hour, minute: Int = this.minute, second: Int = this.second, nanosecond: Int = this.nanosecond): DateTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) equals fun equals(other: Any ?): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) hashCode fun hashCode(): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) instantAt The Instant represented by this date-time at a particular offset from UTC. fun instantAt(offset: UtcOffset ): Instant (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) millisecondOfUnixEpochAt The millisecond of the Unix epoch. fun millisecondOfUnixEpochAt(offset: UtcOffset ): Long (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) millisecondsSinceUnixEpochAt The number of milliseconds relative to the Unix epoch of 1970-01-01T00:00Z at a particular offset. This is a \"floor\" value, so 1 nanosecond before the Unix epoch will be at a distance of 1 millisecond. fun millisecondsSinceUnixEpochAt(offset: UtcOffset ): LongMilliseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) minus Return a DateTime with period subtracted from it. operator fun minus(period: Period ): DateTime operator fun minus(duration: Duration ): DateTime operator fun minus(years: IntYears ): DateTime operator fun minus(years: LongYears ): DateTime operator fun minus(months: IntMonths ): DateTime operator fun minus(months: LongMonths ): DateTime operator fun minus(weeks: IntWeeks ): DateTime operator fun minus(weeks: LongWeeks ): DateTime operator fun minus(days: IntDays ): DateTime operator fun minus(days: LongDays ): DateTime operator fun minus(hours: IntHours ): DateTime operator fun minus(hours: LongHours ): DateTime operator fun minus(minutes: IntMinutes ): DateTime operator fun minus(minutes: LongMinutes ): DateTime operator fun minus(seconds: IntSeconds ): DateTime operator fun minus(seconds: LongSeconds ): DateTime operator fun minus(milliseconds: IntMilliseconds ): DateTime operator fun minus(milliseconds: LongMilliseconds ): DateTime operator fun minus(microseconds: IntMicroseconds ): DateTime operator fun minus(microseconds: LongMicroseconds ): DateTime operator fun minus(nanoseconds: IntNanoseconds ): DateTime operator fun minus(nanoseconds: LongNanoseconds ): DateTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) plus Return a DateTime with period added to it. operator fun plus(period: Period ): DateTime operator fun plus(duration: Duration ): DateTime operator fun plus(years: IntYears ): DateTime operator fun plus(years: LongYears ): DateTime operator fun plus(months: IntMonths ): DateTime operator fun plus(months: LongMonths ): DateTime operator fun plus(weeks: IntWeeks ): DateTime operator fun plus(weeks: LongWeeks ): DateTime operator fun plus(days: IntDays ): DateTime operator fun plus(days: LongDays ): DateTime operator fun plus(hours: IntHours ): DateTime operator fun plus(hours: LongHours ): DateTime operator fun plus(minutes: IntMinutes ): DateTime operator fun plus(minutes: LongMinutes ): DateTime operator fun plus(seconds: IntSeconds ): DateTime operator fun plus(seconds: LongSeconds ): DateTime operator fun plus(milliseconds: IntMilliseconds ): DateTime operator fun plus(milliseconds: LongMilliseconds ): DateTime operator fun plus(microseconds: IntMicroseconds ): DateTime operator fun plus(microseconds: LongMicroseconds ): DateTime operator fun plus(nanoseconds: IntNanoseconds ): DateTime operator fun plus(nanoseconds: LongNanoseconds ): DateTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) rangeTo operator fun rangeTo(other: DateTime ): DateTimeInterval (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) secondOfUnixEpochAt The second of the Unix epoch. fun secondOfUnixEpochAt(offset: UtcOffset ): Long (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) secondsSinceUnixEpochAt The number of seconds relative to the Unix epoch of 1970-01-01T00:00Z at a particular offset. This is a \"floor\" value, so 1 nanosecond before the Unix epoch will be at a distance of 1 second. fun secondsSinceUnixEpochAt(offset: UtcOffset ): LongSeconds toString (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toString(): <ERROR CLASS> (jvm) fun toString(): String (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) unixEpochMillisecondAt fun ~~unixEpochMillisecondAt~~(offset: UtcOffset ): Long (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) unixEpochSecondAt fun ~~unixEpochSecondAt~~(offset: UtcOffset ): Long","title":"Functions"},{"location":"api/core/io.islandtime/-date-time/#companion-object-properties","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MAX The largest supported DateTime , which can be used as a \"far future\" sentinel. val MAX: DateTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MIN The smallest supported DateTime , which can be used as a \"far past\" sentinel. val MIN: DateTime","title":"Companion Object Properties"},{"location":"api/core/io.islandtime/-date-time/#companion-object-functions","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fromMillisecondOfUnixEpoch Create a DateTime from the millisecond of the Unix epoch at offset . fun fromMillisecondOfUnixEpoch(millisecond: Long , offset: UtcOffset ): DateTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fromMillisecondsSinceUnixEpoch Create a DateTime from a duration of milliseconds relative to the Unix epoch at offset . fun fromMillisecondsSinceUnixEpoch(millisecondsSinceUnixEpoch: LongMilliseconds , offset: UtcOffset ): DateTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fromSecondOfUnixEpoch Create a DateTime from the second of the Unix epoch at offset and optionally, the nanosecond of the second. fun fromSecondOfUnixEpoch(second: Long , nanosecond: Int = 0, offset: UtcOffset ): DateTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fromSecondsSinceUnixEpoch Create a DateTime from a duration of seconds relative to the Unix epoch at offset , optionally, with some number of additional nanoseconds added to it. fun fromSecondsSinceUnixEpoch(secondsSinceUnixEpoch: LongSeconds , nanosecondAdjustment: IntNanoseconds = 0.nanoseconds, offset: UtcOffset ): DateTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fromUnixEpochMillisecond fun ~~fromUnixEpochMillisecond~~(millisecond: Long , offset: UtcOffset ): DateTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fromUnixEpochSecond fun ~~fromUnixEpochSecond~~(second: Long , nanosecondAdjustment: Int = 0, offset: UtcOffset ): DateTime","title":"Companion Object Functions"},{"location":"api/core/io.islandtime/-date-time/#extension-functions","text":"Name Summary (jvm) endOfWeek The date-time at the last representable instant of the week that this date-time falls in. The first day of the week will be determined by locale . fun DateTime .endOfWeek(locale: Locale ): DateTime (jvm) startOfWeek The date-time at the first instant of the week that this date-time falls in. The first day of the week will be determined by locale . fun DateTime .startOfWeek(locale: Locale ): DateTime (jvm) toJavaLocalDateTime Convert to an equivalent Java LocalDateTime . fun DateTime .toJavaLocalDateTime(): LocalDateTime (jvm) weekInterval The interval of the week that this date falls within. The first day of the week will be determined by locale . fun DateTime .weekInterval(locale: Locale ): DateTimeInterval","title":"Extension Functions"},{"location":"api/core/io.islandtime/-date-time/-init-/","text":"core / io.islandtime / DateTime / <init> <init> (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init>(year: Int , month: Month , day: Int , hour: Int , minute: Int , second: Int = 0, nanosecond: Int = 0) <init>(year: Int , monthNumber: Int , day: Int , hour: Int , minute: Int , second: Int = 0, nanosecond: Int = 0) <init>(year: Int , dayOfYear: Int , hour: Int , minute: Int , second: Int , nanosecond: Int ) Create a DateTime . Exceptions DateTimeException - if the date-time is invalid(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init>(date: Date , time: Time ) Create a DateTime by combining a Date and Time . Parameters date - the date time - the time Constructor Create a DateTime by combining a Date and Time .","title":" init "},{"location":"api/core/io.islandtime/-date-time/-init-/#init","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init>(year: Int , month: Month , day: Int , hour: Int , minute: Int , second: Int = 0, nanosecond: Int = 0) <init>(year: Int , monthNumber: Int , day: Int , hour: Int , minute: Int , second: Int = 0, nanosecond: Int = 0) <init>(year: Int , dayOfYear: Int , hour: Int , minute: Int , second: Int , nanosecond: Int ) Create a DateTime .","title":"&lt;init&gt;"},{"location":"api/core/io.islandtime/-date-time/-init-/#exceptions","text":"DateTimeException - if the date-time is invalid(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init>(date: Date , time: Time ) Create a DateTime by combining a Date and Time .","title":"Exceptions"},{"location":"api/core/io.islandtime/-date-time/-init-/#parameters","text":"date - the date time - the time Constructor Create a DateTime by combining a Date and Time .","title":"Parameters"},{"location":"api/core/io.islandtime/-date-time/-m-a-x/","text":"core / io.islandtime / DateTime / MAX MAX (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val MAX: DateTime The largest supported DateTime , which can be used as a \"far future\" sentinel.","title":" m a x"},{"location":"api/core/io.islandtime/-date-time/-m-a-x/#max","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val MAX: DateTime The largest supported DateTime , which can be used as a \"far future\" sentinel.","title":"MAX"},{"location":"api/core/io.islandtime/-date-time/-m-i-n/","text":"core / io.islandtime / DateTime / MIN MIN (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val MIN: DateTime The smallest supported DateTime , which can be used as a \"far past\" sentinel.","title":" m i n"},{"location":"api/core/io.islandtime/-date-time/-m-i-n/#min","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val MIN: DateTime The smallest supported DateTime , which can be used as a \"far past\" sentinel.","title":"MIN"},{"location":"api/core/io.islandtime/-date-time/additional-nanoseconds-since-unix-epoch/","text":"core / io.islandtime / DateTime / additionalNanosecondsSinceUnixEpoch additionalNanosecondsSinceUnixEpoch (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val additionalNanosecondsSinceUnixEpoch: IntNanoseconds The number of additional nanoseconds that should be applied on top of the number of seconds since the Unix epoch returned by secondsSinceUnixEpochAt . See Also secondsSinceUnixEpochAt","title":"Additional nanoseconds since unix epoch"},{"location":"api/core/io.islandtime/-date-time/additional-nanoseconds-since-unix-epoch/#additionalnanosecondssinceunixepoch","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val additionalNanosecondsSinceUnixEpoch: IntNanoseconds The number of additional nanoseconds that should be applied on top of the number of seconds since the Unix epoch returned by secondsSinceUnixEpochAt . See Also secondsSinceUnixEpochAt","title":"additionalNanosecondsSinceUnixEpoch"},{"location":"api/core/io.islandtime/-date-time/compare-to/","text":"core / io.islandtime / DateTime / compareTo compareTo (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun compareTo(other: DateTime ): Int","title":"Compare to"},{"location":"api/core/io.islandtime/-date-time/compare-to/#compareto","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun compareTo(other: DateTime ): Int","title":"compareTo"},{"location":"api/core/io.islandtime/-date-time/component1/","text":"core / io.islandtime / DateTime / component1 component1 (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun component1(): Date","title":"Component1"},{"location":"api/core/io.islandtime/-date-time/component1/#component1","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun component1(): Date","title":"component1"},{"location":"api/core/io.islandtime/-date-time/component2/","text":"core / io.islandtime / DateTime / component2 component2 (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun component2(): Time","title":"Component2"},{"location":"api/core/io.islandtime/-date-time/component2/#component2","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun component2(): Time","title":"component2"},{"location":"api/core/io.islandtime/-date-time/copy/","text":"core / io.islandtime / DateTime / copy copy (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun copy(date: Date = this.date, time: Time = this.time): DateTime fun copy(year: Int = this.year, dayOfYear: Int = this.dayOfYear, hour: Int = this.hour, minute: Int = this.minute, second: Int = this.second, nanosecond: Int = this.nanosecond): DateTime fun copy(year: Int = this.year, month: Month = this.month, dayOfMonth: Int = this.dayOfMonth, hour: Int = this.hour, minute: Int = this.minute, second: Int = this.second, nanosecond: Int = this.nanosecond): DateTime fun copy(year: Int = this.year, monthNumber: Int , dayOfMonth: Int = this.dayOfMonth, hour: Int = this.hour, minute: Int = this.minute, second: Int = this.second, nanosecond: Int = this.nanosecond): DateTime Return a copy of this DateTime , replacing individual components with new values as desired. Exceptions DateTimeException - if the resulting date-time is invalid","title":"Copy"},{"location":"api/core/io.islandtime/-date-time/copy/#copy","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun copy(date: Date = this.date, time: Time = this.time): DateTime fun copy(year: Int = this.year, dayOfYear: Int = this.dayOfYear, hour: Int = this.hour, minute: Int = this.minute, second: Int = this.second, nanosecond: Int = this.nanosecond): DateTime fun copy(year: Int = this.year, month: Month = this.month, dayOfMonth: Int = this.dayOfMonth, hour: Int = this.hour, minute: Int = this.minute, second: Int = this.second, nanosecond: Int = this.nanosecond): DateTime fun copy(year: Int = this.year, monthNumber: Int , dayOfMonth: Int = this.dayOfMonth, hour: Int = this.hour, minute: Int = this.minute, second: Int = this.second, nanosecond: Int = this.nanosecond): DateTime Return a copy of this DateTime , replacing individual components with new values as desired.","title":"copy"},{"location":"api/core/io.islandtime/-date-time/copy/#exceptions","text":"DateTimeException - if the resulting date-time is invalid","title":"Exceptions"},{"location":"api/core/io.islandtime/-date-time/date/","text":"core / io.islandtime / DateTime / date date (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val date: Date The date.","title":"Date"},{"location":"api/core/io.islandtime/-date-time/date/#date","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val date: Date The date.","title":"date"},{"location":"api/core/io.islandtime/-date-time/day-of-month/","text":"core / io.islandtime / DateTime / dayOfMonth dayOfMonth (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline val dayOfMonth: Int The day of the month.","title":"Day of month"},{"location":"api/core/io.islandtime/-date-time/day-of-month/#dayofmonth","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline val dayOfMonth: Int The day of the month.","title":"dayOfMonth"},{"location":"api/core/io.islandtime/-date-time/day-of-week/","text":"core / io.islandtime / DateTime / dayOfWeek dayOfWeek (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline val dayOfWeek: DayOfWeek The day of the week.","title":"Day of week"},{"location":"api/core/io.islandtime/-date-time/day-of-week/#dayofweek","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline val dayOfWeek: DayOfWeek The day of the week.","title":"dayOfWeek"},{"location":"api/core/io.islandtime/-date-time/day-of-year/","text":"core / io.islandtime / DateTime / dayOfYear dayOfYear (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline val dayOfYear: Int The day of the year -- also known as the ordinal date in ISO-8601.","title":"Day of year"},{"location":"api/core/io.islandtime/-date-time/day-of-year/#dayofyear","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline val dayOfYear: Int The day of the year -- also known as the ordinal date in ISO-8601.","title":"dayOfYear"},{"location":"api/core/io.islandtime/-date-time/equals/","text":"core / io.islandtime / DateTime / equals equals (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun equals(other: Any ?): Boolean","title":"Equals"},{"location":"api/core/io.islandtime/-date-time/equals/#equals","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun equals(other: Any ?): Boolean","title":"equals"},{"location":"api/core/io.islandtime/-date-time/from-millisecond-of-unix-epoch/","text":"core / io.islandtime / DateTime / fromMillisecondOfUnixEpoch fromMillisecondOfUnixEpoch (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun fromMillisecondOfUnixEpoch(millisecond: Long , offset: UtcOffset ): DateTime Create a DateTime from the millisecond of the Unix epoch at offset .","title":"From millisecond of unix epoch"},{"location":"api/core/io.islandtime/-date-time/from-millisecond-of-unix-epoch/#frommillisecondofunixepoch","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun fromMillisecondOfUnixEpoch(millisecond: Long , offset: UtcOffset ): DateTime Create a DateTime from the millisecond of the Unix epoch at offset .","title":"fromMillisecondOfUnixEpoch"},{"location":"api/core/io.islandtime/-date-time/from-milliseconds-since-unix-epoch/","text":"core / io.islandtime / DateTime / fromMillisecondsSinceUnixEpoch fromMillisecondsSinceUnixEpoch (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun fromMillisecondsSinceUnixEpoch(millisecondsSinceUnixEpoch: LongMilliseconds , offset: UtcOffset ): DateTime Create a DateTime from a duration of milliseconds relative to the Unix epoch at offset .","title":"From milliseconds since unix epoch"},{"location":"api/core/io.islandtime/-date-time/from-milliseconds-since-unix-epoch/#frommillisecondssinceunixepoch","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun fromMillisecondsSinceUnixEpoch(millisecondsSinceUnixEpoch: LongMilliseconds , offset: UtcOffset ): DateTime Create a DateTime from a duration of milliseconds relative to the Unix epoch at offset .","title":"fromMillisecondsSinceUnixEpoch"},{"location":"api/core/io.islandtime/-date-time/from-second-of-unix-epoch/","text":"core / io.islandtime / DateTime / fromSecondOfUnixEpoch fromSecondOfUnixEpoch (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun fromSecondOfUnixEpoch(second: Long , nanosecond: Int = 0, offset: UtcOffset ): DateTime Create a DateTime from the second of the Unix epoch at offset and optionally, the nanosecond of the second.","title":"From second of unix epoch"},{"location":"api/core/io.islandtime/-date-time/from-second-of-unix-epoch/#fromsecondofunixepoch","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun fromSecondOfUnixEpoch(second: Long , nanosecond: Int = 0, offset: UtcOffset ): DateTime Create a DateTime from the second of the Unix epoch at offset and optionally, the nanosecond of the second.","title":"fromSecondOfUnixEpoch"},{"location":"api/core/io.islandtime/-date-time/from-seconds-since-unix-epoch/","text":"core / io.islandtime / DateTime / fromSecondsSinceUnixEpoch fromSecondsSinceUnixEpoch (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun fromSecondsSinceUnixEpoch(secondsSinceUnixEpoch: LongSeconds , nanosecondAdjustment: IntNanoseconds = 0.nanoseconds, offset: UtcOffset ): DateTime Create a DateTime from a duration of seconds relative to the Unix epoch at offset , optionally, with some number of additional nanoseconds added to it.","title":"From seconds since unix epoch"},{"location":"api/core/io.islandtime/-date-time/from-seconds-since-unix-epoch/#fromsecondssinceunixepoch","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun fromSecondsSinceUnixEpoch(secondsSinceUnixEpoch: LongSeconds , nanosecondAdjustment: IntNanoseconds = 0.nanoseconds, offset: UtcOffset ): DateTime Create a DateTime from a duration of seconds relative to the Unix epoch at offset , optionally, with some number of additional nanoseconds added to it.","title":"fromSecondsSinceUnixEpoch"},{"location":"api/core/io.islandtime/-date-time/from-unix-epoch-millisecond/","text":"core / io.islandtime / DateTime / fromUnixEpochMillisecond fromUnixEpochMillisecond (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun ~~fromUnixEpochMillisecond~~(millisecond: Long , offset: UtcOffset ): DateTime Deprecated: Use fromMillisecondOfUnixEpoch() instead.","title":"From unix epoch millisecond"},{"location":"api/core/io.islandtime/-date-time/from-unix-epoch-millisecond/#fromunixepochmillisecond","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun ~~fromUnixEpochMillisecond~~(millisecond: Long , offset: UtcOffset ): DateTime Deprecated: Use fromMillisecondOfUnixEpoch() instead.","title":"fromUnixEpochMillisecond"},{"location":"api/core/io.islandtime/-date-time/from-unix-epoch-second/","text":"core / io.islandtime / DateTime / fromUnixEpochSecond fromUnixEpochSecond (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun ~~fromUnixEpochSecond~~(second: Long , nanosecondAdjustment: Int = 0, offset: UtcOffset ): DateTime Deprecated: Use fromSecondOfUnixEpoch() instead.","title":"From unix epoch second"},{"location":"api/core/io.islandtime/-date-time/from-unix-epoch-second/#fromunixepochsecond","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun ~~fromUnixEpochSecond~~(second: Long , nanosecondAdjustment: Int = 0, offset: UtcOffset ): DateTime Deprecated: Use fromSecondOfUnixEpoch() instead.","title":"fromUnixEpochSecond"},{"location":"api/core/io.islandtime/-date-time/hash-code/","text":"core / io.islandtime / DateTime / hashCode hashCode (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun hashCode(): Int","title":"Hash code"},{"location":"api/core/io.islandtime/-date-time/hash-code/#hashcode","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun hashCode(): Int","title":"hashCode"},{"location":"api/core/io.islandtime/-date-time/hour/","text":"core / io.islandtime / DateTime / hour hour (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline val hour: Int The hour of the day.","title":"Hour"},{"location":"api/core/io.islandtime/-date-time/hour/#hour","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline val hour: Int The hour of the day.","title":"hour"},{"location":"api/core/io.islandtime/-date-time/instant-at/","text":"core / io.islandtime / DateTime / instantAt instantAt (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun instantAt(offset: UtcOffset ): Instant The Instant represented by this date-time at a particular offset from UTC. Parameters offset - the offset from UTC","title":"Instant at"},{"location":"api/core/io.islandtime/-date-time/instant-at/#instantat","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun instantAt(offset: UtcOffset ): Instant The Instant represented by this date-time at a particular offset from UTC.","title":"instantAt"},{"location":"api/core/io.islandtime/-date-time/instant-at/#parameters","text":"offset - the offset from UTC","title":"Parameters"},{"location":"api/core/io.islandtime/-date-time/is-in-leap-year/","text":"core / io.islandtime / DateTime / isInLeapYear isInLeapYear (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline val isInLeapYear: Boolean Check if this date falls within a leap year.","title":"Is in leap year"},{"location":"api/core/io.islandtime/-date-time/is-in-leap-year/#isinleapyear","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline val isInLeapYear: Boolean Check if this date falls within a leap year.","title":"isInLeapYear"},{"location":"api/core/io.islandtime/-date-time/is-leap-day/","text":"core / io.islandtime / DateTime / isLeapDay isLeapDay (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline val isLeapDay: Boolean Check if this is a leap day.","title":"Is leap day"},{"location":"api/core/io.islandtime/-date-time/is-leap-day/#isleapday","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline val isLeapDay: Boolean Check if this is a leap day.","title":"isLeapDay"},{"location":"api/core/io.islandtime/-date-time/length-of-month/","text":"core / io.islandtime / DateTime / lengthOfMonth lengthOfMonth (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline val lengthOfMonth: IntDays The length of the date's month in days.","title":"Length of month"},{"location":"api/core/io.islandtime/-date-time/length-of-month/#lengthofmonth","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline val lengthOfMonth: IntDays The length of the date's month in days.","title":"lengthOfMonth"},{"location":"api/core/io.islandtime/-date-time/length-of-year/","text":"core / io.islandtime / DateTime / lengthOfYear lengthOfYear (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline val lengthOfYear: IntDays The length of the date's year in days.","title":"Length of year"},{"location":"api/core/io.islandtime/-date-time/length-of-year/#lengthofyear","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline val lengthOfYear: IntDays The length of the date's year in days.","title":"lengthOfYear"},{"location":"api/core/io.islandtime/-date-time/millisecond-of-unix-epoch-at/","text":"core / io.islandtime / DateTime / millisecondOfUnixEpochAt millisecondOfUnixEpochAt (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun millisecondOfUnixEpochAt(offset: UtcOffset ): Long The millisecond of the Unix epoch. Parameters offset - the offset from UTC","title":"Millisecond of unix epoch at"},{"location":"api/core/io.islandtime/-date-time/millisecond-of-unix-epoch-at/#millisecondofunixepochat","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun millisecondOfUnixEpochAt(offset: UtcOffset ): Long The millisecond of the Unix epoch.","title":"millisecondOfUnixEpochAt"},{"location":"api/core/io.islandtime/-date-time/millisecond-of-unix-epoch-at/#parameters","text":"offset - the offset from UTC","title":"Parameters"},{"location":"api/core/io.islandtime/-date-time/milliseconds-since-unix-epoch-at/","text":"core / io.islandtime / DateTime / millisecondsSinceUnixEpochAt millisecondsSinceUnixEpochAt (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun millisecondsSinceUnixEpochAt(offset: UtcOffset ): LongMilliseconds The number of milliseconds relative to the Unix epoch of 1970-01-01T00:00Z at a particular offset. This is a \"floor\" value, so 1 nanosecond before the Unix epoch will be at a distance of 1 millisecond. Parameters offset - the offset from UTC","title":"Milliseconds since unix epoch at"},{"location":"api/core/io.islandtime/-date-time/milliseconds-since-unix-epoch-at/#millisecondssinceunixepochat","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun millisecondsSinceUnixEpochAt(offset: UtcOffset ): LongMilliseconds The number of milliseconds relative to the Unix epoch of 1970-01-01T00:00Z at a particular offset. This is a \"floor\" value, so 1 nanosecond before the Unix epoch will be at a distance of 1 millisecond.","title":"millisecondsSinceUnixEpochAt"},{"location":"api/core/io.islandtime/-date-time/milliseconds-since-unix-epoch-at/#parameters","text":"offset - the offset from UTC","title":"Parameters"},{"location":"api/core/io.islandtime/-date-time/minus/","text":"core / io.islandtime / DateTime / minus minus (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun minus(period: Period ): DateTime Return a DateTime with period subtracted from it. Years are subtracted first, then months, then days. If the day exceeds the maximum month length at any step, it will be coerced into the valid range. This behavior is consistent with the order of operations for period addition as defined in ISO-8601-2. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun minus(duration: Duration ): DateTime operator fun minus(years: IntYears ): DateTime operator fun minus(years: LongYears ): DateTime operator fun minus(months: IntMonths ): DateTime operator fun minus(months: LongMonths ): DateTime operator fun minus(weeks: IntWeeks ): DateTime operator fun minus(weeks: LongWeeks ): DateTime operator fun minus(days: IntDays ): DateTime operator fun minus(days: LongDays ): DateTime operator fun minus(hours: IntHours ): DateTime operator fun minus(hours: LongHours ): DateTime operator fun minus(minutes: IntMinutes ): DateTime operator fun minus(minutes: LongMinutes ): DateTime operator fun minus(seconds: IntSeconds ): DateTime operator fun minus(seconds: LongSeconds ): DateTime operator fun minus(milliseconds: IntMilliseconds ): DateTime operator fun minus(milliseconds: LongMilliseconds ): DateTime operator fun minus(microseconds: IntMicroseconds ): DateTime operator fun minus(microseconds: LongMicroseconds ): DateTime operator fun minus(nanoseconds: IntNanoseconds ): DateTime operator fun minus(nanoseconds: LongNanoseconds ): DateTime","title":"Minus"},{"location":"api/core/io.islandtime/-date-time/minus/#minus","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun minus(period: Period ): DateTime Return a DateTime with period subtracted from it. Years are subtracted first, then months, then days. If the day exceeds the maximum month length at any step, it will be coerced into the valid range. This behavior is consistent with the order of operations for period addition as defined in ISO-8601-2. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun minus(duration: Duration ): DateTime operator fun minus(years: IntYears ): DateTime operator fun minus(years: LongYears ): DateTime operator fun minus(months: IntMonths ): DateTime operator fun minus(months: LongMonths ): DateTime operator fun minus(weeks: IntWeeks ): DateTime operator fun minus(weeks: LongWeeks ): DateTime operator fun minus(days: IntDays ): DateTime operator fun minus(days: LongDays ): DateTime operator fun minus(hours: IntHours ): DateTime operator fun minus(hours: LongHours ): DateTime operator fun minus(minutes: IntMinutes ): DateTime operator fun minus(minutes: LongMinutes ): DateTime operator fun minus(seconds: IntSeconds ): DateTime operator fun minus(seconds: LongSeconds ): DateTime operator fun minus(milliseconds: IntMilliseconds ): DateTime operator fun minus(milliseconds: LongMilliseconds ): DateTime operator fun minus(microseconds: IntMicroseconds ): DateTime operator fun minus(microseconds: LongMicroseconds ): DateTime operator fun minus(nanoseconds: IntNanoseconds ): DateTime operator fun minus(nanoseconds: LongNanoseconds ): DateTime","title":"minus"},{"location":"api/core/io.islandtime/-date-time/minute/","text":"core / io.islandtime / DateTime / minute minute (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline val minute: Int The minute of the hour.","title":"Minute"},{"location":"api/core/io.islandtime/-date-time/minute/#minute","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline val minute: Int The minute of the hour.","title":"minute"},{"location":"api/core/io.islandtime/-date-time/month-number/","text":"core / io.islandtime / DateTime / monthNumber monthNumber (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline val monthNumber: Int The ISO month number, from 1-12.","title":"Month number"},{"location":"api/core/io.islandtime/-date-time/month-number/#monthnumber","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline val monthNumber: Int The ISO month number, from 1-12.","title":"monthNumber"},{"location":"api/core/io.islandtime/-date-time/month/","text":"core / io.islandtime / DateTime / month month (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline val month: Month The month of the year.","title":"Month"},{"location":"api/core/io.islandtime/-date-time/month/#month","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline val month: Month The month of the year.","title":"month"},{"location":"api/core/io.islandtime/-date-time/nano-of-seconds-since-unix-epoch/","text":"core / io.islandtime / DateTime / nanoOfSecondsSinceUnixEpoch nanoOfSecondsSinceUnixEpoch (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val ~~nanoOfSecondsSinceUnixEpoch~~: IntNanoseconds Deprecated: Use additionalNanosecondsSinceUnixEpoch instead.","title":"Nano of seconds since unix epoch"},{"location":"api/core/io.islandtime/-date-time/nano-of-seconds-since-unix-epoch/#nanoofsecondssinceunixepoch","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val ~~nanoOfSecondsSinceUnixEpoch~~: IntNanoseconds Deprecated: Use additionalNanosecondsSinceUnixEpoch instead.","title":"nanoOfSecondsSinceUnixEpoch"},{"location":"api/core/io.islandtime/-date-time/nanosecond/","text":"core / io.islandtime / DateTime / nanosecond nanosecond (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline val nanosecond: Int The nanosecond of the second.","title":"Nanosecond"},{"location":"api/core/io.islandtime/-date-time/nanosecond/#nanosecond","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline val nanosecond: Int The nanosecond of the second.","title":"nanosecond"},{"location":"api/core/io.islandtime/-date-time/plus/","text":"core / io.islandtime / DateTime / plus plus (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun plus(period: Period ): DateTime Return a DateTime with period added to it. Years are added first, then months, then days. If the day exceeds the maximum month length at any step, it will be coerced into the valid range. This behavior is consistent with the order of operations for period addition as defined in ISO-8601-2. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun plus(duration: Duration ): DateTime operator fun plus(years: IntYears ): DateTime operator fun plus(years: LongYears ): DateTime operator fun plus(months: IntMonths ): DateTime operator fun plus(months: LongMonths ): DateTime operator fun plus(weeks: IntWeeks ): DateTime operator fun plus(weeks: LongWeeks ): DateTime operator fun plus(days: IntDays ): DateTime operator fun plus(days: LongDays ): DateTime operator fun plus(hours: IntHours ): DateTime operator fun plus(hours: LongHours ): DateTime operator fun plus(minutes: IntMinutes ): DateTime operator fun plus(minutes: LongMinutes ): DateTime operator fun plus(seconds: IntSeconds ): DateTime operator fun plus(seconds: LongSeconds ): DateTime operator fun plus(milliseconds: IntMilliseconds ): DateTime operator fun plus(milliseconds: LongMilliseconds ): DateTime operator fun plus(microseconds: IntMicroseconds ): DateTime operator fun plus(microseconds: LongMicroseconds ): DateTime operator fun plus(nanoseconds: IntNanoseconds ): DateTime operator fun plus(nanoseconds: LongNanoseconds ): DateTime","title":"Plus"},{"location":"api/core/io.islandtime/-date-time/plus/#plus","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun plus(period: Period ): DateTime Return a DateTime with period added to it. Years are added first, then months, then days. If the day exceeds the maximum month length at any step, it will be coerced into the valid range. This behavior is consistent with the order of operations for period addition as defined in ISO-8601-2. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun plus(duration: Duration ): DateTime operator fun plus(years: IntYears ): DateTime operator fun plus(years: LongYears ): DateTime operator fun plus(months: IntMonths ): DateTime operator fun plus(months: LongMonths ): DateTime operator fun plus(weeks: IntWeeks ): DateTime operator fun plus(weeks: LongWeeks ): DateTime operator fun plus(days: IntDays ): DateTime operator fun plus(days: LongDays ): DateTime operator fun plus(hours: IntHours ): DateTime operator fun plus(hours: LongHours ): DateTime operator fun plus(minutes: IntMinutes ): DateTime operator fun plus(minutes: LongMinutes ): DateTime operator fun plus(seconds: IntSeconds ): DateTime operator fun plus(seconds: LongSeconds ): DateTime operator fun plus(milliseconds: IntMilliseconds ): DateTime operator fun plus(milliseconds: LongMilliseconds ): DateTime operator fun plus(microseconds: IntMicroseconds ): DateTime operator fun plus(microseconds: LongMicroseconds ): DateTime operator fun plus(nanoseconds: IntNanoseconds ): DateTime operator fun plus(nanoseconds: LongNanoseconds ): DateTime","title":"plus"},{"location":"api/core/io.islandtime/-date-time/range-to/","text":"core / io.islandtime / DateTime / rangeTo rangeTo (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun rangeTo(other: DateTime ): DateTimeInterval","title":"Range to"},{"location":"api/core/io.islandtime/-date-time/range-to/#rangeto","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun rangeTo(other: DateTime ): DateTimeInterval","title":"rangeTo"},{"location":"api/core/io.islandtime/-date-time/second-of-unix-epoch-at/","text":"core / io.islandtime / DateTime / secondOfUnixEpochAt secondOfUnixEpochAt (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun secondOfUnixEpochAt(offset: UtcOffset ): Long The second of the Unix epoch. Parameters offset - the offset from UTC See Also additionalNanosecondsSinceUnixEpoch","title":"Second of unix epoch at"},{"location":"api/core/io.islandtime/-date-time/second-of-unix-epoch-at/#secondofunixepochat","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun secondOfUnixEpochAt(offset: UtcOffset ): Long The second of the Unix epoch.","title":"secondOfUnixEpochAt"},{"location":"api/core/io.islandtime/-date-time/second-of-unix-epoch-at/#parameters","text":"offset - the offset from UTC See Also additionalNanosecondsSinceUnixEpoch","title":"Parameters"},{"location":"api/core/io.islandtime/-date-time/second/","text":"core / io.islandtime / DateTime / second second (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline val second: Int The second of the minute.","title":"Second"},{"location":"api/core/io.islandtime/-date-time/second/#second","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline val second: Int The second of the minute.","title":"second"},{"location":"api/core/io.islandtime/-date-time/seconds-since-unix-epoch-at/","text":"core / io.islandtime / DateTime / secondsSinceUnixEpochAt secondsSinceUnixEpochAt (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun secondsSinceUnixEpochAt(offset: UtcOffset ): LongSeconds The number of seconds relative to the Unix epoch of 1970-01-01T00:00Z at a particular offset. This is a \"floor\" value, so 1 nanosecond before the Unix epoch will be at a distance of 1 second. Parameters offset - the offset from UTC See Also additionalNanosecondsSinceUnixEpoch","title":"Seconds since unix epoch at"},{"location":"api/core/io.islandtime/-date-time/seconds-since-unix-epoch-at/#secondssinceunixepochat","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun secondsSinceUnixEpochAt(offset: UtcOffset ): LongSeconds The number of seconds relative to the Unix epoch of 1970-01-01T00:00Z at a particular offset. This is a \"floor\" value, so 1 nanosecond before the Unix epoch will be at a distance of 1 second.","title":"secondsSinceUnixEpochAt"},{"location":"api/core/io.islandtime/-date-time/seconds-since-unix-epoch-at/#parameters","text":"offset - the offset from UTC See Also additionalNanosecondsSinceUnixEpoch","title":"Parameters"},{"location":"api/core/io.islandtime/-date-time/time/","text":"core / io.islandtime / DateTime / time time (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val time: Time The time of day.","title":"Time"},{"location":"api/core/io.islandtime/-date-time/time/#time","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val time: Time The time of day.","title":"time"},{"location":"api/core/io.islandtime/-date-time/to-string/","text":"core / io.islandtime / DateTime / toString toString (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toString(): <ERROR CLASS> (jvm) fun toString(): String","title":"To string"},{"location":"api/core/io.islandtime/-date-time/to-string/#tostring","text":"(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toString(): <ERROR CLASS> (jvm) fun toString(): String","title":"toString"},{"location":"api/core/io.islandtime/-date-time/unix-epoch-millisecond-at/","text":"core / io.islandtime / DateTime / unixEpochMillisecondAt unixEpochMillisecondAt (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun ~~unixEpochMillisecondAt~~(offset: UtcOffset ): Long Deprecated: Use millisecondOfUnixEpoch() instead.","title":"Unix epoch millisecond at"},{"location":"api/core/io.islandtime/-date-time/unix-epoch-millisecond-at/#unixepochmillisecondat","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun ~~unixEpochMillisecondAt~~(offset: UtcOffset ): Long Deprecated: Use millisecondOfUnixEpoch() instead.","title":"unixEpochMillisecondAt"},{"location":"api/core/io.islandtime/-date-time/unix-epoch-nano-of-second/","text":"core / io.islandtime / DateTime / unixEpochNanoOfSecond unixEpochNanoOfSecond (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val ~~unixEpochNanoOfSecond~~: Int Deprecated: Use nanosecond instead.","title":"Unix epoch nano of second"},{"location":"api/core/io.islandtime/-date-time/unix-epoch-nano-of-second/#unixepochnanoofsecond","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val ~~unixEpochNanoOfSecond~~: Int Deprecated: Use nanosecond instead.","title":"unixEpochNanoOfSecond"},{"location":"api/core/io.islandtime/-date-time/unix-epoch-second-at/","text":"core / io.islandtime / DateTime / unixEpochSecondAt unixEpochSecondAt (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun ~~unixEpochSecondAt~~(offset: UtcOffset ): Long Deprecated: Use secondOfUnixEpochAt() instead.","title":"Unix epoch second at"},{"location":"api/core/io.islandtime/-date-time/unix-epoch-second-at/#unixepochsecondat","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun ~~unixEpochSecondAt~~(offset: UtcOffset ): Long Deprecated: Use secondOfUnixEpochAt() instead.","title":"unixEpochSecondAt"},{"location":"api/core/io.islandtime/-date-time/year-month/","text":"core / io.islandtime / DateTime / yearMonth yearMonth (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline val yearMonth: YearMonth The combined year and month.","title":"Year month"},{"location":"api/core/io.islandtime/-date-time/year-month/#yearmonth","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline val yearMonth: YearMonth The combined year and month.","title":"yearMonth"},{"location":"api/core/io.islandtime/-date-time/year/","text":"core / io.islandtime / DateTime / year year (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline val year: Int The year.","title":"Year"},{"location":"api/core/io.islandtime/-date-time/year/#year","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline val year: Int The year.","title":"year"},{"location":"api/core/io.islandtime/-date-time-exception/","text":"core / io.islandtime / DateTimeException DateTimeException (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) open class DateTimeException (jvm) open class DateTimeException : Exception Constructors Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init> <init>(message: String ? = null, cause: Throwable ? = null) Inheritors Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) DateTimeParseException class DateTimeParseException : DateTimeException (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) TimeZoneRulesException class TimeZoneRulesException : DateTimeException","title":"Index"},{"location":"api/core/io.islandtime/-date-time-exception/#datetimeexception","text":"(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) open class DateTimeException (jvm) open class DateTimeException : Exception","title":"DateTimeException"},{"location":"api/core/io.islandtime/-date-time-exception/#constructors","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init> <init>(message: String ? = null, cause: Throwable ? = null)","title":"Constructors"},{"location":"api/core/io.islandtime/-date-time-exception/#inheritors","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) DateTimeParseException class DateTimeParseException : DateTimeException (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) TimeZoneRulesException class TimeZoneRulesException : DateTimeException","title":"Inheritors"},{"location":"api/core/io.islandtime/-date-time-exception/-init-/","text":"core / io.islandtime / DateTimeException / <init> <init> (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init>(message: String ? = null, cause: Throwable ? = null)","title":" init "},{"location":"api/core/io.islandtime/-date-time-exception/-init-/#init","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init>(message: String ? = null, cause: Throwable ? = null)","title":"&lt;init&gt;"},{"location":"api/core/io.islandtime/-day-of-week/","text":"core / io.islandtime / DayOfWeek DayOfWeek (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) enum class DayOfWeek A day of the week. Enum Values Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MONDAY (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) TUESDAY (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) WEDNESDAY (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) THURSDAY (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) FRIDAY (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) SATURDAY (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) SUNDAY Properties Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) number The ISO day of week number. val number: Int Functions Name Summary displayName A textual representation of the day, suitable for display purposes. The localized name will be returned, if available. If not, the ISO day of week number will be returned instead.(jvm) fun displayName(style: TextStyle , locale: Locale = defaultLocale()): String (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun displayName(style: TextStyle , locale: <ERROR CLASS> = defaultLocale()): String localizedName The localized name of the day, if available for the locale in the specified style. The result depends on the configured DateTimeTextProvider and may differ between platforms.(jvm) fun localizedName(style: TextStyle , locale: Locale = defaultLocale()): String ? (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun localizedName(style: TextStyle , locale: <ERROR CLASS> = defaultLocale()): String ? (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) minus Subtract days from this day of the week, wrapping when the beginning or end of the week is reached. operator fun minus(days: IntDays ): DayOfWeek operator fun minus(days: LongDays ): DayOfWeek number The day of week number (1-7) according to the specified locale. Typically, the week will start on either Monday, Sunday, or Saturday. The number returned may differ between platforms.(jvm) fun number(locale: Locale ): Int (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun number(locale: <ERROR CLASS>): Int The day of week number (1-7) according to the provided settings . Typically, the week will start on either Monday, Sunday, or Saturday.(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun number(settings: WeekSettings ): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) plus Add days to this day of the week, wrapping when the beginning or end of the week is reached. operator fun plus(days: IntDays ): DayOfWeek operator fun plus(days: LongDays ): DayOfWeek Companion Object Properties Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MAX val MAX: DayOfWeek (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MIN val MIN: DayOfWeek Inheritors Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) FRIDAY (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MONDAY (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) SATURDAY (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) SUNDAY (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) THURSDAY (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) TUESDAY (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) WEDNESDAY","title":"Index"},{"location":"api/core/io.islandtime/-day-of-week/#dayofweek","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) enum class DayOfWeek A day of the week.","title":"DayOfWeek"},{"location":"api/core/io.islandtime/-day-of-week/#enum-values","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MONDAY (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) TUESDAY (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) WEDNESDAY (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) THURSDAY (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) FRIDAY (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) SATURDAY (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) SUNDAY","title":"Enum Values"},{"location":"api/core/io.islandtime/-day-of-week/#properties","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) number The ISO day of week number. val number: Int","title":"Properties"},{"location":"api/core/io.islandtime/-day-of-week/#functions","text":"Name Summary displayName A textual representation of the day, suitable for display purposes. The localized name will be returned, if available. If not, the ISO day of week number will be returned instead.(jvm) fun displayName(style: TextStyle , locale: Locale = defaultLocale()): String (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun displayName(style: TextStyle , locale: <ERROR CLASS> = defaultLocale()): String localizedName The localized name of the day, if available for the locale in the specified style. The result depends on the configured DateTimeTextProvider and may differ between platforms.(jvm) fun localizedName(style: TextStyle , locale: Locale = defaultLocale()): String ? (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun localizedName(style: TextStyle , locale: <ERROR CLASS> = defaultLocale()): String ? (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) minus Subtract days from this day of the week, wrapping when the beginning or end of the week is reached. operator fun minus(days: IntDays ): DayOfWeek operator fun minus(days: LongDays ): DayOfWeek number The day of week number (1-7) according to the specified locale. Typically, the week will start on either Monday, Sunday, or Saturday. The number returned may differ between platforms.(jvm) fun number(locale: Locale ): Int (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun number(locale: <ERROR CLASS>): Int The day of week number (1-7) according to the provided settings . Typically, the week will start on either Monday, Sunday, or Saturday.(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun number(settings: WeekSettings ): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) plus Add days to this day of the week, wrapping when the beginning or end of the week is reached. operator fun plus(days: IntDays ): DayOfWeek operator fun plus(days: LongDays ): DayOfWeek","title":"Functions"},{"location":"api/core/io.islandtime/-day-of-week/#companion-object-properties","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MAX val MAX: DayOfWeek (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MIN val MIN: DayOfWeek","title":"Companion Object Properties"},{"location":"api/core/io.islandtime/-day-of-week/#inheritors","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) FRIDAY (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MONDAY (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) SATURDAY (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) SUNDAY (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) THURSDAY (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) TUESDAY (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) WEDNESDAY","title":"Inheritors"},{"location":"api/core/io.islandtime/-day-of-week/-f-r-i-d-a-y/","text":"core / io.islandtime / DayOfWeek / FRIDAY FRIDAY (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) FRIDAY Inherited Functions Name Summary (jvm) displayName A textual representation of the day, suitable for display purposes. The localized name will be returned, if available. If not, the ISO day of week number will be returned instead. fun displayName(style: TextStyle , locale: Locale = defaultLocale()): String (jvm) localizedName The localized name of the day, if available for the locale in the specified style. The result depends on the configured DateTimeTextProvider and may differ between platforms. fun localizedName(style: TextStyle , locale: Locale = defaultLocale()): String ? (jvm) number The day of week number (1-7) according to the specified locale. Typically, the week will start on either Monday, Sunday, or Saturday. The number returned may differ between platforms. fun number(locale: Locale ): Int","title":" f r i d a y"},{"location":"api/core/io.islandtime/-day-of-week/-f-r-i-d-a-y/#friday","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) FRIDAY","title":"FRIDAY"},{"location":"api/core/io.islandtime/-day-of-week/-f-r-i-d-a-y/#inherited-functions","text":"Name Summary (jvm) displayName A textual representation of the day, suitable for display purposes. The localized name will be returned, if available. If not, the ISO day of week number will be returned instead. fun displayName(style: TextStyle , locale: Locale = defaultLocale()): String (jvm) localizedName The localized name of the day, if available for the locale in the specified style. The result depends on the configured DateTimeTextProvider and may differ between platforms. fun localizedName(style: TextStyle , locale: Locale = defaultLocale()): String ? (jvm) number The day of week number (1-7) according to the specified locale. Typically, the week will start on either Monday, Sunday, or Saturday. The number returned may differ between platforms. fun number(locale: Locale ): Int","title":"Inherited Functions"},{"location":"api/core/io.islandtime/-day-of-week/-m-a-x/","text":"core / io.islandtime / DayOfWeek / MAX MAX (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline val MAX: DayOfWeek","title":" m a x"},{"location":"api/core/io.islandtime/-day-of-week/-m-a-x/#max","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline val MAX: DayOfWeek","title":"MAX"},{"location":"api/core/io.islandtime/-day-of-week/-m-i-n/","text":"core / io.islandtime / DayOfWeek / MIN MIN (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline val MIN: DayOfWeek","title":" m i n"},{"location":"api/core/io.islandtime/-day-of-week/-m-i-n/#min","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline val MIN: DayOfWeek","title":"MIN"},{"location":"api/core/io.islandtime/-day-of-week/-m-o-n-d-a-y/","text":"core / io.islandtime / DayOfWeek / MONDAY MONDAY (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MONDAY Inherited Functions Name Summary (jvm) displayName A textual representation of the day, suitable for display purposes. The localized name will be returned, if available. If not, the ISO day of week number will be returned instead. fun displayName(style: TextStyle , locale: Locale = defaultLocale()): String (jvm) localizedName The localized name of the day, if available for the locale in the specified style. The result depends on the configured DateTimeTextProvider and may differ between platforms. fun localizedName(style: TextStyle , locale: Locale = defaultLocale()): String ? (jvm) number The day of week number (1-7) according to the specified locale. Typically, the week will start on either Monday, Sunday, or Saturday. The number returned may differ between platforms. fun number(locale: Locale ): Int","title":" m o n d a y"},{"location":"api/core/io.islandtime/-day-of-week/-m-o-n-d-a-y/#monday","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MONDAY","title":"MONDAY"},{"location":"api/core/io.islandtime/-day-of-week/-m-o-n-d-a-y/#inherited-functions","text":"Name Summary (jvm) displayName A textual representation of the day, suitable for display purposes. The localized name will be returned, if available. If not, the ISO day of week number will be returned instead. fun displayName(style: TextStyle , locale: Locale = defaultLocale()): String (jvm) localizedName The localized name of the day, if available for the locale in the specified style. The result depends on the configured DateTimeTextProvider and may differ between platforms. fun localizedName(style: TextStyle , locale: Locale = defaultLocale()): String ? (jvm) number The day of week number (1-7) according to the specified locale. Typically, the week will start on either Monday, Sunday, or Saturday. The number returned may differ between platforms. fun number(locale: Locale ): Int","title":"Inherited Functions"},{"location":"api/core/io.islandtime/-day-of-week/-s-a-t-u-r-d-a-y/","text":"core / io.islandtime / DayOfWeek / SATURDAY SATURDAY (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) SATURDAY Inherited Functions Name Summary (jvm) displayName A textual representation of the day, suitable for display purposes. The localized name will be returned, if available. If not, the ISO day of week number will be returned instead. fun displayName(style: TextStyle , locale: Locale = defaultLocale()): String (jvm) localizedName The localized name of the day, if available for the locale in the specified style. The result depends on the configured DateTimeTextProvider and may differ between platforms. fun localizedName(style: TextStyle , locale: Locale = defaultLocale()): String ? (jvm) number The day of week number (1-7) according to the specified locale. Typically, the week will start on either Monday, Sunday, or Saturday. The number returned may differ between platforms. fun number(locale: Locale ): Int","title":" s a t u r d a y"},{"location":"api/core/io.islandtime/-day-of-week/-s-a-t-u-r-d-a-y/#saturday","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) SATURDAY","title":"SATURDAY"},{"location":"api/core/io.islandtime/-day-of-week/-s-a-t-u-r-d-a-y/#inherited-functions","text":"Name Summary (jvm) displayName A textual representation of the day, suitable for display purposes. The localized name will be returned, if available. If not, the ISO day of week number will be returned instead. fun displayName(style: TextStyle , locale: Locale = defaultLocale()): String (jvm) localizedName The localized name of the day, if available for the locale in the specified style. The result depends on the configured DateTimeTextProvider and may differ between platforms. fun localizedName(style: TextStyle , locale: Locale = defaultLocale()): String ? (jvm) number The day of week number (1-7) according to the specified locale. Typically, the week will start on either Monday, Sunday, or Saturday. The number returned may differ between platforms. fun number(locale: Locale ): Int","title":"Inherited Functions"},{"location":"api/core/io.islandtime/-day-of-week/-s-u-n-d-a-y/","text":"core / io.islandtime / DayOfWeek / SUNDAY SUNDAY (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) SUNDAY Inherited Functions Name Summary (jvm) displayName A textual representation of the day, suitable for display purposes. The localized name will be returned, if available. If not, the ISO day of week number will be returned instead. fun displayName(style: TextStyle , locale: Locale = defaultLocale()): String (jvm) localizedName The localized name of the day, if available for the locale in the specified style. The result depends on the configured DateTimeTextProvider and may differ between platforms. fun localizedName(style: TextStyle , locale: Locale = defaultLocale()): String ? (jvm) number The day of week number (1-7) according to the specified locale. Typically, the week will start on either Monday, Sunday, or Saturday. The number returned may differ between platforms. fun number(locale: Locale ): Int","title":" s u n d a y"},{"location":"api/core/io.islandtime/-day-of-week/-s-u-n-d-a-y/#sunday","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) SUNDAY","title":"SUNDAY"},{"location":"api/core/io.islandtime/-day-of-week/-s-u-n-d-a-y/#inherited-functions","text":"Name Summary (jvm) displayName A textual representation of the day, suitable for display purposes. The localized name will be returned, if available. If not, the ISO day of week number will be returned instead. fun displayName(style: TextStyle , locale: Locale = defaultLocale()): String (jvm) localizedName The localized name of the day, if available for the locale in the specified style. The result depends on the configured DateTimeTextProvider and may differ between platforms. fun localizedName(style: TextStyle , locale: Locale = defaultLocale()): String ? (jvm) number The day of week number (1-7) according to the specified locale. Typically, the week will start on either Monday, Sunday, or Saturday. The number returned may differ between platforms. fun number(locale: Locale ): Int","title":"Inherited Functions"},{"location":"api/core/io.islandtime/-day-of-week/-t-h-u-r-s-d-a-y/","text":"core / io.islandtime / DayOfWeek / THURSDAY THURSDAY (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) THURSDAY Inherited Functions Name Summary (jvm) displayName A textual representation of the day, suitable for display purposes. The localized name will be returned, if available. If not, the ISO day of week number will be returned instead. fun displayName(style: TextStyle , locale: Locale = defaultLocale()): String (jvm) localizedName The localized name of the day, if available for the locale in the specified style. The result depends on the configured DateTimeTextProvider and may differ between platforms. fun localizedName(style: TextStyle , locale: Locale = defaultLocale()): String ? (jvm) number The day of week number (1-7) according to the specified locale. Typically, the week will start on either Monday, Sunday, or Saturday. The number returned may differ between platforms. fun number(locale: Locale ): Int","title":" t h u r s d a y"},{"location":"api/core/io.islandtime/-day-of-week/-t-h-u-r-s-d-a-y/#thursday","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) THURSDAY","title":"THURSDAY"},{"location":"api/core/io.islandtime/-day-of-week/-t-h-u-r-s-d-a-y/#inherited-functions","text":"Name Summary (jvm) displayName A textual representation of the day, suitable for display purposes. The localized name will be returned, if available. If not, the ISO day of week number will be returned instead. fun displayName(style: TextStyle , locale: Locale = defaultLocale()): String (jvm) localizedName The localized name of the day, if available for the locale in the specified style. The result depends on the configured DateTimeTextProvider and may differ between platforms. fun localizedName(style: TextStyle , locale: Locale = defaultLocale()): String ? (jvm) number The day of week number (1-7) according to the specified locale. Typically, the week will start on either Monday, Sunday, or Saturday. The number returned may differ between platforms. fun number(locale: Locale ): Int","title":"Inherited Functions"},{"location":"api/core/io.islandtime/-day-of-week/-t-u-e-s-d-a-y/","text":"core / io.islandtime / DayOfWeek / TUESDAY TUESDAY (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) TUESDAY Inherited Functions Name Summary (jvm) displayName A textual representation of the day, suitable for display purposes. The localized name will be returned, if available. If not, the ISO day of week number will be returned instead. fun displayName(style: TextStyle , locale: Locale = defaultLocale()): String (jvm) localizedName The localized name of the day, if available for the locale in the specified style. The result depends on the configured DateTimeTextProvider and may differ between platforms. fun localizedName(style: TextStyle , locale: Locale = defaultLocale()): String ? (jvm) number The day of week number (1-7) according to the specified locale. Typically, the week will start on either Monday, Sunday, or Saturday. The number returned may differ between platforms. fun number(locale: Locale ): Int","title":" t u e s d a y"},{"location":"api/core/io.islandtime/-day-of-week/-t-u-e-s-d-a-y/#tuesday","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) TUESDAY","title":"TUESDAY"},{"location":"api/core/io.islandtime/-day-of-week/-t-u-e-s-d-a-y/#inherited-functions","text":"Name Summary (jvm) displayName A textual representation of the day, suitable for display purposes. The localized name will be returned, if available. If not, the ISO day of week number will be returned instead. fun displayName(style: TextStyle , locale: Locale = defaultLocale()): String (jvm) localizedName The localized name of the day, if available for the locale in the specified style. The result depends on the configured DateTimeTextProvider and may differ between platforms. fun localizedName(style: TextStyle , locale: Locale = defaultLocale()): String ? (jvm) number The day of week number (1-7) according to the specified locale. Typically, the week will start on either Monday, Sunday, or Saturday. The number returned may differ between platforms. fun number(locale: Locale ): Int","title":"Inherited Functions"},{"location":"api/core/io.islandtime/-day-of-week/-w-e-d-n-e-s-d-a-y/","text":"core / io.islandtime / DayOfWeek / WEDNESDAY WEDNESDAY (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) WEDNESDAY Inherited Functions Name Summary (jvm) displayName A textual representation of the day, suitable for display purposes. The localized name will be returned, if available. If not, the ISO day of week number will be returned instead. fun displayName(style: TextStyle , locale: Locale = defaultLocale()): String (jvm) localizedName The localized name of the day, if available for the locale in the specified style. The result depends on the configured DateTimeTextProvider and may differ between platforms. fun localizedName(style: TextStyle , locale: Locale = defaultLocale()): String ? (jvm) number The day of week number (1-7) according to the specified locale. Typically, the week will start on either Monday, Sunday, or Saturday. The number returned may differ between platforms. fun number(locale: Locale ): Int","title":" w e d n e s d a y"},{"location":"api/core/io.islandtime/-day-of-week/-w-e-d-n-e-s-d-a-y/#wednesday","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) WEDNESDAY","title":"WEDNESDAY"},{"location":"api/core/io.islandtime/-day-of-week/-w-e-d-n-e-s-d-a-y/#inherited-functions","text":"Name Summary (jvm) displayName A textual representation of the day, suitable for display purposes. The localized name will be returned, if available. If not, the ISO day of week number will be returned instead. fun displayName(style: TextStyle , locale: Locale = defaultLocale()): String (jvm) localizedName The localized name of the day, if available for the locale in the specified style. The result depends on the configured DateTimeTextProvider and may differ between platforms. fun localizedName(style: TextStyle , locale: Locale = defaultLocale()): String ? (jvm) number The day of week number (1-7) according to the specified locale. Typically, the week will start on either Monday, Sunday, or Saturday. The number returned may differ between platforms. fun number(locale: Locale ): Int","title":"Inherited Functions"},{"location":"api/core/io.islandtime/-day-of-week/display-name/","text":"core / io.islandtime / DayOfWeek / displayName displayName (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun displayName(style: TextStyle , locale: <ERROR CLASS> = defaultLocale()): String A textual representation of the day, suitable for display purposes. The localized name will be returned, if available. If not, the ISO day of week number will be returned instead. The result depends on the configured DateTimeTextProvider and may differ between platforms. Parameters style - the style of text locale - the locale Return the localized name or number if unavailable for the specified locale See Also localizedName (jvm) fun displayName(style: TextStyle , locale: Locale = defaultLocale()): String A textual representation of the day, suitable for display purposes. The localized name will be returned, if available. If not, the ISO day of week number will be returned instead. The result depends on the configured DateTimeTextProvider and may differ between platforms. Parameters style - the style of text locale - the locale Return the localized name or number if unavailable for the specified locale See Also localizedName","title":"Display name"},{"location":"api/core/io.islandtime/-day-of-week/display-name/#displayname","text":"(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun displayName(style: TextStyle , locale: <ERROR CLASS> = defaultLocale()): String A textual representation of the day, suitable for display purposes. The localized name will be returned, if available. If not, the ISO day of week number will be returned instead. The result depends on the configured DateTimeTextProvider and may differ between platforms.","title":"displayName"},{"location":"api/core/io.islandtime/-day-of-week/display-name/#parameters","text":"style - the style of text locale - the locale Return the localized name or number if unavailable for the specified locale See Also localizedName (jvm) fun displayName(style: TextStyle , locale: Locale = defaultLocale()): String A textual representation of the day, suitable for display purposes. The localized name will be returned, if available. If not, the ISO day of week number will be returned instead. The result depends on the configured DateTimeTextProvider and may differ between platforms.","title":"Parameters"},{"location":"api/core/io.islandtime/-day-of-week/display-name/#parameters_1","text":"style - the style of text locale - the locale Return the localized name or number if unavailable for the specified locale See Also localizedName","title":"Parameters"},{"location":"api/core/io.islandtime/-day-of-week/localized-name/","text":"core / io.islandtime / DayOfWeek / localizedName localizedName (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun localizedName(style: TextStyle , locale: <ERROR CLASS> = defaultLocale()): String ? The localized name of the day, if available for the locale in the specified style. The result depends on the configured DateTimeTextProvider and may differ between platforms. Parameters style - the style of text locale - the locale Return the localized name or null if unavailable for the specified locale See Also displayName (jvm) fun localizedName(style: TextStyle , locale: Locale = defaultLocale()): String ? The localized name of the day, if available for the locale in the specified style. The result depends on the configured DateTimeTextProvider and may differ between platforms. Parameters style - the style of text locale - the locale Return the localized name or null if unavailable for the specified locale See Also displayName","title":"Localized name"},{"location":"api/core/io.islandtime/-day-of-week/localized-name/#localizedname","text":"(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun localizedName(style: TextStyle , locale: <ERROR CLASS> = defaultLocale()): String ? The localized name of the day, if available for the locale in the specified style. The result depends on the configured DateTimeTextProvider and may differ between platforms.","title":"localizedName"},{"location":"api/core/io.islandtime/-day-of-week/localized-name/#parameters","text":"style - the style of text locale - the locale Return the localized name or null if unavailable for the specified locale See Also displayName (jvm) fun localizedName(style: TextStyle , locale: Locale = defaultLocale()): String ? The localized name of the day, if available for the locale in the specified style. The result depends on the configured DateTimeTextProvider and may differ between platforms.","title":"Parameters"},{"location":"api/core/io.islandtime/-day-of-week/localized-name/#parameters_1","text":"style - the style of text locale - the locale Return the localized name or null if unavailable for the specified locale See Also displayName","title":"Parameters"},{"location":"api/core/io.islandtime/-day-of-week/minus/","text":"core / io.islandtime / DayOfWeek / minus minus (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun minus(days: IntDays ): DayOfWeek operator fun minus(days: LongDays ): DayOfWeek Subtract days from this day of the week, wrapping when the beginning or end of the week is reached.","title":"Minus"},{"location":"api/core/io.islandtime/-day-of-week/minus/#minus","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun minus(days: IntDays ): DayOfWeek operator fun minus(days: LongDays ): DayOfWeek Subtract days from this day of the week, wrapping when the beginning or end of the week is reached.","title":"minus"},{"location":"api/core/io.islandtime/-day-of-week/number/","text":"core / io.islandtime / DayOfWeek / number number (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val number: Int The ISO day of week number. The ISO week starts on Monday (1) and ends on Sunday (7). (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun number(settings: WeekSettings ): Int The day of week number (1-7) according to the provided settings . Typically, the week will start on either Monday, Sunday, or Saturday. (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun number(locale: <ERROR CLASS>): Int The day of week number (1-7) according to the specified locale. Typically, the week will start on either Monday, Sunday, or Saturday. The number returned may differ between platforms. (jvm) fun number(locale: Locale ): Int The day of week number (1-7) according to the specified locale. Typically, the week will start on either Monday, Sunday, or Saturday. The number returned may differ between platforms.","title":"Number"},{"location":"api/core/io.islandtime/-day-of-week/number/#number","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val number: Int The ISO day of week number. The ISO week starts on Monday (1) and ends on Sunday (7). (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun number(settings: WeekSettings ): Int The day of week number (1-7) according to the provided settings . Typically, the week will start on either Monday, Sunday, or Saturday. (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun number(locale: <ERROR CLASS>): Int The day of week number (1-7) according to the specified locale. Typically, the week will start on either Monday, Sunday, or Saturday. The number returned may differ between platforms. (jvm) fun number(locale: Locale ): Int The day of week number (1-7) according to the specified locale. Typically, the week will start on either Monday, Sunday, or Saturday. The number returned may differ between platforms.","title":"number"},{"location":"api/core/io.islandtime/-day-of-week/plus/","text":"core / io.islandtime / DayOfWeek / plus plus (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun plus(days: IntDays ): DayOfWeek operator fun plus(days: LongDays ): DayOfWeek Add days to this day of the week, wrapping when the beginning or end of the week is reached.","title":"Plus"},{"location":"api/core/io.islandtime/-day-of-week/plus/#plus","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun plus(days: IntDays ): DayOfWeek operator fun plus(days: LongDays ): DayOfWeek Add days to this day of the week, wrapping when the beginning or end of the week is reached.","title":"plus"},{"location":"api/core/io.islandtime/-instant/","text":"core / io.islandtime / Instant Instant (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) class Instant : TimePoint < Instant >, Comparable < Instant > An instant in time with nanosecond precision. Properties Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) additionalNanosecondsSinceUnixEpoch The number of additional nanoseconds on top of secondsSinceUnixEpoch . val additionalNanosecondsSinceUnixEpoch: IntNanoseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) millisecondOfUnixEpoch The millisecond of the Unix epoch. val millisecondOfUnixEpoch: Long (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) millisecondsSinceUnixEpoch The number of milliseconds since the Unix epoch of 1970-01-01T00:00Z. val millisecondsSinceUnixEpoch: LongMilliseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) nanosecond The nanosecond of the second. val nanosecond: Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) secondOfUnixEpoch The second of the Unix epoch. val secondOfUnixEpoch: Long (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) secondsSinceUnixEpoch The number of seconds since the Unix epoch of 1970-01-01T00:00Z. val secondsSinceUnixEpoch: LongSeconds Functions Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) compareTo fun compareTo(other: Instant ): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) equals fun equals(other: Any ?): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) hashCode fun hashCode(): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) minus operator fun minus(other: Duration ): Instant operator fun minus(days: IntDays ): Instant operator fun minus(days: LongDays ): Instant operator fun minus(hours: IntHours ): Instant operator fun minus(hours: LongHours ): Instant operator fun minus(minutes: IntMinutes ): Instant operator fun minus(minutes: LongMinutes ): Instant operator fun minus(seconds: IntSeconds ): Instant operator fun minus(seconds: LongSeconds ): Instant operator fun minus(milliseconds: IntMilliseconds ): Instant operator fun minus(milliseconds: LongMilliseconds ): Instant operator fun minus(microseconds: IntMicroseconds ): Instant operator fun minus(microseconds: LongMicroseconds ): Instant operator fun minus(nanoseconds: IntNanoseconds ): Instant operator fun minus(nanoseconds: LongNanoseconds ): Instant (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) plus operator fun plus(other: Duration ): Instant operator fun plus(days: IntDays ): Instant operator fun plus(days: LongDays ): Instant operator fun plus(hours: IntHours ): Instant operator fun plus(hours: LongHours ): Instant operator fun plus(minutes: IntMinutes ): Instant operator fun plus(minutes: LongMinutes ): Instant operator fun plus(seconds: IntSeconds ): Instant operator fun plus(seconds: LongSeconds ): Instant operator fun plus(milliseconds: IntMilliseconds ): Instant operator fun plus(milliseconds: LongMilliseconds ): Instant operator fun plus(microseconds: IntMicroseconds ): Instant operator fun plus(microseconds: LongMicroseconds ): Instant operator fun plus(nanoseconds: IntNanoseconds ): Instant operator fun plus(nanoseconds: LongNanoseconds ): Instant (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) rangeTo operator fun rangeTo(other: Instant ): InstantInterval toString Convert this instant to a string in ISO-8601 extended format.(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toString(): <ERROR CLASS> (jvm) fun toString(): String Companion Object Properties Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MAX The largest supported Instant , which can be used as a \"far future\" sentinel. val MAX: Instant (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MIN The smallest supported Instant , which can be used as a \"far past\" sentinel. val MIN: Instant (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) UNIX_EPOCH The Instant representing the Unix epoch of 1970-01-01T00:00Z. val UNIX_EPOCH: Instant Companion Object Functions Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fromMillisecondOfUnixEpoch Create an Instant from the millisecond of the Unix epoch. fun fromMillisecondOfUnixEpoch(millisecond: Long ): Instant (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fromSecondOfUnixEpoch Create an Instant from the second of the Unix epoch. fun fromSecondOfUnixEpoch(second: Long ): Instant fun fromSecondOfUnixEpoch(second: Long , nanosecond: Int ): Instant fun fromSecondOfUnixEpoch(second: Long , nanosecond: Long ): Instant (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fromUnixEpochMillisecond fun ~~fromUnixEpochMillisecond~~(millisecond: Long ): Instant (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fromUnixEpochSecond fun ~~fromUnixEpochSecond~~(second: Long ): Instant fun ~~fromUnixEpochSecond~~(second: Long , nanosecondAdjustment: Int ): Instant fun ~~fromUnixEpochSecond~~(second: Long , nanosecondAdjustment: Long ): Instant Extension Functions Name Summary (jvm) toJavaInstant Convert to an equivalent Java Instant . fun Instant .toJavaInstant(): Instant","title":"Index"},{"location":"api/core/io.islandtime/-instant/#instant","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) class Instant : TimePoint < Instant >, Comparable < Instant > An instant in time with nanosecond precision.","title":"Instant"},{"location":"api/core/io.islandtime/-instant/#properties","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) additionalNanosecondsSinceUnixEpoch The number of additional nanoseconds on top of secondsSinceUnixEpoch . val additionalNanosecondsSinceUnixEpoch: IntNanoseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) millisecondOfUnixEpoch The millisecond of the Unix epoch. val millisecondOfUnixEpoch: Long (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) millisecondsSinceUnixEpoch The number of milliseconds since the Unix epoch of 1970-01-01T00:00Z. val millisecondsSinceUnixEpoch: LongMilliseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) nanosecond The nanosecond of the second. val nanosecond: Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) secondOfUnixEpoch The second of the Unix epoch. val secondOfUnixEpoch: Long (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) secondsSinceUnixEpoch The number of seconds since the Unix epoch of 1970-01-01T00:00Z. val secondsSinceUnixEpoch: LongSeconds","title":"Properties"},{"location":"api/core/io.islandtime/-instant/#functions","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) compareTo fun compareTo(other: Instant ): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) equals fun equals(other: Any ?): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) hashCode fun hashCode(): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) minus operator fun minus(other: Duration ): Instant operator fun minus(days: IntDays ): Instant operator fun minus(days: LongDays ): Instant operator fun minus(hours: IntHours ): Instant operator fun minus(hours: LongHours ): Instant operator fun minus(minutes: IntMinutes ): Instant operator fun minus(minutes: LongMinutes ): Instant operator fun minus(seconds: IntSeconds ): Instant operator fun minus(seconds: LongSeconds ): Instant operator fun minus(milliseconds: IntMilliseconds ): Instant operator fun minus(milliseconds: LongMilliseconds ): Instant operator fun minus(microseconds: IntMicroseconds ): Instant operator fun minus(microseconds: LongMicroseconds ): Instant operator fun minus(nanoseconds: IntNanoseconds ): Instant operator fun minus(nanoseconds: LongNanoseconds ): Instant (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) plus operator fun plus(other: Duration ): Instant operator fun plus(days: IntDays ): Instant operator fun plus(days: LongDays ): Instant operator fun plus(hours: IntHours ): Instant operator fun plus(hours: LongHours ): Instant operator fun plus(minutes: IntMinutes ): Instant operator fun plus(minutes: LongMinutes ): Instant operator fun plus(seconds: IntSeconds ): Instant operator fun plus(seconds: LongSeconds ): Instant operator fun plus(milliseconds: IntMilliseconds ): Instant operator fun plus(milliseconds: LongMilliseconds ): Instant operator fun plus(microseconds: IntMicroseconds ): Instant operator fun plus(microseconds: LongMicroseconds ): Instant operator fun plus(nanoseconds: IntNanoseconds ): Instant operator fun plus(nanoseconds: LongNanoseconds ): Instant (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) rangeTo operator fun rangeTo(other: Instant ): InstantInterval toString Convert this instant to a string in ISO-8601 extended format.(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toString(): <ERROR CLASS> (jvm) fun toString(): String","title":"Functions"},{"location":"api/core/io.islandtime/-instant/#companion-object-properties","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MAX The largest supported Instant , which can be used as a \"far future\" sentinel. val MAX: Instant (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MIN The smallest supported Instant , which can be used as a \"far past\" sentinel. val MIN: Instant (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) UNIX_EPOCH The Instant representing the Unix epoch of 1970-01-01T00:00Z. val UNIX_EPOCH: Instant","title":"Companion Object Properties"},{"location":"api/core/io.islandtime/-instant/#companion-object-functions","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fromMillisecondOfUnixEpoch Create an Instant from the millisecond of the Unix epoch. fun fromMillisecondOfUnixEpoch(millisecond: Long ): Instant (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fromSecondOfUnixEpoch Create an Instant from the second of the Unix epoch. fun fromSecondOfUnixEpoch(second: Long ): Instant fun fromSecondOfUnixEpoch(second: Long , nanosecond: Int ): Instant fun fromSecondOfUnixEpoch(second: Long , nanosecond: Long ): Instant (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fromUnixEpochMillisecond fun ~~fromUnixEpochMillisecond~~(millisecond: Long ): Instant (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fromUnixEpochSecond fun ~~fromUnixEpochSecond~~(second: Long ): Instant fun ~~fromUnixEpochSecond~~(second: Long , nanosecondAdjustment: Int ): Instant fun ~~fromUnixEpochSecond~~(second: Long , nanosecondAdjustment: Long ): Instant","title":"Companion Object Functions"},{"location":"api/core/io.islandtime/-instant/#extension-functions","text":"Name Summary (jvm) toJavaInstant Convert to an equivalent Java Instant . fun Instant .toJavaInstant(): Instant","title":"Extension Functions"},{"location":"api/core/io.islandtime/-instant/-m-a-x/","text":"core / io.islandtime / Instant / MAX MAX (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val MAX: Instant The largest supported Instant , which can be used as a \"far future\" sentinel.","title":" m a x"},{"location":"api/core/io.islandtime/-instant/-m-a-x/#max","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val MAX: Instant The largest supported Instant , which can be used as a \"far future\" sentinel.","title":"MAX"},{"location":"api/core/io.islandtime/-instant/-m-i-n/","text":"core / io.islandtime / Instant / MIN MIN (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val MIN: Instant The smallest supported Instant , which can be used as a \"far past\" sentinel.","title":" m i n"},{"location":"api/core/io.islandtime/-instant/-m-i-n/#min","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val MIN: Instant The smallest supported Instant , which can be used as a \"far past\" sentinel.","title":"MIN"},{"location":"api/core/io.islandtime/-instant/-u-n-i-x_-e-p-o-c-h/","text":"core / io.islandtime / Instant / UNIX_EPOCH UNIX_EPOCH (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val UNIX_EPOCH: Instant The Instant representing the Unix epoch of 1970-01-01T00:00Z.","title":" u n i x  e p o c h"},{"location":"api/core/io.islandtime/-instant/-u-n-i-x_-e-p-o-c-h/#unix_epoch","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val UNIX_EPOCH: Instant The Instant representing the Unix epoch of 1970-01-01T00:00Z.","title":"UNIX_EPOCH"},{"location":"api/core/io.islandtime/-instant/additional-nanoseconds-since-unix-epoch/","text":"core / io.islandtime / Instant / additionalNanosecondsSinceUnixEpoch additionalNanosecondsSinceUnixEpoch (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val additionalNanosecondsSinceUnixEpoch: IntNanoseconds The number of additional nanoseconds on top of secondsSinceUnixEpoch .","title":"Additional nanoseconds since unix epoch"},{"location":"api/core/io.islandtime/-instant/additional-nanoseconds-since-unix-epoch/#additionalnanosecondssinceunixepoch","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val additionalNanosecondsSinceUnixEpoch: IntNanoseconds The number of additional nanoseconds on top of secondsSinceUnixEpoch .","title":"additionalNanosecondsSinceUnixEpoch"},{"location":"api/core/io.islandtime/-instant/compare-to/","text":"core / io.islandtime / Instant / compareTo compareTo (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun compareTo(other: Instant ): Int","title":"Compare to"},{"location":"api/core/io.islandtime/-instant/compare-to/#compareto","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun compareTo(other: Instant ): Int","title":"compareTo"},{"location":"api/core/io.islandtime/-instant/equals/","text":"core / io.islandtime / Instant / equals equals (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun equals(other: Any ?): Boolean","title":"Equals"},{"location":"api/core/io.islandtime/-instant/equals/#equals","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun equals(other: Any ?): Boolean","title":"equals"},{"location":"api/core/io.islandtime/-instant/from-millisecond-of-unix-epoch/","text":"core / io.islandtime / Instant / fromMillisecondOfUnixEpoch fromMillisecondOfUnixEpoch (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun fromMillisecondOfUnixEpoch(millisecond: Long ): Instant Create an Instant from the millisecond of the Unix epoch.","title":"From millisecond of unix epoch"},{"location":"api/core/io.islandtime/-instant/from-millisecond-of-unix-epoch/#frommillisecondofunixepoch","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun fromMillisecondOfUnixEpoch(millisecond: Long ): Instant Create an Instant from the millisecond of the Unix epoch.","title":"fromMillisecondOfUnixEpoch"},{"location":"api/core/io.islandtime/-instant/from-second-of-unix-epoch/","text":"core / io.islandtime / Instant / fromSecondOfUnixEpoch fromSecondOfUnixEpoch (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun fromSecondOfUnixEpoch(second: Long ): Instant fun fromSecondOfUnixEpoch(second: Long , nanosecond: Int ): Instant fun fromSecondOfUnixEpoch(second: Long , nanosecond: Long ): Instant Create an Instant from the second of the Unix epoch.","title":"From second of unix epoch"},{"location":"api/core/io.islandtime/-instant/from-second-of-unix-epoch/#fromsecondofunixepoch","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun fromSecondOfUnixEpoch(second: Long ): Instant fun fromSecondOfUnixEpoch(second: Long , nanosecond: Int ): Instant fun fromSecondOfUnixEpoch(second: Long , nanosecond: Long ): Instant Create an Instant from the second of the Unix epoch.","title":"fromSecondOfUnixEpoch"},{"location":"api/core/io.islandtime/-instant/from-unix-epoch-millisecond/","text":"core / io.islandtime / Instant / fromUnixEpochMillisecond fromUnixEpochMillisecond (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun ~~fromUnixEpochMillisecond~~(millisecond: Long ): Instant Deprecated: Use fromMillisecondOfUnixEpoch() instead.","title":"From unix epoch millisecond"},{"location":"api/core/io.islandtime/-instant/from-unix-epoch-millisecond/#fromunixepochmillisecond","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun ~~fromUnixEpochMillisecond~~(millisecond: Long ): Instant Deprecated: Use fromMillisecondOfUnixEpoch() instead.","title":"fromUnixEpochMillisecond"},{"location":"api/core/io.islandtime/-instant/from-unix-epoch-second/","text":"core / io.islandtime / Instant / fromUnixEpochSecond fromUnixEpochSecond (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun ~~fromUnixEpochSecond~~(second: Long ): Instant Deprecated: Use fromSecondOfUnixEpoch() instead. fun ~~fromUnixEpochSecond~~(second: Long , nanosecondAdjustment: Int ): Instant Deprecated: Use fromSecondOfUnixEpoch() instead. fun ~~fromUnixEpochSecond~~(second: Long , nanosecondAdjustment: Long ): Instant Deprecated: Use fromSecondOfUnixEpoch() instead.","title":"From unix epoch second"},{"location":"api/core/io.islandtime/-instant/from-unix-epoch-second/#fromunixepochsecond","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun ~~fromUnixEpochSecond~~(second: Long ): Instant Deprecated: Use fromSecondOfUnixEpoch() instead. fun ~~fromUnixEpochSecond~~(second: Long , nanosecondAdjustment: Int ): Instant Deprecated: Use fromSecondOfUnixEpoch() instead. fun ~~fromUnixEpochSecond~~(second: Long , nanosecondAdjustment: Long ): Instant Deprecated: Use fromSecondOfUnixEpoch() instead.","title":"fromUnixEpochSecond"},{"location":"api/core/io.islandtime/-instant/hash-code/","text":"core / io.islandtime / Instant / hashCode hashCode (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun hashCode(): Int","title":"Hash code"},{"location":"api/core/io.islandtime/-instant/hash-code/#hashcode","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun hashCode(): Int","title":"hashCode"},{"location":"api/core/io.islandtime/-instant/millisecond-of-unix-epoch/","text":"core / io.islandtime / Instant / millisecondOfUnixEpoch millisecondOfUnixEpoch (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val millisecondOfUnixEpoch: Long The millisecond of the Unix epoch.","title":"Millisecond of unix epoch"},{"location":"api/core/io.islandtime/-instant/millisecond-of-unix-epoch/#millisecondofunixepoch","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val millisecondOfUnixEpoch: Long The millisecond of the Unix epoch.","title":"millisecondOfUnixEpoch"},{"location":"api/core/io.islandtime/-instant/milliseconds-since-unix-epoch/","text":"core / io.islandtime / Instant / millisecondsSinceUnixEpoch millisecondsSinceUnixEpoch (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val millisecondsSinceUnixEpoch: LongMilliseconds The number of milliseconds since the Unix epoch of 1970-01-01T00:00Z.","title":"Milliseconds since unix epoch"},{"location":"api/core/io.islandtime/-instant/milliseconds-since-unix-epoch/#millisecondssinceunixepoch","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val millisecondsSinceUnixEpoch: LongMilliseconds The number of milliseconds since the Unix epoch of 1970-01-01T00:00Z.","title":"millisecondsSinceUnixEpoch"},{"location":"api/core/io.islandtime/-instant/minus/","text":"core / io.islandtime / Instant / minus minus (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun minus(other: Duration ): Instant operator fun minus(days: IntDays ): Instant operator fun minus(days: LongDays ): Instant operator fun minus(hours: IntHours ): Instant operator fun minus(hours: LongHours ): Instant operator fun minus(minutes: IntMinutes ): Instant operator fun minus(minutes: LongMinutes ): Instant operator fun minus(seconds: IntSeconds ): Instant operator fun minus(seconds: LongSeconds ): Instant operator fun minus(milliseconds: IntMilliseconds ): Instant operator fun minus(milliseconds: LongMilliseconds ): Instant operator fun minus(microseconds: IntMicroseconds ): Instant operator fun minus(microseconds: LongMicroseconds ): Instant operator fun minus(nanoseconds: IntNanoseconds ): Instant operator fun minus(nanoseconds: LongNanoseconds ): Instant","title":"Minus"},{"location":"api/core/io.islandtime/-instant/minus/#minus","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun minus(other: Duration ): Instant operator fun minus(days: IntDays ): Instant operator fun minus(days: LongDays ): Instant operator fun minus(hours: IntHours ): Instant operator fun minus(hours: LongHours ): Instant operator fun minus(minutes: IntMinutes ): Instant operator fun minus(minutes: LongMinutes ): Instant operator fun minus(seconds: IntSeconds ): Instant operator fun minus(seconds: LongSeconds ): Instant operator fun minus(milliseconds: IntMilliseconds ): Instant operator fun minus(milliseconds: LongMilliseconds ): Instant operator fun minus(microseconds: IntMicroseconds ): Instant operator fun minus(microseconds: LongMicroseconds ): Instant operator fun minus(nanoseconds: IntNanoseconds ): Instant operator fun minus(nanoseconds: LongNanoseconds ): Instant","title":"minus"},{"location":"api/core/io.islandtime/-instant/nanosecond/","text":"core / io.islandtime / Instant / nanosecond nanosecond (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val nanosecond: Int The nanosecond of the second.","title":"Nanosecond"},{"location":"api/core/io.islandtime/-instant/nanosecond/#nanosecond","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val nanosecond: Int The nanosecond of the second.","title":"nanosecond"},{"location":"api/core/io.islandtime/-instant/plus/","text":"core / io.islandtime / Instant / plus plus (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun plus(other: Duration ): Instant operator fun plus(days: IntDays ): Instant operator fun plus(days: LongDays ): Instant operator fun plus(hours: IntHours ): Instant operator fun plus(hours: LongHours ): Instant operator fun plus(minutes: IntMinutes ): Instant operator fun plus(minutes: LongMinutes ): Instant operator fun plus(seconds: IntSeconds ): Instant operator fun plus(seconds: LongSeconds ): Instant operator fun plus(milliseconds: IntMilliseconds ): Instant operator fun plus(milliseconds: LongMilliseconds ): Instant operator fun plus(microseconds: IntMicroseconds ): Instant operator fun plus(microseconds: LongMicroseconds ): Instant operator fun plus(nanoseconds: IntNanoseconds ): Instant operator fun plus(nanoseconds: LongNanoseconds ): Instant","title":"Plus"},{"location":"api/core/io.islandtime/-instant/plus/#plus","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun plus(other: Duration ): Instant operator fun plus(days: IntDays ): Instant operator fun plus(days: LongDays ): Instant operator fun plus(hours: IntHours ): Instant operator fun plus(hours: LongHours ): Instant operator fun plus(minutes: IntMinutes ): Instant operator fun plus(minutes: LongMinutes ): Instant operator fun plus(seconds: IntSeconds ): Instant operator fun plus(seconds: LongSeconds ): Instant operator fun plus(milliseconds: IntMilliseconds ): Instant operator fun plus(milliseconds: LongMilliseconds ): Instant operator fun plus(microseconds: IntMicroseconds ): Instant operator fun plus(microseconds: LongMicroseconds ): Instant operator fun plus(nanoseconds: IntNanoseconds ): Instant operator fun plus(nanoseconds: LongNanoseconds ): Instant","title":"plus"},{"location":"api/core/io.islandtime/-instant/range-to/","text":"core / io.islandtime / Instant / rangeTo rangeTo (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun rangeTo(other: Instant ): InstantInterval","title":"Range to"},{"location":"api/core/io.islandtime/-instant/range-to/#rangeto","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun rangeTo(other: Instant ): InstantInterval","title":"rangeTo"},{"location":"api/core/io.islandtime/-instant/second-of-unix-epoch/","text":"core / io.islandtime / Instant / secondOfUnixEpoch secondOfUnixEpoch (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val secondOfUnixEpoch: Long The second of the Unix epoch.","title":"Second of unix epoch"},{"location":"api/core/io.islandtime/-instant/second-of-unix-epoch/#secondofunixepoch","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val secondOfUnixEpoch: Long The second of the Unix epoch.","title":"secondOfUnixEpoch"},{"location":"api/core/io.islandtime/-instant/seconds-since-unix-epoch/","text":"core / io.islandtime / Instant / secondsSinceUnixEpoch secondsSinceUnixEpoch (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val secondsSinceUnixEpoch: LongSeconds The number of seconds since the Unix epoch of 1970-01-01T00:00Z.","title":"Seconds since unix epoch"},{"location":"api/core/io.islandtime/-instant/seconds-since-unix-epoch/#secondssinceunixepoch","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val secondsSinceUnixEpoch: LongSeconds The number of seconds since the Unix epoch of 1970-01-01T00:00Z.","title":"secondsSinceUnixEpoch"},{"location":"api/core/io.islandtime/-instant/to-string/","text":"core / io.islandtime / Instant / toString toString (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toString(): <ERROR CLASS> (jvm) fun toString(): String Convert this instant to a string in ISO-8601 extended format.","title":"To string"},{"location":"api/core/io.islandtime/-instant/to-string/#tostring","text":"(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toString(): <ERROR CLASS> (jvm) fun toString(): String Convert this instant to a string in ISO-8601 extended format.","title":"toString"},{"location":"api/core/io.islandtime/-island-time/","text":"core / io.islandtime / IslandTime IslandTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) object IslandTime Global configuration for Island Time. Types Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) Initializer Controls the settings that Island Time is initialized with. interface Initializer Functions Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) initialize Initialize Island Time. fun initialize(block: Initializer .() -> Unit ): Unit (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) initializeWith Initialize Island Time with a specific time zone rules provider, leaving all other settings in their default state. fun initializeWith(provider: TimeZoneRulesProvider ): Unit (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) reset Reset Island Time to an uninitialized state. fun reset(): Unit","title":"Index"},{"location":"api/core/io.islandtime/-island-time/#islandtime","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) object IslandTime Global configuration for Island Time.","title":"IslandTime"},{"location":"api/core/io.islandtime/-island-time/#types","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) Initializer Controls the settings that Island Time is initialized with. interface Initializer","title":"Types"},{"location":"api/core/io.islandtime/-island-time/#functions","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) initialize Initialize Island Time. fun initialize(block: Initializer .() -> Unit ): Unit (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) initializeWith Initialize Island Time with a specific time zone rules provider, leaving all other settings in their default state. fun initializeWith(provider: TimeZoneRulesProvider ): Unit (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) reset Reset Island Time to an uninitialized state. fun reset(): Unit","title":"Functions"},{"location":"api/core/io.islandtime/-island-time/initialize-with/","text":"core / io.islandtime / IslandTime / initializeWith initializeWith (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun initializeWith(provider: TimeZoneRulesProvider ): Unit Initialize Island Time with a specific time zone rules provider, leaving all other settings in their default state. This method should be called prior to any of use of the library, usually during an application's initialization process. If Island Time is not explicitly initialized, the PlatformTimeZoneRulesProvider and all other default settings will be used. Exceptions IllegalStateException - if Island Time has already been initialized See Also initialize","title":"Initialize with"},{"location":"api/core/io.islandtime/-island-time/initialize-with/#initializewith","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun initializeWith(provider: TimeZoneRulesProvider ): Unit Initialize Island Time with a specific time zone rules provider, leaving all other settings in their default state. This method should be called prior to any of use of the library, usually during an application's initialization process. If Island Time is not explicitly initialized, the PlatformTimeZoneRulesProvider and all other default settings will be used.","title":"initializeWith"},{"location":"api/core/io.islandtime/-island-time/initialize-with/#exceptions","text":"IllegalStateException - if Island Time has already been initialized See Also initialize","title":"Exceptions"},{"location":"api/core/io.islandtime/-island-time/initialize/","text":"core / io.islandtime / IslandTime / initialize initialize (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun initialize(block: Initializer .() -> Unit ): Unit Initialize Island Time. This method should be called prior to any of use of the library, usually during an application's initialization process. If Island Time is not explicitly initialized, the PlatformTimeZoneRulesProvider and all other default settings will be used. Exceptions IllegalStateException - if Island Time has already been initialized","title":"Initialize"},{"location":"api/core/io.islandtime/-island-time/initialize/#initialize","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun initialize(block: Initializer .() -> Unit ): Unit Initialize Island Time. This method should be called prior to any of use of the library, usually during an application's initialization process. If Island Time is not explicitly initialized, the PlatformTimeZoneRulesProvider and all other default settings will be used.","title":"initialize"},{"location":"api/core/io.islandtime/-island-time/initialize/#exceptions","text":"IllegalStateException - if Island Time has already been initialized","title":"Exceptions"},{"location":"api/core/io.islandtime/-island-time/reset/","text":"core / io.islandtime / IslandTime / reset reset (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun reset(): Unit Reset Island Time to an uninitialized state. This method is intended to be used to clean up custom providers in tests. It shouldn't be necessary to call this in production.","title":"Reset"},{"location":"api/core/io.islandtime/-island-time/reset/#reset","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun reset(): Unit Reset Island Time to an uninitialized state. This method is intended to be used to clean up custom providers in tests. It shouldn't be necessary to call this in production.","title":"reset"},{"location":"api/core/io.islandtime/-island-time/-initializer/","text":"core / io.islandtime / IslandTime / Initializer Initializer (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) interface Initializer Controls the settings that Island Time is initialized with. Properties Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) dateTimeTextProvider The date-time text provider to use. abstract var dateTimeTextProvider: DateTimeTextProvider (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) timeZoneRulesProvider The time zone rules provider to use. abstract var timeZoneRulesProvider: TimeZoneRulesProvider (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) timeZoneTextProvider The time zone text provider to use. abstract var timeZoneTextProvider: TimeZoneTextProvider","title":"Index"},{"location":"api/core/io.islandtime/-island-time/-initializer/#initializer","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) interface Initializer Controls the settings that Island Time is initialized with.","title":"Initializer"},{"location":"api/core/io.islandtime/-island-time/-initializer/#properties","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) dateTimeTextProvider The date-time text provider to use. abstract var dateTimeTextProvider: DateTimeTextProvider (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) timeZoneRulesProvider The time zone rules provider to use. abstract var timeZoneRulesProvider: TimeZoneRulesProvider (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) timeZoneTextProvider The time zone text provider to use. abstract var timeZoneTextProvider: TimeZoneTextProvider","title":"Properties"},{"location":"api/core/io.islandtime/-island-time/-initializer/date-time-text-provider/","text":"core / io.islandtime / IslandTime / Initializer / dateTimeTextProvider dateTimeTextProvider (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract var dateTimeTextProvider: DateTimeTextProvider The date-time text provider to use.","title":"Date time text provider"},{"location":"api/core/io.islandtime/-island-time/-initializer/date-time-text-provider/#datetimetextprovider","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract var dateTimeTextProvider: DateTimeTextProvider The date-time text provider to use.","title":"dateTimeTextProvider"},{"location":"api/core/io.islandtime/-island-time/-initializer/time-zone-rules-provider/","text":"core / io.islandtime / IslandTime / Initializer / timeZoneRulesProvider timeZoneRulesProvider (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract var timeZoneRulesProvider: TimeZoneRulesProvider The time zone rules provider to use.","title":"Time zone rules provider"},{"location":"api/core/io.islandtime/-island-time/-initializer/time-zone-rules-provider/#timezonerulesprovider","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract var timeZoneRulesProvider: TimeZoneRulesProvider The time zone rules provider to use.","title":"timeZoneRulesProvider"},{"location":"api/core/io.islandtime/-island-time/-initializer/time-zone-text-provider/","text":"core / io.islandtime / IslandTime / Initializer / timeZoneTextProvider timeZoneTextProvider (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract var timeZoneTextProvider: TimeZoneTextProvider The time zone text provider to use.","title":"Time zone text provider"},{"location":"api/core/io.islandtime/-island-time/-initializer/time-zone-text-provider/#timezonetextprovider","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract var timeZoneTextProvider: TimeZoneTextProvider The time zone text provider to use.","title":"timeZoneTextProvider"},{"location":"api/core/io.islandtime/-month/","text":"core / io.islandtime / Month Month (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) enum class Month A month of the year. Enum Values Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) JANUARY (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) FEBRUARY (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MARCH (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) APRIL (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MAY (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) JUNE (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) JULY (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) AUGUST (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) SEPTEMBER (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) OCTOBER (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) NOVEMBER (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) DECEMBER Properties Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) firstDayOfCommonYear The day of the year corresponding to the month's first day in a common year. abstract val firstDayOfCommonYear: Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) firstDayOfLeapYear The day of the year corresponding to the month's first day in a leap year. val firstDayOfLeapYear: Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) lengthInCommonYear The number of days in the month in a common year. abstract val lengthInCommonYear: IntDays (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) lengthInLeapYear The number of days in the month in a leap month. val lengthInLeapYear: IntDays (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) number Get the ISO month number, from 1-12. val number: Int Functions Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) dayRangeIn The range of valid days for this month within a given year fun dayRangeIn(year: Int ): IntRange displayName A textual representation of the month, suitable for display purposes. The localized name will be returned, if available. If not, the ISO month number (1-12) will be returned instead.(jvm) fun displayName(style: TextStyle , locale: Locale = defaultLocale()): String (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun displayName(style: TextStyle , locale: <ERROR CLASS> = defaultLocale()): String (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) firstDayOfYearIn The day of the year that this month's first days falls on. This may vary depending on whether or not the year is a leap year. fun firstDayOfYearIn(year: Int ): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) lastDayIn The last day of the month in a particular year. fun lastDayIn(year: Int ): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) lastDayOfYearIn The day of the year that this month's last day falls on. This may vary depending on whether or not the year is a leap year. fun lastDayOfYearIn(year: Int ): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) lengthIn Get the number of days in the month for a particular year. fun lengthIn(year: Int ): IntDays localizedName The localized name of the month, if available for the locale in the specified style. The result depends on the configured DateTimeTextProvider and may differ between platforms.(jvm) fun localizedName(style: TextStyle , locale: Locale = defaultLocale()): String ? (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun localizedName(style: TextStyle , locale: <ERROR CLASS> = defaultLocale()): String ? (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) minus Subtract months from this month, wrapping when the beginning or end of the year is reached. operator fun minus(months: IntMonths ): Month operator fun minus(months: LongMonths ): Month (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) plus Add months to this month, wrapping when the beginning or end of the year is reached. operator fun plus(months: IntMonths ): Month operator fun plus(months: LongMonths ): Month Companion Object Properties Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MAX val MAX: Month (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MIN val MIN: Month Inheritors Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) APRIL (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) AUGUST (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) DECEMBER (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) FEBRUARY (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) JANUARY (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) JULY (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) JUNE (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MARCH (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MAY (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) NOVEMBER (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) OCTOBER (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) SEPTEMBER","title":"Index"},{"location":"api/core/io.islandtime/-month/#month","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) enum class Month A month of the year.","title":"Month"},{"location":"api/core/io.islandtime/-month/#enum-values","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) JANUARY (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) FEBRUARY (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MARCH (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) APRIL (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MAY (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) JUNE (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) JULY (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) AUGUST (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) SEPTEMBER (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) OCTOBER (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) NOVEMBER (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) DECEMBER","title":"Enum Values"},{"location":"api/core/io.islandtime/-month/#properties","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) firstDayOfCommonYear The day of the year corresponding to the month's first day in a common year. abstract val firstDayOfCommonYear: Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) firstDayOfLeapYear The day of the year corresponding to the month's first day in a leap year. val firstDayOfLeapYear: Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) lengthInCommonYear The number of days in the month in a common year. abstract val lengthInCommonYear: IntDays (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) lengthInLeapYear The number of days in the month in a leap month. val lengthInLeapYear: IntDays (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) number Get the ISO month number, from 1-12. val number: Int","title":"Properties"},{"location":"api/core/io.islandtime/-month/#functions","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) dayRangeIn The range of valid days for this month within a given year fun dayRangeIn(year: Int ): IntRange displayName A textual representation of the month, suitable for display purposes. The localized name will be returned, if available. If not, the ISO month number (1-12) will be returned instead.(jvm) fun displayName(style: TextStyle , locale: Locale = defaultLocale()): String (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun displayName(style: TextStyle , locale: <ERROR CLASS> = defaultLocale()): String (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) firstDayOfYearIn The day of the year that this month's first days falls on. This may vary depending on whether or not the year is a leap year. fun firstDayOfYearIn(year: Int ): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) lastDayIn The last day of the month in a particular year. fun lastDayIn(year: Int ): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) lastDayOfYearIn The day of the year that this month's last day falls on. This may vary depending on whether or not the year is a leap year. fun lastDayOfYearIn(year: Int ): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) lengthIn Get the number of days in the month for a particular year. fun lengthIn(year: Int ): IntDays localizedName The localized name of the month, if available for the locale in the specified style. The result depends on the configured DateTimeTextProvider and may differ between platforms.(jvm) fun localizedName(style: TextStyle , locale: Locale = defaultLocale()): String ? (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun localizedName(style: TextStyle , locale: <ERROR CLASS> = defaultLocale()): String ? (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) minus Subtract months from this month, wrapping when the beginning or end of the year is reached. operator fun minus(months: IntMonths ): Month operator fun minus(months: LongMonths ): Month (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) plus Add months to this month, wrapping when the beginning or end of the year is reached. operator fun plus(months: IntMonths ): Month operator fun plus(months: LongMonths ): Month","title":"Functions"},{"location":"api/core/io.islandtime/-month/#companion-object-properties","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MAX val MAX: Month (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MIN val MIN: Month","title":"Companion Object Properties"},{"location":"api/core/io.islandtime/-month/#inheritors","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) APRIL (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) AUGUST (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) DECEMBER (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) FEBRUARY (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) JANUARY (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) JULY (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) JUNE (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MARCH (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MAY (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) NOVEMBER (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) OCTOBER (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) SEPTEMBER","title":"Inheritors"},{"location":"api/core/io.islandtime/-month/-a-p-r-i-l/","text":"core / io.islandtime / Month / APRIL APRIL (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) APRIL Inherited Functions Name Summary (jvm) displayName A textual representation of the month, suitable for display purposes. The localized name will be returned, if available. If not, the ISO month number (1-12) will be returned instead. fun displayName(style: TextStyle , locale: Locale = defaultLocale()): String (jvm) localizedName The localized name of the month, if available for the locale in the specified style. The result depends on the configured DateTimeTextProvider and may differ between platforms. fun localizedName(style: TextStyle , locale: Locale = defaultLocale()): String ?","title":" a p r i l"},{"location":"api/core/io.islandtime/-month/-a-p-r-i-l/#april","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) APRIL","title":"APRIL"},{"location":"api/core/io.islandtime/-month/-a-p-r-i-l/#inherited-functions","text":"Name Summary (jvm) displayName A textual representation of the month, suitable for display purposes. The localized name will be returned, if available. If not, the ISO month number (1-12) will be returned instead. fun displayName(style: TextStyle , locale: Locale = defaultLocale()): String (jvm) localizedName The localized name of the month, if available for the locale in the specified style. The result depends on the configured DateTimeTextProvider and may differ between platforms. fun localizedName(style: TextStyle , locale: Locale = defaultLocale()): String ?","title":"Inherited Functions"},{"location":"api/core/io.islandtime/-month/-a-u-g-u-s-t/","text":"core / io.islandtime / Month / AUGUST AUGUST (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) AUGUST Inherited Functions Name Summary (jvm) displayName A textual representation of the month, suitable for display purposes. The localized name will be returned, if available. If not, the ISO month number (1-12) will be returned instead. fun displayName(style: TextStyle , locale: Locale = defaultLocale()): String (jvm) localizedName The localized name of the month, if available for the locale in the specified style. The result depends on the configured DateTimeTextProvider and may differ between platforms. fun localizedName(style: TextStyle , locale: Locale = defaultLocale()): String ?","title":" a u g u s t"},{"location":"api/core/io.islandtime/-month/-a-u-g-u-s-t/#august","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) AUGUST","title":"AUGUST"},{"location":"api/core/io.islandtime/-month/-a-u-g-u-s-t/#inherited-functions","text":"Name Summary (jvm) displayName A textual representation of the month, suitable for display purposes. The localized name will be returned, if available. If not, the ISO month number (1-12) will be returned instead. fun displayName(style: TextStyle , locale: Locale = defaultLocale()): String (jvm) localizedName The localized name of the month, if available for the locale in the specified style. The result depends on the configured DateTimeTextProvider and may differ between platforms. fun localizedName(style: TextStyle , locale: Locale = defaultLocale()): String ?","title":"Inherited Functions"},{"location":"api/core/io.islandtime/-month/-d-e-c-e-m-b-e-r/","text":"core / io.islandtime / Month / DECEMBER DECEMBER (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) DECEMBER Inherited Functions Name Summary (jvm) displayName A textual representation of the month, suitable for display purposes. The localized name will be returned, if available. If not, the ISO month number (1-12) will be returned instead. fun displayName(style: TextStyle , locale: Locale = defaultLocale()): String (jvm) localizedName The localized name of the month, if available for the locale in the specified style. The result depends on the configured DateTimeTextProvider and may differ between platforms. fun localizedName(style: TextStyle , locale: Locale = defaultLocale()): String ?","title":" d e c e m b e r"},{"location":"api/core/io.islandtime/-month/-d-e-c-e-m-b-e-r/#december","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) DECEMBER","title":"DECEMBER"},{"location":"api/core/io.islandtime/-month/-d-e-c-e-m-b-e-r/#inherited-functions","text":"Name Summary (jvm) displayName A textual representation of the month, suitable for display purposes. The localized name will be returned, if available. If not, the ISO month number (1-12) will be returned instead. fun displayName(style: TextStyle , locale: Locale = defaultLocale()): String (jvm) localizedName The localized name of the month, if available for the locale in the specified style. The result depends on the configured DateTimeTextProvider and may differ between platforms. fun localizedName(style: TextStyle , locale: Locale = defaultLocale()): String ?","title":"Inherited Functions"},{"location":"api/core/io.islandtime/-month/-f-e-b-r-u-a-r-y/","text":"core / io.islandtime / Month / FEBRUARY FEBRUARY (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) FEBRUARY Inherited Functions Name Summary (jvm) displayName A textual representation of the month, suitable for display purposes. The localized name will be returned, if available. If not, the ISO month number (1-12) will be returned instead. fun displayName(style: TextStyle , locale: Locale = defaultLocale()): String (jvm) localizedName The localized name of the month, if available for the locale in the specified style. The result depends on the configured DateTimeTextProvider and may differ between platforms. fun localizedName(style: TextStyle , locale: Locale = defaultLocale()): String ?","title":" f e b r u a r y"},{"location":"api/core/io.islandtime/-month/-f-e-b-r-u-a-r-y/#february","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) FEBRUARY","title":"FEBRUARY"},{"location":"api/core/io.islandtime/-month/-f-e-b-r-u-a-r-y/#inherited-functions","text":"Name Summary (jvm) displayName A textual representation of the month, suitable for display purposes. The localized name will be returned, if available. If not, the ISO month number (1-12) will be returned instead. fun displayName(style: TextStyle , locale: Locale = defaultLocale()): String (jvm) localizedName The localized name of the month, if available for the locale in the specified style. The result depends on the configured DateTimeTextProvider and may differ between platforms. fun localizedName(style: TextStyle , locale: Locale = defaultLocale()): String ?","title":"Inherited Functions"},{"location":"api/core/io.islandtime/-month/-j-a-n-u-a-r-y/","text":"core / io.islandtime / Month / JANUARY JANUARY (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) JANUARY Inherited Functions Name Summary (jvm) displayName A textual representation of the month, suitable for display purposes. The localized name will be returned, if available. If not, the ISO month number (1-12) will be returned instead. fun displayName(style: TextStyle , locale: Locale = defaultLocale()): String (jvm) localizedName The localized name of the month, if available for the locale in the specified style. The result depends on the configured DateTimeTextProvider and may differ between platforms. fun localizedName(style: TextStyle , locale: Locale = defaultLocale()): String ?","title":" j a n u a r y"},{"location":"api/core/io.islandtime/-month/-j-a-n-u-a-r-y/#january","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) JANUARY","title":"JANUARY"},{"location":"api/core/io.islandtime/-month/-j-a-n-u-a-r-y/#inherited-functions","text":"Name Summary (jvm) displayName A textual representation of the month, suitable for display purposes. The localized name will be returned, if available. If not, the ISO month number (1-12) will be returned instead. fun displayName(style: TextStyle , locale: Locale = defaultLocale()): String (jvm) localizedName The localized name of the month, if available for the locale in the specified style. The result depends on the configured DateTimeTextProvider and may differ between platforms. fun localizedName(style: TextStyle , locale: Locale = defaultLocale()): String ?","title":"Inherited Functions"},{"location":"api/core/io.islandtime/-month/-j-u-l-y/","text":"core / io.islandtime / Month / JULY JULY (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) JULY Inherited Functions Name Summary (jvm) displayName A textual representation of the month, suitable for display purposes. The localized name will be returned, if available. If not, the ISO month number (1-12) will be returned instead. fun displayName(style: TextStyle , locale: Locale = defaultLocale()): String (jvm) localizedName The localized name of the month, if available for the locale in the specified style. The result depends on the configured DateTimeTextProvider and may differ between platforms. fun localizedName(style: TextStyle , locale: Locale = defaultLocale()): String ?","title":" j u l y"},{"location":"api/core/io.islandtime/-month/-j-u-l-y/#july","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) JULY","title":"JULY"},{"location":"api/core/io.islandtime/-month/-j-u-l-y/#inherited-functions","text":"Name Summary (jvm) displayName A textual representation of the month, suitable for display purposes. The localized name will be returned, if available. If not, the ISO month number (1-12) will be returned instead. fun displayName(style: TextStyle , locale: Locale = defaultLocale()): String (jvm) localizedName The localized name of the month, if available for the locale in the specified style. The result depends on the configured DateTimeTextProvider and may differ between platforms. fun localizedName(style: TextStyle , locale: Locale = defaultLocale()): String ?","title":"Inherited Functions"},{"location":"api/core/io.islandtime/-month/-j-u-n-e/","text":"core / io.islandtime / Month / JUNE JUNE (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) JUNE Inherited Functions Name Summary (jvm) displayName A textual representation of the month, suitable for display purposes. The localized name will be returned, if available. If not, the ISO month number (1-12) will be returned instead. fun displayName(style: TextStyle , locale: Locale = defaultLocale()): String (jvm) localizedName The localized name of the month, if available for the locale in the specified style. The result depends on the configured DateTimeTextProvider and may differ between platforms. fun localizedName(style: TextStyle , locale: Locale = defaultLocale()): String ?","title":" j u n e"},{"location":"api/core/io.islandtime/-month/-j-u-n-e/#june","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) JUNE","title":"JUNE"},{"location":"api/core/io.islandtime/-month/-j-u-n-e/#inherited-functions","text":"Name Summary (jvm) displayName A textual representation of the month, suitable for display purposes. The localized name will be returned, if available. If not, the ISO month number (1-12) will be returned instead. fun displayName(style: TextStyle , locale: Locale = defaultLocale()): String (jvm) localizedName The localized name of the month, if available for the locale in the specified style. The result depends on the configured DateTimeTextProvider and may differ between platforms. fun localizedName(style: TextStyle , locale: Locale = defaultLocale()): String ?","title":"Inherited Functions"},{"location":"api/core/io.islandtime/-month/-m-a-r-c-h/","text":"core / io.islandtime / Month / MARCH MARCH (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MARCH Inherited Functions Name Summary (jvm) displayName A textual representation of the month, suitable for display purposes. The localized name will be returned, if available. If not, the ISO month number (1-12) will be returned instead. fun displayName(style: TextStyle , locale: Locale = defaultLocale()): String (jvm) localizedName The localized name of the month, if available for the locale in the specified style. The result depends on the configured DateTimeTextProvider and may differ between platforms. fun localizedName(style: TextStyle , locale: Locale = defaultLocale()): String ?","title":" m a r c h"},{"location":"api/core/io.islandtime/-month/-m-a-r-c-h/#march","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MARCH","title":"MARCH"},{"location":"api/core/io.islandtime/-month/-m-a-r-c-h/#inherited-functions","text":"Name Summary (jvm) displayName A textual representation of the month, suitable for display purposes. The localized name will be returned, if available. If not, the ISO month number (1-12) will be returned instead. fun displayName(style: TextStyle , locale: Locale = defaultLocale()): String (jvm) localizedName The localized name of the month, if available for the locale in the specified style. The result depends on the configured DateTimeTextProvider and may differ between platforms. fun localizedName(style: TextStyle , locale: Locale = defaultLocale()): String ?","title":"Inherited Functions"},{"location":"api/core/io.islandtime/-month/-m-a-x/","text":"core / io.islandtime / Month / MAX MAX (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline val MAX: Month","title":" m a x"},{"location":"api/core/io.islandtime/-month/-m-a-x/#max","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline val MAX: Month","title":"MAX"},{"location":"api/core/io.islandtime/-month/-m-a-y/","text":"core / io.islandtime / Month / MAY MAY (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MAY Inherited Functions Name Summary (jvm) displayName A textual representation of the month, suitable for display purposes. The localized name will be returned, if available. If not, the ISO month number (1-12) will be returned instead. fun displayName(style: TextStyle , locale: Locale = defaultLocale()): String (jvm) localizedName The localized name of the month, if available for the locale in the specified style. The result depends on the configured DateTimeTextProvider and may differ between platforms. fun localizedName(style: TextStyle , locale: Locale = defaultLocale()): String ?","title":" m a y"},{"location":"api/core/io.islandtime/-month/-m-a-y/#may","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MAY","title":"MAY"},{"location":"api/core/io.islandtime/-month/-m-a-y/#inherited-functions","text":"Name Summary (jvm) displayName A textual representation of the month, suitable for display purposes. The localized name will be returned, if available. If not, the ISO month number (1-12) will be returned instead. fun displayName(style: TextStyle , locale: Locale = defaultLocale()): String (jvm) localizedName The localized name of the month, if available for the locale in the specified style. The result depends on the configured DateTimeTextProvider and may differ between platforms. fun localizedName(style: TextStyle , locale: Locale = defaultLocale()): String ?","title":"Inherited Functions"},{"location":"api/core/io.islandtime/-month/-m-i-n/","text":"core / io.islandtime / Month / MIN MIN (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline val MIN: Month","title":" m i n"},{"location":"api/core/io.islandtime/-month/-m-i-n/#min","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline val MIN: Month","title":"MIN"},{"location":"api/core/io.islandtime/-month/-n-o-v-e-m-b-e-r/","text":"core / io.islandtime / Month / NOVEMBER NOVEMBER (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) NOVEMBER Inherited Functions Name Summary (jvm) displayName A textual representation of the month, suitable for display purposes. The localized name will be returned, if available. If not, the ISO month number (1-12) will be returned instead. fun displayName(style: TextStyle , locale: Locale = defaultLocale()): String (jvm) localizedName The localized name of the month, if available for the locale in the specified style. The result depends on the configured DateTimeTextProvider and may differ between platforms. fun localizedName(style: TextStyle , locale: Locale = defaultLocale()): String ?","title":" n o v e m b e r"},{"location":"api/core/io.islandtime/-month/-n-o-v-e-m-b-e-r/#november","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) NOVEMBER","title":"NOVEMBER"},{"location":"api/core/io.islandtime/-month/-n-o-v-e-m-b-e-r/#inherited-functions","text":"Name Summary (jvm) displayName A textual representation of the month, suitable for display purposes. The localized name will be returned, if available. If not, the ISO month number (1-12) will be returned instead. fun displayName(style: TextStyle , locale: Locale = defaultLocale()): String (jvm) localizedName The localized name of the month, if available for the locale in the specified style. The result depends on the configured DateTimeTextProvider and may differ between platforms. fun localizedName(style: TextStyle , locale: Locale = defaultLocale()): String ?","title":"Inherited Functions"},{"location":"api/core/io.islandtime/-month/-o-c-t-o-b-e-r/","text":"core / io.islandtime / Month / OCTOBER OCTOBER (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) OCTOBER Inherited Functions Name Summary (jvm) displayName A textual representation of the month, suitable for display purposes. The localized name will be returned, if available. If not, the ISO month number (1-12) will be returned instead. fun displayName(style: TextStyle , locale: Locale = defaultLocale()): String (jvm) localizedName The localized name of the month, if available for the locale in the specified style. The result depends on the configured DateTimeTextProvider and may differ between platforms. fun localizedName(style: TextStyle , locale: Locale = defaultLocale()): String ?","title":" o c t o b e r"},{"location":"api/core/io.islandtime/-month/-o-c-t-o-b-e-r/#october","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) OCTOBER","title":"OCTOBER"},{"location":"api/core/io.islandtime/-month/-o-c-t-o-b-e-r/#inherited-functions","text":"Name Summary (jvm) displayName A textual representation of the month, suitable for display purposes. The localized name will be returned, if available. If not, the ISO month number (1-12) will be returned instead. fun displayName(style: TextStyle , locale: Locale = defaultLocale()): String (jvm) localizedName The localized name of the month, if available for the locale in the specified style. The result depends on the configured DateTimeTextProvider and may differ between platforms. fun localizedName(style: TextStyle , locale: Locale = defaultLocale()): String ?","title":"Inherited Functions"},{"location":"api/core/io.islandtime/-month/-s-e-p-t-e-m-b-e-r/","text":"core / io.islandtime / Month / SEPTEMBER SEPTEMBER (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) SEPTEMBER Inherited Functions Name Summary (jvm) displayName A textual representation of the month, suitable for display purposes. The localized name will be returned, if available. If not, the ISO month number (1-12) will be returned instead. fun displayName(style: TextStyle , locale: Locale = defaultLocale()): String (jvm) localizedName The localized name of the month, if available for the locale in the specified style. The result depends on the configured DateTimeTextProvider and may differ between platforms. fun localizedName(style: TextStyle , locale: Locale = defaultLocale()): String ?","title":" s e p t e m b e r"},{"location":"api/core/io.islandtime/-month/-s-e-p-t-e-m-b-e-r/#september","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) SEPTEMBER","title":"SEPTEMBER"},{"location":"api/core/io.islandtime/-month/-s-e-p-t-e-m-b-e-r/#inherited-functions","text":"Name Summary (jvm) displayName A textual representation of the month, suitable for display purposes. The localized name will be returned, if available. If not, the ISO month number (1-12) will be returned instead. fun displayName(style: TextStyle , locale: Locale = defaultLocale()): String (jvm) localizedName The localized name of the month, if available for the locale in the specified style. The result depends on the configured DateTimeTextProvider and may differ between platforms. fun localizedName(style: TextStyle , locale: Locale = defaultLocale()): String ?","title":"Inherited Functions"},{"location":"api/core/io.islandtime/-month/day-range-in/","text":"core / io.islandtime / Month / dayRangeIn dayRangeIn (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun dayRangeIn(year: Int ): IntRange The range of valid days for this month within a given year Parameters year - retrieve the day range within this year Return the range of valid days","title":"Day range in"},{"location":"api/core/io.islandtime/-month/day-range-in/#dayrangein","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun dayRangeIn(year: Int ): IntRange The range of valid days for this month within a given year","title":"dayRangeIn"},{"location":"api/core/io.islandtime/-month/day-range-in/#parameters","text":"year - retrieve the day range within this year Return the range of valid days","title":"Parameters"},{"location":"api/core/io.islandtime/-month/display-name/","text":"core / io.islandtime / Month / displayName displayName (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun displayName(style: TextStyle , locale: <ERROR CLASS> = defaultLocale()): String A textual representation of the month, suitable for display purposes. The localized name will be returned, if available. If not, the ISO month number (1-12) will be returned instead. The result depends on the configured DateTimeTextProvider and may differ between platforms. Parameters style - the style of text locale - the locale Return the localized name or number if unavailable for the specified locale See Also localizedName (jvm) fun displayName(style: TextStyle , locale: Locale = defaultLocale()): String A textual representation of the month, suitable for display purposes. The localized name will be returned, if available. If not, the ISO month number (1-12) will be returned instead. The result depends on the configured DateTimeTextProvider and may differ between platforms. Parameters style - the style of text locale - the locale Return the localized name or number if unavailable for the specified locale See Also localizedName","title":"Display name"},{"location":"api/core/io.islandtime/-month/display-name/#displayname","text":"(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun displayName(style: TextStyle , locale: <ERROR CLASS> = defaultLocale()): String A textual representation of the month, suitable for display purposes. The localized name will be returned, if available. If not, the ISO month number (1-12) will be returned instead. The result depends on the configured DateTimeTextProvider and may differ between platforms.","title":"displayName"},{"location":"api/core/io.islandtime/-month/display-name/#parameters","text":"style - the style of text locale - the locale Return the localized name or number if unavailable for the specified locale See Also localizedName (jvm) fun displayName(style: TextStyle , locale: Locale = defaultLocale()): String A textual representation of the month, suitable for display purposes. The localized name will be returned, if available. If not, the ISO month number (1-12) will be returned instead. The result depends on the configured DateTimeTextProvider and may differ between platforms.","title":"Parameters"},{"location":"api/core/io.islandtime/-month/display-name/#parameters_1","text":"style - the style of text locale - the locale Return the localized name or number if unavailable for the specified locale See Also localizedName","title":"Parameters"},{"location":"api/core/io.islandtime/-month/first-day-of-common-year/","text":"core / io.islandtime / Month / firstDayOfCommonYear firstDayOfCommonYear (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract val firstDayOfCommonYear: Int The day of the year corresponding to the month's first day in a common year. For example, the first day of MARCH is the 60th day of a common year.","title":"First day of common year"},{"location":"api/core/io.islandtime/-month/first-day-of-common-year/#firstdayofcommonyear","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract val firstDayOfCommonYear: Int The day of the year corresponding to the month's first day in a common year. For example, the first day of MARCH is the 60th day of a common year.","title":"firstDayOfCommonYear"},{"location":"api/core/io.islandtime/-month/first-day-of-leap-year/","text":"core / io.islandtime / Month / firstDayOfLeapYear firstDayOfLeapYear (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val firstDayOfLeapYear: Int The day of the year corresponding to the month's first day in a leap year. For example, the first day of MARCH is the 61st day of a leap year.","title":"First day of leap year"},{"location":"api/core/io.islandtime/-month/first-day-of-leap-year/#firstdayofleapyear","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val firstDayOfLeapYear: Int The day of the year corresponding to the month's first day in a leap year. For example, the first day of MARCH is the 61st day of a leap year.","title":"firstDayOfLeapYear"},{"location":"api/core/io.islandtime/-month/first-day-of-year-in/","text":"core / io.islandtime / Month / firstDayOfYearIn firstDayOfYearIn (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun firstDayOfYearIn(year: Int ): Int The day of the year that this month's first days falls on. This may vary depending on whether or not the year is a leap year. For example, the first day of MARCH will be either 60th or 61st day of the year. Parameters year - retrieve the day of year number within this year Return the first day of year number","title":"First day of year in"},{"location":"api/core/io.islandtime/-month/first-day-of-year-in/#firstdayofyearin","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun firstDayOfYearIn(year: Int ): Int The day of the year that this month's first days falls on. This may vary depending on whether or not the year is a leap year. For example, the first day of MARCH will be either 60th or 61st day of the year.","title":"firstDayOfYearIn"},{"location":"api/core/io.islandtime/-month/first-day-of-year-in/#parameters","text":"year - retrieve the day of year number within this year Return the first day of year number","title":"Parameters"},{"location":"api/core/io.islandtime/-month/last-day-in/","text":"core / io.islandtime / Month / lastDayIn lastDayIn (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun lastDayIn(year: Int ): Int The last day of the month in a particular year.","title":"Last day in"},{"location":"api/core/io.islandtime/-month/last-day-in/#lastdayin","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun lastDayIn(year: Int ): Int The last day of the month in a particular year.","title":"lastDayIn"},{"location":"api/core/io.islandtime/-month/last-day-of-year-in/","text":"core / io.islandtime / Month / lastDayOfYearIn lastDayOfYearIn (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun lastDayOfYearIn(year: Int ): Int The day of the year that this month's last day falls on. This may vary depending on whether or not the year is a leap year. For example, the last of FEBRUARY will be either 59th or 60th day of the year. Parameters year - retrieve the day of year number within this year Return the last day of year number","title":"Last day of year in"},{"location":"api/core/io.islandtime/-month/last-day-of-year-in/#lastdayofyearin","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun lastDayOfYearIn(year: Int ): Int The day of the year that this month's last day falls on. This may vary depending on whether or not the year is a leap year. For example, the last of FEBRUARY will be either 59th or 60th day of the year.","title":"lastDayOfYearIn"},{"location":"api/core/io.islandtime/-month/last-day-of-year-in/#parameters","text":"year - retrieve the day of year number within this year Return the last day of year number","title":"Parameters"},{"location":"api/core/io.islandtime/-month/length-in-common-year/","text":"core / io.islandtime / Month / lengthInCommonYear lengthInCommonYear (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract val lengthInCommonYear: IntDays The number of days in the month in a common year.","title":"Length in common year"},{"location":"api/core/io.islandtime/-month/length-in-common-year/#lengthincommonyear","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract val lengthInCommonYear: IntDays The number of days in the month in a common year.","title":"lengthInCommonYear"},{"location":"api/core/io.islandtime/-month/length-in-leap-year/","text":"core / io.islandtime / Month / lengthInLeapYear lengthInLeapYear (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val lengthInLeapYear: IntDays The number of days in the month in a leap month.","title":"Length in leap year"},{"location":"api/core/io.islandtime/-month/length-in-leap-year/#lengthinleapyear","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val lengthInLeapYear: IntDays The number of days in the month in a leap month.","title":"lengthInLeapYear"},{"location":"api/core/io.islandtime/-month/length-in/","text":"core / io.islandtime / Month / lengthIn lengthIn (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun lengthIn(year: Int ): IntDays Get the number of days in the month for a particular year. Parameters year - retrieve the length of the month within this year Return the number of days in the month","title":"Length in"},{"location":"api/core/io.islandtime/-month/length-in/#lengthin","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun lengthIn(year: Int ): IntDays Get the number of days in the month for a particular year.","title":"lengthIn"},{"location":"api/core/io.islandtime/-month/length-in/#parameters","text":"year - retrieve the length of the month within this year Return the number of days in the month","title":"Parameters"},{"location":"api/core/io.islandtime/-month/localized-name/","text":"core / io.islandtime / Month / localizedName localizedName (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun localizedName(style: TextStyle , locale: <ERROR CLASS> = defaultLocale()): String ? The localized name of the month, if available for the locale in the specified style. The result depends on the configured DateTimeTextProvider and may differ between platforms. Parameters style - the style of text locale - the locale Return the localized name or null if unavailable for the specified locale See Also displayName (jvm) fun localizedName(style: TextStyle , locale: Locale = defaultLocale()): String ? The localized name of the month, if available for the locale in the specified style. The result depends on the configured DateTimeTextProvider and may differ between platforms. Parameters style - the style of text locale - the locale Return the localized name or null if unavailable for the specified locale See Also displayName","title":"Localized name"},{"location":"api/core/io.islandtime/-month/localized-name/#localizedname","text":"(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun localizedName(style: TextStyle , locale: <ERROR CLASS> = defaultLocale()): String ? The localized name of the month, if available for the locale in the specified style. The result depends on the configured DateTimeTextProvider and may differ between platforms.","title":"localizedName"},{"location":"api/core/io.islandtime/-month/localized-name/#parameters","text":"style - the style of text locale - the locale Return the localized name or null if unavailable for the specified locale See Also displayName (jvm) fun localizedName(style: TextStyle , locale: Locale = defaultLocale()): String ? The localized name of the month, if available for the locale in the specified style. The result depends on the configured DateTimeTextProvider and may differ between platforms.","title":"Parameters"},{"location":"api/core/io.islandtime/-month/localized-name/#parameters_1","text":"style - the style of text locale - the locale Return the localized name or null if unavailable for the specified locale See Also displayName","title":"Parameters"},{"location":"api/core/io.islandtime/-month/minus/","text":"core / io.islandtime / Month / minus minus (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun minus(months: IntMonths ): Month operator fun minus(months: LongMonths ): Month Subtract months from this month, wrapping when the beginning or end of the year is reached.","title":"Minus"},{"location":"api/core/io.islandtime/-month/minus/#minus","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun minus(months: IntMonths ): Month operator fun minus(months: LongMonths ): Month Subtract months from this month, wrapping when the beginning or end of the year is reached.","title":"minus"},{"location":"api/core/io.islandtime/-month/number/","text":"core / io.islandtime / Month / number number (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val number: Int Get the ISO month number, from 1-12.","title":"Number"},{"location":"api/core/io.islandtime/-month/number/#number","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val number: Int Get the ISO month number, from 1-12.","title":"number"},{"location":"api/core/io.islandtime/-month/plus/","text":"core / io.islandtime / Month / plus plus (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun plus(months: IntMonths ): Month operator fun plus(months: LongMonths ): Month Add months to this month, wrapping when the beginning or end of the year is reached.","title":"Plus"},{"location":"api/core/io.islandtime/-month/plus/#plus","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun plus(months: IntMonths ): Month operator fun plus(months: LongMonths ): Month Add months to this month, wrapping when the beginning or end of the year is reached.","title":"plus"},{"location":"api/core/io.islandtime/-offset-date-time/","text":"core / io.islandtime / OffsetDateTime OffsetDateTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) class OffsetDateTime : TimePoint < OffsetDateTime > A date and time of day with an offset from UTC. OffsetDateTime is intended to be used primarily for use cases involving persistence or network transfer where the application of time zone rules may be undesirable. For most applications, ZonedDateTime is a better choice since it takes time zone rules into account when performing calendrical calculations. Constructors Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init> Create an OffsetDateTime . <init>(date: Date , time: Time , offset: UtcOffset ) <init>(year: Int , month: Month , dayOfMonth: Int , hour: Int , minute: Int , second: Int , nanosecond: Int , offset: UtcOffset ) <init>(year: Int , monthNumber: Int , dayOfMonth: Int , hour: Int , minute: Int , second: Int , nanosecond: Int , offset: UtcOffset ) <init>(year: Int , dayOfYear: Int , hour: Int , minute: Int , second: Int , nanosecond: Int , offset: UtcOffset ) Create an OffsetDateTime by combining a DateTime and UtcOffset . <init>(dateTime: DateTime , offset: UtcOffset ) Properties Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) additionalNanosecondsSinceUnixEpoch The number of additional nanoseconds on top of secondsSinceUnixEpoch . val additionalNanosecondsSinceUnixEpoch: IntNanoseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) date The local date. val date: Date (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) dateTime The local date and time of day. val dateTime: DateTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) dayOfMonth The day of the month. val dayOfMonth: Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) dayOfWeek The day of the week. val dayOfWeek: DayOfWeek (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) dayOfYear The day of the year -- also known as the ordinal date in ISO-8601. val dayOfYear: Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) hour The hour of the day. val hour: Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) instant The Instant representing the same time point. val instant: Instant (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isInLeapYear Check if this date falls within a leap year. val isInLeapYear: Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isLeapDay Check if this is a leap day. val isLeapDay: Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) lengthOfMonth The length of this date's month in days. val lengthOfMonth: IntDays (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) lengthOfYear The length of this date's year in days. val lengthOfYear: IntDays (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) millisecondsSinceUnixEpoch The number of milliseconds since the Unix epoch of 1970-01-01T00:00Z. val millisecondsSinceUnixEpoch: LongMilliseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) minute The minute of the hour. val minute: Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) month The month of the year. val month: Month (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) monthNumber The ISO month number, from 1-12. val monthNumber: Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) nanosecond The nanosecond of the second. val nanosecond: Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) offset The offset from UTC. val offset: UtcOffset (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) offsetTime The combined time of day and offset. val offsetTime: OffsetTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) second The second of the minute. val second: Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) secondsSinceUnixEpoch The number of seconds since the Unix epoch of 1970-01-01T00:00Z. val secondsSinceUnixEpoch: LongSeconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) time The local time of day. val time: Time (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) year The year. val year: Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) yearMonth The combined year and month. val yearMonth: YearMonth Functions Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) adjustedTo Change the offset of an OffsetDateTime , adjusting the date and time components such that the instant represented by it remains the same fun adjustedTo(newOffset: UtcOffset ): OffsetDateTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) copy Return a new OffsetDateTime , replacing any of the components with new values. fun copy(dateTime: DateTime = this.dateTime, offset: UtcOffset = this.offset): OffsetDateTime fun copy(date: Date = this.date, time: Time = this.time, offset: UtcOffset = this.offset): OffsetDateTime fun copy(year: Int = this.year, dayOfYear: Int = this.dayOfYear, hour: Int = this.hour, minute: Int = this.minute, second: Int = this.second, nanosecond: Int = this.nanosecond, offset: UtcOffset = this.offset): OffsetDateTime fun copy(year: Int = this.year, month: Month = this.month, dayOfMonth: Int = this.dayOfMonth, hour: Int = this.hour, minute: Int = this.minute, second: Int = this.second, nanosecond: Int = this.nanosecond, offset: UtcOffset = this.offset): OffsetDateTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) equals fun equals(other: Any ?): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) hashCode fun hashCode(): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) minus Return an OffsetDateTime with period subtracted from it. operator fun minus(period: Period ): OffsetDateTime operator fun minus(duration: Duration ): OffsetDateTime operator fun minus(years: LongYears ): OffsetDateTime operator fun minus(years: IntYears ): OffsetDateTime operator fun minus(months: LongMonths ): OffsetDateTime operator fun minus(months: IntMonths ): OffsetDateTime operator fun minus(weeks: LongWeeks ): OffsetDateTime operator fun minus(weeks: IntWeeks ): OffsetDateTime operator fun minus(days: LongDays ): OffsetDateTime operator fun minus(days: IntDays ): OffsetDateTime operator fun minus(hours: LongHours ): OffsetDateTime operator fun minus(hours: IntHours ): OffsetDateTime operator fun minus(minutes: LongMinutes ): OffsetDateTime operator fun minus(minutes: IntMinutes ): OffsetDateTime operator fun minus(seconds: LongSeconds ): OffsetDateTime operator fun minus(seconds: IntSeconds ): OffsetDateTime operator fun minus(milliseconds: LongMilliseconds ): OffsetDateTime operator fun minus(milliseconds: IntMilliseconds ): OffsetDateTime operator fun minus(microseconds: LongMicroseconds ): OffsetDateTime operator fun minus(microseconds: IntMicroseconds ): OffsetDateTime operator fun minus(nanoseconds: LongNanoseconds ): OffsetDateTime operator fun minus(nanoseconds: IntNanoseconds ): OffsetDateTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) plus Return an OffsetDateTime with period added to it. operator fun plus(period: Period ): OffsetDateTime operator fun plus(duration: Duration ): OffsetDateTime operator fun plus(years: LongYears ): OffsetDateTime operator fun plus(years: IntYears ): OffsetDateTime operator fun plus(months: LongMonths ): OffsetDateTime operator fun plus(months: IntMonths ): OffsetDateTime operator fun plus(weeks: LongWeeks ): OffsetDateTime operator fun plus(weeks: IntWeeks ): OffsetDateTime operator fun plus(days: LongDays ): OffsetDateTime operator fun plus(days: IntDays ): OffsetDateTime operator fun plus(hours: LongHours ): OffsetDateTime operator fun plus(hours: IntHours ): OffsetDateTime operator fun plus(minutes: LongMinutes ): OffsetDateTime operator fun plus(minutes: IntMinutes ): OffsetDateTime operator fun plus(seconds: LongSeconds ): OffsetDateTime operator fun plus(seconds: IntSeconds ): OffsetDateTime operator fun plus(milliseconds: LongMilliseconds ): OffsetDateTime operator fun plus(milliseconds: IntMilliseconds ): OffsetDateTime operator fun plus(microseconds: LongMicroseconds ): OffsetDateTime operator fun plus(microseconds: IntMicroseconds ): OffsetDateTime operator fun plus(nanoseconds: LongNanoseconds ): OffsetDateTime operator fun plus(nanoseconds: IntNanoseconds ): OffsetDateTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) rangeTo operator fun rangeTo(other: OffsetDateTime ): OffsetDateTimeInterval toString (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toString(): <ERROR CLASS> (jvm) fun toString(): String Companion Object Properties Name Summary DEFAULT_SORT_ORDER Compare by instant, then date-time. Using this Comparator guarantees a deterministic order when sorting.(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val DEFAULT_SORT_ORDER: <ERROR CLASS> (jvm) val DEFAULT_SORT_ORDER: Comparator < OffsetDateTime > (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MAX The largest supported OffsetDateTime , which can be used as a \"far future\" sentinel. val MAX: OffsetDateTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MIN The smallest supported OffsetDateTime , which can be used as a \"far past\" sentinel. val MIN: OffsetDateTime TIMELINE_ORDER Compare by timeline order only, ignoring any offset differences.(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val TIMELINE_ORDER: <ERROR CLASS> (jvm) val TIMELINE_ORDER: Comparator < TimePoint <*>> Companion Object Functions Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fromMillisecondOfUnixEpoch Create an OffsetDateTime from the millisecond of the Unix epoch at offset . fun fromMillisecondOfUnixEpoch(millisecond: Long , offset: UtcOffset ): OffsetDateTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fromMillisecondsSinceUnixEpoch Create an OffsetDateTime from a duration of milliseconds relative to the Unix epoch at offset . fun fromMillisecondsSinceUnixEpoch(milliseconds: LongMilliseconds , offset: UtcOffset ): OffsetDateTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fromSecondOfUnixEpoch Create an OffsetDateTime from the second of the Unix epoch at offset and optionally, the nanosecond of the second. fun fromSecondOfUnixEpoch(second: Long , nanosecond: Int = 0, offset: UtcOffset ): OffsetDateTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fromSecondsSinceUnixEpoch Create an OffsetDateTime from a duration of seconds relative to the Unix epoch at offset , optionally, with some number of additional nanoseconds added to it. fun fromSecondsSinceUnixEpoch(seconds: LongSeconds , nanosecondAdjustment: IntNanoseconds = 0.nanoseconds, offset: UtcOffset ): OffsetDateTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fromUnixEpochMillisecond fun ~~fromUnixEpochMillisecond~~(millisecond: Long , offset: UtcOffset ): OffsetDateTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fromUnixEpochSecond fun ~~fromUnixEpochSecond~~(second: Long , nanoOfSecond: Int , offset: UtcOffset ): OffsetDateTime Extension Functions Name Summary (jvm) endOfWeek The date-time at the last representable instant of the week that this date-time falls in. The first day of the week will be determined by locale . fun OffsetDateTime .endOfWeek(locale: Locale ): OffsetDateTime (jvm) startOfWeek The date-time at the first instant of the week that this date-time falls in. The first day of the week will be determined by locale . fun OffsetDateTime .startOfWeek(locale: Locale ): OffsetDateTime (jvm) toJavaOffsetDateTime Convert to an equivalent Java OffsetDateTime . fun OffsetDateTime .toJavaOffsetDateTime(): OffsetDateTime (jvm) weekInterval The interval of the week that this date falls within. The first day of the week will be determined by locale . The offset will be preserved in both the start and end date-times. fun OffsetDateTime .weekInterval(locale: Locale ): OffsetDateTimeInterval","title":"Index"},{"location":"api/core/io.islandtime/-offset-date-time/#offsetdatetime","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) class OffsetDateTime : TimePoint < OffsetDateTime > A date and time of day with an offset from UTC. OffsetDateTime is intended to be used primarily for use cases involving persistence or network transfer where the application of time zone rules may be undesirable. For most applications, ZonedDateTime is a better choice since it takes time zone rules into account when performing calendrical calculations.","title":"OffsetDateTime"},{"location":"api/core/io.islandtime/-offset-date-time/#constructors","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init> Create an OffsetDateTime . <init>(date: Date , time: Time , offset: UtcOffset ) <init>(year: Int , month: Month , dayOfMonth: Int , hour: Int , minute: Int , second: Int , nanosecond: Int , offset: UtcOffset ) <init>(year: Int , monthNumber: Int , dayOfMonth: Int , hour: Int , minute: Int , second: Int , nanosecond: Int , offset: UtcOffset ) <init>(year: Int , dayOfYear: Int , hour: Int , minute: Int , second: Int , nanosecond: Int , offset: UtcOffset ) Create an OffsetDateTime by combining a DateTime and UtcOffset . <init>(dateTime: DateTime , offset: UtcOffset )","title":"Constructors"},{"location":"api/core/io.islandtime/-offset-date-time/#properties","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) additionalNanosecondsSinceUnixEpoch The number of additional nanoseconds on top of secondsSinceUnixEpoch . val additionalNanosecondsSinceUnixEpoch: IntNanoseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) date The local date. val date: Date (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) dateTime The local date and time of day. val dateTime: DateTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) dayOfMonth The day of the month. val dayOfMonth: Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) dayOfWeek The day of the week. val dayOfWeek: DayOfWeek (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) dayOfYear The day of the year -- also known as the ordinal date in ISO-8601. val dayOfYear: Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) hour The hour of the day. val hour: Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) instant The Instant representing the same time point. val instant: Instant (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isInLeapYear Check if this date falls within a leap year. val isInLeapYear: Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isLeapDay Check if this is a leap day. val isLeapDay: Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) lengthOfMonth The length of this date's month in days. val lengthOfMonth: IntDays (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) lengthOfYear The length of this date's year in days. val lengthOfYear: IntDays (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) millisecondsSinceUnixEpoch The number of milliseconds since the Unix epoch of 1970-01-01T00:00Z. val millisecondsSinceUnixEpoch: LongMilliseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) minute The minute of the hour. val minute: Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) month The month of the year. val month: Month (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) monthNumber The ISO month number, from 1-12. val monthNumber: Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) nanosecond The nanosecond of the second. val nanosecond: Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) offset The offset from UTC. val offset: UtcOffset (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) offsetTime The combined time of day and offset. val offsetTime: OffsetTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) second The second of the minute. val second: Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) secondsSinceUnixEpoch The number of seconds since the Unix epoch of 1970-01-01T00:00Z. val secondsSinceUnixEpoch: LongSeconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) time The local time of day. val time: Time (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) year The year. val year: Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) yearMonth The combined year and month. val yearMonth: YearMonth","title":"Properties"},{"location":"api/core/io.islandtime/-offset-date-time/#functions","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) adjustedTo Change the offset of an OffsetDateTime , adjusting the date and time components such that the instant represented by it remains the same fun adjustedTo(newOffset: UtcOffset ): OffsetDateTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) copy Return a new OffsetDateTime , replacing any of the components with new values. fun copy(dateTime: DateTime = this.dateTime, offset: UtcOffset = this.offset): OffsetDateTime fun copy(date: Date = this.date, time: Time = this.time, offset: UtcOffset = this.offset): OffsetDateTime fun copy(year: Int = this.year, dayOfYear: Int = this.dayOfYear, hour: Int = this.hour, minute: Int = this.minute, second: Int = this.second, nanosecond: Int = this.nanosecond, offset: UtcOffset = this.offset): OffsetDateTime fun copy(year: Int = this.year, month: Month = this.month, dayOfMonth: Int = this.dayOfMonth, hour: Int = this.hour, minute: Int = this.minute, second: Int = this.second, nanosecond: Int = this.nanosecond, offset: UtcOffset = this.offset): OffsetDateTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) equals fun equals(other: Any ?): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) hashCode fun hashCode(): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) minus Return an OffsetDateTime with period subtracted from it. operator fun minus(period: Period ): OffsetDateTime operator fun minus(duration: Duration ): OffsetDateTime operator fun minus(years: LongYears ): OffsetDateTime operator fun minus(years: IntYears ): OffsetDateTime operator fun minus(months: LongMonths ): OffsetDateTime operator fun minus(months: IntMonths ): OffsetDateTime operator fun minus(weeks: LongWeeks ): OffsetDateTime operator fun minus(weeks: IntWeeks ): OffsetDateTime operator fun minus(days: LongDays ): OffsetDateTime operator fun minus(days: IntDays ): OffsetDateTime operator fun minus(hours: LongHours ): OffsetDateTime operator fun minus(hours: IntHours ): OffsetDateTime operator fun minus(minutes: LongMinutes ): OffsetDateTime operator fun minus(minutes: IntMinutes ): OffsetDateTime operator fun minus(seconds: LongSeconds ): OffsetDateTime operator fun minus(seconds: IntSeconds ): OffsetDateTime operator fun minus(milliseconds: LongMilliseconds ): OffsetDateTime operator fun minus(milliseconds: IntMilliseconds ): OffsetDateTime operator fun minus(microseconds: LongMicroseconds ): OffsetDateTime operator fun minus(microseconds: IntMicroseconds ): OffsetDateTime operator fun minus(nanoseconds: LongNanoseconds ): OffsetDateTime operator fun minus(nanoseconds: IntNanoseconds ): OffsetDateTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) plus Return an OffsetDateTime with period added to it. operator fun plus(period: Period ): OffsetDateTime operator fun plus(duration: Duration ): OffsetDateTime operator fun plus(years: LongYears ): OffsetDateTime operator fun plus(years: IntYears ): OffsetDateTime operator fun plus(months: LongMonths ): OffsetDateTime operator fun plus(months: IntMonths ): OffsetDateTime operator fun plus(weeks: LongWeeks ): OffsetDateTime operator fun plus(weeks: IntWeeks ): OffsetDateTime operator fun plus(days: LongDays ): OffsetDateTime operator fun plus(days: IntDays ): OffsetDateTime operator fun plus(hours: LongHours ): OffsetDateTime operator fun plus(hours: IntHours ): OffsetDateTime operator fun plus(minutes: LongMinutes ): OffsetDateTime operator fun plus(minutes: IntMinutes ): OffsetDateTime operator fun plus(seconds: LongSeconds ): OffsetDateTime operator fun plus(seconds: IntSeconds ): OffsetDateTime operator fun plus(milliseconds: LongMilliseconds ): OffsetDateTime operator fun plus(milliseconds: IntMilliseconds ): OffsetDateTime operator fun plus(microseconds: LongMicroseconds ): OffsetDateTime operator fun plus(microseconds: IntMicroseconds ): OffsetDateTime operator fun plus(nanoseconds: LongNanoseconds ): OffsetDateTime operator fun plus(nanoseconds: IntNanoseconds ): OffsetDateTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) rangeTo operator fun rangeTo(other: OffsetDateTime ): OffsetDateTimeInterval toString (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toString(): <ERROR CLASS> (jvm) fun toString(): String","title":"Functions"},{"location":"api/core/io.islandtime/-offset-date-time/#companion-object-properties","text":"Name Summary DEFAULT_SORT_ORDER Compare by instant, then date-time. Using this Comparator guarantees a deterministic order when sorting.(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val DEFAULT_SORT_ORDER: <ERROR CLASS> (jvm) val DEFAULT_SORT_ORDER: Comparator < OffsetDateTime > (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MAX The largest supported OffsetDateTime , which can be used as a \"far future\" sentinel. val MAX: OffsetDateTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MIN The smallest supported OffsetDateTime , which can be used as a \"far past\" sentinel. val MIN: OffsetDateTime TIMELINE_ORDER Compare by timeline order only, ignoring any offset differences.(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val TIMELINE_ORDER: <ERROR CLASS> (jvm) val TIMELINE_ORDER: Comparator < TimePoint <*>>","title":"Companion Object Properties"},{"location":"api/core/io.islandtime/-offset-date-time/#companion-object-functions","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fromMillisecondOfUnixEpoch Create an OffsetDateTime from the millisecond of the Unix epoch at offset . fun fromMillisecondOfUnixEpoch(millisecond: Long , offset: UtcOffset ): OffsetDateTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fromMillisecondsSinceUnixEpoch Create an OffsetDateTime from a duration of milliseconds relative to the Unix epoch at offset . fun fromMillisecondsSinceUnixEpoch(milliseconds: LongMilliseconds , offset: UtcOffset ): OffsetDateTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fromSecondOfUnixEpoch Create an OffsetDateTime from the second of the Unix epoch at offset and optionally, the nanosecond of the second. fun fromSecondOfUnixEpoch(second: Long , nanosecond: Int = 0, offset: UtcOffset ): OffsetDateTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fromSecondsSinceUnixEpoch Create an OffsetDateTime from a duration of seconds relative to the Unix epoch at offset , optionally, with some number of additional nanoseconds added to it. fun fromSecondsSinceUnixEpoch(seconds: LongSeconds , nanosecondAdjustment: IntNanoseconds = 0.nanoseconds, offset: UtcOffset ): OffsetDateTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fromUnixEpochMillisecond fun ~~fromUnixEpochMillisecond~~(millisecond: Long , offset: UtcOffset ): OffsetDateTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fromUnixEpochSecond fun ~~fromUnixEpochSecond~~(second: Long , nanoOfSecond: Int , offset: UtcOffset ): OffsetDateTime","title":"Companion Object Functions"},{"location":"api/core/io.islandtime/-offset-date-time/#extension-functions","text":"Name Summary (jvm) endOfWeek The date-time at the last representable instant of the week that this date-time falls in. The first day of the week will be determined by locale . fun OffsetDateTime .endOfWeek(locale: Locale ): OffsetDateTime (jvm) startOfWeek The date-time at the first instant of the week that this date-time falls in. The first day of the week will be determined by locale . fun OffsetDateTime .startOfWeek(locale: Locale ): OffsetDateTime (jvm) toJavaOffsetDateTime Convert to an equivalent Java OffsetDateTime . fun OffsetDateTime .toJavaOffsetDateTime(): OffsetDateTime (jvm) weekInterval The interval of the week that this date falls within. The first day of the week will be determined by locale . The offset will be preserved in both the start and end date-times. fun OffsetDateTime .weekInterval(locale: Locale ): OffsetDateTimeInterval","title":"Extension Functions"},{"location":"api/core/io.islandtime/-offset-date-time/-d-e-f-a-u-l-t_-s-o-r-t_-o-r-d-e-r/","text":"core / io.islandtime / OffsetDateTime / DEFAULT_SORT_ORDER DEFAULT_SORT_ORDER (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val DEFAULT_SORT_ORDER: <ERROR CLASS> (jvm) val DEFAULT_SORT_ORDER: Comparator < OffsetDateTime > Compare by instant, then date-time. Using this Comparator guarantees a deterministic order when sorting.","title":" d e f a u l t  s o r t  o r d e r"},{"location":"api/core/io.islandtime/-offset-date-time/-d-e-f-a-u-l-t_-s-o-r-t_-o-r-d-e-r/#default_sort_order","text":"(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val DEFAULT_SORT_ORDER: <ERROR CLASS> (jvm) val DEFAULT_SORT_ORDER: Comparator < OffsetDateTime > Compare by instant, then date-time. Using this Comparator guarantees a deterministic order when sorting.","title":"DEFAULT_SORT_ORDER"},{"location":"api/core/io.islandtime/-offset-date-time/-init-/","text":"core / io.islandtime / OffsetDateTime / <init> <init> (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init>(date: Date , time: Time , offset: UtcOffset ) Create an OffsetDateTime . Exceptions DateTimeException - if the offset is invalid(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init>(year: Int , month: Month , dayOfMonth: Int , hour: Int , minute: Int , second: Int , nanosecond: Int , offset: UtcOffset ) <init>(year: Int , monthNumber: Int , dayOfMonth: Int , hour: Int , minute: Int , second: Int , nanosecond: Int , offset: UtcOffset ) <init>(year: Int , dayOfYear: Int , hour: Int , minute: Int , second: Int , nanosecond: Int , offset: UtcOffset ) Create an OffsetDateTime . Exceptions DateTimeException - if the date-time or offset is invalid(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init>(dateTime: DateTime , offset: UtcOffset ) Create an OffsetDateTime by combining a DateTime and UtcOffset . Parameters dateTime - the local date and time of day offset - the offset from UTC Exceptions DateTimeException - if the offset is invalid Constructor Create an OffsetDateTime by combining a DateTime and UtcOffset .","title":" init "},{"location":"api/core/io.islandtime/-offset-date-time/-init-/#init","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init>(date: Date , time: Time , offset: UtcOffset ) Create an OffsetDateTime .","title":"&lt;init&gt;"},{"location":"api/core/io.islandtime/-offset-date-time/-init-/#exceptions","text":"DateTimeException - if the offset is invalid(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init>(year: Int , month: Month , dayOfMonth: Int , hour: Int , minute: Int , second: Int , nanosecond: Int , offset: UtcOffset ) <init>(year: Int , monthNumber: Int , dayOfMonth: Int , hour: Int , minute: Int , second: Int , nanosecond: Int , offset: UtcOffset ) <init>(year: Int , dayOfYear: Int , hour: Int , minute: Int , second: Int , nanosecond: Int , offset: UtcOffset ) Create an OffsetDateTime .","title":"Exceptions"},{"location":"api/core/io.islandtime/-offset-date-time/-init-/#exceptions_1","text":"DateTimeException - if the date-time or offset is invalid(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init>(dateTime: DateTime , offset: UtcOffset ) Create an OffsetDateTime by combining a DateTime and UtcOffset .","title":"Exceptions"},{"location":"api/core/io.islandtime/-offset-date-time/-init-/#parameters","text":"dateTime - the local date and time of day offset - the offset from UTC","title":"Parameters"},{"location":"api/core/io.islandtime/-offset-date-time/-init-/#exceptions_2","text":"DateTimeException - if the offset is invalid Constructor Create an OffsetDateTime by combining a DateTime and UtcOffset .","title":"Exceptions"},{"location":"api/core/io.islandtime/-offset-date-time/-m-a-x/","text":"core / io.islandtime / OffsetDateTime / MAX MAX (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val MAX: OffsetDateTime The largest supported OffsetDateTime , which can be used as a \"far future\" sentinel.","title":" m a x"},{"location":"api/core/io.islandtime/-offset-date-time/-m-a-x/#max","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val MAX: OffsetDateTime The largest supported OffsetDateTime , which can be used as a \"far future\" sentinel.","title":"MAX"},{"location":"api/core/io.islandtime/-offset-date-time/-m-i-n/","text":"core / io.islandtime / OffsetDateTime / MIN MIN (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val MIN: OffsetDateTime The smallest supported OffsetDateTime , which can be used as a \"far past\" sentinel.","title":" m i n"},{"location":"api/core/io.islandtime/-offset-date-time/-m-i-n/#min","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val MIN: OffsetDateTime The smallest supported OffsetDateTime , which can be used as a \"far past\" sentinel.","title":"MIN"},{"location":"api/core/io.islandtime/-offset-date-time/-t-i-m-e-l-i-n-e_-o-r-d-e-r/","text":"core / io.islandtime / OffsetDateTime / TIMELINE_ORDER TIMELINE_ORDER (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val TIMELINE_ORDER: <ERROR CLASS> (jvm) val TIMELINE_ORDER: Comparator < TimePoint <*>> Compare by timeline order only, ignoring any offset differences.","title":" t i m e l i n e  o r d e r"},{"location":"api/core/io.islandtime/-offset-date-time/-t-i-m-e-l-i-n-e_-o-r-d-e-r/#timeline_order","text":"(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val TIMELINE_ORDER: <ERROR CLASS> (jvm) val TIMELINE_ORDER: Comparator < TimePoint <*>> Compare by timeline order only, ignoring any offset differences.","title":"TIMELINE_ORDER"},{"location":"api/core/io.islandtime/-offset-date-time/additional-nanoseconds-since-unix-epoch/","text":"core / io.islandtime / OffsetDateTime / additionalNanosecondsSinceUnixEpoch additionalNanosecondsSinceUnixEpoch (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val additionalNanosecondsSinceUnixEpoch: IntNanoseconds The number of additional nanoseconds on top of secondsSinceUnixEpoch .","title":"Additional nanoseconds since unix epoch"},{"location":"api/core/io.islandtime/-offset-date-time/additional-nanoseconds-since-unix-epoch/#additionalnanosecondssinceunixepoch","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val additionalNanosecondsSinceUnixEpoch: IntNanoseconds The number of additional nanoseconds on top of secondsSinceUnixEpoch .","title":"additionalNanosecondsSinceUnixEpoch"},{"location":"api/core/io.islandtime/-offset-date-time/adjusted-to/","text":"core / io.islandtime / OffsetDateTime / adjustedTo adjustedTo (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun adjustedTo(newOffset: UtcOffset ): OffsetDateTime Change the offset of an OffsetDateTime , adjusting the date and time components such that the instant represented by it remains the same","title":"Adjusted to"},{"location":"api/core/io.islandtime/-offset-date-time/adjusted-to/#adjustedto","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun adjustedTo(newOffset: UtcOffset ): OffsetDateTime Change the offset of an OffsetDateTime , adjusting the date and time components such that the instant represented by it remains the same","title":"adjustedTo"},{"location":"api/core/io.islandtime/-offset-date-time/copy/","text":"core / io.islandtime / OffsetDateTime / copy copy (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun copy(dateTime: DateTime = this.dateTime, offset: UtcOffset = this.offset): OffsetDateTime fun copy(date: Date = this.date, time: Time = this.time, offset: UtcOffset = this.offset): OffsetDateTime fun copy(year: Int = this.year, dayOfYear: Int = this.dayOfYear, hour: Int = this.hour, minute: Int = this.minute, second: Int = this.second, nanosecond: Int = this.nanosecond, offset: UtcOffset = this.offset): OffsetDateTime fun copy(year: Int = this.year, month: Month = this.month, dayOfMonth: Int = this.dayOfMonth, hour: Int = this.hour, minute: Int = this.minute, second: Int = this.second, nanosecond: Int = this.nanosecond, offset: UtcOffset = this.offset): OffsetDateTime Return a new OffsetDateTime , replacing any of the components with new values.","title":"Copy"},{"location":"api/core/io.islandtime/-offset-date-time/copy/#copy","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun copy(dateTime: DateTime = this.dateTime, offset: UtcOffset = this.offset): OffsetDateTime fun copy(date: Date = this.date, time: Time = this.time, offset: UtcOffset = this.offset): OffsetDateTime fun copy(year: Int = this.year, dayOfYear: Int = this.dayOfYear, hour: Int = this.hour, minute: Int = this.minute, second: Int = this.second, nanosecond: Int = this.nanosecond, offset: UtcOffset = this.offset): OffsetDateTime fun copy(year: Int = this.year, month: Month = this.month, dayOfMonth: Int = this.dayOfMonth, hour: Int = this.hour, minute: Int = this.minute, second: Int = this.second, nanosecond: Int = this.nanosecond, offset: UtcOffset = this.offset): OffsetDateTime Return a new OffsetDateTime , replacing any of the components with new values.","title":"copy"},{"location":"api/core/io.islandtime/-offset-date-time/date-time/","text":"core / io.islandtime / OffsetDateTime / dateTime dateTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val dateTime: DateTime The local date and time of day.","title":"Date time"},{"location":"api/core/io.islandtime/-offset-date-time/date-time/#datetime","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val dateTime: DateTime The local date and time of day.","title":"dateTime"},{"location":"api/core/io.islandtime/-offset-date-time/date/","text":"core / io.islandtime / OffsetDateTime / date date (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline val date: Date The local date.","title":"Date"},{"location":"api/core/io.islandtime/-offset-date-time/date/#date","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline val date: Date The local date.","title":"date"},{"location":"api/core/io.islandtime/-offset-date-time/day-of-month/","text":"core / io.islandtime / OffsetDateTime / dayOfMonth dayOfMonth (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline val dayOfMonth: Int The day of the month.","title":"Day of month"},{"location":"api/core/io.islandtime/-offset-date-time/day-of-month/#dayofmonth","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline val dayOfMonth: Int The day of the month.","title":"dayOfMonth"},{"location":"api/core/io.islandtime/-offset-date-time/day-of-week/","text":"core / io.islandtime / OffsetDateTime / dayOfWeek dayOfWeek (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline val dayOfWeek: DayOfWeek The day of the week.","title":"Day of week"},{"location":"api/core/io.islandtime/-offset-date-time/day-of-week/#dayofweek","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline val dayOfWeek: DayOfWeek The day of the week.","title":"dayOfWeek"},{"location":"api/core/io.islandtime/-offset-date-time/day-of-year/","text":"core / io.islandtime / OffsetDateTime / dayOfYear dayOfYear (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline val dayOfYear: Int The day of the year -- also known as the ordinal date in ISO-8601.","title":"Day of year"},{"location":"api/core/io.islandtime/-offset-date-time/day-of-year/#dayofyear","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline val dayOfYear: Int The day of the year -- also known as the ordinal date in ISO-8601.","title":"dayOfYear"},{"location":"api/core/io.islandtime/-offset-date-time/equals/","text":"core / io.islandtime / OffsetDateTime / equals equals (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun equals(other: Any ?): Boolean","title":"Equals"},{"location":"api/core/io.islandtime/-offset-date-time/equals/#equals","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun equals(other: Any ?): Boolean","title":"equals"},{"location":"api/core/io.islandtime/-offset-date-time/from-millisecond-of-unix-epoch/","text":"core / io.islandtime / OffsetDateTime / fromMillisecondOfUnixEpoch fromMillisecondOfUnixEpoch (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun fromMillisecondOfUnixEpoch(millisecond: Long , offset: UtcOffset ): OffsetDateTime Create an OffsetDateTime from the millisecond of the Unix epoch at offset .","title":"From millisecond of unix epoch"},{"location":"api/core/io.islandtime/-offset-date-time/from-millisecond-of-unix-epoch/#frommillisecondofunixepoch","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun fromMillisecondOfUnixEpoch(millisecond: Long , offset: UtcOffset ): OffsetDateTime Create an OffsetDateTime from the millisecond of the Unix epoch at offset .","title":"fromMillisecondOfUnixEpoch"},{"location":"api/core/io.islandtime/-offset-date-time/from-milliseconds-since-unix-epoch/","text":"core / io.islandtime / OffsetDateTime / fromMillisecondsSinceUnixEpoch fromMillisecondsSinceUnixEpoch (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun fromMillisecondsSinceUnixEpoch(milliseconds: LongMilliseconds , offset: UtcOffset ): OffsetDateTime Create an OffsetDateTime from a duration of milliseconds relative to the Unix epoch at offset .","title":"From milliseconds since unix epoch"},{"location":"api/core/io.islandtime/-offset-date-time/from-milliseconds-since-unix-epoch/#frommillisecondssinceunixepoch","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun fromMillisecondsSinceUnixEpoch(milliseconds: LongMilliseconds , offset: UtcOffset ): OffsetDateTime Create an OffsetDateTime from a duration of milliseconds relative to the Unix epoch at offset .","title":"fromMillisecondsSinceUnixEpoch"},{"location":"api/core/io.islandtime/-offset-date-time/from-second-of-unix-epoch/","text":"core / io.islandtime / OffsetDateTime / fromSecondOfUnixEpoch fromSecondOfUnixEpoch (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun fromSecondOfUnixEpoch(second: Long , nanosecond: Int = 0, offset: UtcOffset ): OffsetDateTime Create an OffsetDateTime from the second of the Unix epoch at offset and optionally, the nanosecond of the second.","title":"From second of unix epoch"},{"location":"api/core/io.islandtime/-offset-date-time/from-second-of-unix-epoch/#fromsecondofunixepoch","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun fromSecondOfUnixEpoch(second: Long , nanosecond: Int = 0, offset: UtcOffset ): OffsetDateTime Create an OffsetDateTime from the second of the Unix epoch at offset and optionally, the nanosecond of the second.","title":"fromSecondOfUnixEpoch"},{"location":"api/core/io.islandtime/-offset-date-time/from-seconds-since-unix-epoch/","text":"core / io.islandtime / OffsetDateTime / fromSecondsSinceUnixEpoch fromSecondsSinceUnixEpoch (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun fromSecondsSinceUnixEpoch(seconds: LongSeconds , nanosecondAdjustment: IntNanoseconds = 0.nanoseconds, offset: UtcOffset ): OffsetDateTime Create an OffsetDateTime from a duration of seconds relative to the Unix epoch at offset , optionally, with some number of additional nanoseconds added to it.","title":"From seconds since unix epoch"},{"location":"api/core/io.islandtime/-offset-date-time/from-seconds-since-unix-epoch/#fromsecondssinceunixepoch","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun fromSecondsSinceUnixEpoch(seconds: LongSeconds , nanosecondAdjustment: IntNanoseconds = 0.nanoseconds, offset: UtcOffset ): OffsetDateTime Create an OffsetDateTime from a duration of seconds relative to the Unix epoch at offset , optionally, with some number of additional nanoseconds added to it.","title":"fromSecondsSinceUnixEpoch"},{"location":"api/core/io.islandtime/-offset-date-time/from-unix-epoch-millisecond/","text":"core / io.islandtime / OffsetDateTime / fromUnixEpochMillisecond fromUnixEpochMillisecond (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun ~~fromUnixEpochMillisecond~~(millisecond: Long , offset: UtcOffset ): OffsetDateTime Deprecated: Use fromMillisecondOfUnixEpoch() instead.","title":"From unix epoch millisecond"},{"location":"api/core/io.islandtime/-offset-date-time/from-unix-epoch-millisecond/#fromunixepochmillisecond","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun ~~fromUnixEpochMillisecond~~(millisecond: Long , offset: UtcOffset ): OffsetDateTime Deprecated: Use fromMillisecondOfUnixEpoch() instead.","title":"fromUnixEpochMillisecond"},{"location":"api/core/io.islandtime/-offset-date-time/from-unix-epoch-second/","text":"core / io.islandtime / OffsetDateTime / fromUnixEpochSecond fromUnixEpochSecond (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun ~~fromUnixEpochSecond~~(second: Long , nanoOfSecond: Int , offset: UtcOffset ): OffsetDateTime Deprecated: Use fromSecondOfUnixEpoch() instead.","title":"From unix epoch second"},{"location":"api/core/io.islandtime/-offset-date-time/from-unix-epoch-second/#fromunixepochsecond","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun ~~fromUnixEpochSecond~~(second: Long , nanoOfSecond: Int , offset: UtcOffset ): OffsetDateTime Deprecated: Use fromSecondOfUnixEpoch() instead.","title":"fromUnixEpochSecond"},{"location":"api/core/io.islandtime/-offset-date-time/hash-code/","text":"core / io.islandtime / OffsetDateTime / hashCode hashCode (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun hashCode(): Int","title":"Hash code"},{"location":"api/core/io.islandtime/-offset-date-time/hash-code/#hashcode","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun hashCode(): Int","title":"hashCode"},{"location":"api/core/io.islandtime/-offset-date-time/hour/","text":"core / io.islandtime / OffsetDateTime / hour hour (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline val hour: Int The hour of the day.","title":"Hour"},{"location":"api/core/io.islandtime/-offset-date-time/hour/#hour","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline val hour: Int The hour of the day.","title":"hour"},{"location":"api/core/io.islandtime/-offset-date-time/instant/","text":"core / io.islandtime / OffsetDateTime / instant instant (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline val instant: Instant The Instant representing the same time point.","title":"Instant"},{"location":"api/core/io.islandtime/-offset-date-time/instant/#instant","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline val instant: Instant The Instant representing the same time point.","title":"instant"},{"location":"api/core/io.islandtime/-offset-date-time/is-in-leap-year/","text":"core / io.islandtime / OffsetDateTime / isInLeapYear isInLeapYear (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline val isInLeapYear: Boolean Check if this date falls within a leap year.","title":"Is in leap year"},{"location":"api/core/io.islandtime/-offset-date-time/is-in-leap-year/#isinleapyear","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline val isInLeapYear: Boolean Check if this date falls within a leap year.","title":"isInLeapYear"},{"location":"api/core/io.islandtime/-offset-date-time/is-leap-day/","text":"core / io.islandtime / OffsetDateTime / isLeapDay isLeapDay (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline val isLeapDay: Boolean Check if this is a leap day.","title":"Is leap day"},{"location":"api/core/io.islandtime/-offset-date-time/is-leap-day/#isleapday","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline val isLeapDay: Boolean Check if this is a leap day.","title":"isLeapDay"},{"location":"api/core/io.islandtime/-offset-date-time/length-of-month/","text":"core / io.islandtime / OffsetDateTime / lengthOfMonth lengthOfMonth (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline val lengthOfMonth: IntDays The length of this date's month in days.","title":"Length of month"},{"location":"api/core/io.islandtime/-offset-date-time/length-of-month/#lengthofmonth","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline val lengthOfMonth: IntDays The length of this date's month in days.","title":"lengthOfMonth"},{"location":"api/core/io.islandtime/-offset-date-time/length-of-year/","text":"core / io.islandtime / OffsetDateTime / lengthOfYear lengthOfYear (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline val lengthOfYear: IntDays The length of this date's year in days.","title":"Length of year"},{"location":"api/core/io.islandtime/-offset-date-time/length-of-year/#lengthofyear","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline val lengthOfYear: IntDays The length of this date's year in days.","title":"lengthOfYear"},{"location":"api/core/io.islandtime/-offset-date-time/milliseconds-since-unix-epoch/","text":"core / io.islandtime / OffsetDateTime / millisecondsSinceUnixEpoch millisecondsSinceUnixEpoch (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val millisecondsSinceUnixEpoch: LongMilliseconds The number of milliseconds since the Unix epoch of 1970-01-01T00:00Z.","title":"Milliseconds since unix epoch"},{"location":"api/core/io.islandtime/-offset-date-time/milliseconds-since-unix-epoch/#millisecondssinceunixepoch","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val millisecondsSinceUnixEpoch: LongMilliseconds The number of milliseconds since the Unix epoch of 1970-01-01T00:00Z.","title":"millisecondsSinceUnixEpoch"},{"location":"api/core/io.islandtime/-offset-date-time/minus/","text":"core / io.islandtime / OffsetDateTime / minus minus (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun minus(period: Period ): OffsetDateTime Return an OffsetDateTime with period subtracted from it. Years are subtracted first, then months, then days. If the day exceeds the maximum month length at any step, it will be coerced into the valid range. This behavior is consistent with the order of operations for period addition as defined in ISO-8601-2. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun minus(duration: Duration ): OffsetDateTime operator fun minus(years: LongYears ): OffsetDateTime operator fun minus(years: IntYears ): OffsetDateTime operator fun minus(months: LongMonths ): OffsetDateTime operator fun minus(months: IntMonths ): OffsetDateTime operator fun minus(weeks: LongWeeks ): OffsetDateTime operator fun minus(weeks: IntWeeks ): OffsetDateTime operator fun minus(days: LongDays ): OffsetDateTime operator fun minus(days: IntDays ): OffsetDateTime operator fun minus(hours: LongHours ): OffsetDateTime operator fun minus(hours: IntHours ): OffsetDateTime operator fun minus(minutes: LongMinutes ): OffsetDateTime operator fun minus(minutes: IntMinutes ): OffsetDateTime operator fun minus(seconds: LongSeconds ): OffsetDateTime operator fun minus(seconds: IntSeconds ): OffsetDateTime operator fun minus(milliseconds: LongMilliseconds ): OffsetDateTime operator fun minus(milliseconds: IntMilliseconds ): OffsetDateTime operator fun minus(microseconds: LongMicroseconds ): OffsetDateTime operator fun minus(microseconds: IntMicroseconds ): OffsetDateTime operator fun minus(nanoseconds: LongNanoseconds ): OffsetDateTime operator fun minus(nanoseconds: IntNanoseconds ): OffsetDateTime","title":"Minus"},{"location":"api/core/io.islandtime/-offset-date-time/minus/#minus","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun minus(period: Period ): OffsetDateTime Return an OffsetDateTime with period subtracted from it. Years are subtracted first, then months, then days. If the day exceeds the maximum month length at any step, it will be coerced into the valid range. This behavior is consistent with the order of operations for period addition as defined in ISO-8601-2. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun minus(duration: Duration ): OffsetDateTime operator fun minus(years: LongYears ): OffsetDateTime operator fun minus(years: IntYears ): OffsetDateTime operator fun minus(months: LongMonths ): OffsetDateTime operator fun minus(months: IntMonths ): OffsetDateTime operator fun minus(weeks: LongWeeks ): OffsetDateTime operator fun minus(weeks: IntWeeks ): OffsetDateTime operator fun minus(days: LongDays ): OffsetDateTime operator fun minus(days: IntDays ): OffsetDateTime operator fun minus(hours: LongHours ): OffsetDateTime operator fun minus(hours: IntHours ): OffsetDateTime operator fun minus(minutes: LongMinutes ): OffsetDateTime operator fun minus(minutes: IntMinutes ): OffsetDateTime operator fun minus(seconds: LongSeconds ): OffsetDateTime operator fun minus(seconds: IntSeconds ): OffsetDateTime operator fun minus(milliseconds: LongMilliseconds ): OffsetDateTime operator fun minus(milliseconds: IntMilliseconds ): OffsetDateTime operator fun minus(microseconds: LongMicroseconds ): OffsetDateTime operator fun minus(microseconds: IntMicroseconds ): OffsetDateTime operator fun minus(nanoseconds: LongNanoseconds ): OffsetDateTime operator fun minus(nanoseconds: IntNanoseconds ): OffsetDateTime","title":"minus"},{"location":"api/core/io.islandtime/-offset-date-time/minute/","text":"core / io.islandtime / OffsetDateTime / minute minute (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline val minute: Int The minute of the hour.","title":"Minute"},{"location":"api/core/io.islandtime/-offset-date-time/minute/#minute","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline val minute: Int The minute of the hour.","title":"minute"},{"location":"api/core/io.islandtime/-offset-date-time/month-number/","text":"core / io.islandtime / OffsetDateTime / monthNumber monthNumber (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline val monthNumber: Int The ISO month number, from 1-12.","title":"Month number"},{"location":"api/core/io.islandtime/-offset-date-time/month-number/#monthnumber","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline val monthNumber: Int The ISO month number, from 1-12.","title":"monthNumber"},{"location":"api/core/io.islandtime/-offset-date-time/month/","text":"core / io.islandtime / OffsetDateTime / month month (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline val month: Month The month of the year.","title":"Month"},{"location":"api/core/io.islandtime/-offset-date-time/month/#month","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline val month: Month The month of the year.","title":"month"},{"location":"api/core/io.islandtime/-offset-date-time/nanosecond/","text":"core / io.islandtime / OffsetDateTime / nanosecond nanosecond (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val nanosecond: Int The nanosecond of the second.","title":"Nanosecond"},{"location":"api/core/io.islandtime/-offset-date-time/nanosecond/#nanosecond","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val nanosecond: Int The nanosecond of the second.","title":"nanosecond"},{"location":"api/core/io.islandtime/-offset-date-time/offset-time/","text":"core / io.islandtime / OffsetDateTime / offsetTime offsetTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline val offsetTime: OffsetTime The combined time of day and offset.","title":"Offset time"},{"location":"api/core/io.islandtime/-offset-date-time/offset-time/#offsettime","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline val offsetTime: OffsetTime The combined time of day and offset.","title":"offsetTime"},{"location":"api/core/io.islandtime/-offset-date-time/offset/","text":"core / io.islandtime / OffsetDateTime / offset offset (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val offset: UtcOffset The offset from UTC.","title":"Offset"},{"location":"api/core/io.islandtime/-offset-date-time/offset/#offset","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val offset: UtcOffset The offset from UTC.","title":"offset"},{"location":"api/core/io.islandtime/-offset-date-time/plus/","text":"core / io.islandtime / OffsetDateTime / plus plus (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun plus(period: Period ): OffsetDateTime Return an OffsetDateTime with period added to it. Years are added first, then months, then days. If the day exceeds the maximum month length at any step, it will be coerced into the valid range. This behavior is consistent with the order of operations for period addition as defined in ISO-8601-2. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun plus(duration: Duration ): OffsetDateTime operator fun plus(years: LongYears ): OffsetDateTime operator fun plus(years: IntYears ): OffsetDateTime operator fun plus(months: LongMonths ): OffsetDateTime operator fun plus(months: IntMonths ): OffsetDateTime operator fun plus(weeks: LongWeeks ): OffsetDateTime operator fun plus(weeks: IntWeeks ): OffsetDateTime operator fun plus(days: LongDays ): OffsetDateTime operator fun plus(days: IntDays ): OffsetDateTime operator fun plus(hours: LongHours ): OffsetDateTime operator fun plus(hours: IntHours ): OffsetDateTime operator fun plus(minutes: LongMinutes ): OffsetDateTime operator fun plus(minutes: IntMinutes ): OffsetDateTime operator fun plus(seconds: LongSeconds ): OffsetDateTime operator fun plus(seconds: IntSeconds ): OffsetDateTime operator fun plus(milliseconds: LongMilliseconds ): OffsetDateTime operator fun plus(milliseconds: IntMilliseconds ): OffsetDateTime operator fun plus(microseconds: LongMicroseconds ): OffsetDateTime operator fun plus(microseconds: IntMicroseconds ): OffsetDateTime operator fun plus(nanoseconds: LongNanoseconds ): OffsetDateTime operator fun plus(nanoseconds: IntNanoseconds ): OffsetDateTime","title":"Plus"},{"location":"api/core/io.islandtime/-offset-date-time/plus/#plus","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun plus(period: Period ): OffsetDateTime Return an OffsetDateTime with period added to it. Years are added first, then months, then days. If the day exceeds the maximum month length at any step, it will be coerced into the valid range. This behavior is consistent with the order of operations for period addition as defined in ISO-8601-2. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun plus(duration: Duration ): OffsetDateTime operator fun plus(years: LongYears ): OffsetDateTime operator fun plus(years: IntYears ): OffsetDateTime operator fun plus(months: LongMonths ): OffsetDateTime operator fun plus(months: IntMonths ): OffsetDateTime operator fun plus(weeks: LongWeeks ): OffsetDateTime operator fun plus(weeks: IntWeeks ): OffsetDateTime operator fun plus(days: LongDays ): OffsetDateTime operator fun plus(days: IntDays ): OffsetDateTime operator fun plus(hours: LongHours ): OffsetDateTime operator fun plus(hours: IntHours ): OffsetDateTime operator fun plus(minutes: LongMinutes ): OffsetDateTime operator fun plus(minutes: IntMinutes ): OffsetDateTime operator fun plus(seconds: LongSeconds ): OffsetDateTime operator fun plus(seconds: IntSeconds ): OffsetDateTime operator fun plus(milliseconds: LongMilliseconds ): OffsetDateTime operator fun plus(milliseconds: IntMilliseconds ): OffsetDateTime operator fun plus(microseconds: LongMicroseconds ): OffsetDateTime operator fun plus(microseconds: IntMicroseconds ): OffsetDateTime operator fun plus(nanoseconds: LongNanoseconds ): OffsetDateTime operator fun plus(nanoseconds: IntNanoseconds ): OffsetDateTime","title":"plus"},{"location":"api/core/io.islandtime/-offset-date-time/range-to/","text":"core / io.islandtime / OffsetDateTime / rangeTo rangeTo (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun rangeTo(other: OffsetDateTime ): OffsetDateTimeInterval","title":"Range to"},{"location":"api/core/io.islandtime/-offset-date-time/range-to/#rangeto","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun rangeTo(other: OffsetDateTime ): OffsetDateTimeInterval","title":"rangeTo"},{"location":"api/core/io.islandtime/-offset-date-time/second/","text":"core / io.islandtime / OffsetDateTime / second second (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline val second: Int The second of the minute.","title":"Second"},{"location":"api/core/io.islandtime/-offset-date-time/second/#second","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline val second: Int The second of the minute.","title":"second"},{"location":"api/core/io.islandtime/-offset-date-time/seconds-since-unix-epoch/","text":"core / io.islandtime / OffsetDateTime / secondsSinceUnixEpoch secondsSinceUnixEpoch (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val secondsSinceUnixEpoch: LongSeconds The number of seconds since the Unix epoch of 1970-01-01T00:00Z.","title":"Seconds since unix epoch"},{"location":"api/core/io.islandtime/-offset-date-time/seconds-since-unix-epoch/#secondssinceunixepoch","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val secondsSinceUnixEpoch: LongSeconds The number of seconds since the Unix epoch of 1970-01-01T00:00Z.","title":"secondsSinceUnixEpoch"},{"location":"api/core/io.islandtime/-offset-date-time/time/","text":"core / io.islandtime / OffsetDateTime / time time (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline val time: Time The local time of day.","title":"Time"},{"location":"api/core/io.islandtime/-offset-date-time/time/#time","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline val time: Time The local time of day.","title":"time"},{"location":"api/core/io.islandtime/-offset-date-time/to-string/","text":"core / io.islandtime / OffsetDateTime / toString toString (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toString(): <ERROR CLASS> (jvm) fun toString(): String","title":"To string"},{"location":"api/core/io.islandtime/-offset-date-time/to-string/#tostring","text":"(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toString(): <ERROR CLASS> (jvm) fun toString(): String","title":"toString"},{"location":"api/core/io.islandtime/-offset-date-time/year-month/","text":"core / io.islandtime / OffsetDateTime / yearMonth yearMonth (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline val yearMonth: YearMonth The combined year and month.","title":"Year month"},{"location":"api/core/io.islandtime/-offset-date-time/year-month/#yearmonth","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline val yearMonth: YearMonth The combined year and month.","title":"yearMonth"},{"location":"api/core/io.islandtime/-offset-date-time/year/","text":"core / io.islandtime / OffsetDateTime / year year (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline val year: Int The year.","title":"Year"},{"location":"api/core/io.islandtime/-offset-date-time/year/#year","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline val year: Int The year.","title":"year"},{"location":"api/core/io.islandtime/-offset-time/","text":"core / io.islandtime / OffsetTime OffsetTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) class OffsetTime A time of day with an offset from UTC. Constructors Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init> Create an OffsetTime . <init>(hour: Int , minute: Int , second: Int = 0, nanosecond: Int = 0, offset: UtcOffset ) A time of day with an offset from UTC. <init>(time: Time , offset: UtcOffset ) Properties Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) hour The hour of the day. val hour: Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) minute The minute of the hour. val minute: Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) nanosecond The nanosecond of the second. val nanosecond: Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) nanosecondsSinceStartOfUtcDay The number of nanoseconds since the start of the day, but normalized to a UTC offset of zero, allowing OffsetTime objects with different offsets to be compared. val nanosecondsSinceStartOfUtcDay: LongNanoseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) offset The offset from UTC. val offset: UtcOffset (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) second The second of the minute. val second: Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) time The time of day. val time: Time Functions Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) adjustedTo Return an OffsetTime with the offset changed to newOffset , adjusting the time component such that the instant remains the same. fun adjustedTo(newOffset: UtcOffset ): OffsetTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) compareTo Compare to another OffsetTime based on timeline order, ignoring offset differences. operator fun compareTo(other: OffsetTime ): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) copy Return a copy of this OffsetTime , replacing individual components with new values as desired. fun copy(time: Time = this.time, offset: UtcOffset = this.offset): OffsetTime fun copy(hour: Int = this.hour, minute: Int = this.minute, second: Int = this.second, nanosecond: Int = this.nanosecond, offset: UtcOffset = this.offset): OffsetTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) equals fun equals(other: Any ?): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) hashCode fun hashCode(): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) minus operator fun minus(duration: Duration ): OffsetTime operator fun minus(hours: LongHours ): OffsetTime operator fun minus(hours: IntHours ): OffsetTime operator fun minus(minutes: LongMinutes ): OffsetTime operator fun minus(minutes: IntMinutes ): OffsetTime operator fun minus(seconds: LongSeconds ): OffsetTime operator fun minus(seconds: IntSeconds ): OffsetTime operator fun minus(milliseconds: LongMilliseconds ): OffsetTime operator fun minus(milliseconds: IntMilliseconds ): OffsetTime operator fun minus(microseconds: LongMicroseconds ): OffsetTime operator fun minus(microseconds: IntMicroseconds ): OffsetTime operator fun minus(nanoseconds: LongNanoseconds ): OffsetTime operator fun minus(nanoseconds: IntNanoseconds ): OffsetTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) plus operator fun plus(duration: Duration ): OffsetTime operator fun plus(hours: LongHours ): OffsetTime operator fun plus(hours: IntHours ): OffsetTime operator fun plus(minutes: LongMinutes ): OffsetTime operator fun plus(minutes: IntMinutes ): OffsetTime operator fun plus(seconds: LongSeconds ): OffsetTime operator fun plus(seconds: IntSeconds ): OffsetTime operator fun plus(milliseconds: LongMilliseconds ): OffsetTime operator fun plus(milliseconds: IntMilliseconds ): OffsetTime operator fun plus(microseconds: LongMicroseconds ): OffsetTime operator fun plus(microseconds: IntMicroseconds ): OffsetTime operator fun plus(nanoseconds: LongNanoseconds ): OffsetTime operator fun plus(nanoseconds: IntNanoseconds ): OffsetTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toString fun toString(): String Companion Object Properties Name Summary DEFAULT_SORT_ORDER Compare by UTC equivalent instant, then time. Using this Comparator guarantees a deterministic order when sorting.(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val DEFAULT_SORT_ORDER: <ERROR CLASS> (jvm) val DEFAULT_SORT_ORDER: Comparator < OffsetTime > (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MAX The largest allowed OffsetTime -- 23:59:59.999999999-18:00 . val MAX: OffsetTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MIN The smallest allowed OffsetTime -- 00:00+18:00 . val MIN: OffsetTime TIMELINE_ORDER Compare by timeline order only, ignoring any offset differences.(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val TIMELINE_ORDER: <ERROR CLASS> (jvm) val TIMELINE_ORDER: Comparator < OffsetTime > Extension Functions Name Summary (jvm) toJavaOffsetTime Convert to an equivalent Java OffsetTime . fun OffsetTime .toJavaOffsetTime(): OffsetTime","title":"Index"},{"location":"api/core/io.islandtime/-offset-time/#offsettime","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) class OffsetTime A time of day with an offset from UTC.","title":"OffsetTime"},{"location":"api/core/io.islandtime/-offset-time/#constructors","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init> Create an OffsetTime . <init>(hour: Int , minute: Int , second: Int = 0, nanosecond: Int = 0, offset: UtcOffset ) A time of day with an offset from UTC. <init>(time: Time , offset: UtcOffset )","title":"Constructors"},{"location":"api/core/io.islandtime/-offset-time/#properties","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) hour The hour of the day. val hour: Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) minute The minute of the hour. val minute: Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) nanosecond The nanosecond of the second. val nanosecond: Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) nanosecondsSinceStartOfUtcDay The number of nanoseconds since the start of the day, but normalized to a UTC offset of zero, allowing OffsetTime objects with different offsets to be compared. val nanosecondsSinceStartOfUtcDay: LongNanoseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) offset The offset from UTC. val offset: UtcOffset (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) second The second of the minute. val second: Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) time The time of day. val time: Time","title":"Properties"},{"location":"api/core/io.islandtime/-offset-time/#functions","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) adjustedTo Return an OffsetTime with the offset changed to newOffset , adjusting the time component such that the instant remains the same. fun adjustedTo(newOffset: UtcOffset ): OffsetTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) compareTo Compare to another OffsetTime based on timeline order, ignoring offset differences. operator fun compareTo(other: OffsetTime ): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) copy Return a copy of this OffsetTime , replacing individual components with new values as desired. fun copy(time: Time = this.time, offset: UtcOffset = this.offset): OffsetTime fun copy(hour: Int = this.hour, minute: Int = this.minute, second: Int = this.second, nanosecond: Int = this.nanosecond, offset: UtcOffset = this.offset): OffsetTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) equals fun equals(other: Any ?): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) hashCode fun hashCode(): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) minus operator fun minus(duration: Duration ): OffsetTime operator fun minus(hours: LongHours ): OffsetTime operator fun minus(hours: IntHours ): OffsetTime operator fun minus(minutes: LongMinutes ): OffsetTime operator fun minus(minutes: IntMinutes ): OffsetTime operator fun minus(seconds: LongSeconds ): OffsetTime operator fun minus(seconds: IntSeconds ): OffsetTime operator fun minus(milliseconds: LongMilliseconds ): OffsetTime operator fun minus(milliseconds: IntMilliseconds ): OffsetTime operator fun minus(microseconds: LongMicroseconds ): OffsetTime operator fun minus(microseconds: IntMicroseconds ): OffsetTime operator fun minus(nanoseconds: LongNanoseconds ): OffsetTime operator fun minus(nanoseconds: IntNanoseconds ): OffsetTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) plus operator fun plus(duration: Duration ): OffsetTime operator fun plus(hours: LongHours ): OffsetTime operator fun plus(hours: IntHours ): OffsetTime operator fun plus(minutes: LongMinutes ): OffsetTime operator fun plus(minutes: IntMinutes ): OffsetTime operator fun plus(seconds: LongSeconds ): OffsetTime operator fun plus(seconds: IntSeconds ): OffsetTime operator fun plus(milliseconds: LongMilliseconds ): OffsetTime operator fun plus(milliseconds: IntMilliseconds ): OffsetTime operator fun plus(microseconds: LongMicroseconds ): OffsetTime operator fun plus(microseconds: IntMicroseconds ): OffsetTime operator fun plus(nanoseconds: LongNanoseconds ): OffsetTime operator fun plus(nanoseconds: IntNanoseconds ): OffsetTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toString fun toString(): String","title":"Functions"},{"location":"api/core/io.islandtime/-offset-time/#companion-object-properties","text":"Name Summary DEFAULT_SORT_ORDER Compare by UTC equivalent instant, then time. Using this Comparator guarantees a deterministic order when sorting.(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val DEFAULT_SORT_ORDER: <ERROR CLASS> (jvm) val DEFAULT_SORT_ORDER: Comparator < OffsetTime > (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MAX The largest allowed OffsetTime -- 23:59:59.999999999-18:00 . val MAX: OffsetTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MIN The smallest allowed OffsetTime -- 00:00+18:00 . val MIN: OffsetTime TIMELINE_ORDER Compare by timeline order only, ignoring any offset differences.(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val TIMELINE_ORDER: <ERROR CLASS> (jvm) val TIMELINE_ORDER: Comparator < OffsetTime >","title":"Companion Object Properties"},{"location":"api/core/io.islandtime/-offset-time/#extension-functions","text":"Name Summary (jvm) toJavaOffsetTime Convert to an equivalent Java OffsetTime . fun OffsetTime .toJavaOffsetTime(): OffsetTime","title":"Extension Functions"},{"location":"api/core/io.islandtime/-offset-time/-d-e-f-a-u-l-t_-s-o-r-t_-o-r-d-e-r/","text":"core / io.islandtime / OffsetTime / DEFAULT_SORT_ORDER DEFAULT_SORT_ORDER (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val DEFAULT_SORT_ORDER: <ERROR CLASS> (jvm) val DEFAULT_SORT_ORDER: Comparator < OffsetTime > Compare by UTC equivalent instant, then time. Using this Comparator guarantees a deterministic order when sorting.","title":" d e f a u l t  s o r t  o r d e r"},{"location":"api/core/io.islandtime/-offset-time/-d-e-f-a-u-l-t_-s-o-r-t_-o-r-d-e-r/#default_sort_order","text":"(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val DEFAULT_SORT_ORDER: <ERROR CLASS> (jvm) val DEFAULT_SORT_ORDER: Comparator < OffsetTime > Compare by UTC equivalent instant, then time. Using this Comparator guarantees a deterministic order when sorting.","title":"DEFAULT_SORT_ORDER"},{"location":"api/core/io.islandtime/-offset-time/-init-/","text":"core / io.islandtime / OffsetTime / <init> <init> (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init>(hour: Int , minute: Int , second: Int = 0, nanosecond: Int = 0, offset: UtcOffset ) Create an OffsetTime . Exceptions DateTimeException - if the time or offset is invalid(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init>(time: Time , offset: UtcOffset ) A time of day with an offset from UTC.","title":" init "},{"location":"api/core/io.islandtime/-offset-time/-init-/#init","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init>(hour: Int , minute: Int , second: Int = 0, nanosecond: Int = 0, offset: UtcOffset ) Create an OffsetTime .","title":"&lt;init&gt;"},{"location":"api/core/io.islandtime/-offset-time/-init-/#exceptions","text":"DateTimeException - if the time or offset is invalid(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init>(time: Time , offset: UtcOffset ) A time of day with an offset from UTC.","title":"Exceptions"},{"location":"api/core/io.islandtime/-offset-time/-m-a-x/","text":"core / io.islandtime / OffsetTime / MAX MAX (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val MAX: OffsetTime The largest allowed OffsetTime -- 23:59:59.999999999-18:00 .","title":" m a x"},{"location":"api/core/io.islandtime/-offset-time/-m-a-x/#max","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val MAX: OffsetTime The largest allowed OffsetTime -- 23:59:59.999999999-18:00 .","title":"MAX"},{"location":"api/core/io.islandtime/-offset-time/-m-i-n/","text":"core / io.islandtime / OffsetTime / MIN MIN (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val MIN: OffsetTime The smallest allowed OffsetTime -- 00:00+18:00 .","title":" m i n"},{"location":"api/core/io.islandtime/-offset-time/-m-i-n/#min","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val MIN: OffsetTime The smallest allowed OffsetTime -- 00:00+18:00 .","title":"MIN"},{"location":"api/core/io.islandtime/-offset-time/-t-i-m-e-l-i-n-e_-o-r-d-e-r/","text":"core / io.islandtime / OffsetTime / TIMELINE_ORDER TIMELINE_ORDER (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val TIMELINE_ORDER: <ERROR CLASS> (jvm) val TIMELINE_ORDER: Comparator < OffsetTime > Compare by timeline order only, ignoring any offset differences.","title":" t i m e l i n e  o r d e r"},{"location":"api/core/io.islandtime/-offset-time/-t-i-m-e-l-i-n-e_-o-r-d-e-r/#timeline_order","text":"(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val TIMELINE_ORDER: <ERROR CLASS> (jvm) val TIMELINE_ORDER: Comparator < OffsetTime > Compare by timeline order only, ignoring any offset differences.","title":"TIMELINE_ORDER"},{"location":"api/core/io.islandtime/-offset-time/adjusted-to/","text":"core / io.islandtime / OffsetTime / adjustedTo adjustedTo (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun adjustedTo(newOffset: UtcOffset ): OffsetTime Return an OffsetTime with the offset changed to newOffset , adjusting the time component such that the instant remains the same.","title":"Adjusted to"},{"location":"api/core/io.islandtime/-offset-time/adjusted-to/#adjustedto","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun adjustedTo(newOffset: UtcOffset ): OffsetTime Return an OffsetTime with the offset changed to newOffset , adjusting the time component such that the instant remains the same.","title":"adjustedTo"},{"location":"api/core/io.islandtime/-offset-time/compare-to/","text":"core / io.islandtime / OffsetTime / compareTo compareTo (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun compareTo(other: OffsetTime ): Int Compare to another OffsetTime based on timeline order, ignoring offset differences. See Also DEFAULT_SORT_ORDER TIMELINE_ORDER","title":"Compare to"},{"location":"api/core/io.islandtime/-offset-time/compare-to/#compareto","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun compareTo(other: OffsetTime ): Int Compare to another OffsetTime based on timeline order, ignoring offset differences. See Also DEFAULT_SORT_ORDER TIMELINE_ORDER","title":"compareTo"},{"location":"api/core/io.islandtime/-offset-time/copy/","text":"core / io.islandtime / OffsetTime / copy copy (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun copy(time: Time = this.time, offset: UtcOffset = this.offset): OffsetTime fun copy(hour: Int = this.hour, minute: Int = this.minute, second: Int = this.second, nanosecond: Int = this.nanosecond, offset: UtcOffset = this.offset): OffsetTime Return a copy of this OffsetTime , replacing individual components with new values as desired. Exceptions DateTimeException - if the resulting time or offset is invalid","title":"Copy"},{"location":"api/core/io.islandtime/-offset-time/copy/#copy","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun copy(time: Time = this.time, offset: UtcOffset = this.offset): OffsetTime fun copy(hour: Int = this.hour, minute: Int = this.minute, second: Int = this.second, nanosecond: Int = this.nanosecond, offset: UtcOffset = this.offset): OffsetTime Return a copy of this OffsetTime , replacing individual components with new values as desired.","title":"copy"},{"location":"api/core/io.islandtime/-offset-time/copy/#exceptions","text":"DateTimeException - if the resulting time or offset is invalid","title":"Exceptions"},{"location":"api/core/io.islandtime/-offset-time/equals/","text":"core / io.islandtime / OffsetTime / equals equals (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun equals(other: Any ?): Boolean","title":"Equals"},{"location":"api/core/io.islandtime/-offset-time/equals/#equals","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun equals(other: Any ?): Boolean","title":"equals"},{"location":"api/core/io.islandtime/-offset-time/hash-code/","text":"core / io.islandtime / OffsetTime / hashCode hashCode (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun hashCode(): Int","title":"Hash code"},{"location":"api/core/io.islandtime/-offset-time/hash-code/#hashcode","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun hashCode(): Int","title":"hashCode"},{"location":"api/core/io.islandtime/-offset-time/hour/","text":"core / io.islandtime / OffsetTime / hour hour (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline val hour: Int The hour of the day.","title":"Hour"},{"location":"api/core/io.islandtime/-offset-time/hour/#hour","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline val hour: Int The hour of the day.","title":"hour"},{"location":"api/core/io.islandtime/-offset-time/minus/","text":"core / io.islandtime / OffsetTime / minus minus (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun minus(duration: Duration ): OffsetTime operator fun minus(hours: LongHours ): OffsetTime operator fun minus(hours: IntHours ): OffsetTime operator fun minus(minutes: LongMinutes ): OffsetTime operator fun minus(minutes: IntMinutes ): OffsetTime operator fun minus(seconds: LongSeconds ): OffsetTime operator fun minus(seconds: IntSeconds ): OffsetTime operator fun minus(milliseconds: LongMilliseconds ): OffsetTime operator fun minus(milliseconds: IntMilliseconds ): OffsetTime operator fun minus(microseconds: LongMicroseconds ): OffsetTime operator fun minus(microseconds: IntMicroseconds ): OffsetTime operator fun minus(nanoseconds: LongNanoseconds ): OffsetTime operator fun minus(nanoseconds: IntNanoseconds ): OffsetTime","title":"Minus"},{"location":"api/core/io.islandtime/-offset-time/minus/#minus","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun minus(duration: Duration ): OffsetTime operator fun minus(hours: LongHours ): OffsetTime operator fun minus(hours: IntHours ): OffsetTime operator fun minus(minutes: LongMinutes ): OffsetTime operator fun minus(minutes: IntMinutes ): OffsetTime operator fun minus(seconds: LongSeconds ): OffsetTime operator fun minus(seconds: IntSeconds ): OffsetTime operator fun minus(milliseconds: LongMilliseconds ): OffsetTime operator fun minus(milliseconds: IntMilliseconds ): OffsetTime operator fun minus(microseconds: LongMicroseconds ): OffsetTime operator fun minus(microseconds: IntMicroseconds ): OffsetTime operator fun minus(nanoseconds: LongNanoseconds ): OffsetTime operator fun minus(nanoseconds: IntNanoseconds ): OffsetTime","title":"minus"},{"location":"api/core/io.islandtime/-offset-time/minute/","text":"core / io.islandtime / OffsetTime / minute minute (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline val minute: Int The minute of the hour.","title":"Minute"},{"location":"api/core/io.islandtime/-offset-time/minute/#minute","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline val minute: Int The minute of the hour.","title":"minute"},{"location":"api/core/io.islandtime/-offset-time/nanosecond/","text":"core / io.islandtime / OffsetTime / nanosecond nanosecond (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline val nanosecond: Int The nanosecond of the second.","title":"Nanosecond"},{"location":"api/core/io.islandtime/-offset-time/nanosecond/#nanosecond","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline val nanosecond: Int The nanosecond of the second.","title":"nanosecond"},{"location":"api/core/io.islandtime/-offset-time/nanoseconds-since-start-of-utc-day/","text":"core / io.islandtime / OffsetTime / nanosecondsSinceStartOfUtcDay nanosecondsSinceStartOfUtcDay (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val nanosecondsSinceStartOfUtcDay: LongNanoseconds The number of nanoseconds since the start of the day, but normalized to a UTC offset of zero, allowing OffsetTime objects with different offsets to be compared.","title":"Nanoseconds since start of utc day"},{"location":"api/core/io.islandtime/-offset-time/nanoseconds-since-start-of-utc-day/#nanosecondssincestartofutcday","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val nanosecondsSinceStartOfUtcDay: LongNanoseconds The number of nanoseconds since the start of the day, but normalized to a UTC offset of zero, allowing OffsetTime objects with different offsets to be compared.","title":"nanosecondsSinceStartOfUtcDay"},{"location":"api/core/io.islandtime/-offset-time/offset/","text":"core / io.islandtime / OffsetTime / offset offset (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val offset: UtcOffset The offset from UTC.","title":"Offset"},{"location":"api/core/io.islandtime/-offset-time/offset/#offset","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val offset: UtcOffset The offset from UTC.","title":"offset"},{"location":"api/core/io.islandtime/-offset-time/plus/","text":"core / io.islandtime / OffsetTime / plus plus (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun plus(duration: Duration ): OffsetTime operator fun plus(hours: LongHours ): OffsetTime operator fun plus(hours: IntHours ): OffsetTime operator fun plus(minutes: LongMinutes ): OffsetTime operator fun plus(minutes: IntMinutes ): OffsetTime operator fun plus(seconds: LongSeconds ): OffsetTime operator fun plus(seconds: IntSeconds ): OffsetTime operator fun plus(milliseconds: LongMilliseconds ): OffsetTime operator fun plus(milliseconds: IntMilliseconds ): OffsetTime operator fun plus(microseconds: LongMicroseconds ): OffsetTime operator fun plus(microseconds: IntMicroseconds ): OffsetTime operator fun plus(nanoseconds: LongNanoseconds ): OffsetTime operator fun plus(nanoseconds: IntNanoseconds ): OffsetTime","title":"Plus"},{"location":"api/core/io.islandtime/-offset-time/plus/#plus","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun plus(duration: Duration ): OffsetTime operator fun plus(hours: LongHours ): OffsetTime operator fun plus(hours: IntHours ): OffsetTime operator fun plus(minutes: LongMinutes ): OffsetTime operator fun plus(minutes: IntMinutes ): OffsetTime operator fun plus(seconds: LongSeconds ): OffsetTime operator fun plus(seconds: IntSeconds ): OffsetTime operator fun plus(milliseconds: LongMilliseconds ): OffsetTime operator fun plus(milliseconds: IntMilliseconds ): OffsetTime operator fun plus(microseconds: LongMicroseconds ): OffsetTime operator fun plus(microseconds: IntMicroseconds ): OffsetTime operator fun plus(nanoseconds: LongNanoseconds ): OffsetTime operator fun plus(nanoseconds: IntNanoseconds ): OffsetTime","title":"plus"},{"location":"api/core/io.islandtime/-offset-time/second/","text":"core / io.islandtime / OffsetTime / second second (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline val second: Int The second of the minute.","title":"Second"},{"location":"api/core/io.islandtime/-offset-time/second/#second","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline val second: Int The second of the minute.","title":"second"},{"location":"api/core/io.islandtime/-offset-time/time/","text":"core / io.islandtime / OffsetTime / time time (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val time: Time The time of day.","title":"Time"},{"location":"api/core/io.islandtime/-offset-time/time/#time","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val time: Time The time of day.","title":"time"},{"location":"api/core/io.islandtime/-offset-time/to-string/","text":"core / io.islandtime / OffsetTime / toString toString (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toString(): String","title":"To string"},{"location":"api/core/io.islandtime/-offset-time/to-string/#tostring","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toString(): String","title":"toString"},{"location":"api/core/io.islandtime/-time/","text":"core / io.islandtime / Time Time (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) class Time : Comparable < Time > A time of day in an arbitrary region. Constructors Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init> Create a Time from its individual components. <init>(hour: Int , minute: Int , second: Int = 0, nanosecond: Int = 0) Properties Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) hour The hour of the day. val hour: Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) minute The minute of the hour. val minute: Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) nanosecond The nanosecond of the second. val nanosecond: Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) nanosecondOfDay The nanosecond of the day. val nanosecondOfDay: Long (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) nanosecondsSinceStartOfDay The number of nanoseconds since the start of the day. val nanosecondsSinceStartOfDay: LongNanoseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) second The second of the minute. val second: Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) secondOfDay The second of the day. val secondOfDay: Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) secondsSinceStartOfDay The number of seconds since the start of the day. val secondsSinceStartOfDay: IntSeconds Functions Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) compareTo fun compareTo(other: Time ): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) component1 operator fun component1(): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) component2 operator fun component2(): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) component3 operator fun component3(): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) component4 operator fun component4(): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) copy Return a copy of this Time , replacing individual components with new values as desired. fun copy(hour: Int = this.hour, minute: Int = this.minute, second: Int = this.second, nanosecond: Int = this.nanosecond): Time (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) equals fun equals(other: Any ?): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) hashCode fun hashCode(): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) minus operator fun minus(duration: Duration ): Time operator fun minus(hours: LongHours ): Time operator fun minus(hours: IntHours ): Time operator fun minus(minutes: LongMinutes ): Time operator fun minus(minutes: IntMinutes ): Time operator fun minus(seconds: LongSeconds ): Time operator fun minus(seconds: IntSeconds ): Time operator fun minus(milliseconds: LongMilliseconds ): Time operator fun minus(milliseconds: IntMilliseconds ): Time operator fun minus(microseconds: LongMicroseconds ): Time operator fun minus(microseconds: IntMicroseconds ): Time operator fun minus(nanoseconds: LongNanoseconds ): Time operator fun minus(nanoseconds: IntNanoseconds ): Time (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) plus operator fun plus(duration: Duration ): Time operator fun plus(hours: LongHours ): Time operator fun plus(hours: IntHours ): Time operator fun plus(minutes: LongMinutes ): Time operator fun plus(minutes: IntMinutes ): Time operator fun plus(seconds: LongSeconds ): Time operator fun plus(seconds: IntSeconds ): Time operator fun plus(milliseconds: LongMilliseconds ): Time operator fun plus(milliseconds: IntMilliseconds ): Time operator fun plus(microseconds: LongMicroseconds ): Time operator fun plus(microseconds: IntMicroseconds ): Time operator fun plus(nanoseconds: LongNanoseconds ): Time operator fun plus(nanoseconds: IntNanoseconds ): Time toString Convert this time to a string in ISO-8601 extended format.(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toString(): <ERROR CLASS> (jvm) fun toString(): String Companion Object Properties Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MAX val MAX: Time (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MIDNIGHT val MIDNIGHT: Time (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MIN val MIN: Time (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) NOON val NOON: Time Companion Object Functions Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fromNanosecondOfDay Create a Time from the nanosecond of the day. fun fromNanosecondOfDay(nanosecondOfDay: Long ): Time (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fromNanosecondsSinceStartOfDay Create the Time at a number of nanoseconds since the start of the day. fun fromNanosecondsSinceStartOfDay(nanoseconds: LongNanoseconds ): Time (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fromSecondOfDay Create a Time from the second of the day and optionally, the number of nanoseconds within that second. fun fromSecondOfDay(secondOfDay: Int , nanosecond: Int = 0): Time (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fromSecondsSinceStartOfDay Create the Time at a number of seconds since the start of the day and optionally, a number of additional nanoseconds. fun fromSecondsSinceStartOfDay(seconds: IntSeconds , nanosecondAdjustment: IntNanoseconds = 0.nanoseconds): Time Extension Functions Name Summary (jvm) toJavaLocalTime Convert to an equivalent Java LocalTime . fun Time .toJavaLocalTime(): LocalTime","title":"Index"},{"location":"api/core/io.islandtime/-time/#time","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) class Time : Comparable < Time > A time of day in an arbitrary region.","title":"Time"},{"location":"api/core/io.islandtime/-time/#constructors","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init> Create a Time from its individual components. <init>(hour: Int , minute: Int , second: Int = 0, nanosecond: Int = 0)","title":"Constructors"},{"location":"api/core/io.islandtime/-time/#properties","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) hour The hour of the day. val hour: Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) minute The minute of the hour. val minute: Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) nanosecond The nanosecond of the second. val nanosecond: Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) nanosecondOfDay The nanosecond of the day. val nanosecondOfDay: Long (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) nanosecondsSinceStartOfDay The number of nanoseconds since the start of the day. val nanosecondsSinceStartOfDay: LongNanoseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) second The second of the minute. val second: Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) secondOfDay The second of the day. val secondOfDay: Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) secondsSinceStartOfDay The number of seconds since the start of the day. val secondsSinceStartOfDay: IntSeconds","title":"Properties"},{"location":"api/core/io.islandtime/-time/#functions","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) compareTo fun compareTo(other: Time ): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) component1 operator fun component1(): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) component2 operator fun component2(): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) component3 operator fun component3(): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) component4 operator fun component4(): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) copy Return a copy of this Time , replacing individual components with new values as desired. fun copy(hour: Int = this.hour, minute: Int = this.minute, second: Int = this.second, nanosecond: Int = this.nanosecond): Time (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) equals fun equals(other: Any ?): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) hashCode fun hashCode(): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) minus operator fun minus(duration: Duration ): Time operator fun minus(hours: LongHours ): Time operator fun minus(hours: IntHours ): Time operator fun minus(minutes: LongMinutes ): Time operator fun minus(minutes: IntMinutes ): Time operator fun minus(seconds: LongSeconds ): Time operator fun minus(seconds: IntSeconds ): Time operator fun minus(milliseconds: LongMilliseconds ): Time operator fun minus(milliseconds: IntMilliseconds ): Time operator fun minus(microseconds: LongMicroseconds ): Time operator fun minus(microseconds: IntMicroseconds ): Time operator fun minus(nanoseconds: LongNanoseconds ): Time operator fun minus(nanoseconds: IntNanoseconds ): Time (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) plus operator fun plus(duration: Duration ): Time operator fun plus(hours: LongHours ): Time operator fun plus(hours: IntHours ): Time operator fun plus(minutes: LongMinutes ): Time operator fun plus(minutes: IntMinutes ): Time operator fun plus(seconds: LongSeconds ): Time operator fun plus(seconds: IntSeconds ): Time operator fun plus(milliseconds: LongMilliseconds ): Time operator fun plus(milliseconds: IntMilliseconds ): Time operator fun plus(microseconds: LongMicroseconds ): Time operator fun plus(microseconds: IntMicroseconds ): Time operator fun plus(nanoseconds: LongNanoseconds ): Time operator fun plus(nanoseconds: IntNanoseconds ): Time toString Convert this time to a string in ISO-8601 extended format.(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toString(): <ERROR CLASS> (jvm) fun toString(): String","title":"Functions"},{"location":"api/core/io.islandtime/-time/#companion-object-properties","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MAX val MAX: Time (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MIDNIGHT val MIDNIGHT: Time (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MIN val MIN: Time (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) NOON val NOON: Time","title":"Companion Object Properties"},{"location":"api/core/io.islandtime/-time/#companion-object-functions","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fromNanosecondOfDay Create a Time from the nanosecond of the day. fun fromNanosecondOfDay(nanosecondOfDay: Long ): Time (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fromNanosecondsSinceStartOfDay Create the Time at a number of nanoseconds since the start of the day. fun fromNanosecondsSinceStartOfDay(nanoseconds: LongNanoseconds ): Time (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fromSecondOfDay Create a Time from the second of the day and optionally, the number of nanoseconds within that second. fun fromSecondOfDay(secondOfDay: Int , nanosecond: Int = 0): Time (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fromSecondsSinceStartOfDay Create the Time at a number of seconds since the start of the day and optionally, a number of additional nanoseconds. fun fromSecondsSinceStartOfDay(seconds: IntSeconds , nanosecondAdjustment: IntNanoseconds = 0.nanoseconds): Time","title":"Companion Object Functions"},{"location":"api/core/io.islandtime/-time/#extension-functions","text":"Name Summary (jvm) toJavaLocalTime Convert to an equivalent Java LocalTime . fun Time .toJavaLocalTime(): LocalTime","title":"Extension Functions"},{"location":"api/core/io.islandtime/-time/-init-/","text":"core / io.islandtime / Time / <init> <init> (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init>(hour: Int , minute: Int , second: Int = 0, nanosecond: Int = 0) Create a Time from its individual components. Parameters hour - the hour of day minute - the minute of the hour second - the second of the minute nanosecond - the nanosecond of the second Exceptions DateTimeException - if the time is invalid Constructor Create a Time from its individual components.","title":" init "},{"location":"api/core/io.islandtime/-time/-init-/#init","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init>(hour: Int , minute: Int , second: Int = 0, nanosecond: Int = 0) Create a Time from its individual components.","title":"&lt;init&gt;"},{"location":"api/core/io.islandtime/-time/-init-/#parameters","text":"hour - the hour of day minute - the minute of the hour second - the second of the minute nanosecond - the nanosecond of the second","title":"Parameters"},{"location":"api/core/io.islandtime/-time/-init-/#exceptions","text":"DateTimeException - if the time is invalid Constructor Create a Time from its individual components.","title":"Exceptions"},{"location":"api/core/io.islandtime/-time/-m-a-x/","text":"core / io.islandtime / Time / MAX MAX (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val MAX: Time","title":" m a x"},{"location":"api/core/io.islandtime/-time/-m-a-x/#max","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val MAX: Time","title":"MAX"},{"location":"api/core/io.islandtime/-time/-m-i-d-n-i-g-h-t/","text":"core / io.islandtime / Time / MIDNIGHT MIDNIGHT (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val MIDNIGHT: Time","title":" m i d n i g h t"},{"location":"api/core/io.islandtime/-time/-m-i-d-n-i-g-h-t/#midnight","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val MIDNIGHT: Time","title":"MIDNIGHT"},{"location":"api/core/io.islandtime/-time/-m-i-n/","text":"core / io.islandtime / Time / MIN MIN (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val MIN: Time","title":" m i n"},{"location":"api/core/io.islandtime/-time/-m-i-n/#min","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val MIN: Time","title":"MIN"},{"location":"api/core/io.islandtime/-time/-n-o-o-n/","text":"core / io.islandtime / Time / NOON NOON (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val NOON: Time","title":" n o o n"},{"location":"api/core/io.islandtime/-time/-n-o-o-n/#noon","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val NOON: Time","title":"NOON"},{"location":"api/core/io.islandtime/-time/compare-to/","text":"core / io.islandtime / Time / compareTo compareTo (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun compareTo(other: Time ): Int","title":"Compare to"},{"location":"api/core/io.islandtime/-time/compare-to/#compareto","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun compareTo(other: Time ): Int","title":"compareTo"},{"location":"api/core/io.islandtime/-time/component1/","text":"core / io.islandtime / Time / component1 component1 (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun component1(): Int","title":"Component1"},{"location":"api/core/io.islandtime/-time/component1/#component1","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun component1(): Int","title":"component1"},{"location":"api/core/io.islandtime/-time/component2/","text":"core / io.islandtime / Time / component2 component2 (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun component2(): Int","title":"Component2"},{"location":"api/core/io.islandtime/-time/component2/#component2","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun component2(): Int","title":"component2"},{"location":"api/core/io.islandtime/-time/component3/","text":"core / io.islandtime / Time / component3 component3 (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun component3(): Int","title":"Component3"},{"location":"api/core/io.islandtime/-time/component3/#component3","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun component3(): Int","title":"component3"},{"location":"api/core/io.islandtime/-time/component4/","text":"core / io.islandtime / Time / component4 component4 (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun component4(): Int","title":"Component4"},{"location":"api/core/io.islandtime/-time/component4/#component4","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun component4(): Int","title":"component4"},{"location":"api/core/io.islandtime/-time/copy/","text":"core / io.islandtime / Time / copy copy (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun copy(hour: Int = this.hour, minute: Int = this.minute, second: Int = this.second, nanosecond: Int = this.nanosecond): Time Return a copy of this Time , replacing individual components with new values as desired. Exceptions DateTimeException - if the resulting time is invalid","title":"Copy"},{"location":"api/core/io.islandtime/-time/copy/#copy","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun copy(hour: Int = this.hour, minute: Int = this.minute, second: Int = this.second, nanosecond: Int = this.nanosecond): Time Return a copy of this Time , replacing individual components with new values as desired.","title":"copy"},{"location":"api/core/io.islandtime/-time/copy/#exceptions","text":"DateTimeException - if the resulting time is invalid","title":"Exceptions"},{"location":"api/core/io.islandtime/-time/equals/","text":"core / io.islandtime / Time / equals equals (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun equals(other: Any ?): Boolean","title":"Equals"},{"location":"api/core/io.islandtime/-time/equals/#equals","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun equals(other: Any ?): Boolean","title":"equals"},{"location":"api/core/io.islandtime/-time/from-nanosecond-of-day/","text":"core / io.islandtime / Time / fromNanosecondOfDay fromNanosecondOfDay (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun fromNanosecondOfDay(nanosecondOfDay: Long ): Time Create a Time from the nanosecond of the day. Parameters nanosecondOfDay - the nanosecond of the day Exceptions DateTimeException - if the time is invalid Return a new Time","title":"From nanosecond of day"},{"location":"api/core/io.islandtime/-time/from-nanosecond-of-day/#fromnanosecondofday","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun fromNanosecondOfDay(nanosecondOfDay: Long ): Time Create a Time from the nanosecond of the day.","title":"fromNanosecondOfDay"},{"location":"api/core/io.islandtime/-time/from-nanosecond-of-day/#parameters","text":"nanosecondOfDay - the nanosecond of the day","title":"Parameters"},{"location":"api/core/io.islandtime/-time/from-nanosecond-of-day/#exceptions","text":"DateTimeException - if the time is invalid Return a new Time","title":"Exceptions"},{"location":"api/core/io.islandtime/-time/from-nanoseconds-since-start-of-day/","text":"core / io.islandtime / Time / fromNanosecondsSinceStartOfDay fromNanosecondsSinceStartOfDay (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun fromNanosecondsSinceStartOfDay(nanoseconds: LongNanoseconds ): Time Create the Time at a number of nanoseconds since the start of the day. Parameters nanoseconds - the number of nanoseconds since the start of the day Exceptions DateTimeException - if the time is invalid Return a new Time","title":"From nanoseconds since start of day"},{"location":"api/core/io.islandtime/-time/from-nanoseconds-since-start-of-day/#fromnanosecondssincestartofday","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun fromNanosecondsSinceStartOfDay(nanoseconds: LongNanoseconds ): Time Create the Time at a number of nanoseconds since the start of the day.","title":"fromNanosecondsSinceStartOfDay"},{"location":"api/core/io.islandtime/-time/from-nanoseconds-since-start-of-day/#parameters","text":"nanoseconds - the number of nanoseconds since the start of the day","title":"Parameters"},{"location":"api/core/io.islandtime/-time/from-nanoseconds-since-start-of-day/#exceptions","text":"DateTimeException - if the time is invalid Return a new Time","title":"Exceptions"},{"location":"api/core/io.islandtime/-time/from-second-of-day/","text":"core / io.islandtime / Time / fromSecondOfDay fromSecondOfDay (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun fromSecondOfDay(secondOfDay: Int , nanosecond: Int = 0): Time Create a Time from the second of the day and optionally, the number of nanoseconds within that second. Parameters secondOfDay - the second of the day nanosecond - the nanosecond of the second, from 0 - 999,999,999 Exceptions DateTimeException - if the time is invalid Return a new Time","title":"From second of day"},{"location":"api/core/io.islandtime/-time/from-second-of-day/#fromsecondofday","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun fromSecondOfDay(secondOfDay: Int , nanosecond: Int = 0): Time Create a Time from the second of the day and optionally, the number of nanoseconds within that second.","title":"fromSecondOfDay"},{"location":"api/core/io.islandtime/-time/from-second-of-day/#parameters","text":"secondOfDay - the second of the day nanosecond - the nanosecond of the second, from 0 - 999,999,999","title":"Parameters"},{"location":"api/core/io.islandtime/-time/from-second-of-day/#exceptions","text":"DateTimeException - if the time is invalid Return a new Time","title":"Exceptions"},{"location":"api/core/io.islandtime/-time/from-seconds-since-start-of-day/","text":"core / io.islandtime / Time / fromSecondsSinceStartOfDay fromSecondsSinceStartOfDay (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun fromSecondsSinceStartOfDay(seconds: IntSeconds , nanosecondAdjustment: IntNanoseconds = 0.nanoseconds): Time Create the Time at a number of seconds since the start of the day and optionally, a number of additional nanoseconds. Parameters seconds - the number of seconds since the start of the day nanosecondAdjustment - the number of additional nanoseconds, from 0 - 999,999,999 Exceptions DateTimeException - if the time is invalid Return a new Time","title":"From seconds since start of day"},{"location":"api/core/io.islandtime/-time/from-seconds-since-start-of-day/#fromsecondssincestartofday","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun fromSecondsSinceStartOfDay(seconds: IntSeconds , nanosecondAdjustment: IntNanoseconds = 0.nanoseconds): Time Create the Time at a number of seconds since the start of the day and optionally, a number of additional nanoseconds.","title":"fromSecondsSinceStartOfDay"},{"location":"api/core/io.islandtime/-time/from-seconds-since-start-of-day/#parameters","text":"seconds - the number of seconds since the start of the day nanosecondAdjustment - the number of additional nanoseconds, from 0 - 999,999,999","title":"Parameters"},{"location":"api/core/io.islandtime/-time/from-seconds-since-start-of-day/#exceptions","text":"DateTimeException - if the time is invalid Return a new Time","title":"Exceptions"},{"location":"api/core/io.islandtime/-time/hash-code/","text":"core / io.islandtime / Time / hashCode hashCode (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun hashCode(): Int","title":"Hash code"},{"location":"api/core/io.islandtime/-time/hash-code/#hashcode","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun hashCode(): Int","title":"hashCode"},{"location":"api/core/io.islandtime/-time/hour/","text":"core / io.islandtime / Time / hour hour (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val hour: Int The hour of the day.","title":"Hour"},{"location":"api/core/io.islandtime/-time/hour/#hour","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val hour: Int The hour of the day.","title":"hour"},{"location":"api/core/io.islandtime/-time/minus/","text":"core / io.islandtime / Time / minus minus (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun minus(duration: Duration ): Time operator fun minus(hours: LongHours ): Time operator fun minus(hours: IntHours ): Time operator fun minus(minutes: LongMinutes ): Time operator fun minus(minutes: IntMinutes ): Time operator fun minus(seconds: LongSeconds ): Time operator fun minus(seconds: IntSeconds ): Time operator fun minus(milliseconds: LongMilliseconds ): Time operator fun minus(milliseconds: IntMilliseconds ): Time operator fun minus(microseconds: LongMicroseconds ): Time operator fun minus(microseconds: IntMicroseconds ): Time operator fun minus(nanoseconds: LongNanoseconds ): Time operator fun minus(nanoseconds: IntNanoseconds ): Time","title":"Minus"},{"location":"api/core/io.islandtime/-time/minus/#minus","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun minus(duration: Duration ): Time operator fun minus(hours: LongHours ): Time operator fun minus(hours: IntHours ): Time operator fun minus(minutes: LongMinutes ): Time operator fun minus(minutes: IntMinutes ): Time operator fun minus(seconds: LongSeconds ): Time operator fun minus(seconds: IntSeconds ): Time operator fun minus(milliseconds: LongMilliseconds ): Time operator fun minus(milliseconds: IntMilliseconds ): Time operator fun minus(microseconds: LongMicroseconds ): Time operator fun minus(microseconds: IntMicroseconds ): Time operator fun minus(nanoseconds: LongNanoseconds ): Time operator fun minus(nanoseconds: IntNanoseconds ): Time","title":"minus"},{"location":"api/core/io.islandtime/-time/minute/","text":"core / io.islandtime / Time / minute minute (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val minute: Int The minute of the hour.","title":"Minute"},{"location":"api/core/io.islandtime/-time/minute/#minute","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val minute: Int The minute of the hour.","title":"minute"},{"location":"api/core/io.islandtime/-time/nanosecond-of-day/","text":"core / io.islandtime / Time / nanosecondOfDay nanosecondOfDay (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val nanosecondOfDay: Long The nanosecond of the day.","title":"Nanosecond of day"},{"location":"api/core/io.islandtime/-time/nanosecond-of-day/#nanosecondofday","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val nanosecondOfDay: Long The nanosecond of the day.","title":"nanosecondOfDay"},{"location":"api/core/io.islandtime/-time/nanosecond/","text":"core / io.islandtime / Time / nanosecond nanosecond (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val nanosecond: Int The nanosecond of the second.","title":"Nanosecond"},{"location":"api/core/io.islandtime/-time/nanosecond/#nanosecond","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val nanosecond: Int The nanosecond of the second.","title":"nanosecond"},{"location":"api/core/io.islandtime/-time/nanoseconds-since-start-of-day/","text":"core / io.islandtime / Time / nanosecondsSinceStartOfDay nanosecondsSinceStartOfDay (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline val nanosecondsSinceStartOfDay: LongNanoseconds The number of nanoseconds since the start of the day.","title":"Nanoseconds since start of day"},{"location":"api/core/io.islandtime/-time/nanoseconds-since-start-of-day/#nanosecondssincestartofday","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline val nanosecondsSinceStartOfDay: LongNanoseconds The number of nanoseconds since the start of the day.","title":"nanosecondsSinceStartOfDay"},{"location":"api/core/io.islandtime/-time/plus/","text":"core / io.islandtime / Time / plus plus (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun plus(duration: Duration ): Time operator fun plus(hours: LongHours ): Time operator fun plus(hours: IntHours ): Time operator fun plus(minutes: LongMinutes ): Time operator fun plus(minutes: IntMinutes ): Time operator fun plus(seconds: LongSeconds ): Time operator fun plus(seconds: IntSeconds ): Time operator fun plus(milliseconds: LongMilliseconds ): Time operator fun plus(milliseconds: IntMilliseconds ): Time operator fun plus(microseconds: LongMicroseconds ): Time operator fun plus(microseconds: IntMicroseconds ): Time operator fun plus(nanoseconds: LongNanoseconds ): Time operator fun plus(nanoseconds: IntNanoseconds ): Time","title":"Plus"},{"location":"api/core/io.islandtime/-time/plus/#plus","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun plus(duration: Duration ): Time operator fun plus(hours: LongHours ): Time operator fun plus(hours: IntHours ): Time operator fun plus(minutes: LongMinutes ): Time operator fun plus(minutes: IntMinutes ): Time operator fun plus(seconds: LongSeconds ): Time operator fun plus(seconds: IntSeconds ): Time operator fun plus(milliseconds: LongMilliseconds ): Time operator fun plus(milliseconds: IntMilliseconds ): Time operator fun plus(microseconds: LongMicroseconds ): Time operator fun plus(microseconds: IntMicroseconds ): Time operator fun plus(nanoseconds: LongNanoseconds ): Time operator fun plus(nanoseconds: IntNanoseconds ): Time","title":"plus"},{"location":"api/core/io.islandtime/-time/second-of-day/","text":"core / io.islandtime / Time / secondOfDay secondOfDay (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val secondOfDay: Int The second of the day.","title":"Second of day"},{"location":"api/core/io.islandtime/-time/second-of-day/#secondofday","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val secondOfDay: Int The second of the day.","title":"secondOfDay"},{"location":"api/core/io.islandtime/-time/second/","text":"core / io.islandtime / Time / second second (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val second: Int The second of the minute.","title":"Second"},{"location":"api/core/io.islandtime/-time/second/#second","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val second: Int The second of the minute.","title":"second"},{"location":"api/core/io.islandtime/-time/seconds-since-start-of-day/","text":"core / io.islandtime / Time / secondsSinceStartOfDay secondsSinceStartOfDay (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline val secondsSinceStartOfDay: IntSeconds The number of seconds since the start of the day.","title":"Seconds since start of day"},{"location":"api/core/io.islandtime/-time/seconds-since-start-of-day/#secondssincestartofday","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline val secondsSinceStartOfDay: IntSeconds The number of seconds since the start of the day.","title":"secondsSinceStartOfDay"},{"location":"api/core/io.islandtime/-time/to-string/","text":"core / io.islandtime / Time / toString toString (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toString(): <ERROR CLASS> (jvm) fun toString(): String Convert this time to a string in ISO-8601 extended format.","title":"To string"},{"location":"api/core/io.islandtime/-time/to-string/#tostring","text":"(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toString(): <ERROR CLASS> (jvm) fun toString(): String Convert this time to a string in ISO-8601 extended format.","title":"toString"},{"location":"api/core/io.islandtime/-time-zone/","text":"core / io.islandtime / TimeZone TimeZone (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) sealed class TimeZone : Comparable < TimeZone > A time zone. Types Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) FixedOffset A time zone defined by a fixed offset from UTC. class FixedOffset : TimeZone (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) Region A named time zone, typically corresponding to a region identifier in the IANA Time Zone Database, but may be any name that can be understood by a TimeZoneRulesProvider . class Region : TimeZone Properties Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) id An ID that uniquely identifies the time zone. abstract val id: String (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isValid Check if this is a valid time zone according to the current time zone rules provider. abstract val isValid: Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) rules Get the rules associated with this time zone. abstract val rules: TimeZoneRules Functions Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) compareTo open fun compareTo(other: TimeZone ): Int displayName A textual representation of the time zone, suitable for display purposes. The localized name will be returned, if available for the locale in the specified style. If not, the id will be returned instead.(jvm) fun displayName(style: TimeZoneTextStyle , locale: Locale = defaultLocale()): String (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun displayName(style: TimeZoneTextStyle , locale: <ERROR CLASS> = defaultLocale()): String localizedName The localized name of the time zone, if available for the locale in the specified style. The result depends on the configured TimeZoneTextProvider and may differ between platforms.(jvm) fun localizedName(style: TimeZoneTextStyle , locale: Locale = defaultLocale()): String ? (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun localizedName(style: TimeZoneTextStyle , locale: <ERROR CLASS> = defaultLocale()): String ? (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) normalized Get a normalized time zone. abstract fun normalized(): TimeZone (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toString open fun toString(): String (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) validate Check if the time zone is valid and throw an exception if it isn't. fun validate(): Unit (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) validated Ensure that the time zone is valid, throwing an exception if it isn't. fun validated(): TimeZone Companion Object Properties Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) UTC A fixed time zone representing UTC. val UTC: TimeZone Companion Object Functions Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) FixedOffset fun FixedOffset(id: String ): TimeZone Extension Functions Name Summary (jvm) toJavaZoneId Convert to an equivalent Java ZoneId . fun TimeZone .toJavaZoneId(): ZoneId Inheritors Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) FixedOffset A time zone defined by a fixed offset from UTC. class FixedOffset : TimeZone (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) Region A named time zone, typically corresponding to a region identifier in the IANA Time Zone Database, but may be any name that can be understood by a TimeZoneRulesProvider . class Region : TimeZone","title":"Index"},{"location":"api/core/io.islandtime/-time-zone/#timezone","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) sealed class TimeZone : Comparable < TimeZone > A time zone.","title":"TimeZone"},{"location":"api/core/io.islandtime/-time-zone/#types","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) FixedOffset A time zone defined by a fixed offset from UTC. class FixedOffset : TimeZone (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) Region A named time zone, typically corresponding to a region identifier in the IANA Time Zone Database, but may be any name that can be understood by a TimeZoneRulesProvider . class Region : TimeZone","title":"Types"},{"location":"api/core/io.islandtime/-time-zone/#properties","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) id An ID that uniquely identifies the time zone. abstract val id: String (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isValid Check if this is a valid time zone according to the current time zone rules provider. abstract val isValid: Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) rules Get the rules associated with this time zone. abstract val rules: TimeZoneRules","title":"Properties"},{"location":"api/core/io.islandtime/-time-zone/#functions","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) compareTo open fun compareTo(other: TimeZone ): Int displayName A textual representation of the time zone, suitable for display purposes. The localized name will be returned, if available for the locale in the specified style. If not, the id will be returned instead.(jvm) fun displayName(style: TimeZoneTextStyle , locale: Locale = defaultLocale()): String (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun displayName(style: TimeZoneTextStyle , locale: <ERROR CLASS> = defaultLocale()): String localizedName The localized name of the time zone, if available for the locale in the specified style. The result depends on the configured TimeZoneTextProvider and may differ between platforms.(jvm) fun localizedName(style: TimeZoneTextStyle , locale: Locale = defaultLocale()): String ? (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun localizedName(style: TimeZoneTextStyle , locale: <ERROR CLASS> = defaultLocale()): String ? (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) normalized Get a normalized time zone. abstract fun normalized(): TimeZone (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toString open fun toString(): String (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) validate Check if the time zone is valid and throw an exception if it isn't. fun validate(): Unit (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) validated Ensure that the time zone is valid, throwing an exception if it isn't. fun validated(): TimeZone","title":"Functions"},{"location":"api/core/io.islandtime/-time-zone/#companion-object-properties","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) UTC A fixed time zone representing UTC. val UTC: TimeZone","title":"Companion Object Properties"},{"location":"api/core/io.islandtime/-time-zone/#companion-object-functions","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) FixedOffset fun FixedOffset(id: String ): TimeZone","title":"Companion Object Functions"},{"location":"api/core/io.islandtime/-time-zone/#extension-functions","text":"Name Summary (jvm) toJavaZoneId Convert to an equivalent Java ZoneId . fun TimeZone .toJavaZoneId(): ZoneId","title":"Extension Functions"},{"location":"api/core/io.islandtime/-time-zone/#inheritors","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) FixedOffset A time zone defined by a fixed offset from UTC. class FixedOffset : TimeZone (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) Region A named time zone, typically corresponding to a region identifier in the IANA Time Zone Database, but may be any name that can be understood by a TimeZoneRulesProvider . class Region : TimeZone","title":"Inheritors"},{"location":"api/core/io.islandtime/-time-zone/-fixed-offset/","text":"core / io.islandtime / TimeZone / FixedOffset FixedOffset (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun FixedOffset(id: String ): TimeZone","title":" fixed offset"},{"location":"api/core/io.islandtime/-time-zone/-fixed-offset/#fixedoffset","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun FixedOffset(id: String ): TimeZone","title":"FixedOffset"},{"location":"api/core/io.islandtime/-time-zone/-u-t-c/","text":"core / io.islandtime / TimeZone / UTC UTC (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val UTC: TimeZone A fixed time zone representing UTC.","title":" u t c"},{"location":"api/core/io.islandtime/-time-zone/-u-t-c/#utc","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val UTC: TimeZone A fixed time zone representing UTC.","title":"UTC"},{"location":"api/core/io.islandtime/-time-zone/compare-to/","text":"core / io.islandtime / TimeZone / compareTo compareTo (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) open fun compareTo(other: TimeZone ): Int","title":"Compare to"},{"location":"api/core/io.islandtime/-time-zone/compare-to/#compareto","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) open fun compareTo(other: TimeZone ): Int","title":"compareTo"},{"location":"api/core/io.islandtime/-time-zone/display-name/","text":"core / io.islandtime / TimeZone / displayName displayName (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun displayName(style: TimeZoneTextStyle , locale: <ERROR CLASS> = defaultLocale()): String A textual representation of the time zone, suitable for display purposes. The localized name will be returned, if available for the locale in the specified style. If not, the id will be returned instead. The result depends on the configured TimeZoneTextProvider and may differ between platforms. Example output for the \"America/New_York\" ID and \"en-US\" locale: Standard: \"Eastern Standard Time\" Short standard: \"EST\" Daylight Saving: \"Eastern Daylight Time\" Short daylight saving: \"EDT\" Generic: \"Eastern Time\" Short generic: \"ET\" See Also localizedName id (jvm) fun displayName(style: TimeZoneTextStyle , locale: Locale = defaultLocale()): String A textual representation of the time zone, suitable for display purposes. The localized name will be returned, if available for the locale in the specified style. If not, the id will be returned instead. The result depends on the configured TimeZoneTextProvider and may differ between platforms. Example output for the \"America/New_York\" ID and \"en-US\" locale: Standard: \"Eastern Standard Time\" Short standard: \"EST\" Daylight Saving: \"Eastern Daylight Time\" Short daylight saving: \"EDT\" Generic: \"Eastern Time\" Short generic: \"ET\" See Also localizedName id","title":"Display name"},{"location":"api/core/io.islandtime/-time-zone/display-name/#displayname","text":"(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun displayName(style: TimeZoneTextStyle , locale: <ERROR CLASS> = defaultLocale()): String A textual representation of the time zone, suitable for display purposes. The localized name will be returned, if available for the locale in the specified style. If not, the id will be returned instead. The result depends on the configured TimeZoneTextProvider and may differ between platforms. Example output for the \"America/New_York\" ID and \"en-US\" locale: Standard: \"Eastern Standard Time\" Short standard: \"EST\" Daylight Saving: \"Eastern Daylight Time\" Short daylight saving: \"EDT\" Generic: \"Eastern Time\" Short generic: \"ET\" See Also localizedName id (jvm) fun displayName(style: TimeZoneTextStyle , locale: Locale = defaultLocale()): String A textual representation of the time zone, suitable for display purposes. The localized name will be returned, if available for the locale in the specified style. If not, the id will be returned instead. The result depends on the configured TimeZoneTextProvider and may differ between platforms. Example output for the \"America/New_York\" ID and \"en-US\" locale: Standard: \"Eastern Standard Time\" Short standard: \"EST\" Daylight Saving: \"Eastern Daylight Time\" Short daylight saving: \"EDT\" Generic: \"Eastern Time\" Short generic: \"ET\" See Also localizedName id","title":"displayName"},{"location":"api/core/io.islandtime/-time-zone/id/","text":"core / io.islandtime / TimeZone / id id (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract val id: String An ID that uniquely identifies the time zone.","title":"Id"},{"location":"api/core/io.islandtime/-time-zone/id/#id","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract val id: String An ID that uniquely identifies the time zone.","title":"id"},{"location":"api/core/io.islandtime/-time-zone/is-valid/","text":"core / io.islandtime / TimeZone / isValid isValid (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract val isValid: Boolean Check if this is a valid time zone according to the current time zone rules provider.","title":"Is valid"},{"location":"api/core/io.islandtime/-time-zone/is-valid/#isvalid","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract val isValid: Boolean Check if this is a valid time zone according to the current time zone rules provider.","title":"isValid"},{"location":"api/core/io.islandtime/-time-zone/localized-name/","text":"core / io.islandtime / TimeZone / localizedName localizedName (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun localizedName(style: TimeZoneTextStyle , locale: <ERROR CLASS> = defaultLocale()): String ? The localized name of the time zone, if available for the locale in the specified style. The result depends on the configured TimeZoneTextProvider and may differ between platforms. Example output for the \"America/New_York\" ID and \"en-US\" locale: Standard: \"Eastern Standard Time\" Short standard: \"EST\" Daylight Saving: \"Eastern Daylight Time\" Short daylight saving: \"EDT\" Generic: \"Eastern Time\" Short generic: \"ET\" See Also displayName (jvm) fun localizedName(style: TimeZoneTextStyle , locale: Locale = defaultLocale()): String ? The localized name of the time zone, if available for the locale in the specified style. The result depends on the configured TimeZoneTextProvider and may differ between platforms. Example output for the \"America/New_York\" ID and \"en-US\" locale: Standard: \"Eastern Standard Time\" Short standard: \"EST\" Daylight Saving: \"Eastern Daylight Time\" Short daylight saving: \"EDT\" Generic: \"Eastern Time\" Short generic: \"ET\" See Also displayName","title":"Localized name"},{"location":"api/core/io.islandtime/-time-zone/localized-name/#localizedname","text":"(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun localizedName(style: TimeZoneTextStyle , locale: <ERROR CLASS> = defaultLocale()): String ? The localized name of the time zone, if available for the locale in the specified style. The result depends on the configured TimeZoneTextProvider and may differ between platforms. Example output for the \"America/New_York\" ID and \"en-US\" locale: Standard: \"Eastern Standard Time\" Short standard: \"EST\" Daylight Saving: \"Eastern Daylight Time\" Short daylight saving: \"EDT\" Generic: \"Eastern Time\" Short generic: \"ET\" See Also displayName (jvm) fun localizedName(style: TimeZoneTextStyle , locale: Locale = defaultLocale()): String ? The localized name of the time zone, if available for the locale in the specified style. The result depends on the configured TimeZoneTextProvider and may differ between platforms. Example output for the \"America/New_York\" ID and \"en-US\" locale: Standard: \"Eastern Standard Time\" Short standard: \"EST\" Daylight Saving: \"Eastern Daylight Time\" Short daylight saving: \"EDT\" Generic: \"Eastern Time\" Short generic: \"ET\" See Also displayName","title":"localizedName"},{"location":"api/core/io.islandtime/-time-zone/normalized/","text":"core / io.islandtime / TimeZone / normalized normalized (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract fun normalized(): TimeZone Get a normalized time zone. Any time zone with a fixed offset will be converted to use a consistent identifier. Exceptions TimeZoneRulesException - if the current time zone rules provider doesn't support id","title":"Normalized"},{"location":"api/core/io.islandtime/-time-zone/normalized/#normalized","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract fun normalized(): TimeZone Get a normalized time zone. Any time zone with a fixed offset will be converted to use a consistent identifier.","title":"normalized"},{"location":"api/core/io.islandtime/-time-zone/normalized/#exceptions","text":"TimeZoneRulesException - if the current time zone rules provider doesn't support id","title":"Exceptions"},{"location":"api/core/io.islandtime/-time-zone/rules/","text":"core / io.islandtime / TimeZone / rules rules (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract val rules: TimeZoneRules Get the rules associated with this time zone. Exceptions TimeZoneRulesException - if the current time zone rules provider doesn't support id","title":"Rules"},{"location":"api/core/io.islandtime/-time-zone/rules/#rules","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract val rules: TimeZoneRules Get the rules associated with this time zone.","title":"rules"},{"location":"api/core/io.islandtime/-time-zone/rules/#exceptions","text":"TimeZoneRulesException - if the current time zone rules provider doesn't support id","title":"Exceptions"},{"location":"api/core/io.islandtime/-time-zone/to-string/","text":"core / io.islandtime / TimeZone / toString toString (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) open fun toString(): String","title":"To string"},{"location":"api/core/io.islandtime/-time-zone/to-string/#tostring","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) open fun toString(): String","title":"toString"},{"location":"api/core/io.islandtime/-time-zone/validate/","text":"core / io.islandtime / TimeZone / validate validate (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun validate(): Unit Check if the time zone is valid and throw an exception if it isn't. Exceptions TimeZoneRulesException - if the current time zone rules provider doesn't support id See Also isValid","title":"Validate"},{"location":"api/core/io.islandtime/-time-zone/validate/#validate","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun validate(): Unit Check if the time zone is valid and throw an exception if it isn't.","title":"validate"},{"location":"api/core/io.islandtime/-time-zone/validate/#exceptions","text":"TimeZoneRulesException - if the current time zone rules provider doesn't support id See Also isValid","title":"Exceptions"},{"location":"api/core/io.islandtime/-time-zone/validated/","text":"core / io.islandtime / TimeZone / validated validated (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun validated(): TimeZone Ensure that the time zone is valid, throwing an exception if it isn't. Exceptions TimeZoneRulesException - if the current time zone rules provider doesn't support id See Also isValid","title":"Validated"},{"location":"api/core/io.islandtime/-time-zone/validated/#validated","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun validated(): TimeZone Ensure that the time zone is valid, throwing an exception if it isn't.","title":"validated"},{"location":"api/core/io.islandtime/-time-zone/validated/#exceptions","text":"TimeZoneRulesException - if the current time zone rules provider doesn't support id See Also isValid","title":"Exceptions"},{"location":"api/core/io.islandtime/-time-zone/-fixed-offset/","text":"core / io.islandtime / TimeZone / FixedOffset FixedOffset (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) class FixedOffset : TimeZone A time zone defined by a fixed offset from UTC. In general, region-based time zones are preferred, but there are situations where only a fixed offset may be available. Parameters offset - a valid UTC offset Exceptions DateTimeException - if offset is outside the valid range Properties Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) id An ID that uniquely identifies the time zone. val id: String (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isValid Check if this is a valid time zone according to the current time zone rules provider. val isValid: Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) offset a valid UTC offset val offset: UtcOffset (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) rules Get the rules associated with this time zone. val rules: TimeZoneRules Functions Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) equals fun equals(other: Any ?): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) hashCode fun hashCode(): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) normalized Get a normalized time zone. fun normalized(): FixedOffset Inherited Functions Name Summary (jvm) displayName A textual representation of the time zone, suitable for display purposes. The localized name will be returned, if available for the locale in the specified style. If not, the id will be returned instead. fun displayName(style: TimeZoneTextStyle , locale: Locale = defaultLocale()): String (jvm) localizedName The localized name of the time zone, if available for the locale in the specified style. The result depends on the configured TimeZoneTextProvider and may differ between platforms. fun localizedName(style: TimeZoneTextStyle , locale: Locale = defaultLocale()): String ?","title":"Index"},{"location":"api/core/io.islandtime/-time-zone/-fixed-offset/#fixedoffset","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) class FixedOffset : TimeZone A time zone defined by a fixed offset from UTC. In general, region-based time zones are preferred, but there are situations where only a fixed offset may be available.","title":"FixedOffset"},{"location":"api/core/io.islandtime/-time-zone/-fixed-offset/#parameters","text":"offset - a valid UTC offset","title":"Parameters"},{"location":"api/core/io.islandtime/-time-zone/-fixed-offset/#exceptions","text":"DateTimeException - if offset is outside the valid range","title":"Exceptions"},{"location":"api/core/io.islandtime/-time-zone/-fixed-offset/#properties","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) id An ID that uniquely identifies the time zone. val id: String (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isValid Check if this is a valid time zone according to the current time zone rules provider. val isValid: Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) offset a valid UTC offset val offset: UtcOffset (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) rules Get the rules associated with this time zone. val rules: TimeZoneRules","title":"Properties"},{"location":"api/core/io.islandtime/-time-zone/-fixed-offset/#functions","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) equals fun equals(other: Any ?): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) hashCode fun hashCode(): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) normalized Get a normalized time zone. fun normalized(): FixedOffset","title":"Functions"},{"location":"api/core/io.islandtime/-time-zone/-fixed-offset/#inherited-functions","text":"Name Summary (jvm) displayName A textual representation of the time zone, suitable for display purposes. The localized name will be returned, if available for the locale in the specified style. If not, the id will be returned instead. fun displayName(style: TimeZoneTextStyle , locale: Locale = defaultLocale()): String (jvm) localizedName The localized name of the time zone, if available for the locale in the specified style. The result depends on the configured TimeZoneTextProvider and may differ between platforms. fun localizedName(style: TimeZoneTextStyle , locale: Locale = defaultLocale()): String ?","title":"Inherited Functions"},{"location":"api/core/io.islandtime/-time-zone/-fixed-offset/equals/","text":"core / io.islandtime / TimeZone / FixedOffset / equals equals (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun equals(other: Any ?): Boolean","title":"Equals"},{"location":"api/core/io.islandtime/-time-zone/-fixed-offset/equals/#equals","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun equals(other: Any ?): Boolean","title":"equals"},{"location":"api/core/io.islandtime/-time-zone/-fixed-offset/hash-code/","text":"core / io.islandtime / TimeZone / FixedOffset / hashCode hashCode (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun hashCode(): Int","title":"Hash code"},{"location":"api/core/io.islandtime/-time-zone/-fixed-offset/hash-code/#hashcode","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun hashCode(): Int","title":"hashCode"},{"location":"api/core/io.islandtime/-time-zone/-fixed-offset/id/","text":"core / io.islandtime / TimeZone / FixedOffset / id id (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val id: String An ID that uniquely identifies the time zone.","title":"Id"},{"location":"api/core/io.islandtime/-time-zone/-fixed-offset/id/#id","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val id: String An ID that uniquely identifies the time zone.","title":"id"},{"location":"api/core/io.islandtime/-time-zone/-fixed-offset/is-valid/","text":"core / io.islandtime / TimeZone / FixedOffset / isValid isValid (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val isValid: Boolean Check if this is a valid time zone according to the current time zone rules provider.","title":"Is valid"},{"location":"api/core/io.islandtime/-time-zone/-fixed-offset/is-valid/#isvalid","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val isValid: Boolean Check if this is a valid time zone according to the current time zone rules provider.","title":"isValid"},{"location":"api/core/io.islandtime/-time-zone/-fixed-offset/normalized/","text":"core / io.islandtime / TimeZone / FixedOffset / normalized normalized (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun normalized(): FixedOffset Get a normalized time zone. Any time zone with a fixed offset will be converted to use a consistent identifier. Exceptions TimeZoneRulesException - if the current time zone rules provider doesn't support id","title":"Normalized"},{"location":"api/core/io.islandtime/-time-zone/-fixed-offset/normalized/#normalized","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun normalized(): FixedOffset Get a normalized time zone. Any time zone with a fixed offset will be converted to use a consistent identifier.","title":"normalized"},{"location":"api/core/io.islandtime/-time-zone/-fixed-offset/normalized/#exceptions","text":"TimeZoneRulesException - if the current time zone rules provider doesn't support id","title":"Exceptions"},{"location":"api/core/io.islandtime/-time-zone/-fixed-offset/offset/","text":"core / io.islandtime / TimeZone / FixedOffset / offset offset (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val offset: UtcOffset a valid UTC offset","title":"Offset"},{"location":"api/core/io.islandtime/-time-zone/-fixed-offset/offset/#offset","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val offset: UtcOffset a valid UTC offset","title":"offset"},{"location":"api/core/io.islandtime/-time-zone/-fixed-offset/rules/","text":"core / io.islandtime / TimeZone / FixedOffset / rules rules (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val rules: TimeZoneRules Get the rules associated with this time zone. Exceptions TimeZoneRulesException - if the current time zone rules provider doesn't support id","title":"Rules"},{"location":"api/core/io.islandtime/-time-zone/-fixed-offset/rules/#rules","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val rules: TimeZoneRules Get the rules associated with this time zone.","title":"rules"},{"location":"api/core/io.islandtime/-time-zone/-fixed-offset/rules/#exceptions","text":"TimeZoneRulesException - if the current time zone rules provider doesn't support id","title":"Exceptions"},{"location":"api/core/io.islandtime/-time-zone/-region/","text":"core / io.islandtime / TimeZone / Region Region (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) class Region : TimeZone A named time zone, typically corresponding to a region identifier in the IANA Time Zone Database, but may be any name that can be understood by a TimeZoneRulesProvider . Parameters id - an ID that is understood by a time zone rules provider Properties Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) id an ID that is understood by a time zone rules provider val id: String (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isValid Check if this is a valid time zone according to the current time zone rules provider. val isValid: Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) rules Get the rules associated with this time zone. val rules: TimeZoneRules Functions Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) equals fun equals(other: Any ?): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) hashCode fun hashCode(): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) normalized Get a normalized time zone. fun normalized(): TimeZone Inherited Functions Name Summary (jvm) displayName A textual representation of the time zone, suitable for display purposes. The localized name will be returned, if available for the locale in the specified style. If not, the id will be returned instead. fun displayName(style: TimeZoneTextStyle , locale: Locale = defaultLocale()): String (jvm) localizedName The localized name of the time zone, if available for the locale in the specified style. The result depends on the configured TimeZoneTextProvider and may differ between platforms. fun localizedName(style: TimeZoneTextStyle , locale: Locale = defaultLocale()): String ?","title":"Index"},{"location":"api/core/io.islandtime/-time-zone/-region/#region","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) class Region : TimeZone A named time zone, typically corresponding to a region identifier in the IANA Time Zone Database, but may be any name that can be understood by a TimeZoneRulesProvider .","title":"Region"},{"location":"api/core/io.islandtime/-time-zone/-region/#parameters","text":"id - an ID that is understood by a time zone rules provider","title":"Parameters"},{"location":"api/core/io.islandtime/-time-zone/-region/#properties","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) id an ID that is understood by a time zone rules provider val id: String (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isValid Check if this is a valid time zone according to the current time zone rules provider. val isValid: Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) rules Get the rules associated with this time zone. val rules: TimeZoneRules","title":"Properties"},{"location":"api/core/io.islandtime/-time-zone/-region/#functions","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) equals fun equals(other: Any ?): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) hashCode fun hashCode(): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) normalized Get a normalized time zone. fun normalized(): TimeZone","title":"Functions"},{"location":"api/core/io.islandtime/-time-zone/-region/#inherited-functions","text":"Name Summary (jvm) displayName A textual representation of the time zone, suitable for display purposes. The localized name will be returned, if available for the locale in the specified style. If not, the id will be returned instead. fun displayName(style: TimeZoneTextStyle , locale: Locale = defaultLocale()): String (jvm) localizedName The localized name of the time zone, if available for the locale in the specified style. The result depends on the configured TimeZoneTextProvider and may differ between platforms. fun localizedName(style: TimeZoneTextStyle , locale: Locale = defaultLocale()): String ?","title":"Inherited Functions"},{"location":"api/core/io.islandtime/-time-zone/-region/equals/","text":"core / io.islandtime / TimeZone / Region / equals equals (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun equals(other: Any ?): Boolean","title":"Equals"},{"location":"api/core/io.islandtime/-time-zone/-region/equals/#equals","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun equals(other: Any ?): Boolean","title":"equals"},{"location":"api/core/io.islandtime/-time-zone/-region/hash-code/","text":"core / io.islandtime / TimeZone / Region / hashCode hashCode (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun hashCode(): Int","title":"Hash code"},{"location":"api/core/io.islandtime/-time-zone/-region/hash-code/#hashcode","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun hashCode(): Int","title":"hashCode"},{"location":"api/core/io.islandtime/-time-zone/-region/id/","text":"core / io.islandtime / TimeZone / Region / id id (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val id: String an ID that is understood by a time zone rules provider","title":"Id"},{"location":"api/core/io.islandtime/-time-zone/-region/id/#id","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val id: String an ID that is understood by a time zone rules provider","title":"id"},{"location":"api/core/io.islandtime/-time-zone/-region/is-valid/","text":"core / io.islandtime / TimeZone / Region / isValid isValid (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val isValid: Boolean Check if this is a valid time zone according to the current time zone rules provider.","title":"Is valid"},{"location":"api/core/io.islandtime/-time-zone/-region/is-valid/#isvalid","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val isValid: Boolean Check if this is a valid time zone according to the current time zone rules provider.","title":"isValid"},{"location":"api/core/io.islandtime/-time-zone/-region/normalized/","text":"core / io.islandtime / TimeZone / Region / normalized normalized (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun normalized(): TimeZone Get a normalized time zone. Any time zone with a fixed offset will be converted to use a consistent identifier. Exceptions TimeZoneRulesException - if the current time zone rules provider doesn't support id","title":"Normalized"},{"location":"api/core/io.islandtime/-time-zone/-region/normalized/#normalized","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun normalized(): TimeZone Get a normalized time zone. Any time zone with a fixed offset will be converted to use a consistent identifier.","title":"normalized"},{"location":"api/core/io.islandtime/-time-zone/-region/normalized/#exceptions","text":"TimeZoneRulesException - if the current time zone rules provider doesn't support id","title":"Exceptions"},{"location":"api/core/io.islandtime/-time-zone/-region/rules/","text":"core / io.islandtime / TimeZone / Region / rules rules (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val rules: TimeZoneRules Get the rules associated with this time zone. Exceptions TimeZoneRulesException - if the current time zone rules provider doesn't support id","title":"Rules"},{"location":"api/core/io.islandtime/-time-zone/-region/rules/#rules","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val rules: TimeZoneRules Get the rules associated with this time zone.","title":"rules"},{"location":"api/core/io.islandtime/-time-zone/-region/rules/#exceptions","text":"TimeZoneRulesException - if the current time zone rules provider doesn't support id","title":"Exceptions"},{"location":"api/core/io.islandtime/-utc-offset/","text":"core / io.islandtime / UtcOffset UtcOffset (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline class UtcOffset : Comparable < UtcOffset > The time shift between a local time and UTC. To ensure that the offset is within the valid supported range, you must explicitly call validate or validated . Parameters totalSeconds - the total number of seconds to offset by See Also validate validated Constructors Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init> The time shift between a local time and UTC. <init>(totalSeconds: IntSeconds ) Properties Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isValid Check if this offset is within the supported range. val isValid: Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) totalSeconds the total number of seconds to offset by val totalSeconds: IntSeconds Functions Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) compareTo fun compareTo(other: UtcOffset ): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isZero Is this the UTC offset of +00:00? fun isZero(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toComponents Break a UTC offset down into components. The sign will indicate whether the offset is positive or negative while each component will be positive. fun <T> toComponents(action: (sign: Int , hours: IntHours , minutes: IntMinutes , seconds: IntSeconds ) -> T): T Break a UTC offset down into components. If the offset is negative, each component will be negative. fun <T> toComponents(action: (hours: IntHours , minutes: IntMinutes , seconds: IntSeconds ) -> T): T (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toString fun toString(): String (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) validate Check if the offset is valid and throw an exception if it isn't. fun validate(): Unit (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) validated Ensure that the offset is valid, throwing an exception if it isn't. fun validated(): UtcOffset Companion Object Properties Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MAX val MAX: UtcOffset (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MAX_TOTAL_SECONDS val MAX_TOTAL_SECONDS: IntSeconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MIN val MIN: UtcOffset (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MIN_TOTAL_SECONDS val MIN_TOTAL_SECONDS: IntSeconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) ZERO val ZERO: UtcOffset Extension Functions Name Summary (jvm) toJavaZoneOffset Convert to an equivalent Java ZoneOffset . fun UtcOffset .toJavaZoneOffset(): ZoneOffset","title":"Index"},{"location":"api/core/io.islandtime/-utc-offset/#utcoffset","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline class UtcOffset : Comparable < UtcOffset > The time shift between a local time and UTC. To ensure that the offset is within the valid supported range, you must explicitly call validate or validated .","title":"UtcOffset"},{"location":"api/core/io.islandtime/-utc-offset/#parameters","text":"totalSeconds - the total number of seconds to offset by See Also validate validated","title":"Parameters"},{"location":"api/core/io.islandtime/-utc-offset/#constructors","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init> The time shift between a local time and UTC. <init>(totalSeconds: IntSeconds )","title":"Constructors"},{"location":"api/core/io.islandtime/-utc-offset/#properties","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isValid Check if this offset is within the supported range. val isValid: Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) totalSeconds the total number of seconds to offset by val totalSeconds: IntSeconds","title":"Properties"},{"location":"api/core/io.islandtime/-utc-offset/#functions","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) compareTo fun compareTo(other: UtcOffset ): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isZero Is this the UTC offset of +00:00? fun isZero(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toComponents Break a UTC offset down into components. The sign will indicate whether the offset is positive or negative while each component will be positive. fun <T> toComponents(action: (sign: Int , hours: IntHours , minutes: IntMinutes , seconds: IntSeconds ) -> T): T Break a UTC offset down into components. If the offset is negative, each component will be negative. fun <T> toComponents(action: (hours: IntHours , minutes: IntMinutes , seconds: IntSeconds ) -> T): T (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toString fun toString(): String (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) validate Check if the offset is valid and throw an exception if it isn't. fun validate(): Unit (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) validated Ensure that the offset is valid, throwing an exception if it isn't. fun validated(): UtcOffset","title":"Functions"},{"location":"api/core/io.islandtime/-utc-offset/#companion-object-properties","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MAX val MAX: UtcOffset (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MAX_TOTAL_SECONDS val MAX_TOTAL_SECONDS: IntSeconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MIN val MIN: UtcOffset (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MIN_TOTAL_SECONDS val MIN_TOTAL_SECONDS: IntSeconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) ZERO val ZERO: UtcOffset","title":"Companion Object Properties"},{"location":"api/core/io.islandtime/-utc-offset/#extension-functions","text":"Name Summary (jvm) toJavaZoneOffset Convert to an equivalent Java ZoneOffset . fun UtcOffset .toJavaZoneOffset(): ZoneOffset","title":"Extension Functions"},{"location":"api/core/io.islandtime/-utc-offset/-init-/","text":"core / io.islandtime / UtcOffset / <init> <init> (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init>(totalSeconds: IntSeconds ) The time shift between a local time and UTC. To ensure that the offset is within the valid supported range, you must explicitly call validate or validated . Parameters totalSeconds - the total number of seconds to offset by See Also validate validated","title":" init "},{"location":"api/core/io.islandtime/-utc-offset/-init-/#init","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init>(totalSeconds: IntSeconds ) The time shift between a local time and UTC. To ensure that the offset is within the valid supported range, you must explicitly call validate or validated .","title":"&lt;init&gt;"},{"location":"api/core/io.islandtime/-utc-offset/-init-/#parameters","text":"totalSeconds - the total number of seconds to offset by See Also validate validated","title":"Parameters"},{"location":"api/core/io.islandtime/-utc-offset/-m-a-x/","text":"core / io.islandtime / UtcOffset / MAX MAX (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val MAX: UtcOffset","title":" m a x"},{"location":"api/core/io.islandtime/-utc-offset/-m-a-x/#max","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val MAX: UtcOffset","title":"MAX"},{"location":"api/core/io.islandtime/-utc-offset/-m-a-x_-t-o-t-a-l_-s-e-c-o-n-d-s/","text":"core / io.islandtime / UtcOffset / MAX_TOTAL_SECONDS MAX_TOTAL_SECONDS (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val MAX_TOTAL_SECONDS: IntSeconds","title":" m a x  t o t a l  s e c o n d s"},{"location":"api/core/io.islandtime/-utc-offset/-m-a-x_-t-o-t-a-l_-s-e-c-o-n-d-s/#max_total_seconds","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val MAX_TOTAL_SECONDS: IntSeconds","title":"MAX_TOTAL_SECONDS"},{"location":"api/core/io.islandtime/-utc-offset/-m-i-n/","text":"core / io.islandtime / UtcOffset / MIN MIN (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val MIN: UtcOffset","title":" m i n"},{"location":"api/core/io.islandtime/-utc-offset/-m-i-n/#min","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val MIN: UtcOffset","title":"MIN"},{"location":"api/core/io.islandtime/-utc-offset/-m-i-n_-t-o-t-a-l_-s-e-c-o-n-d-s/","text":"core / io.islandtime / UtcOffset / MIN_TOTAL_SECONDS MIN_TOTAL_SECONDS (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val MIN_TOTAL_SECONDS: IntSeconds","title":" m i n  t o t a l  s e c o n d s"},{"location":"api/core/io.islandtime/-utc-offset/-m-i-n_-t-o-t-a-l_-s-e-c-o-n-d-s/#min_total_seconds","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val MIN_TOTAL_SECONDS: IntSeconds","title":"MIN_TOTAL_SECONDS"},{"location":"api/core/io.islandtime/-utc-offset/-z-e-r-o/","text":"core / io.islandtime / UtcOffset / ZERO ZERO (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val ZERO: UtcOffset","title":" z e r o"},{"location":"api/core/io.islandtime/-utc-offset/-z-e-r-o/#zero","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val ZERO: UtcOffset","title":"ZERO"},{"location":"api/core/io.islandtime/-utc-offset/compare-to/","text":"core / io.islandtime / UtcOffset / compareTo compareTo (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun compareTo(other: UtcOffset ): Int","title":"Compare to"},{"location":"api/core/io.islandtime/-utc-offset/compare-to/#compareto","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun compareTo(other: UtcOffset ): Int","title":"compareTo"},{"location":"api/core/io.islandtime/-utc-offset/is-valid/","text":"core / io.islandtime / UtcOffset / isValid isValid (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val isValid: Boolean Check if this offset is within the supported range.","title":"Is valid"},{"location":"api/core/io.islandtime/-utc-offset/is-valid/#isvalid","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val isValid: Boolean Check if this offset is within the supported range.","title":"isValid"},{"location":"api/core/io.islandtime/-utc-offset/is-zero/","text":"core / io.islandtime / UtcOffset / isZero isZero (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isZero(): Boolean Is this the UTC offset of +00:00?","title":"Is zero"},{"location":"api/core/io.islandtime/-utc-offset/is-zero/#iszero","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isZero(): Boolean Is this the UTC offset of +00:00?","title":"isZero"},{"location":"api/core/io.islandtime/-utc-offset/to-components/","text":"core / io.islandtime / UtcOffset / toComponents toComponents (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline fun <T> toComponents(action: (sign: Int , hours: IntHours , minutes: IntMinutes , seconds: IntSeconds ) -> T): T Break a UTC offset down into components. The sign will indicate whether the offset is positive or negative while each component will be positive. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline fun <T> toComponents(action: (hours: IntHours , minutes: IntMinutes , seconds: IntSeconds ) -> T): T Break a UTC offset down into components. If the offset is negative, each component will be negative.","title":"To components"},{"location":"api/core/io.islandtime/-utc-offset/to-components/#tocomponents","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline fun <T> toComponents(action: (sign: Int , hours: IntHours , minutes: IntMinutes , seconds: IntSeconds ) -> T): T Break a UTC offset down into components. The sign will indicate whether the offset is positive or negative while each component will be positive. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline fun <T> toComponents(action: (hours: IntHours , minutes: IntMinutes , seconds: IntSeconds ) -> T): T Break a UTC offset down into components. If the offset is negative, each component will be negative.","title":"toComponents"},{"location":"api/core/io.islandtime/-utc-offset/to-string/","text":"core / io.islandtime / UtcOffset / toString toString (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toString(): String","title":"To string"},{"location":"api/core/io.islandtime/-utc-offset/to-string/#tostring","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toString(): String","title":"toString"},{"location":"api/core/io.islandtime/-utc-offset/total-seconds/","text":"core / io.islandtime / UtcOffset / totalSeconds totalSeconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val totalSeconds: IntSeconds the total number of seconds to offset by","title":"Total seconds"},{"location":"api/core/io.islandtime/-utc-offset/total-seconds/#totalseconds","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val totalSeconds: IntSeconds the total number of seconds to offset by","title":"totalSeconds"},{"location":"api/core/io.islandtime/-utc-offset/validate/","text":"core / io.islandtime / UtcOffset / validate validate (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun validate(): Unit Check if the offset is valid and throw an exception if it isn't. Exceptions DateTimeException - if the offset is outside the supported range See Also isValid","title":"Validate"},{"location":"api/core/io.islandtime/-utc-offset/validate/#validate","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun validate(): Unit Check if the offset is valid and throw an exception if it isn't.","title":"validate"},{"location":"api/core/io.islandtime/-utc-offset/validate/#exceptions","text":"DateTimeException - if the offset is outside the supported range See Also isValid","title":"Exceptions"},{"location":"api/core/io.islandtime/-utc-offset/validated/","text":"core / io.islandtime / UtcOffset / validated validated (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun validated(): UtcOffset Ensure that the offset is valid, throwing an exception if it isn't. Exceptions DateTimeException - if the offset is outside the supported range See Also isValid","title":"Validated"},{"location":"api/core/io.islandtime/-utc-offset/validated/#validated","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun validated(): UtcOffset Ensure that the offset is valid, throwing an exception if it isn't.","title":"validated"},{"location":"api/core/io.islandtime/-utc-offset/validated/#exceptions","text":"DateTimeException - if the offset is outside the supported range See Also isValid","title":"Exceptions"},{"location":"api/core/io.islandtime/-year/","text":"core / io.islandtime / Year Year (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline class Year : Comparable < Year > Constructors Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init> <init>(value: Int ) Properties Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) dateRange The date range of the year. val dateRange: DateRange (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) dayRange The day range of the year. This will be either 1..365 or 1.366 depending on whether this is a common or leap year. val dayRange: IntRange (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) endDate The last date of the year. val endDate: Date (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isLeap Is this a leap year? val isLeap: Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isValid Is this year within the supported range? val isValid: Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) lastDay The last day of the year. This will be either 365 or 366 depending on whether this is a common or leap year. val lastDay: Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) length The length of the year in days. val length: IntDays (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) startDate The first date of the year. val startDate: Date (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) value val value: Int Functions Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) compareTo fun compareTo(other: Year ): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) contains operator fun contains(yearMonth: YearMonth ): Boolean operator fun contains(date: Date ): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) minus operator fun minus(years: LongYears ): Year operator fun minus(years: IntYears ): Year (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) plus operator fun plus(years: LongYears ): Year operator fun plus(years: IntYears ): Year (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toString fun toString(): String (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) validated fun validated(): Year Companion Object Properties Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MAX val MAX: Year (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MAX_VALUE const val MAX_VALUE: Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MIN val MIN: Year (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MIN_VALUE const val MIN_VALUE: Int Extension Functions Name Summary (jvm) toJavaYear Convert to an equivalent Java Year . fun Year .toJavaYear(): Year","title":"Index"},{"location":"api/core/io.islandtime/-year/#year","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline class Year : Comparable < Year >","title":"Year"},{"location":"api/core/io.islandtime/-year/#constructors","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init> <init>(value: Int )","title":"Constructors"},{"location":"api/core/io.islandtime/-year/#properties","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) dateRange The date range of the year. val dateRange: DateRange (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) dayRange The day range of the year. This will be either 1..365 or 1.366 depending on whether this is a common or leap year. val dayRange: IntRange (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) endDate The last date of the year. val endDate: Date (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isLeap Is this a leap year? val isLeap: Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isValid Is this year within the supported range? val isValid: Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) lastDay The last day of the year. This will be either 365 or 366 depending on whether this is a common or leap year. val lastDay: Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) length The length of the year in days. val length: IntDays (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) startDate The first date of the year. val startDate: Date (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) value val value: Int","title":"Properties"},{"location":"api/core/io.islandtime/-year/#functions","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) compareTo fun compareTo(other: Year ): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) contains operator fun contains(yearMonth: YearMonth ): Boolean operator fun contains(date: Date ): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) minus operator fun minus(years: LongYears ): Year operator fun minus(years: IntYears ): Year (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) plus operator fun plus(years: LongYears ): Year operator fun plus(years: IntYears ): Year (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toString fun toString(): String (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) validated fun validated(): Year","title":"Functions"},{"location":"api/core/io.islandtime/-year/#companion-object-properties","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MAX val MAX: Year (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MAX_VALUE const val MAX_VALUE: Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MIN val MIN: Year (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MIN_VALUE const val MIN_VALUE: Int","title":"Companion Object Properties"},{"location":"api/core/io.islandtime/-year/#extension-functions","text":"Name Summary (jvm) toJavaYear Convert to an equivalent Java Year . fun Year .toJavaYear(): Year","title":"Extension Functions"},{"location":"api/core/io.islandtime/-year/-init-/","text":"core / io.islandtime / Year / <init> <init> (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init>(value: Int )","title":" init "},{"location":"api/core/io.islandtime/-year/-init-/#init","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init>(value: Int )","title":"&lt;init&gt;"},{"location":"api/core/io.islandtime/-year/-m-a-x/","text":"core / io.islandtime / Year / MAX MAX (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val MAX: Year","title":" m a x"},{"location":"api/core/io.islandtime/-year/-m-a-x/#max","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val MAX: Year","title":"MAX"},{"location":"api/core/io.islandtime/-year/-m-a-x_-v-a-l-u-e/","text":"core / io.islandtime / Year / MAX_VALUE MAX_VALUE (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) const val MAX_VALUE: Int","title":" m a x  v a l u e"},{"location":"api/core/io.islandtime/-year/-m-a-x_-v-a-l-u-e/#max_value","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) const val MAX_VALUE: Int","title":"MAX_VALUE"},{"location":"api/core/io.islandtime/-year/-m-i-n/","text":"core / io.islandtime / Year / MIN MIN (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val MIN: Year","title":" m i n"},{"location":"api/core/io.islandtime/-year/-m-i-n/#min","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val MIN: Year","title":"MIN"},{"location":"api/core/io.islandtime/-year/-m-i-n_-v-a-l-u-e/","text":"core / io.islandtime / Year / MIN_VALUE MIN_VALUE (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) const val MIN_VALUE: Int","title":" m i n  v a l u e"},{"location":"api/core/io.islandtime/-year/-m-i-n_-v-a-l-u-e/#min_value","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) const val MIN_VALUE: Int","title":"MIN_VALUE"},{"location":"api/core/io.islandtime/-year/compare-to/","text":"core / io.islandtime / Year / compareTo compareTo (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun compareTo(other: Year ): Int","title":"Compare to"},{"location":"api/core/io.islandtime/-year/compare-to/#compareto","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun compareTo(other: Year ): Int","title":"compareTo"},{"location":"api/core/io.islandtime/-year/contains/","text":"core / io.islandtime / Year / contains contains (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun contains(yearMonth: YearMonth ): Boolean operator fun contains(date: Date ): Boolean","title":"Contains"},{"location":"api/core/io.islandtime/-year/contains/#contains","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun contains(yearMonth: YearMonth ): Boolean operator fun contains(date: Date ): Boolean","title":"contains"},{"location":"api/core/io.islandtime/-year/date-range/","text":"core / io.islandtime / Year / dateRange dateRange (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val dateRange: DateRange The date range of the year.","title":"Date range"},{"location":"api/core/io.islandtime/-year/date-range/#daterange","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val dateRange: DateRange The date range of the year.","title":"dateRange"},{"location":"api/core/io.islandtime/-year/day-range/","text":"core / io.islandtime / Year / dayRange dayRange (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val dayRange: IntRange The day range of the year. This will be either 1..365 or 1.366 depending on whether this is a common or leap year.","title":"Day range"},{"location":"api/core/io.islandtime/-year/day-range/#dayrange","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val dayRange: IntRange The day range of the year. This will be either 1..365 or 1.366 depending on whether this is a common or leap year.","title":"dayRange"},{"location":"api/core/io.islandtime/-year/end-date/","text":"core / io.islandtime / Year / endDate endDate (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val endDate: Date The last date of the year.","title":"End date"},{"location":"api/core/io.islandtime/-year/end-date/#enddate","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val endDate: Date The last date of the year.","title":"endDate"},{"location":"api/core/io.islandtime/-year/is-leap/","text":"core / io.islandtime / Year / isLeap isLeap (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val isLeap: Boolean Is this a leap year?","title":"Is leap"},{"location":"api/core/io.islandtime/-year/is-leap/#isleap","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val isLeap: Boolean Is this a leap year?","title":"isLeap"},{"location":"api/core/io.islandtime/-year/is-valid/","text":"core / io.islandtime / Year / isValid isValid (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val isValid: Boolean Is this year within the supported range?","title":"Is valid"},{"location":"api/core/io.islandtime/-year/is-valid/#isvalid","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val isValid: Boolean Is this year within the supported range?","title":"isValid"},{"location":"api/core/io.islandtime/-year/last-day/","text":"core / io.islandtime / Year / lastDay lastDay (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val lastDay: Int The last day of the year. This will be either 365 or 366 depending on whether this is a common or leap year.","title":"Last day"},{"location":"api/core/io.islandtime/-year/last-day/#lastday","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val lastDay: Int The last day of the year. This will be either 365 or 366 depending on whether this is a common or leap year.","title":"lastDay"},{"location":"api/core/io.islandtime/-year/length/","text":"core / io.islandtime / Year / length length (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val length: IntDays The length of the year in days.","title":"Length"},{"location":"api/core/io.islandtime/-year/length/#length","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val length: IntDays The length of the year in days.","title":"length"},{"location":"api/core/io.islandtime/-year/minus/","text":"core / io.islandtime / Year / minus minus (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun minus(years: LongYears ): Year operator fun minus(years: IntYears ): Year","title":"Minus"},{"location":"api/core/io.islandtime/-year/minus/#minus","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun minus(years: LongYears ): Year operator fun minus(years: IntYears ): Year","title":"minus"},{"location":"api/core/io.islandtime/-year/plus/","text":"core / io.islandtime / Year / plus plus (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun plus(years: LongYears ): Year operator fun plus(years: IntYears ): Year","title":"Plus"},{"location":"api/core/io.islandtime/-year/plus/#plus","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun plus(years: LongYears ): Year operator fun plus(years: IntYears ): Year","title":"plus"},{"location":"api/core/io.islandtime/-year/start-date/","text":"core / io.islandtime / Year / startDate startDate (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val startDate: Date The first date of the year.","title":"Start date"},{"location":"api/core/io.islandtime/-year/start-date/#startdate","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val startDate: Date The first date of the year.","title":"startDate"},{"location":"api/core/io.islandtime/-year/to-string/","text":"core / io.islandtime / Year / toString toString (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toString(): String","title":"To string"},{"location":"api/core/io.islandtime/-year/to-string/#tostring","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toString(): String","title":"toString"},{"location":"api/core/io.islandtime/-year/validated/","text":"core / io.islandtime / Year / validated validated (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun validated(): Year","title":"Validated"},{"location":"api/core/io.islandtime/-year/validated/#validated","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun validated(): Year","title":"validated"},{"location":"api/core/io.islandtime/-year/value/","text":"core / io.islandtime / Year / value value (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val value: Int","title":"Value"},{"location":"api/core/io.islandtime/-year/value/#value","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val value: Int","title":"value"},{"location":"api/core/io.islandtime/-year-month/","text":"core / io.islandtime / YearMonth YearMonth (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) class YearMonth : Comparable < YearMonth > A month in a particular year. Constructors Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init> Create a YearMonth . <init>(year: Int , monthNumber: Int ) <init>(year: Int , month: Month ) Properties Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) dateRange The range of dates within this year-month. val dateRange: DateRange (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) dayRange The range of days within this year-month. val dayRange: IntRange (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) endDate The Date representing the last day in this year-month. val endDate: Date (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) firstDayOfYear The ordinal date corresponding to the first day of this year-month. val firstDayOfYear: Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isInLeapYear Check if this year-month falls within a leap year. val isInLeapYear: Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) lastDay The last day of the year-month. val lastDay: Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) lastDayOfYear The ordinal date corresponding to the last day of this year-month. val lastDayOfYear: Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) lengthOfMonth The length of the year-month in days. val lengthOfMonth: IntDays (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) lengthOfYear The length of the year in days. val lengthOfYear: IntDays (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) month The month of the year. val month: Month (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) monthNumber The ISO month number, from 1-12. val monthNumber: Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) startDate The Date representing the first day in this year-month. val startDate: Date (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) year The year. val year: Int Functions Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) compareTo fun compareTo(other: YearMonth ): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) contains operator fun contains(date: Date ): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) copy Create a copy of this YearMonth , replacing the value of any component, as desired fun copy(year: Int = this.year, month: Month = this.month): YearMonth fun copy(year: Int = this.year, monthNumber: Int ): YearMonth (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) equals fun equals(other: Any ?): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) hashCode fun hashCode(): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) minus operator fun minus(years: IntYears ): YearMonth operator fun minus(years: LongYears ): YearMonth operator fun minus(months: IntMonths ): YearMonth operator fun minus(months: LongMonths ): YearMonth (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) plus operator fun plus(years: IntYears ): YearMonth operator fun plus(years: LongYears ): YearMonth operator fun plus(months: IntMonths ): YearMonth operator fun plus(months: LongMonths ): YearMonth (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toString Convert this year-month to a string in ISO-8601 extended format. fun toString(): String Companion Object Properties Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MAX The latest supported YearMonth , which may be used to indicate the \"far future\". val MAX: YearMonth (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MIN The earliest supported YearMonth , which may be used to indicate the \"far past\". val MIN: YearMonth Extension Functions Name Summary (jvm) toJavaYearMonth Convert to an equivalent Java YearMonth . fun YearMonth .toJavaYearMonth(): YearMonth","title":"Index"},{"location":"api/core/io.islandtime/-year-month/#yearmonth","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) class YearMonth : Comparable < YearMonth > A month in a particular year.","title":"YearMonth"},{"location":"api/core/io.islandtime/-year-month/#constructors","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init> Create a YearMonth . <init>(year: Int , monthNumber: Int ) <init>(year: Int , month: Month )","title":"Constructors"},{"location":"api/core/io.islandtime/-year-month/#properties","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) dateRange The range of dates within this year-month. val dateRange: DateRange (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) dayRange The range of days within this year-month. val dayRange: IntRange (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) endDate The Date representing the last day in this year-month. val endDate: Date (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) firstDayOfYear The ordinal date corresponding to the first day of this year-month. val firstDayOfYear: Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isInLeapYear Check if this year-month falls within a leap year. val isInLeapYear: Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) lastDay The last day of the year-month. val lastDay: Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) lastDayOfYear The ordinal date corresponding to the last day of this year-month. val lastDayOfYear: Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) lengthOfMonth The length of the year-month in days. val lengthOfMonth: IntDays (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) lengthOfYear The length of the year in days. val lengthOfYear: IntDays (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) month The month of the year. val month: Month (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) monthNumber The ISO month number, from 1-12. val monthNumber: Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) startDate The Date representing the first day in this year-month. val startDate: Date (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) year The year. val year: Int","title":"Properties"},{"location":"api/core/io.islandtime/-year-month/#functions","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) compareTo fun compareTo(other: YearMonth ): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) contains operator fun contains(date: Date ): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) copy Create a copy of this YearMonth , replacing the value of any component, as desired fun copy(year: Int = this.year, month: Month = this.month): YearMonth fun copy(year: Int = this.year, monthNumber: Int ): YearMonth (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) equals fun equals(other: Any ?): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) hashCode fun hashCode(): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) minus operator fun minus(years: IntYears ): YearMonth operator fun minus(years: LongYears ): YearMonth operator fun minus(months: IntMonths ): YearMonth operator fun minus(months: LongMonths ): YearMonth (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) plus operator fun plus(years: IntYears ): YearMonth operator fun plus(years: LongYears ): YearMonth operator fun plus(months: IntMonths ): YearMonth operator fun plus(months: LongMonths ): YearMonth (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toString Convert this year-month to a string in ISO-8601 extended format. fun toString(): String","title":"Functions"},{"location":"api/core/io.islandtime/-year-month/#companion-object-properties","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MAX The latest supported YearMonth , which may be used to indicate the \"far future\". val MAX: YearMonth (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MIN The earliest supported YearMonth , which may be used to indicate the \"far past\". val MIN: YearMonth","title":"Companion Object Properties"},{"location":"api/core/io.islandtime/-year-month/#extension-functions","text":"Name Summary (jvm) toJavaYearMonth Convert to an equivalent Java YearMonth . fun YearMonth .toJavaYearMonth(): YearMonth","title":"Extension Functions"},{"location":"api/core/io.islandtime/-year-month/-init-/","text":"core / io.islandtime / YearMonth / <init> <init> (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init>(year: Int , monthNumber: Int ) Create a YearMonth . Exceptions DateTimeException - if the year or month is invalid(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init>(year: Int , month: Month ) Create a YearMonth . Parameters year - the year month - the month of the year Exceptions DateTimeException - if the year is outside the supported range Constructor Create a YearMonth .","title":" init "},{"location":"api/core/io.islandtime/-year-month/-init-/#init","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init>(year: Int , monthNumber: Int ) Create a YearMonth .","title":"&lt;init&gt;"},{"location":"api/core/io.islandtime/-year-month/-init-/#exceptions","text":"DateTimeException - if the year or month is invalid(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init>(year: Int , month: Month ) Create a YearMonth .","title":"Exceptions"},{"location":"api/core/io.islandtime/-year-month/-init-/#parameters","text":"year - the year month - the month of the year","title":"Parameters"},{"location":"api/core/io.islandtime/-year-month/-init-/#exceptions_1","text":"DateTimeException - if the year is outside the supported range Constructor Create a YearMonth .","title":"Exceptions"},{"location":"api/core/io.islandtime/-year-month/-m-a-x/","text":"core / io.islandtime / YearMonth / MAX MAX (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val MAX: YearMonth The latest supported YearMonth , which may be used to indicate the \"far future\".","title":" m a x"},{"location":"api/core/io.islandtime/-year-month/-m-a-x/#max","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val MAX: YearMonth The latest supported YearMonth , which may be used to indicate the \"far future\".","title":"MAX"},{"location":"api/core/io.islandtime/-year-month/-m-i-n/","text":"core / io.islandtime / YearMonth / MIN MIN (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val MIN: YearMonth The earliest supported YearMonth , which may be used to indicate the \"far past\".","title":" m i n"},{"location":"api/core/io.islandtime/-year-month/-m-i-n/#min","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val MIN: YearMonth The earliest supported YearMonth , which may be used to indicate the \"far past\".","title":"MIN"},{"location":"api/core/io.islandtime/-year-month/compare-to/","text":"core / io.islandtime / YearMonth / compareTo compareTo (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun compareTo(other: YearMonth ): Int","title":"Compare to"},{"location":"api/core/io.islandtime/-year-month/compare-to/#compareto","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun compareTo(other: YearMonth ): Int","title":"compareTo"},{"location":"api/core/io.islandtime/-year-month/contains/","text":"core / io.islandtime / YearMonth / contains contains (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun contains(date: Date ): Boolean","title":"Contains"},{"location":"api/core/io.islandtime/-year-month/contains/#contains","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun contains(date: Date ): Boolean","title":"contains"},{"location":"api/core/io.islandtime/-year-month/copy/","text":"core / io.islandtime / YearMonth / copy copy (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun copy(year: Int = this.year, month: Month = this.month): YearMonth fun copy(year: Int = this.year, monthNumber: Int ): YearMonth Create a copy of this YearMonth , replacing the value of any component, as desired","title":"Copy"},{"location":"api/core/io.islandtime/-year-month/copy/#copy","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun copy(year: Int = this.year, month: Month = this.month): YearMonth fun copy(year: Int = this.year, monthNumber: Int ): YearMonth Create a copy of this YearMonth , replacing the value of any component, as desired","title":"copy"},{"location":"api/core/io.islandtime/-year-month/date-range/","text":"core / io.islandtime / YearMonth / dateRange dateRange (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val dateRange: DateRange The range of dates within this year-month.","title":"Date range"},{"location":"api/core/io.islandtime/-year-month/date-range/#daterange","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val dateRange: DateRange The range of dates within this year-month.","title":"dateRange"},{"location":"api/core/io.islandtime/-year-month/day-range/","text":"core / io.islandtime / YearMonth / dayRange dayRange (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val dayRange: IntRange The range of days within this year-month.","title":"Day range"},{"location":"api/core/io.islandtime/-year-month/day-range/#dayrange","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val dayRange: IntRange The range of days within this year-month.","title":"dayRange"},{"location":"api/core/io.islandtime/-year-month/end-date/","text":"core / io.islandtime / YearMonth / endDate endDate (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val endDate: Date The Date representing the last day in this year-month.","title":"End date"},{"location":"api/core/io.islandtime/-year-month/end-date/#enddate","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val endDate: Date The Date representing the last day in this year-month.","title":"endDate"},{"location":"api/core/io.islandtime/-year-month/equals/","text":"core / io.islandtime / YearMonth / equals equals (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun equals(other: Any ?): Boolean","title":"Equals"},{"location":"api/core/io.islandtime/-year-month/equals/#equals","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun equals(other: Any ?): Boolean","title":"equals"},{"location":"api/core/io.islandtime/-year-month/first-day-of-year/","text":"core / io.islandtime / YearMonth / firstDayOfYear firstDayOfYear (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val firstDayOfYear: Int The ordinal date corresponding to the first day of this year-month.","title":"First day of year"},{"location":"api/core/io.islandtime/-year-month/first-day-of-year/#firstdayofyear","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val firstDayOfYear: Int The ordinal date corresponding to the first day of this year-month.","title":"firstDayOfYear"},{"location":"api/core/io.islandtime/-year-month/hash-code/","text":"core / io.islandtime / YearMonth / hashCode hashCode (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun hashCode(): Int","title":"Hash code"},{"location":"api/core/io.islandtime/-year-month/hash-code/#hashcode","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun hashCode(): Int","title":"hashCode"},{"location":"api/core/io.islandtime/-year-month/is-in-leap-year/","text":"core / io.islandtime / YearMonth / isInLeapYear isInLeapYear (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val isInLeapYear: Boolean Check if this year-month falls within a leap year.","title":"Is in leap year"},{"location":"api/core/io.islandtime/-year-month/is-in-leap-year/#isinleapyear","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val isInLeapYear: Boolean Check if this year-month falls within a leap year.","title":"isInLeapYear"},{"location":"api/core/io.islandtime/-year-month/last-day-of-year/","text":"core / io.islandtime / YearMonth / lastDayOfYear lastDayOfYear (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val lastDayOfYear: Int The ordinal date corresponding to the last day of this year-month.","title":"Last day of year"},{"location":"api/core/io.islandtime/-year-month/last-day-of-year/#lastdayofyear","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val lastDayOfYear: Int The ordinal date corresponding to the last day of this year-month.","title":"lastDayOfYear"},{"location":"api/core/io.islandtime/-year-month/last-day/","text":"core / io.islandtime / YearMonth / lastDay lastDay (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val lastDay: Int The last day of the year-month.","title":"Last day"},{"location":"api/core/io.islandtime/-year-month/last-day/#lastday","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val lastDay: Int The last day of the year-month.","title":"lastDay"},{"location":"api/core/io.islandtime/-year-month/length-of-month/","text":"core / io.islandtime / YearMonth / lengthOfMonth lengthOfMonth (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val lengthOfMonth: IntDays The length of the year-month in days.","title":"Length of month"},{"location":"api/core/io.islandtime/-year-month/length-of-month/#lengthofmonth","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val lengthOfMonth: IntDays The length of the year-month in days.","title":"lengthOfMonth"},{"location":"api/core/io.islandtime/-year-month/length-of-year/","text":"core / io.islandtime / YearMonth / lengthOfYear lengthOfYear (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val lengthOfYear: IntDays The length of the year in days.","title":"Length of year"},{"location":"api/core/io.islandtime/-year-month/length-of-year/#lengthofyear","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val lengthOfYear: IntDays The length of the year in days.","title":"lengthOfYear"},{"location":"api/core/io.islandtime/-year-month/minus/","text":"core / io.islandtime / YearMonth / minus minus (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun minus(years: IntYears ): YearMonth operator fun minus(years: LongYears ): YearMonth operator fun minus(months: IntMonths ): YearMonth operator fun minus(months: LongMonths ): YearMonth","title":"Minus"},{"location":"api/core/io.islandtime/-year-month/minus/#minus","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun minus(years: IntYears ): YearMonth operator fun minus(years: LongYears ): YearMonth operator fun minus(months: IntMonths ): YearMonth operator fun minus(months: LongMonths ): YearMonth","title":"minus"},{"location":"api/core/io.islandtime/-year-month/month-number/","text":"core / io.islandtime / YearMonth / monthNumber monthNumber (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline val monthNumber: Int The ISO month number, from 1-12.","title":"Month number"},{"location":"api/core/io.islandtime/-year-month/month-number/#monthnumber","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline val monthNumber: Int The ISO month number, from 1-12.","title":"monthNumber"},{"location":"api/core/io.islandtime/-year-month/month/","text":"core / io.islandtime / YearMonth / month month (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val month: Month The month of the year.","title":"Month"},{"location":"api/core/io.islandtime/-year-month/month/#month","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val month: Month The month of the year.","title":"month"},{"location":"api/core/io.islandtime/-year-month/plus/","text":"core / io.islandtime / YearMonth / plus plus (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun plus(years: IntYears ): YearMonth operator fun plus(years: LongYears ): YearMonth operator fun plus(months: IntMonths ): YearMonth operator fun plus(months: LongMonths ): YearMonth","title":"Plus"},{"location":"api/core/io.islandtime/-year-month/plus/#plus","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun plus(years: IntYears ): YearMonth operator fun plus(years: LongYears ): YearMonth operator fun plus(months: IntMonths ): YearMonth operator fun plus(months: LongMonths ): YearMonth","title":"plus"},{"location":"api/core/io.islandtime/-year-month/start-date/","text":"core / io.islandtime / YearMonth / startDate startDate (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val startDate: Date The Date representing the first day in this year-month.","title":"Start date"},{"location":"api/core/io.islandtime/-year-month/start-date/#startdate","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val startDate: Date The Date representing the first day in this year-month.","title":"startDate"},{"location":"api/core/io.islandtime/-year-month/to-string/","text":"core / io.islandtime / YearMonth / toString toString (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toString(): String Convert this year-month to a string in ISO-8601 extended format.","title":"To string"},{"location":"api/core/io.islandtime/-year-month/to-string/#tostring","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toString(): String Convert this year-month to a string in ISO-8601 extended format.","title":"toString"},{"location":"api/core/io.islandtime/-year-month/year/","text":"core / io.islandtime / YearMonth / year year (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val year: Int The year.","title":"Year"},{"location":"api/core/io.islandtime/-year-month/year/#year","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val year: Int The year.","title":"year"},{"location":"api/core/io.islandtime/-zoned-date-time/","text":"core / io.islandtime / ZonedDateTime ZonedDateTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) class ZonedDateTime : TimePoint < ZonedDateTime > A date and time of day in a particular region. ZonedDateTime takes time zone rules into account when performing calendrical calculations. Properties Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) additionalNanosecondsSinceUnixEpoch The number of additional nanoseconds on top of secondsSinceUnixEpoch . val additionalNanosecondsSinceUnixEpoch: IntNanoseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) date The local date. val date: Date (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) dateTime The local date and time of day. val dateTime: DateTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) dayOfMonth The day of the month. val dayOfMonth: Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) dayOfWeek The day of the week. val dayOfWeek: DayOfWeek (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) dayOfYear The day of the year -- also known as the ordinal date in ISO-8601. val dayOfYear: Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) hour The hour of the day. val hour: Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) instant The Instant representing the same time point. val instant: Instant (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isInLeapYear Check if this date falls within a leap year. val isInLeapYear: Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isLeapDay Check if this is a leap day. val isLeapDay: Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) lengthOfMonth The length of this date's month in days. val lengthOfMonth: IntDays (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) lengthOfYear The length of this date's year in days. val lengthOfYear: IntDays (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) millisecondsSinceUnixEpoch The number of milliseconds since the Unix epoch of 1970-01-01T00:00Z. val millisecondsSinceUnixEpoch: LongMilliseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) minute The minute of the hour. val minute: Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) month The month of the year. val month: Month (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) monthNumber The ISO month number, from 1-12. val monthNumber: Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) nanosecond The nanosecond of the second. val nanosecond: Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) offset The offset from UTC. val offset: UtcOffset (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) offsetDateTime The combined date, time, and offset. val offsetDateTime: OffsetDateTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) offsetTime The combined time of day and offset. val offsetTime: OffsetTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) second The second of the minute. val second: Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) secondsSinceUnixEpoch The number of seconds since the Unix epoch of 1970-01-01T00:00Z. val secondsSinceUnixEpoch: LongSeconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) time The local time of day. val time: Time (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) year The year. val year: Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) yearMonth The combined year and month. val yearMonth: YearMonth (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) zone The time zone. val zone: TimeZone Functions Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) adjustedTo Change the time zone of a ZonedDateTime , adjusting the date, time, and offset such that the instant represented by it remains the same. fun adjustedTo(newTimeZone: TimeZone ): ZonedDateTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) copy Return a new ZonedDateTime , replacing any of the components with new values. fun copy(dateTime: DateTime = this.dateTime, offset: UtcOffset = this.offset, zone: TimeZone = this.zone): ZonedDateTime fun copy(date: Date = this.date, time: Time = this.time, offset: UtcOffset = this.offset, zone: TimeZone = this.zone): ZonedDateTime fun copy(year: Int = this.year, dayOfYear: Int = this.dayOfYear, hour: Int = this.hour, minute: Int = this.minute, second: Int = this.second, nanosecond: Int = this.nanosecond, offset: UtcOffset = this.offset, zone: TimeZone = this.zone): ZonedDateTime fun copy(year: Int = this.year, month: Month = this.month, dayOfMonth: Int = this.dayOfMonth, hour: Int = this.hour, minute: Int = this.minute, second: Int = this.second, nanosecond: Int = this.nanosecond, offset: UtcOffset = this.offset, zone: TimeZone = this.zone): ZonedDateTime fun copy(year: Int = this.year, monthNumber: Int , dayOfMonth: Int = this.dayOfMonth, hour: Int = this.hour, minute: Int = this.minute, second: Int = this.second, nanosecond: Int = this.nanosecond, offset: UtcOffset = this.offset, zone: TimeZone = this.zone): ZonedDateTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) equals fun equals(other: Any ?): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) hashCode fun hashCode(): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) minus Return a ZonedDateTime with period subtracted from it. operator fun minus(period: Period ): ZonedDateTime operator fun minus(duration: Duration ): ZonedDateTime operator fun minus(years: IntYears ): ZonedDateTime operator fun minus(years: LongYears ): ZonedDateTime operator fun minus(months: IntMonths ): ZonedDateTime operator fun minus(months: LongMonths ): ZonedDateTime operator fun minus(weeks: IntWeeks ): ZonedDateTime operator fun minus(weeks: LongWeeks ): ZonedDateTime operator fun minus(days: IntDays ): ZonedDateTime operator fun minus(days: LongDays ): ZonedDateTime operator fun minus(hours: IntHours ): ZonedDateTime operator fun minus(hours: LongHours ): ZonedDateTime operator fun minus(minutes: IntMinutes ): ZonedDateTime operator fun minus(minutes: LongMinutes ): ZonedDateTime operator fun minus(seconds: IntSeconds ): ZonedDateTime operator fun minus(seconds: LongSeconds ): ZonedDateTime operator fun minus(milliseconds: IntMilliseconds ): ZonedDateTime operator fun minus(milliseconds: LongMilliseconds ): ZonedDateTime operator fun minus(microseconds: IntMicroseconds ): ZonedDateTime operator fun minus(microseconds: LongMicroseconds ): ZonedDateTime operator fun minus(nanoseconds: IntNanoseconds ): ZonedDateTime operator fun minus(nanoseconds: LongNanoseconds ): ZonedDateTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) plus Return a ZonedDateTime with period added to it. operator fun plus(period: Period ): ZonedDateTime operator fun plus(duration: Duration ): ZonedDateTime operator fun plus(years: IntYears ): ZonedDateTime operator fun plus(years: LongYears ): ZonedDateTime operator fun plus(months: IntMonths ): ZonedDateTime operator fun plus(months: LongMonths ): ZonedDateTime operator fun plus(weeks: IntWeeks ): ZonedDateTime operator fun plus(weeks: LongWeeks ): ZonedDateTime operator fun plus(days: IntDays ): ZonedDateTime operator fun plus(days: LongDays ): ZonedDateTime operator fun plus(hours: IntHours ): ZonedDateTime operator fun plus(hours: LongHours ): ZonedDateTime operator fun plus(minutes: IntMinutes ): ZonedDateTime operator fun plus(minutes: LongMinutes ): ZonedDateTime operator fun plus(seconds: IntSeconds ): ZonedDateTime operator fun plus(seconds: LongSeconds ): ZonedDateTime operator fun plus(milliseconds: IntMilliseconds ): ZonedDateTime operator fun plus(milliseconds: LongMilliseconds ): ZonedDateTime operator fun plus(microseconds: IntMicroseconds ): ZonedDateTime operator fun plus(microseconds: LongMicroseconds ): ZonedDateTime operator fun plus(nanoseconds: IntNanoseconds ): ZonedDateTime operator fun plus(nanoseconds: LongNanoseconds ): ZonedDateTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) rangeTo operator fun rangeTo(other: ZonedDateTime ): ZonedDateTimeInterval (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toString fun toString(): String (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) withEarlierOffsetAtOverlap If the local date-time falls during an overlap caused by a daylight savings transition, return a ZonedDateTime with the same local date and time, but using the earlier of the two valid offsets. fun withEarlierOffsetAtOverlap(): ZonedDateTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) withFixedOffsetZone If this date-time uses a region-based time zone, return a copy with a fixed offset. Otherwise, return this date-time, unchanged. fun withFixedOffsetZone(): ZonedDateTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) withLaterOffsetAtOverlap If the local date-time falls during an overlap caused by a daylight savings transition, return a ZonedDateTime with the same local date and time, but using the later of the two valid offsets. fun withLaterOffsetAtOverlap(): ZonedDateTime Companion Object Properties Name Summary DEFAULT_SORT_ORDER Compare by instant, then date-time, then time zone. Using this Comparator guarantees a deterministic order when sorting.(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val DEFAULT_SORT_ORDER: <ERROR CLASS> (jvm) val DEFAULT_SORT_ORDER: Comparator < ZonedDateTime > TIMELINE_ORDER Compare by timeline order only, ignoring any offset or time zone differences.(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val TIMELINE_ORDER: <ERROR CLASS> (jvm) val TIMELINE_ORDER: Comparator < TimePoint <*>> Companion Object Functions Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fromInstant Create a ZonedDateTime from the instant represented by a local date-time and offset. The resulting ZonedDateTime may have a different date-time and offset depending on the time zone rules, but the instant will be the same. fun fromInstant(dateTime: DateTime , offset: UtcOffset , zone: TimeZone ): ZonedDateTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fromLocal Create a ZonedDateTime from a local date and time, optionally using a preferred offset. If the local date and time fall during an overlap, preferredOffset will be used if it represents one of the two valid offsets. If it is null or invalid, it will be ignored. fun fromLocal(dateTime: DateTime , zone: TimeZone , preferredOffset: UtcOffset ? = null): ZonedDateTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fromMillisecondOfUnixEpoch Create a ZonedDateTime from the millisecond of the Unix epoch at zone . fun fromMillisecondOfUnixEpoch(millisecond: Long , zone: TimeZone ): ZonedDateTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fromMillisecondsSinceUnixEpoch Create a ZonedDateTime from a duration of milliseconds relative to the Unix epoch at zone . fun fromMillisecondsSinceUnixEpoch(milliseconds: LongMilliseconds , zone: TimeZone ): ZonedDateTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fromSecondOfUnixEpoch Create a ZonedDateTime from the second of the Unix epoch at zone . fun fromSecondOfUnixEpoch(second: Long , nanosecond: Int = 0, zone: TimeZone ): ZonedDateTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fromSecondsSinceUnixEpoch Create a ZonedDateTime from a duration of seconds relative to the Unix epoch at zone , optionally, with some number of additional nanoseconds added to it. fun fromSecondsSinceUnixEpoch(seconds: LongSeconds , nanosecondAdjustment: IntNanoseconds = 0.nanoseconds, zone: TimeZone ): ZonedDateTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fromUnixEpochMillisecond fun ~~fromUnixEpochMillisecond~~(millisecond: Long , zone: TimeZone ): ZonedDateTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fromUnixEpochSecond fun ~~fromUnixEpochSecond~~(second: Long , nanoOfSecond: Int , zone: TimeZone ): ZonedDateTime Extension Functions Name Summary (jvm) endOfWeek The date-time at the last representable instant of the week that this date-time falls in. The first day of the week will be determined by locale . fun ZonedDateTime .endOfWeek(locale: Locale ): ZonedDateTime (jvm) startOfWeek The date-time at the first instant of the week that this date-time falls in. The first day of the week will be determined by locale . fun ZonedDateTime .startOfWeek(locale: Locale ): ZonedDateTime (jvm) toJavaZonedDateTime Convert to an equivalent Java ZonedDateTime . fun ZonedDateTime .toJavaZonedDateTime(): ZonedDateTime (jvm) weekInterval The interval of the week that this date falls within. The first day of the week will be determined by locale . The zone will be preserved in both the start and end date-times. fun ZonedDateTime .weekInterval(locale: Locale ): ZonedDateTimeInterval","title":"Index"},{"location":"api/core/io.islandtime/-zoned-date-time/#zoneddatetime","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) class ZonedDateTime : TimePoint < ZonedDateTime > A date and time of day in a particular region. ZonedDateTime takes time zone rules into account when performing calendrical calculations.","title":"ZonedDateTime"},{"location":"api/core/io.islandtime/-zoned-date-time/#properties","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) additionalNanosecondsSinceUnixEpoch The number of additional nanoseconds on top of secondsSinceUnixEpoch . val additionalNanosecondsSinceUnixEpoch: IntNanoseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) date The local date. val date: Date (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) dateTime The local date and time of day. val dateTime: DateTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) dayOfMonth The day of the month. val dayOfMonth: Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) dayOfWeek The day of the week. val dayOfWeek: DayOfWeek (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) dayOfYear The day of the year -- also known as the ordinal date in ISO-8601. val dayOfYear: Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) hour The hour of the day. val hour: Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) instant The Instant representing the same time point. val instant: Instant (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isInLeapYear Check if this date falls within a leap year. val isInLeapYear: Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isLeapDay Check if this is a leap day. val isLeapDay: Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) lengthOfMonth The length of this date's month in days. val lengthOfMonth: IntDays (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) lengthOfYear The length of this date's year in days. val lengthOfYear: IntDays (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) millisecondsSinceUnixEpoch The number of milliseconds since the Unix epoch of 1970-01-01T00:00Z. val millisecondsSinceUnixEpoch: LongMilliseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) minute The minute of the hour. val minute: Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) month The month of the year. val month: Month (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) monthNumber The ISO month number, from 1-12. val monthNumber: Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) nanosecond The nanosecond of the second. val nanosecond: Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) offset The offset from UTC. val offset: UtcOffset (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) offsetDateTime The combined date, time, and offset. val offsetDateTime: OffsetDateTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) offsetTime The combined time of day and offset. val offsetTime: OffsetTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) second The second of the minute. val second: Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) secondsSinceUnixEpoch The number of seconds since the Unix epoch of 1970-01-01T00:00Z. val secondsSinceUnixEpoch: LongSeconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) time The local time of day. val time: Time (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) year The year. val year: Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) yearMonth The combined year and month. val yearMonth: YearMonth (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) zone The time zone. val zone: TimeZone","title":"Properties"},{"location":"api/core/io.islandtime/-zoned-date-time/#functions","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) adjustedTo Change the time zone of a ZonedDateTime , adjusting the date, time, and offset such that the instant represented by it remains the same. fun adjustedTo(newTimeZone: TimeZone ): ZonedDateTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) copy Return a new ZonedDateTime , replacing any of the components with new values. fun copy(dateTime: DateTime = this.dateTime, offset: UtcOffset = this.offset, zone: TimeZone = this.zone): ZonedDateTime fun copy(date: Date = this.date, time: Time = this.time, offset: UtcOffset = this.offset, zone: TimeZone = this.zone): ZonedDateTime fun copy(year: Int = this.year, dayOfYear: Int = this.dayOfYear, hour: Int = this.hour, minute: Int = this.minute, second: Int = this.second, nanosecond: Int = this.nanosecond, offset: UtcOffset = this.offset, zone: TimeZone = this.zone): ZonedDateTime fun copy(year: Int = this.year, month: Month = this.month, dayOfMonth: Int = this.dayOfMonth, hour: Int = this.hour, minute: Int = this.minute, second: Int = this.second, nanosecond: Int = this.nanosecond, offset: UtcOffset = this.offset, zone: TimeZone = this.zone): ZonedDateTime fun copy(year: Int = this.year, monthNumber: Int , dayOfMonth: Int = this.dayOfMonth, hour: Int = this.hour, minute: Int = this.minute, second: Int = this.second, nanosecond: Int = this.nanosecond, offset: UtcOffset = this.offset, zone: TimeZone = this.zone): ZonedDateTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) equals fun equals(other: Any ?): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) hashCode fun hashCode(): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) minus Return a ZonedDateTime with period subtracted from it. operator fun minus(period: Period ): ZonedDateTime operator fun minus(duration: Duration ): ZonedDateTime operator fun minus(years: IntYears ): ZonedDateTime operator fun minus(years: LongYears ): ZonedDateTime operator fun minus(months: IntMonths ): ZonedDateTime operator fun minus(months: LongMonths ): ZonedDateTime operator fun minus(weeks: IntWeeks ): ZonedDateTime operator fun minus(weeks: LongWeeks ): ZonedDateTime operator fun minus(days: IntDays ): ZonedDateTime operator fun minus(days: LongDays ): ZonedDateTime operator fun minus(hours: IntHours ): ZonedDateTime operator fun minus(hours: LongHours ): ZonedDateTime operator fun minus(minutes: IntMinutes ): ZonedDateTime operator fun minus(minutes: LongMinutes ): ZonedDateTime operator fun minus(seconds: IntSeconds ): ZonedDateTime operator fun minus(seconds: LongSeconds ): ZonedDateTime operator fun minus(milliseconds: IntMilliseconds ): ZonedDateTime operator fun minus(milliseconds: LongMilliseconds ): ZonedDateTime operator fun minus(microseconds: IntMicroseconds ): ZonedDateTime operator fun minus(microseconds: LongMicroseconds ): ZonedDateTime operator fun minus(nanoseconds: IntNanoseconds ): ZonedDateTime operator fun minus(nanoseconds: LongNanoseconds ): ZonedDateTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) plus Return a ZonedDateTime with period added to it. operator fun plus(period: Period ): ZonedDateTime operator fun plus(duration: Duration ): ZonedDateTime operator fun plus(years: IntYears ): ZonedDateTime operator fun plus(years: LongYears ): ZonedDateTime operator fun plus(months: IntMonths ): ZonedDateTime operator fun plus(months: LongMonths ): ZonedDateTime operator fun plus(weeks: IntWeeks ): ZonedDateTime operator fun plus(weeks: LongWeeks ): ZonedDateTime operator fun plus(days: IntDays ): ZonedDateTime operator fun plus(days: LongDays ): ZonedDateTime operator fun plus(hours: IntHours ): ZonedDateTime operator fun plus(hours: LongHours ): ZonedDateTime operator fun plus(minutes: IntMinutes ): ZonedDateTime operator fun plus(minutes: LongMinutes ): ZonedDateTime operator fun plus(seconds: IntSeconds ): ZonedDateTime operator fun plus(seconds: LongSeconds ): ZonedDateTime operator fun plus(milliseconds: IntMilliseconds ): ZonedDateTime operator fun plus(milliseconds: LongMilliseconds ): ZonedDateTime operator fun plus(microseconds: IntMicroseconds ): ZonedDateTime operator fun plus(microseconds: LongMicroseconds ): ZonedDateTime operator fun plus(nanoseconds: IntNanoseconds ): ZonedDateTime operator fun plus(nanoseconds: LongNanoseconds ): ZonedDateTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) rangeTo operator fun rangeTo(other: ZonedDateTime ): ZonedDateTimeInterval (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toString fun toString(): String (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) withEarlierOffsetAtOverlap If the local date-time falls during an overlap caused by a daylight savings transition, return a ZonedDateTime with the same local date and time, but using the earlier of the two valid offsets. fun withEarlierOffsetAtOverlap(): ZonedDateTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) withFixedOffsetZone If this date-time uses a region-based time zone, return a copy with a fixed offset. Otherwise, return this date-time, unchanged. fun withFixedOffsetZone(): ZonedDateTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) withLaterOffsetAtOverlap If the local date-time falls during an overlap caused by a daylight savings transition, return a ZonedDateTime with the same local date and time, but using the later of the two valid offsets. fun withLaterOffsetAtOverlap(): ZonedDateTime","title":"Functions"},{"location":"api/core/io.islandtime/-zoned-date-time/#companion-object-properties","text":"Name Summary DEFAULT_SORT_ORDER Compare by instant, then date-time, then time zone. Using this Comparator guarantees a deterministic order when sorting.(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val DEFAULT_SORT_ORDER: <ERROR CLASS> (jvm) val DEFAULT_SORT_ORDER: Comparator < ZonedDateTime > TIMELINE_ORDER Compare by timeline order only, ignoring any offset or time zone differences.(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val TIMELINE_ORDER: <ERROR CLASS> (jvm) val TIMELINE_ORDER: Comparator < TimePoint <*>>","title":"Companion Object Properties"},{"location":"api/core/io.islandtime/-zoned-date-time/#companion-object-functions","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fromInstant Create a ZonedDateTime from the instant represented by a local date-time and offset. The resulting ZonedDateTime may have a different date-time and offset depending on the time zone rules, but the instant will be the same. fun fromInstant(dateTime: DateTime , offset: UtcOffset , zone: TimeZone ): ZonedDateTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fromLocal Create a ZonedDateTime from a local date and time, optionally using a preferred offset. If the local date and time fall during an overlap, preferredOffset will be used if it represents one of the two valid offsets. If it is null or invalid, it will be ignored. fun fromLocal(dateTime: DateTime , zone: TimeZone , preferredOffset: UtcOffset ? = null): ZonedDateTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fromMillisecondOfUnixEpoch Create a ZonedDateTime from the millisecond of the Unix epoch at zone . fun fromMillisecondOfUnixEpoch(millisecond: Long , zone: TimeZone ): ZonedDateTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fromMillisecondsSinceUnixEpoch Create a ZonedDateTime from a duration of milliseconds relative to the Unix epoch at zone . fun fromMillisecondsSinceUnixEpoch(milliseconds: LongMilliseconds , zone: TimeZone ): ZonedDateTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fromSecondOfUnixEpoch Create a ZonedDateTime from the second of the Unix epoch at zone . fun fromSecondOfUnixEpoch(second: Long , nanosecond: Int = 0, zone: TimeZone ): ZonedDateTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fromSecondsSinceUnixEpoch Create a ZonedDateTime from a duration of seconds relative to the Unix epoch at zone , optionally, with some number of additional nanoseconds added to it. fun fromSecondsSinceUnixEpoch(seconds: LongSeconds , nanosecondAdjustment: IntNanoseconds = 0.nanoseconds, zone: TimeZone ): ZonedDateTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fromUnixEpochMillisecond fun ~~fromUnixEpochMillisecond~~(millisecond: Long , zone: TimeZone ): ZonedDateTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fromUnixEpochSecond fun ~~fromUnixEpochSecond~~(second: Long , nanoOfSecond: Int , zone: TimeZone ): ZonedDateTime","title":"Companion Object Functions"},{"location":"api/core/io.islandtime/-zoned-date-time/#extension-functions","text":"Name Summary (jvm) endOfWeek The date-time at the last representable instant of the week that this date-time falls in. The first day of the week will be determined by locale . fun ZonedDateTime .endOfWeek(locale: Locale ): ZonedDateTime (jvm) startOfWeek The date-time at the first instant of the week that this date-time falls in. The first day of the week will be determined by locale . fun ZonedDateTime .startOfWeek(locale: Locale ): ZonedDateTime (jvm) toJavaZonedDateTime Convert to an equivalent Java ZonedDateTime . fun ZonedDateTime .toJavaZonedDateTime(): ZonedDateTime (jvm) weekInterval The interval of the week that this date falls within. The first day of the week will be determined by locale . The zone will be preserved in both the start and end date-times. fun ZonedDateTime .weekInterval(locale: Locale ): ZonedDateTimeInterval","title":"Extension Functions"},{"location":"api/core/io.islandtime/-zoned-date-time/-d-e-f-a-u-l-t_-s-o-r-t_-o-r-d-e-r/","text":"core / io.islandtime / ZonedDateTime / DEFAULT_SORT_ORDER DEFAULT_SORT_ORDER (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val DEFAULT_SORT_ORDER: <ERROR CLASS> (jvm) val DEFAULT_SORT_ORDER: Comparator < ZonedDateTime > Compare by instant, then date-time, then time zone. Using this Comparator guarantees a deterministic order when sorting.","title":" d e f a u l t  s o r t  o r d e r"},{"location":"api/core/io.islandtime/-zoned-date-time/-d-e-f-a-u-l-t_-s-o-r-t_-o-r-d-e-r/#default_sort_order","text":"(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val DEFAULT_SORT_ORDER: <ERROR CLASS> (jvm) val DEFAULT_SORT_ORDER: Comparator < ZonedDateTime > Compare by instant, then date-time, then time zone. Using this Comparator guarantees a deterministic order when sorting.","title":"DEFAULT_SORT_ORDER"},{"location":"api/core/io.islandtime/-zoned-date-time/-t-i-m-e-l-i-n-e_-o-r-d-e-r/","text":"core / io.islandtime / ZonedDateTime / TIMELINE_ORDER TIMELINE_ORDER (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val TIMELINE_ORDER: <ERROR CLASS> (jvm) val TIMELINE_ORDER: Comparator < TimePoint <*>> Compare by timeline order only, ignoring any offset or time zone differences.","title":" t i m e l i n e  o r d e r"},{"location":"api/core/io.islandtime/-zoned-date-time/-t-i-m-e-l-i-n-e_-o-r-d-e-r/#timeline_order","text":"(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val TIMELINE_ORDER: <ERROR CLASS> (jvm) val TIMELINE_ORDER: Comparator < TimePoint <*>> Compare by timeline order only, ignoring any offset or time zone differences.","title":"TIMELINE_ORDER"},{"location":"api/core/io.islandtime/-zoned-date-time/additional-nanoseconds-since-unix-epoch/","text":"core / io.islandtime / ZonedDateTime / additionalNanosecondsSinceUnixEpoch additionalNanosecondsSinceUnixEpoch (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val additionalNanosecondsSinceUnixEpoch: IntNanoseconds The number of additional nanoseconds on top of secondsSinceUnixEpoch .","title":"Additional nanoseconds since unix epoch"},{"location":"api/core/io.islandtime/-zoned-date-time/additional-nanoseconds-since-unix-epoch/#additionalnanosecondssinceunixepoch","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val additionalNanosecondsSinceUnixEpoch: IntNanoseconds The number of additional nanoseconds on top of secondsSinceUnixEpoch .","title":"additionalNanosecondsSinceUnixEpoch"},{"location":"api/core/io.islandtime/-zoned-date-time/adjusted-to/","text":"core / io.islandtime / ZonedDateTime / adjustedTo adjustedTo (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun adjustedTo(newTimeZone: TimeZone ): ZonedDateTime Change the time zone of a ZonedDateTime , adjusting the date, time, and offset such that the instant represented by it remains the same.","title":"Adjusted to"},{"location":"api/core/io.islandtime/-zoned-date-time/adjusted-to/#adjustedto","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun adjustedTo(newTimeZone: TimeZone ): ZonedDateTime Change the time zone of a ZonedDateTime , adjusting the date, time, and offset such that the instant represented by it remains the same.","title":"adjustedTo"},{"location":"api/core/io.islandtime/-zoned-date-time/copy/","text":"core / io.islandtime / ZonedDateTime / copy copy (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun copy(dateTime: DateTime = this.dateTime, offset: UtcOffset = this.offset, zone: TimeZone = this.zone): ZonedDateTime fun copy(date: Date = this.date, time: Time = this.time, offset: UtcOffset = this.offset, zone: TimeZone = this.zone): ZonedDateTime fun copy(year: Int = this.year, dayOfYear: Int = this.dayOfYear, hour: Int = this.hour, minute: Int = this.minute, second: Int = this.second, nanosecond: Int = this.nanosecond, offset: UtcOffset = this.offset, zone: TimeZone = this.zone): ZonedDateTime fun copy(year: Int = this.year, month: Month = this.month, dayOfMonth: Int = this.dayOfMonth, hour: Int = this.hour, minute: Int = this.minute, second: Int = this.second, nanosecond: Int = this.nanosecond, offset: UtcOffset = this.offset, zone: TimeZone = this.zone): ZonedDateTime fun copy(year: Int = this.year, monthNumber: Int , dayOfMonth: Int = this.dayOfMonth, hour: Int = this.hour, minute: Int = this.minute, second: Int = this.second, nanosecond: Int = this.nanosecond, offset: UtcOffset = this.offset, zone: TimeZone = this.zone): ZonedDateTime Return a new ZonedDateTime , replacing any of the components with new values. If the new date falls within a daylight savings time gap, it will be adjusted forward by the length of the gap. If it falls within an overlap, the offset value will be used if possible. The time zone takes precedence over the offset, so any provided offset value will be ignored if it is invalid within the current region.","title":"Copy"},{"location":"api/core/io.islandtime/-zoned-date-time/copy/#copy","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun copy(dateTime: DateTime = this.dateTime, offset: UtcOffset = this.offset, zone: TimeZone = this.zone): ZonedDateTime fun copy(date: Date = this.date, time: Time = this.time, offset: UtcOffset = this.offset, zone: TimeZone = this.zone): ZonedDateTime fun copy(year: Int = this.year, dayOfYear: Int = this.dayOfYear, hour: Int = this.hour, minute: Int = this.minute, second: Int = this.second, nanosecond: Int = this.nanosecond, offset: UtcOffset = this.offset, zone: TimeZone = this.zone): ZonedDateTime fun copy(year: Int = this.year, month: Month = this.month, dayOfMonth: Int = this.dayOfMonth, hour: Int = this.hour, minute: Int = this.minute, second: Int = this.second, nanosecond: Int = this.nanosecond, offset: UtcOffset = this.offset, zone: TimeZone = this.zone): ZonedDateTime fun copy(year: Int = this.year, monthNumber: Int , dayOfMonth: Int = this.dayOfMonth, hour: Int = this.hour, minute: Int = this.minute, second: Int = this.second, nanosecond: Int = this.nanosecond, offset: UtcOffset = this.offset, zone: TimeZone = this.zone): ZonedDateTime Return a new ZonedDateTime , replacing any of the components with new values. If the new date falls within a daylight savings time gap, it will be adjusted forward by the length of the gap. If it falls within an overlap, the offset value will be used if possible. The time zone takes precedence over the offset, so any provided offset value will be ignored if it is invalid within the current region.","title":"copy"},{"location":"api/core/io.islandtime/-zoned-date-time/date-time/","text":"core / io.islandtime / ZonedDateTime / dateTime dateTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val dateTime: DateTime The local date and time of day.","title":"Date time"},{"location":"api/core/io.islandtime/-zoned-date-time/date-time/#datetime","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val dateTime: DateTime The local date and time of day.","title":"dateTime"},{"location":"api/core/io.islandtime/-zoned-date-time/date/","text":"core / io.islandtime / ZonedDateTime / date date (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline val date: Date The local date.","title":"Date"},{"location":"api/core/io.islandtime/-zoned-date-time/date/#date","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline val date: Date The local date.","title":"date"},{"location":"api/core/io.islandtime/-zoned-date-time/day-of-month/","text":"core / io.islandtime / ZonedDateTime / dayOfMonth dayOfMonth (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline val dayOfMonth: Int The day of the month.","title":"Day of month"},{"location":"api/core/io.islandtime/-zoned-date-time/day-of-month/#dayofmonth","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline val dayOfMonth: Int The day of the month.","title":"dayOfMonth"},{"location":"api/core/io.islandtime/-zoned-date-time/day-of-week/","text":"core / io.islandtime / ZonedDateTime / dayOfWeek dayOfWeek (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline val dayOfWeek: DayOfWeek The day of the week.","title":"Day of week"},{"location":"api/core/io.islandtime/-zoned-date-time/day-of-week/#dayofweek","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline val dayOfWeek: DayOfWeek The day of the week.","title":"dayOfWeek"},{"location":"api/core/io.islandtime/-zoned-date-time/day-of-year/","text":"core / io.islandtime / ZonedDateTime / dayOfYear dayOfYear (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline val dayOfYear: Int The day of the year -- also known as the ordinal date in ISO-8601.","title":"Day of year"},{"location":"api/core/io.islandtime/-zoned-date-time/day-of-year/#dayofyear","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline val dayOfYear: Int The day of the year -- also known as the ordinal date in ISO-8601.","title":"dayOfYear"},{"location":"api/core/io.islandtime/-zoned-date-time/equals/","text":"core / io.islandtime / ZonedDateTime / equals equals (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun equals(other: Any ?): Boolean","title":"Equals"},{"location":"api/core/io.islandtime/-zoned-date-time/equals/#equals","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun equals(other: Any ?): Boolean","title":"equals"},{"location":"api/core/io.islandtime/-zoned-date-time/from-instant/","text":"core / io.islandtime / ZonedDateTime / fromInstant fromInstant (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun fromInstant(dateTime: DateTime , offset: UtcOffset , zone: TimeZone ): ZonedDateTime Create a ZonedDateTime from the instant represented by a local date-time and offset. The resulting ZonedDateTime may have a different date-time and offset depending on the time zone rules, but the instant will be the same.","title":"From instant"},{"location":"api/core/io.islandtime/-zoned-date-time/from-instant/#frominstant","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun fromInstant(dateTime: DateTime , offset: UtcOffset , zone: TimeZone ): ZonedDateTime Create a ZonedDateTime from the instant represented by a local date-time and offset. The resulting ZonedDateTime may have a different date-time and offset depending on the time zone rules, but the instant will be the same.","title":"fromInstant"},{"location":"api/core/io.islandtime/-zoned-date-time/from-local/","text":"core / io.islandtime / ZonedDateTime / fromLocal fromLocal (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun fromLocal(dateTime: DateTime , zone: TimeZone , preferredOffset: UtcOffset ? = null): ZonedDateTime Create a ZonedDateTime from a local date and time, optionally using a preferred offset. If the local date and time fall during an overlap, preferredOffset will be used if it represents one of the two valid offsets. If it is null or invalid, it will be ignored.","title":"From local"},{"location":"api/core/io.islandtime/-zoned-date-time/from-local/#fromlocal","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun fromLocal(dateTime: DateTime , zone: TimeZone , preferredOffset: UtcOffset ? = null): ZonedDateTime Create a ZonedDateTime from a local date and time, optionally using a preferred offset. If the local date and time fall during an overlap, preferredOffset will be used if it represents one of the two valid offsets. If it is null or invalid, it will be ignored.","title":"fromLocal"},{"location":"api/core/io.islandtime/-zoned-date-time/from-millisecond-of-unix-epoch/","text":"core / io.islandtime / ZonedDateTime / fromMillisecondOfUnixEpoch fromMillisecondOfUnixEpoch (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun fromMillisecondOfUnixEpoch(millisecond: Long , zone: TimeZone ): ZonedDateTime Create a ZonedDateTime from the millisecond of the Unix epoch at zone .","title":"From millisecond of unix epoch"},{"location":"api/core/io.islandtime/-zoned-date-time/from-millisecond-of-unix-epoch/#frommillisecondofunixepoch","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun fromMillisecondOfUnixEpoch(millisecond: Long , zone: TimeZone ): ZonedDateTime Create a ZonedDateTime from the millisecond of the Unix epoch at zone .","title":"fromMillisecondOfUnixEpoch"},{"location":"api/core/io.islandtime/-zoned-date-time/from-milliseconds-since-unix-epoch/","text":"core / io.islandtime / ZonedDateTime / fromMillisecondsSinceUnixEpoch fromMillisecondsSinceUnixEpoch (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun fromMillisecondsSinceUnixEpoch(milliseconds: LongMilliseconds , zone: TimeZone ): ZonedDateTime Create a ZonedDateTime from a duration of milliseconds relative to the Unix epoch at zone .","title":"From milliseconds since unix epoch"},{"location":"api/core/io.islandtime/-zoned-date-time/from-milliseconds-since-unix-epoch/#frommillisecondssinceunixepoch","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun fromMillisecondsSinceUnixEpoch(milliseconds: LongMilliseconds , zone: TimeZone ): ZonedDateTime Create a ZonedDateTime from a duration of milliseconds relative to the Unix epoch at zone .","title":"fromMillisecondsSinceUnixEpoch"},{"location":"api/core/io.islandtime/-zoned-date-time/from-second-of-unix-epoch/","text":"core / io.islandtime / ZonedDateTime / fromSecondOfUnixEpoch fromSecondOfUnixEpoch (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun fromSecondOfUnixEpoch(second: Long , nanosecond: Int = 0, zone: TimeZone ): ZonedDateTime Create a ZonedDateTime from the second of the Unix epoch at zone .","title":"From second of unix epoch"},{"location":"api/core/io.islandtime/-zoned-date-time/from-second-of-unix-epoch/#fromsecondofunixepoch","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun fromSecondOfUnixEpoch(second: Long , nanosecond: Int = 0, zone: TimeZone ): ZonedDateTime Create a ZonedDateTime from the second of the Unix epoch at zone .","title":"fromSecondOfUnixEpoch"},{"location":"api/core/io.islandtime/-zoned-date-time/from-seconds-since-unix-epoch/","text":"core / io.islandtime / ZonedDateTime / fromSecondsSinceUnixEpoch fromSecondsSinceUnixEpoch (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun fromSecondsSinceUnixEpoch(seconds: LongSeconds , nanosecondAdjustment: IntNanoseconds = 0.nanoseconds, zone: TimeZone ): ZonedDateTime Create a ZonedDateTime from a duration of seconds relative to the Unix epoch at zone , optionally, with some number of additional nanoseconds added to it.","title":"From seconds since unix epoch"},{"location":"api/core/io.islandtime/-zoned-date-time/from-seconds-since-unix-epoch/#fromsecondssinceunixepoch","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun fromSecondsSinceUnixEpoch(seconds: LongSeconds , nanosecondAdjustment: IntNanoseconds = 0.nanoseconds, zone: TimeZone ): ZonedDateTime Create a ZonedDateTime from a duration of seconds relative to the Unix epoch at zone , optionally, with some number of additional nanoseconds added to it.","title":"fromSecondsSinceUnixEpoch"},{"location":"api/core/io.islandtime/-zoned-date-time/from-unix-epoch-millisecond/","text":"core / io.islandtime / ZonedDateTime / fromUnixEpochMillisecond fromUnixEpochMillisecond (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun ~~fromUnixEpochMillisecond~~(millisecond: Long , zone: TimeZone ): ZonedDateTime Deprecated: Use fromMillisecondOfUnixEpoch() instead.","title":"From unix epoch millisecond"},{"location":"api/core/io.islandtime/-zoned-date-time/from-unix-epoch-millisecond/#fromunixepochmillisecond","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun ~~fromUnixEpochMillisecond~~(millisecond: Long , zone: TimeZone ): ZonedDateTime Deprecated: Use fromMillisecondOfUnixEpoch() instead.","title":"fromUnixEpochMillisecond"},{"location":"api/core/io.islandtime/-zoned-date-time/from-unix-epoch-second/","text":"core / io.islandtime / ZonedDateTime / fromUnixEpochSecond fromUnixEpochSecond (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun ~~fromUnixEpochSecond~~(second: Long , nanoOfSecond: Int , zone: TimeZone ): ZonedDateTime Deprecated: Use fromSecondOfUnixEpoch() instead.","title":"From unix epoch second"},{"location":"api/core/io.islandtime/-zoned-date-time/from-unix-epoch-second/#fromunixepochsecond","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun ~~fromUnixEpochSecond~~(second: Long , nanoOfSecond: Int , zone: TimeZone ): ZonedDateTime Deprecated: Use fromSecondOfUnixEpoch() instead.","title":"fromUnixEpochSecond"},{"location":"api/core/io.islandtime/-zoned-date-time/hash-code/","text":"core / io.islandtime / ZonedDateTime / hashCode hashCode (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun hashCode(): Int","title":"Hash code"},{"location":"api/core/io.islandtime/-zoned-date-time/hash-code/#hashcode","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun hashCode(): Int","title":"hashCode"},{"location":"api/core/io.islandtime/-zoned-date-time/hour/","text":"core / io.islandtime / ZonedDateTime / hour hour (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline val hour: Int The hour of the day.","title":"Hour"},{"location":"api/core/io.islandtime/-zoned-date-time/hour/#hour","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline val hour: Int The hour of the day.","title":"hour"},{"location":"api/core/io.islandtime/-zoned-date-time/instant/","text":"core / io.islandtime / ZonedDateTime / instant instant (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline val instant: Instant The Instant representing the same time point.","title":"Instant"},{"location":"api/core/io.islandtime/-zoned-date-time/instant/#instant","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline val instant: Instant The Instant representing the same time point.","title":"instant"},{"location":"api/core/io.islandtime/-zoned-date-time/is-in-leap-year/","text":"core / io.islandtime / ZonedDateTime / isInLeapYear isInLeapYear (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline val isInLeapYear: Boolean Check if this date falls within a leap year.","title":"Is in leap year"},{"location":"api/core/io.islandtime/-zoned-date-time/is-in-leap-year/#isinleapyear","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline val isInLeapYear: Boolean Check if this date falls within a leap year.","title":"isInLeapYear"},{"location":"api/core/io.islandtime/-zoned-date-time/is-leap-day/","text":"core / io.islandtime / ZonedDateTime / isLeapDay isLeapDay (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline val isLeapDay: Boolean Check if this is a leap day.","title":"Is leap day"},{"location":"api/core/io.islandtime/-zoned-date-time/is-leap-day/#isleapday","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline val isLeapDay: Boolean Check if this is a leap day.","title":"isLeapDay"},{"location":"api/core/io.islandtime/-zoned-date-time/length-of-month/","text":"core / io.islandtime / ZonedDateTime / lengthOfMonth lengthOfMonth (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline val lengthOfMonth: IntDays The length of this date's month in days.","title":"Length of month"},{"location":"api/core/io.islandtime/-zoned-date-time/length-of-month/#lengthofmonth","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline val lengthOfMonth: IntDays The length of this date's month in days.","title":"lengthOfMonth"},{"location":"api/core/io.islandtime/-zoned-date-time/length-of-year/","text":"core / io.islandtime / ZonedDateTime / lengthOfYear lengthOfYear (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline val lengthOfYear: IntDays The length of this date's year in days.","title":"Length of year"},{"location":"api/core/io.islandtime/-zoned-date-time/length-of-year/#lengthofyear","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline val lengthOfYear: IntDays The length of this date's year in days.","title":"lengthOfYear"},{"location":"api/core/io.islandtime/-zoned-date-time/milliseconds-since-unix-epoch/","text":"core / io.islandtime / ZonedDateTime / millisecondsSinceUnixEpoch millisecondsSinceUnixEpoch (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val millisecondsSinceUnixEpoch: LongMilliseconds The number of milliseconds since the Unix epoch of 1970-01-01T00:00Z.","title":"Milliseconds since unix epoch"},{"location":"api/core/io.islandtime/-zoned-date-time/milliseconds-since-unix-epoch/#millisecondssinceunixepoch","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val millisecondsSinceUnixEpoch: LongMilliseconds The number of milliseconds since the Unix epoch of 1970-01-01T00:00Z.","title":"millisecondsSinceUnixEpoch"},{"location":"api/core/io.islandtime/-zoned-date-time/minus/","text":"core / io.islandtime / ZonedDateTime / minus minus (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun minus(period: Period ): ZonedDateTime Return a ZonedDateTime with period subtracted from it. Years are subtracted first, then months, then days. If the day exceeds the maximum month length at any step, it will be coerced into the valid range. This behavior is consistent with the order of operations for period addition as defined in ISO-8601-2. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun minus(duration: Duration ): ZonedDateTime operator fun minus(years: IntYears ): ZonedDateTime operator fun minus(years: LongYears ): ZonedDateTime operator fun minus(months: IntMonths ): ZonedDateTime operator fun minus(months: LongMonths ): ZonedDateTime operator fun minus(weeks: IntWeeks ): ZonedDateTime operator fun minus(weeks: LongWeeks ): ZonedDateTime operator fun minus(days: IntDays ): ZonedDateTime operator fun minus(days: LongDays ): ZonedDateTime operator fun minus(hours: IntHours ): ZonedDateTime operator fun minus(hours: LongHours ): ZonedDateTime operator fun minus(minutes: IntMinutes ): ZonedDateTime operator fun minus(minutes: LongMinutes ): ZonedDateTime operator fun minus(seconds: IntSeconds ): ZonedDateTime operator fun minus(seconds: LongSeconds ): ZonedDateTime operator fun minus(milliseconds: IntMilliseconds ): ZonedDateTime operator fun minus(milliseconds: LongMilliseconds ): ZonedDateTime operator fun minus(microseconds: IntMicroseconds ): ZonedDateTime operator fun minus(microseconds: LongMicroseconds ): ZonedDateTime operator fun minus(nanoseconds: IntNanoseconds ): ZonedDateTime operator fun minus(nanoseconds: LongNanoseconds ): ZonedDateTime","title":"Minus"},{"location":"api/core/io.islandtime/-zoned-date-time/minus/#minus","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun minus(period: Period ): ZonedDateTime Return a ZonedDateTime with period subtracted from it. Years are subtracted first, then months, then days. If the day exceeds the maximum month length at any step, it will be coerced into the valid range. This behavior is consistent with the order of operations for period addition as defined in ISO-8601-2. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun minus(duration: Duration ): ZonedDateTime operator fun minus(years: IntYears ): ZonedDateTime operator fun minus(years: LongYears ): ZonedDateTime operator fun minus(months: IntMonths ): ZonedDateTime operator fun minus(months: LongMonths ): ZonedDateTime operator fun minus(weeks: IntWeeks ): ZonedDateTime operator fun minus(weeks: LongWeeks ): ZonedDateTime operator fun minus(days: IntDays ): ZonedDateTime operator fun minus(days: LongDays ): ZonedDateTime operator fun minus(hours: IntHours ): ZonedDateTime operator fun minus(hours: LongHours ): ZonedDateTime operator fun minus(minutes: IntMinutes ): ZonedDateTime operator fun minus(minutes: LongMinutes ): ZonedDateTime operator fun minus(seconds: IntSeconds ): ZonedDateTime operator fun minus(seconds: LongSeconds ): ZonedDateTime operator fun minus(milliseconds: IntMilliseconds ): ZonedDateTime operator fun minus(milliseconds: LongMilliseconds ): ZonedDateTime operator fun minus(microseconds: IntMicroseconds ): ZonedDateTime operator fun minus(microseconds: LongMicroseconds ): ZonedDateTime operator fun minus(nanoseconds: IntNanoseconds ): ZonedDateTime operator fun minus(nanoseconds: LongNanoseconds ): ZonedDateTime","title":"minus"},{"location":"api/core/io.islandtime/-zoned-date-time/minute/","text":"core / io.islandtime / ZonedDateTime / minute minute (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline val minute: Int The minute of the hour.","title":"Minute"},{"location":"api/core/io.islandtime/-zoned-date-time/minute/#minute","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline val minute: Int The minute of the hour.","title":"minute"},{"location":"api/core/io.islandtime/-zoned-date-time/month-number/","text":"core / io.islandtime / ZonedDateTime / monthNumber monthNumber (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline val monthNumber: Int The ISO month number, from 1-12.","title":"Month number"},{"location":"api/core/io.islandtime/-zoned-date-time/month-number/#monthnumber","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline val monthNumber: Int The ISO month number, from 1-12.","title":"monthNumber"},{"location":"api/core/io.islandtime/-zoned-date-time/month/","text":"core / io.islandtime / ZonedDateTime / month month (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline val month: Month The month of the year.","title":"Month"},{"location":"api/core/io.islandtime/-zoned-date-time/month/#month","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline val month: Month The month of the year.","title":"month"},{"location":"api/core/io.islandtime/-zoned-date-time/nanosecond/","text":"core / io.islandtime / ZonedDateTime / nanosecond nanosecond (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val nanosecond: Int The nanosecond of the second.","title":"Nanosecond"},{"location":"api/core/io.islandtime/-zoned-date-time/nanosecond/#nanosecond","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val nanosecond: Int The nanosecond of the second.","title":"nanosecond"},{"location":"api/core/io.islandtime/-zoned-date-time/offset-date-time/","text":"core / io.islandtime / ZonedDateTime / offsetDateTime offsetDateTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline val offsetDateTime: OffsetDateTime The combined date, time, and offset. While similar to ZonedDateTime , an OffsetDateTime representation is unaffected by time zone rule changes or database differences between systems, making it better suited for use cases involving persistence or network transfer.","title":"Offset date time"},{"location":"api/core/io.islandtime/-zoned-date-time/offset-date-time/#offsetdatetime","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline val offsetDateTime: OffsetDateTime The combined date, time, and offset. While similar to ZonedDateTime , an OffsetDateTime representation is unaffected by time zone rule changes or database differences between systems, making it better suited for use cases involving persistence or network transfer.","title":"offsetDateTime"},{"location":"api/core/io.islandtime/-zoned-date-time/offset-time/","text":"core / io.islandtime / ZonedDateTime / offsetTime offsetTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline val offsetTime: OffsetTime The combined time of day and offset.","title":"Offset time"},{"location":"api/core/io.islandtime/-zoned-date-time/offset-time/#offsettime","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline val offsetTime: OffsetTime The combined time of day and offset.","title":"offsetTime"},{"location":"api/core/io.islandtime/-zoned-date-time/offset/","text":"core / io.islandtime / ZonedDateTime / offset offset (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val offset: UtcOffset The offset from UTC.","title":"Offset"},{"location":"api/core/io.islandtime/-zoned-date-time/offset/#offset","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val offset: UtcOffset The offset from UTC.","title":"offset"},{"location":"api/core/io.islandtime/-zoned-date-time/plus/","text":"core / io.islandtime / ZonedDateTime / plus plus (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun plus(period: Period ): ZonedDateTime Return a ZonedDateTime with period added to it. Years are added first, then months, then days. If the day exceeds the maximum month length at any step, it will be coerced into the valid range. This behavior is consistent with the order of operations for period addition as defined in ISO-8601-2. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun plus(duration: Duration ): ZonedDateTime operator fun plus(years: IntYears ): ZonedDateTime operator fun plus(years: LongYears ): ZonedDateTime operator fun plus(months: IntMonths ): ZonedDateTime operator fun plus(months: LongMonths ): ZonedDateTime operator fun plus(weeks: IntWeeks ): ZonedDateTime operator fun plus(weeks: LongWeeks ): ZonedDateTime operator fun plus(days: IntDays ): ZonedDateTime operator fun plus(days: LongDays ): ZonedDateTime operator fun plus(hours: IntHours ): ZonedDateTime operator fun plus(hours: LongHours ): ZonedDateTime operator fun plus(minutes: IntMinutes ): ZonedDateTime operator fun plus(minutes: LongMinutes ): ZonedDateTime operator fun plus(seconds: IntSeconds ): ZonedDateTime operator fun plus(seconds: LongSeconds ): ZonedDateTime operator fun plus(milliseconds: IntMilliseconds ): ZonedDateTime operator fun plus(milliseconds: LongMilliseconds ): ZonedDateTime operator fun plus(microseconds: IntMicroseconds ): ZonedDateTime operator fun plus(microseconds: LongMicroseconds ): ZonedDateTime operator fun plus(nanoseconds: IntNanoseconds ): ZonedDateTime operator fun plus(nanoseconds: LongNanoseconds ): ZonedDateTime","title":"Plus"},{"location":"api/core/io.islandtime/-zoned-date-time/plus/#plus","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun plus(period: Period ): ZonedDateTime Return a ZonedDateTime with period added to it. Years are added first, then months, then days. If the day exceeds the maximum month length at any step, it will be coerced into the valid range. This behavior is consistent with the order of operations for period addition as defined in ISO-8601-2. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun plus(duration: Duration ): ZonedDateTime operator fun plus(years: IntYears ): ZonedDateTime operator fun plus(years: LongYears ): ZonedDateTime operator fun plus(months: IntMonths ): ZonedDateTime operator fun plus(months: LongMonths ): ZonedDateTime operator fun plus(weeks: IntWeeks ): ZonedDateTime operator fun plus(weeks: LongWeeks ): ZonedDateTime operator fun plus(days: IntDays ): ZonedDateTime operator fun plus(days: LongDays ): ZonedDateTime operator fun plus(hours: IntHours ): ZonedDateTime operator fun plus(hours: LongHours ): ZonedDateTime operator fun plus(minutes: IntMinutes ): ZonedDateTime operator fun plus(minutes: LongMinutes ): ZonedDateTime operator fun plus(seconds: IntSeconds ): ZonedDateTime operator fun plus(seconds: LongSeconds ): ZonedDateTime operator fun plus(milliseconds: IntMilliseconds ): ZonedDateTime operator fun plus(milliseconds: LongMilliseconds ): ZonedDateTime operator fun plus(microseconds: IntMicroseconds ): ZonedDateTime operator fun plus(microseconds: LongMicroseconds ): ZonedDateTime operator fun plus(nanoseconds: IntNanoseconds ): ZonedDateTime operator fun plus(nanoseconds: LongNanoseconds ): ZonedDateTime","title":"plus"},{"location":"api/core/io.islandtime/-zoned-date-time/range-to/","text":"core / io.islandtime / ZonedDateTime / rangeTo rangeTo (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun rangeTo(other: ZonedDateTime ): ZonedDateTimeInterval","title":"Range to"},{"location":"api/core/io.islandtime/-zoned-date-time/range-to/#rangeto","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun rangeTo(other: ZonedDateTime ): ZonedDateTimeInterval","title":"rangeTo"},{"location":"api/core/io.islandtime/-zoned-date-time/second/","text":"core / io.islandtime / ZonedDateTime / second second (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline val second: Int The second of the minute.","title":"Second"},{"location":"api/core/io.islandtime/-zoned-date-time/second/#second","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline val second: Int The second of the minute.","title":"second"},{"location":"api/core/io.islandtime/-zoned-date-time/seconds-since-unix-epoch/","text":"core / io.islandtime / ZonedDateTime / secondsSinceUnixEpoch secondsSinceUnixEpoch (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val secondsSinceUnixEpoch: LongSeconds The number of seconds since the Unix epoch of 1970-01-01T00:00Z.","title":"Seconds since unix epoch"},{"location":"api/core/io.islandtime/-zoned-date-time/seconds-since-unix-epoch/#secondssinceunixepoch","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val secondsSinceUnixEpoch: LongSeconds The number of seconds since the Unix epoch of 1970-01-01T00:00Z.","title":"secondsSinceUnixEpoch"},{"location":"api/core/io.islandtime/-zoned-date-time/time/","text":"core / io.islandtime / ZonedDateTime / time time (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline val time: Time The local time of day.","title":"Time"},{"location":"api/core/io.islandtime/-zoned-date-time/time/#time","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline val time: Time The local time of day.","title":"time"},{"location":"api/core/io.islandtime/-zoned-date-time/to-string/","text":"core / io.islandtime / ZonedDateTime / toString toString (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toString(): String","title":"To string"},{"location":"api/core/io.islandtime/-zoned-date-time/to-string/#tostring","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toString(): String","title":"toString"},{"location":"api/core/io.islandtime/-zoned-date-time/with-earlier-offset-at-overlap/","text":"core / io.islandtime / ZonedDateTime / withEarlierOffsetAtOverlap withEarlierOffsetAtOverlap (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun withEarlierOffsetAtOverlap(): ZonedDateTime If the local date-time falls during an overlap caused by a daylight savings transition, return a ZonedDateTime with the same local date and time, but using the earlier of the two valid offsets.","title":"With earlier offset at overlap"},{"location":"api/core/io.islandtime/-zoned-date-time/with-earlier-offset-at-overlap/#withearlieroffsetatoverlap","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun withEarlierOffsetAtOverlap(): ZonedDateTime If the local date-time falls during an overlap caused by a daylight savings transition, return a ZonedDateTime with the same local date and time, but using the earlier of the two valid offsets.","title":"withEarlierOffsetAtOverlap"},{"location":"api/core/io.islandtime/-zoned-date-time/with-fixed-offset-zone/","text":"core / io.islandtime / ZonedDateTime / withFixedOffsetZone withFixedOffsetZone (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun withFixedOffsetZone(): ZonedDateTime If this date-time uses a region-based time zone, return a copy with a fixed offset. Otherwise, return this date-time, unchanged.","title":"With fixed offset zone"},{"location":"api/core/io.islandtime/-zoned-date-time/with-fixed-offset-zone/#withfixedoffsetzone","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun withFixedOffsetZone(): ZonedDateTime If this date-time uses a region-based time zone, return a copy with a fixed offset. Otherwise, return this date-time, unchanged.","title":"withFixedOffsetZone"},{"location":"api/core/io.islandtime/-zoned-date-time/with-later-offset-at-overlap/","text":"core / io.islandtime / ZonedDateTime / withLaterOffsetAtOverlap withLaterOffsetAtOverlap (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun withLaterOffsetAtOverlap(): ZonedDateTime If the local date-time falls during an overlap caused by a daylight savings transition, return a ZonedDateTime with the same local date and time, but using the later of the two valid offsets.","title":"With later offset at overlap"},{"location":"api/core/io.islandtime/-zoned-date-time/with-later-offset-at-overlap/#withlateroffsetatoverlap","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun withLaterOffsetAtOverlap(): ZonedDateTime If the local date-time falls during an overlap caused by a daylight savings transition, return a ZonedDateTime with the same local date and time, but using the later of the two valid offsets.","title":"withLaterOffsetAtOverlap"},{"location":"api/core/io.islandtime/-zoned-date-time/year-month/","text":"core / io.islandtime / ZonedDateTime / yearMonth yearMonth (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline val yearMonth: YearMonth The combined year and month.","title":"Year month"},{"location":"api/core/io.islandtime/-zoned-date-time/year-month/#yearmonth","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline val yearMonth: YearMonth The combined year and month.","title":"yearMonth"},{"location":"api/core/io.islandtime/-zoned-date-time/year/","text":"core / io.islandtime / ZonedDateTime / year year (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline val year: Int The year.","title":"Year"},{"location":"api/core/io.islandtime/-zoned-date-time/year/#year","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline val year: Int The year.","title":"year"},{"location":"api/core/io.islandtime/-zoned-date-time/zone/","text":"core / io.islandtime / ZonedDateTime / zone zone (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val zone: TimeZone The time zone.","title":"Zone"},{"location":"api/core/io.islandtime/-zoned-date-time/zone/#zone","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val zone: TimeZone The time zone.","title":"zone"},{"location":"api/core/io.islandtime/kotlin.-int/","text":"core / io.islandtime / kotlin.Int Extensions for kotlin.Int Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toDayOfWeek Convert an ISO day of week number to a DayOfWeek . fun Int .toDayOfWeek(): DayOfWeek Convert a day of week number (1-7) to a DayOfWeek according to the week definition provided by settings . fun Int .toDayOfWeek(settings: WeekSettings ): DayOfWeek (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toMonth Convert an ISO month number (from 1-12) to a Month . fun Int .toMonth(): Month","title":"Index"},{"location":"api/core/io.islandtime/kotlin.-int/#extensions-for-kotlinint","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toDayOfWeek Convert an ISO day of week number to a DayOfWeek . fun Int .toDayOfWeek(): DayOfWeek Convert a day of week number (1-7) to a DayOfWeek according to the week definition provided by settings . fun Int .toDayOfWeek(settings: WeekSettings ): DayOfWeek (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toMonth Convert an ISO month number (from 1-12) to a Month . fun Int .toMonth(): Month","title":"Extensions for kotlin.Int"},{"location":"api/core/io.islandtime/kotlin.-int/to-day-of-week/","text":"core / io.islandtime / kotlin.Int / toDayOfWeek toDayOfWeek (iosArm64) fun Int .toDayOfWeek(): DayOfWeek (iosX64) fun Int .toDayOfWeek(): DayOfWeek (jvm) fun Int .toDayOfWeek(): DayOfWeek (macosX64) fun Int .toDayOfWeek(): DayOfWeek (tvosArm64) fun Int .toDayOfWeek(): DayOfWeek (tvosX64) fun Int .toDayOfWeek(): DayOfWeek (watchosArm64) fun Int .toDayOfWeek(): DayOfWeek (watchosX86) fun Int .toDayOfWeek(): DayOfWeek Convert an ISO day of week number to a DayOfWeek . The ISO week starts on Monday (1) and ends on Sunday (7). (iosArm64) fun Int .toDayOfWeek(settings: WeekSettings ): DayOfWeek (iosX64) fun Int .toDayOfWeek(settings: WeekSettings ): DayOfWeek (jvm) fun Int .toDayOfWeek(settings: WeekSettings ): DayOfWeek (macosX64) fun Int .toDayOfWeek(settings: WeekSettings ): DayOfWeek (tvosArm64) fun Int .toDayOfWeek(settings: WeekSettings ): DayOfWeek (tvosX64) fun Int .toDayOfWeek(settings: WeekSettings ): DayOfWeek (watchosArm64) fun Int .toDayOfWeek(settings: WeekSettings ): DayOfWeek (watchosX86) fun Int .toDayOfWeek(settings: WeekSettings ): DayOfWeek Convert a day of week number (1-7) to a DayOfWeek according to the week definition provided by settings .","title":"To day of week"},{"location":"api/core/io.islandtime/kotlin.-int/to-day-of-week/#todayofweek","text":"(iosArm64) fun Int .toDayOfWeek(): DayOfWeek (iosX64) fun Int .toDayOfWeek(): DayOfWeek (jvm) fun Int .toDayOfWeek(): DayOfWeek (macosX64) fun Int .toDayOfWeek(): DayOfWeek (tvosArm64) fun Int .toDayOfWeek(): DayOfWeek (tvosX64) fun Int .toDayOfWeek(): DayOfWeek (watchosArm64) fun Int .toDayOfWeek(): DayOfWeek (watchosX86) fun Int .toDayOfWeek(): DayOfWeek Convert an ISO day of week number to a DayOfWeek . The ISO week starts on Monday (1) and ends on Sunday (7). (iosArm64) fun Int .toDayOfWeek(settings: WeekSettings ): DayOfWeek (iosX64) fun Int .toDayOfWeek(settings: WeekSettings ): DayOfWeek (jvm) fun Int .toDayOfWeek(settings: WeekSettings ): DayOfWeek (macosX64) fun Int .toDayOfWeek(settings: WeekSettings ): DayOfWeek (tvosArm64) fun Int .toDayOfWeek(settings: WeekSettings ): DayOfWeek (tvosX64) fun Int .toDayOfWeek(settings: WeekSettings ): DayOfWeek (watchosArm64) fun Int .toDayOfWeek(settings: WeekSettings ): DayOfWeek (watchosX86) fun Int .toDayOfWeek(settings: WeekSettings ): DayOfWeek Convert a day of week number (1-7) to a DayOfWeek according to the week definition provided by settings .","title":"toDayOfWeek"},{"location":"api/core/io.islandtime/kotlin.-int/to-month/","text":"core / io.islandtime / kotlin.Int / toMonth toMonth (iosArm64) fun Int .toMonth(): Month (iosX64) fun Int .toMonth(): Month (jvm) fun Int .toMonth(): Month (macosX64) fun Int .toMonth(): Month (tvosArm64) fun Int .toMonth(): Month (tvosX64) fun Int .toMonth(): Month (watchosArm64) fun Int .toMonth(): Month (watchosX86) fun Int .toMonth(): Month Convert an ISO month number (from 1-12) to a Month .","title":"To month"},{"location":"api/core/io.islandtime/kotlin.-int/to-month/#tomonth","text":"(iosArm64) fun Int .toMonth(): Month (iosX64) fun Int .toMonth(): Month (jvm) fun Int .toMonth(): Month (macosX64) fun Int .toMonth(): Month (tvosArm64) fun Int .toMonth(): Month (tvosX64) fun Int .toMonth(): Month (watchosArm64) fun Int .toMonth(): Month (watchosX86) fun Int .toMonth(): Month Convert an ISO month number (from 1-12) to a Month .","title":"toMonth"},{"location":"api/core/io.islandtime/kotlin.-string/","text":"core / io.islandtime / kotlin.String Extensions for kotlin.String Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toDate Convert a string to a Date . fun String .toDate(): Date Convert a string to a Date using a specific parser. fun String .toDate(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): Date (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toDateTime Convert a string to a DateTime . fun String .toDateTime(): DateTime Convert a string to a DateTime using a specific parser. fun String .toDateTime(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): DateTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toInstant Convert a string to an Instant . fun String .toInstant(): Instant Convert a string to an Instant using a specific parser. fun String .toInstant(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): Instant (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toOffsetDateTime Convert a string to an OffsetDateTime . fun String .toOffsetDateTime(): OffsetDateTime Convert a string to an OffsetDateTime using a specific parser. fun String .toOffsetDateTime(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): OffsetDateTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toOffsetTime Convert a string to an OffsetTime . fun String .toOffsetTime(): OffsetTime Convert a string to an OffsetTime using a specific parser. fun String .toOffsetTime(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): OffsetTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toTime Convert a string to a Time . fun String .toTime(): Time Convert a string to a Time using a specific parser. fun String .toTime(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): Time (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toTimeZone Convert a string to a TimeZone . fun String .toTimeZone(): TimeZone (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toUtcOffset Convert a string to a UtcOffset . fun String .toUtcOffset(): UtcOffset Convert a string to a UtcOffset using a specific parser. fun String .toUtcOffset(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): UtcOffset (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toYear Convert a string to a Year . fun String .toYear(): Year Convert a string to a Year using a specific parser. fun String .toYear(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): Year (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toYearMonth Convert a string to a YearMonth . fun String .toYearMonth(): YearMonth Convert a string to a YearMonth using a specific parser. fun String .toYearMonth(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): YearMonth (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toZonedDateTime Convert a string to a ZonedDateTime . fun String .toZonedDateTime(): ZonedDateTime Convert a string to a ZonedDateTime using a specific parser. fun String .toZonedDateTime(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): ZonedDateTime","title":"Index"},{"location":"api/core/io.islandtime/kotlin.-string/#extensions-for-kotlinstring","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toDate Convert a string to a Date . fun String .toDate(): Date Convert a string to a Date using a specific parser. fun String .toDate(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): Date (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toDateTime Convert a string to a DateTime . fun String .toDateTime(): DateTime Convert a string to a DateTime using a specific parser. fun String .toDateTime(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): DateTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toInstant Convert a string to an Instant . fun String .toInstant(): Instant Convert a string to an Instant using a specific parser. fun String .toInstant(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): Instant (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toOffsetDateTime Convert a string to an OffsetDateTime . fun String .toOffsetDateTime(): OffsetDateTime Convert a string to an OffsetDateTime using a specific parser. fun String .toOffsetDateTime(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): OffsetDateTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toOffsetTime Convert a string to an OffsetTime . fun String .toOffsetTime(): OffsetTime Convert a string to an OffsetTime using a specific parser. fun String .toOffsetTime(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): OffsetTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toTime Convert a string to a Time . fun String .toTime(): Time Convert a string to a Time using a specific parser. fun String .toTime(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): Time (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toTimeZone Convert a string to a TimeZone . fun String .toTimeZone(): TimeZone (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toUtcOffset Convert a string to a UtcOffset . fun String .toUtcOffset(): UtcOffset Convert a string to a UtcOffset using a specific parser. fun String .toUtcOffset(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): UtcOffset (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toYear Convert a string to a Year . fun String .toYear(): Year Convert a string to a Year using a specific parser. fun String .toYear(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): Year (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toYearMonth Convert a string to a YearMonth . fun String .toYearMonth(): YearMonth Convert a string to a YearMonth using a specific parser. fun String .toYearMonth(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): YearMonth (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toZonedDateTime Convert a string to a ZonedDateTime . fun String .toZonedDateTime(): ZonedDateTime Convert a string to a ZonedDateTime using a specific parser. fun String .toZonedDateTime(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): ZonedDateTime","title":"Extensions for kotlin.String"},{"location":"api/core/io.islandtime/kotlin.-string/to-date-time/","text":"core / io.islandtime / kotlin.String / toDateTime toDateTime (iosArm64) fun String .toDateTime(): DateTime (iosX64) fun String .toDateTime(): DateTime (jvm) fun String .toDateTime(): DateTime (macosX64) fun String .toDateTime(): DateTime (tvosArm64) fun String .toDateTime(): DateTime (tvosX64) fun String .toDateTime(): DateTime (watchosArm64) fun String .toDateTime(): DateTime (watchosX86) fun String .toDateTime(): DateTime Convert a string to a DateTime . The string is assumed to be an ISO-8601 date-time representation in extended format. For example, 2019-08-22T18:00 or 2019-08-22 18:00:30.123456789 . The output of DateTime.toString can be safely parsed using this method. Exceptions DateTimeParseException - if parsing fails DateTimeException - if the parsed date-time is invalid(iosArm64) fun String .toDateTime(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): DateTime (iosX64) fun String .toDateTime(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): DateTime (jvm) fun String .toDateTime(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): DateTime (macosX64) fun String .toDateTime(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): DateTime (tvosArm64) fun String .toDateTime(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): DateTime (tvosX64) fun String .toDateTime(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): DateTime (watchosArm64) fun String .toDateTime(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): DateTime (watchosX86) fun String .toDateTime(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): DateTime Convert a string to a DateTime using a specific parser. A set of predefined parsers can be found in DateTimeParsers . Any custom parser must be capable of supplying the fields necessary to resolve both a Date and Time . Exceptions DateTimeParseException - if parsing fails DateTimeException - if the parsed date-time is invalid","title":"To date time"},{"location":"api/core/io.islandtime/kotlin.-string/to-date-time/#todatetime","text":"(iosArm64) fun String .toDateTime(): DateTime (iosX64) fun String .toDateTime(): DateTime (jvm) fun String .toDateTime(): DateTime (macosX64) fun String .toDateTime(): DateTime (tvosArm64) fun String .toDateTime(): DateTime (tvosX64) fun String .toDateTime(): DateTime (watchosArm64) fun String .toDateTime(): DateTime (watchosX86) fun String .toDateTime(): DateTime Convert a string to a DateTime . The string is assumed to be an ISO-8601 date-time representation in extended format. For example, 2019-08-22T18:00 or 2019-08-22 18:00:30.123456789 . The output of DateTime.toString can be safely parsed using this method.","title":"toDateTime"},{"location":"api/core/io.islandtime/kotlin.-string/to-date-time/#exceptions","text":"DateTimeParseException - if parsing fails DateTimeException - if the parsed date-time is invalid(iosArm64) fun String .toDateTime(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): DateTime (iosX64) fun String .toDateTime(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): DateTime (jvm) fun String .toDateTime(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): DateTime (macosX64) fun String .toDateTime(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): DateTime (tvosArm64) fun String .toDateTime(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): DateTime (tvosX64) fun String .toDateTime(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): DateTime (watchosArm64) fun String .toDateTime(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): DateTime (watchosX86) fun String .toDateTime(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): DateTime Convert a string to a DateTime using a specific parser. A set of predefined parsers can be found in DateTimeParsers . Any custom parser must be capable of supplying the fields necessary to resolve both a Date and Time .","title":"Exceptions"},{"location":"api/core/io.islandtime/kotlin.-string/to-date-time/#exceptions_1","text":"DateTimeParseException - if parsing fails DateTimeException - if the parsed date-time is invalid","title":"Exceptions"},{"location":"api/core/io.islandtime/kotlin.-string/to-date/","text":"core / io.islandtime / kotlin.String / toDate toDate (iosArm64) fun String .toDate(): Date (iosX64) fun String .toDate(): Date (jvm) fun String .toDate(): Date (macosX64) fun String .toDate(): Date (tvosArm64) fun String .toDate(): Date (tvosX64) fun String .toDate(): Date (watchosArm64) fun String .toDate(): Date (watchosX86) fun String .toDate(): Date Convert a string to a Date . The string is assumed to be an ISO-8601 calendar date in extended format. For example, 2010-10-05 . The output of Date.toString can be safely parsed using this method. Exceptions DateTimeParseException - if parsing fails DateTimeException - if the parsed date is invalid(iosArm64) fun String .toDate(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): Date (iosX64) fun String .toDate(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): Date (jvm) fun String .toDate(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): Date (macosX64) fun String .toDate(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): Date (tvosArm64) fun String .toDate(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): Date (tvosX64) fun String .toDate(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): Date (watchosArm64) fun String .toDate(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): Date (watchosX86) fun String .toDate(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): Date Convert a string to a Date using a specific parser. A set of predefined parsers can be found in DateTimeParsers . Any custom parser must be capable of supplying one of the following field combinations: DateTimeField.YEAR , DateTimeField.MONTH_OF_YEAR , DateTimeField.DAY_OF_MONTH DateTimeField.YEAR , DateTimeField.DAY_OF_YEAR Exceptions DateTimeParseException - if parsing fails DateTimeException - if the parsed date is invalid","title":"To date"},{"location":"api/core/io.islandtime/kotlin.-string/to-date/#todate","text":"(iosArm64) fun String .toDate(): Date (iosX64) fun String .toDate(): Date (jvm) fun String .toDate(): Date (macosX64) fun String .toDate(): Date (tvosArm64) fun String .toDate(): Date (tvosX64) fun String .toDate(): Date (watchosArm64) fun String .toDate(): Date (watchosX86) fun String .toDate(): Date Convert a string to a Date . The string is assumed to be an ISO-8601 calendar date in extended format. For example, 2010-10-05 . The output of Date.toString can be safely parsed using this method.","title":"toDate"},{"location":"api/core/io.islandtime/kotlin.-string/to-date/#exceptions","text":"DateTimeParseException - if parsing fails DateTimeException - if the parsed date is invalid(iosArm64) fun String .toDate(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): Date (iosX64) fun String .toDate(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): Date (jvm) fun String .toDate(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): Date (macosX64) fun String .toDate(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): Date (tvosArm64) fun String .toDate(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): Date (tvosX64) fun String .toDate(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): Date (watchosArm64) fun String .toDate(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): Date (watchosX86) fun String .toDate(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): Date Convert a string to a Date using a specific parser. A set of predefined parsers can be found in DateTimeParsers . Any custom parser must be capable of supplying one of the following field combinations: DateTimeField.YEAR , DateTimeField.MONTH_OF_YEAR , DateTimeField.DAY_OF_MONTH DateTimeField.YEAR , DateTimeField.DAY_OF_YEAR","title":"Exceptions"},{"location":"api/core/io.islandtime/kotlin.-string/to-date/#exceptions_1","text":"DateTimeParseException - if parsing fails DateTimeException - if the parsed date is invalid","title":"Exceptions"},{"location":"api/core/io.islandtime/kotlin.-string/to-instant/","text":"core / io.islandtime / kotlin.String / toInstant toInstant (iosArm64) fun String .toInstant(): Instant (iosX64) fun String .toInstant(): Instant (jvm) fun String .toInstant(): Instant (macosX64) fun String .toInstant(): Instant (tvosArm64) fun String .toInstant(): Instant (tvosX64) fun String .toInstant(): Instant (watchosArm64) fun String .toInstant(): Instant (watchosX86) fun String .toInstant(): Instant Convert a string to an Instant . The string is assumed to be an ISO-8601 UTC date-time representation in extended format. For example, 2010-10-05T18:30Z or 2010-10-05T18:30:00.123456789Z . The output of Instant.toString can be safely parsed using this method. Exceptions DateTimeParseException - if parsing fails DateTimeException - if the parsed date or time is invalid(iosArm64) fun String .toInstant(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): Instant (iosX64) fun String .toInstant(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): Instant (jvm) fun String .toInstant(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): Instant (macosX64) fun String .toInstant(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): Instant (tvosArm64) fun String .toInstant(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): Instant (tvosX64) fun String .toInstant(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): Instant (watchosArm64) fun String .toInstant(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): Instant (watchosX86) fun String .toInstant(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): Instant Convert a string to an Instant using a specific parser. A set of predefined parsers can be found in DateTimeParsers . Exceptions DateTimeParseException - if parsing fails DateTimeException - if the parsed date or time is invalid","title":"To instant"},{"location":"api/core/io.islandtime/kotlin.-string/to-instant/#toinstant","text":"(iosArm64) fun String .toInstant(): Instant (iosX64) fun String .toInstant(): Instant (jvm) fun String .toInstant(): Instant (macosX64) fun String .toInstant(): Instant (tvosArm64) fun String .toInstant(): Instant (tvosX64) fun String .toInstant(): Instant (watchosArm64) fun String .toInstant(): Instant (watchosX86) fun String .toInstant(): Instant Convert a string to an Instant . The string is assumed to be an ISO-8601 UTC date-time representation in extended format. For example, 2010-10-05T18:30Z or 2010-10-05T18:30:00.123456789Z . The output of Instant.toString can be safely parsed using this method.","title":"toInstant"},{"location":"api/core/io.islandtime/kotlin.-string/to-instant/#exceptions","text":"DateTimeParseException - if parsing fails DateTimeException - if the parsed date or time is invalid(iosArm64) fun String .toInstant(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): Instant (iosX64) fun String .toInstant(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): Instant (jvm) fun String .toInstant(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): Instant (macosX64) fun String .toInstant(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): Instant (tvosArm64) fun String .toInstant(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): Instant (tvosX64) fun String .toInstant(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): Instant (watchosArm64) fun String .toInstant(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): Instant (watchosX86) fun String .toInstant(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): Instant Convert a string to an Instant using a specific parser. A set of predefined parsers can be found in DateTimeParsers .","title":"Exceptions"},{"location":"api/core/io.islandtime/kotlin.-string/to-instant/#exceptions_1","text":"DateTimeParseException - if parsing fails DateTimeException - if the parsed date or time is invalid","title":"Exceptions"},{"location":"api/core/io.islandtime/kotlin.-string/to-offset-date-time/","text":"core / io.islandtime / kotlin.String / toOffsetDateTime toOffsetDateTime (iosArm64) fun String .toOffsetDateTime(): OffsetDateTime (iosX64) fun String .toOffsetDateTime(): OffsetDateTime (jvm) fun String .toOffsetDateTime(): OffsetDateTime (macosX64) fun String .toOffsetDateTime(): OffsetDateTime (tvosArm64) fun String .toOffsetDateTime(): OffsetDateTime (tvosX64) fun String .toOffsetDateTime(): OffsetDateTime (watchosArm64) fun String .toOffsetDateTime(): OffsetDateTime (watchosX86) fun String .toOffsetDateTime(): OffsetDateTime Convert a string to an OffsetDateTime . The string is assumed to be an ISO-8601 date-time with the UTC offset in extended format. For example, 2019-05-30T02:30+01:00 . The output of OffsetDateTime.toString can be safely parsed using this method. Exceptions DateTimeParseException - if parsing fails DateTimeException - if the parsed date-time or offset is invalid(iosArm64) fun String .toOffsetDateTime(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): OffsetDateTime (iosX64) fun String .toOffsetDateTime(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): OffsetDateTime (jvm) fun String .toOffsetDateTime(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): OffsetDateTime (macosX64) fun String .toOffsetDateTime(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): OffsetDateTime (tvosArm64) fun String .toOffsetDateTime(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): OffsetDateTime (tvosX64) fun String .toOffsetDateTime(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): OffsetDateTime (watchosArm64) fun String .toOffsetDateTime(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): OffsetDateTime (watchosX86) fun String .toOffsetDateTime(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): OffsetDateTime Convert a string to an OffsetDateTime using a specific parser. A set of predefined parsers can be found in DateTimeParsers . Any custom parser must be capable of supplying the fields necessary to resolve a Date , Time and UtcOffset . Exceptions DateTimeParseException - if parsing fails DateTimeException - if the parsed date-time or offset is invalid","title":"To offset date time"},{"location":"api/core/io.islandtime/kotlin.-string/to-offset-date-time/#tooffsetdatetime","text":"(iosArm64) fun String .toOffsetDateTime(): OffsetDateTime (iosX64) fun String .toOffsetDateTime(): OffsetDateTime (jvm) fun String .toOffsetDateTime(): OffsetDateTime (macosX64) fun String .toOffsetDateTime(): OffsetDateTime (tvosArm64) fun String .toOffsetDateTime(): OffsetDateTime (tvosX64) fun String .toOffsetDateTime(): OffsetDateTime (watchosArm64) fun String .toOffsetDateTime(): OffsetDateTime (watchosX86) fun String .toOffsetDateTime(): OffsetDateTime Convert a string to an OffsetDateTime . The string is assumed to be an ISO-8601 date-time with the UTC offset in extended format. For example, 2019-05-30T02:30+01:00 . The output of OffsetDateTime.toString can be safely parsed using this method.","title":"toOffsetDateTime"},{"location":"api/core/io.islandtime/kotlin.-string/to-offset-date-time/#exceptions","text":"DateTimeParseException - if parsing fails DateTimeException - if the parsed date-time or offset is invalid(iosArm64) fun String .toOffsetDateTime(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): OffsetDateTime (iosX64) fun String .toOffsetDateTime(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): OffsetDateTime (jvm) fun String .toOffsetDateTime(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): OffsetDateTime (macosX64) fun String .toOffsetDateTime(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): OffsetDateTime (tvosArm64) fun String .toOffsetDateTime(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): OffsetDateTime (tvosX64) fun String .toOffsetDateTime(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): OffsetDateTime (watchosArm64) fun String .toOffsetDateTime(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): OffsetDateTime (watchosX86) fun String .toOffsetDateTime(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): OffsetDateTime Convert a string to an OffsetDateTime using a specific parser. A set of predefined parsers can be found in DateTimeParsers . Any custom parser must be capable of supplying the fields necessary to resolve a Date , Time and UtcOffset .","title":"Exceptions"},{"location":"api/core/io.islandtime/kotlin.-string/to-offset-date-time/#exceptions_1","text":"DateTimeParseException - if parsing fails DateTimeException - if the parsed date-time or offset is invalid","title":"Exceptions"},{"location":"api/core/io.islandtime/kotlin.-string/to-offset-time/","text":"core / io.islandtime / kotlin.String / toOffsetTime toOffsetTime (iosArm64) fun String .toOffsetTime(): OffsetTime (iosX64) fun String .toOffsetTime(): OffsetTime (jvm) fun String .toOffsetTime(): OffsetTime (macosX64) fun String .toOffsetTime(): OffsetTime (tvosArm64) fun String .toOffsetTime(): OffsetTime (tvosX64) fun String .toOffsetTime(): OffsetTime (watchosArm64) fun String .toOffsetTime(): OffsetTime (watchosX86) fun String .toOffsetTime(): OffsetTime Convert a string to an OffsetTime . The string is assumed to be an ISO-8601 time with the UTC offset in extended format. For example, 02:30+01:00 or 14:40:23Z . The output of OffsetTime.toString can be safely parsed using this method. Exceptions DateTimeParseException - if parsing fails DateTimeException - if the parsed time or offset is invalid(iosArm64) fun String .toOffsetTime(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): OffsetTime (iosX64) fun String .toOffsetTime(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): OffsetTime (jvm) fun String .toOffsetTime(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): OffsetTime (macosX64) fun String .toOffsetTime(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): OffsetTime (tvosArm64) fun String .toOffsetTime(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): OffsetTime (tvosX64) fun String .toOffsetTime(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): OffsetTime (watchosArm64) fun String .toOffsetTime(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): OffsetTime (watchosX86) fun String .toOffsetTime(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): OffsetTime Convert a string to an OffsetTime using a specific parser. A set of predefined parsers can be found in DateTimeParsers . Any custom parser must be capable of supplying the fields necessary to resolve both a Time and UtcOffset . Exceptions DateTimeParseException - if parsing fails DateTimeException - if the parsed time or offset is invalid","title":"To offset time"},{"location":"api/core/io.islandtime/kotlin.-string/to-offset-time/#tooffsettime","text":"(iosArm64) fun String .toOffsetTime(): OffsetTime (iosX64) fun String .toOffsetTime(): OffsetTime (jvm) fun String .toOffsetTime(): OffsetTime (macosX64) fun String .toOffsetTime(): OffsetTime (tvosArm64) fun String .toOffsetTime(): OffsetTime (tvosX64) fun String .toOffsetTime(): OffsetTime (watchosArm64) fun String .toOffsetTime(): OffsetTime (watchosX86) fun String .toOffsetTime(): OffsetTime Convert a string to an OffsetTime . The string is assumed to be an ISO-8601 time with the UTC offset in extended format. For example, 02:30+01:00 or 14:40:23Z . The output of OffsetTime.toString can be safely parsed using this method.","title":"toOffsetTime"},{"location":"api/core/io.islandtime/kotlin.-string/to-offset-time/#exceptions","text":"DateTimeParseException - if parsing fails DateTimeException - if the parsed time or offset is invalid(iosArm64) fun String .toOffsetTime(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): OffsetTime (iosX64) fun String .toOffsetTime(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): OffsetTime (jvm) fun String .toOffsetTime(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): OffsetTime (macosX64) fun String .toOffsetTime(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): OffsetTime (tvosArm64) fun String .toOffsetTime(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): OffsetTime (tvosX64) fun String .toOffsetTime(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): OffsetTime (watchosArm64) fun String .toOffsetTime(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): OffsetTime (watchosX86) fun String .toOffsetTime(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): OffsetTime Convert a string to an OffsetTime using a specific parser. A set of predefined parsers can be found in DateTimeParsers . Any custom parser must be capable of supplying the fields necessary to resolve both a Time and UtcOffset .","title":"Exceptions"},{"location":"api/core/io.islandtime/kotlin.-string/to-offset-time/#exceptions_1","text":"DateTimeParseException - if parsing fails DateTimeException - if the parsed time or offset is invalid","title":"Exceptions"},{"location":"api/core/io.islandtime/kotlin.-string/to-time-zone/","text":"core / io.islandtime / kotlin.String / toTimeZone toTimeZone (iosArm64) fun String .toTimeZone(): TimeZone (iosX64) fun String .toTimeZone(): TimeZone (jvm) fun String .toTimeZone(): TimeZone (macosX64) fun String .toTimeZone(): TimeZone (tvosArm64) fun String .toTimeZone(): TimeZone (tvosX64) fun String .toTimeZone(): TimeZone (watchosArm64) fun String .toTimeZone(): TimeZone (watchosX86) fun String .toTimeZone(): TimeZone Convert a string to a TimeZone .","title":"To time zone"},{"location":"api/core/io.islandtime/kotlin.-string/to-time-zone/#totimezone","text":"(iosArm64) fun String .toTimeZone(): TimeZone (iosX64) fun String .toTimeZone(): TimeZone (jvm) fun String .toTimeZone(): TimeZone (macosX64) fun String .toTimeZone(): TimeZone (tvosArm64) fun String .toTimeZone(): TimeZone (tvosX64) fun String .toTimeZone(): TimeZone (watchosArm64) fun String .toTimeZone(): TimeZone (watchosX86) fun String .toTimeZone(): TimeZone Convert a string to a TimeZone .","title":"toTimeZone"},{"location":"api/core/io.islandtime/kotlin.-string/to-time/","text":"core / io.islandtime / kotlin.String / toTime toTime (iosArm64) fun String .toTime(): Time (iosX64) fun String .toTime(): Time (jvm) fun String .toTime(): Time (macosX64) fun String .toTime(): Time (tvosArm64) fun String .toTime(): Time (tvosX64) fun String .toTime(): Time (watchosArm64) fun String .toTime(): Time (watchosX86) fun String .toTime(): Time Convert a string to a Time . The string is assumed to be an ISO-8601 time representation in extended format. For example, 05 , 05:30 , 05:30:00 , or 05:30:00.123456789 . The output of Time.toString can be safely parsed using this method. Exceptions DateTimeParseException - if parsing fails DateTimeException - if the parsed time is invalid(iosArm64) fun String .toTime(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): Time (iosX64) fun String .toTime(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): Time (jvm) fun String .toTime(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): Time (macosX64) fun String .toTime(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): Time (tvosArm64) fun String .toTime(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): Time (tvosX64) fun String .toTime(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): Time (watchosArm64) fun String .toTime(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): Time (watchosX86) fun String .toTime(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): Time Convert a string to a Time using a specific parser. A set of predefined parsers can be found in DateTimeParsers . Exceptions DateTimeParseException - if parsing fails DateTimeException - if the parsed time is invalid","title":"To time"},{"location":"api/core/io.islandtime/kotlin.-string/to-time/#totime","text":"(iosArm64) fun String .toTime(): Time (iosX64) fun String .toTime(): Time (jvm) fun String .toTime(): Time (macosX64) fun String .toTime(): Time (tvosArm64) fun String .toTime(): Time (tvosX64) fun String .toTime(): Time (watchosArm64) fun String .toTime(): Time (watchosX86) fun String .toTime(): Time Convert a string to a Time . The string is assumed to be an ISO-8601 time representation in extended format. For example, 05 , 05:30 , 05:30:00 , or 05:30:00.123456789 . The output of Time.toString can be safely parsed using this method.","title":"toTime"},{"location":"api/core/io.islandtime/kotlin.-string/to-time/#exceptions","text":"DateTimeParseException - if parsing fails DateTimeException - if the parsed time is invalid(iosArm64) fun String .toTime(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): Time (iosX64) fun String .toTime(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): Time (jvm) fun String .toTime(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): Time (macosX64) fun String .toTime(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): Time (tvosArm64) fun String .toTime(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): Time (tvosX64) fun String .toTime(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): Time (watchosArm64) fun String .toTime(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): Time (watchosX86) fun String .toTime(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): Time Convert a string to a Time using a specific parser. A set of predefined parsers can be found in DateTimeParsers .","title":"Exceptions"},{"location":"api/core/io.islandtime/kotlin.-string/to-time/#exceptions_1","text":"DateTimeParseException - if parsing fails DateTimeException - if the parsed time is invalid","title":"Exceptions"},{"location":"api/core/io.islandtime/kotlin.-string/to-utc-offset/","text":"core / io.islandtime / kotlin.String / toUtcOffset toUtcOffset (iosArm64) fun String .toUtcOffset(): UtcOffset (iosX64) fun String .toUtcOffset(): UtcOffset (jvm) fun String .toUtcOffset(): UtcOffset (macosX64) fun String .toUtcOffset(): UtcOffset (tvosArm64) fun String .toUtcOffset(): UtcOffset (tvosX64) fun String .toUtcOffset(): UtcOffset (watchosArm64) fun String .toUtcOffset(): UtcOffset (watchosX86) fun String .toUtcOffset(): UtcOffset Convert a string to a UtcOffset . The string is assumed to be an ISO-8601 UTC offset representation in extended format. For example, Z , +05 , or -04:30 . The output of UtcOffset.toString can be safely parsed using this method. Exceptions DateTimeParseException - if parsing fails DateTimeException - if the parsed UTC offset is invalid(iosArm64) fun String .toUtcOffset(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): UtcOffset (iosX64) fun String .toUtcOffset(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): UtcOffset (jvm) fun String .toUtcOffset(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): UtcOffset (macosX64) fun String .toUtcOffset(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): UtcOffset (tvosArm64) fun String .toUtcOffset(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): UtcOffset (tvosX64) fun String .toUtcOffset(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): UtcOffset (watchosArm64) fun String .toUtcOffset(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): UtcOffset (watchosX86) fun String .toUtcOffset(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): UtcOffset Convert a string to a UtcOffset using a specific parser. A set of predefined parsers can be found in DateTimeParsers . Exceptions DateTimeParseException - if parsing fails DateTimeException - if the parsed UTC offset is invalid","title":"To utc offset"},{"location":"api/core/io.islandtime/kotlin.-string/to-utc-offset/#toutcoffset","text":"(iosArm64) fun String .toUtcOffset(): UtcOffset (iosX64) fun String .toUtcOffset(): UtcOffset (jvm) fun String .toUtcOffset(): UtcOffset (macosX64) fun String .toUtcOffset(): UtcOffset (tvosArm64) fun String .toUtcOffset(): UtcOffset (tvosX64) fun String .toUtcOffset(): UtcOffset (watchosArm64) fun String .toUtcOffset(): UtcOffset (watchosX86) fun String .toUtcOffset(): UtcOffset Convert a string to a UtcOffset . The string is assumed to be an ISO-8601 UTC offset representation in extended format. For example, Z , +05 , or -04:30 . The output of UtcOffset.toString can be safely parsed using this method.","title":"toUtcOffset"},{"location":"api/core/io.islandtime/kotlin.-string/to-utc-offset/#exceptions","text":"DateTimeParseException - if parsing fails DateTimeException - if the parsed UTC offset is invalid(iosArm64) fun String .toUtcOffset(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): UtcOffset (iosX64) fun String .toUtcOffset(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): UtcOffset (jvm) fun String .toUtcOffset(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): UtcOffset (macosX64) fun String .toUtcOffset(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): UtcOffset (tvosArm64) fun String .toUtcOffset(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): UtcOffset (tvosX64) fun String .toUtcOffset(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): UtcOffset (watchosArm64) fun String .toUtcOffset(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): UtcOffset (watchosX86) fun String .toUtcOffset(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): UtcOffset Convert a string to a UtcOffset using a specific parser. A set of predefined parsers can be found in DateTimeParsers .","title":"Exceptions"},{"location":"api/core/io.islandtime/kotlin.-string/to-utc-offset/#exceptions_1","text":"DateTimeParseException - if parsing fails DateTimeException - if the parsed UTC offset is invalid","title":"Exceptions"},{"location":"api/core/io.islandtime/kotlin.-string/to-year-month/","text":"core / io.islandtime / kotlin.String / toYearMonth toYearMonth (iosArm64) fun String .toYearMonth(): YearMonth (iosX64) fun String .toYearMonth(): YearMonth (jvm) fun String .toYearMonth(): YearMonth (macosX64) fun String .toYearMonth(): YearMonth (tvosArm64) fun String .toYearMonth(): YearMonth (tvosX64) fun String .toYearMonth(): YearMonth (watchosArm64) fun String .toYearMonth(): YearMonth (watchosX86) fun String .toYearMonth(): YearMonth Convert a string to a YearMonth . The string is assumed to be an ISO-8601 year-month. For example, 2010-05 or 1960-12 . The output of YearMonth.toString can be safely parsed using this method. Exceptions DateTimeParseException - if parsing fails DateTimeException - if the parsed year-month is invalid(iosArm64) fun String .toYearMonth(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): YearMonth (iosX64) fun String .toYearMonth(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): YearMonth (jvm) fun String .toYearMonth(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): YearMonth (macosX64) fun String .toYearMonth(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): YearMonth (tvosArm64) fun String .toYearMonth(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): YearMonth (tvosX64) fun String .toYearMonth(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): YearMonth (watchosArm64) fun String .toYearMonth(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): YearMonth (watchosX86) fun String .toYearMonth(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): YearMonth Convert a string to a YearMonth using a specific parser. A set of predefined parsers can be found in DateTimeParsers . The parser must be capable of supplying DateTimeField.YEAR and DateTimeField.MONTH_OF_YEAR . Exceptions DateTimeParseException - if parsing fails DateTimeException - if the parsed year-month is invalid","title":"To year month"},{"location":"api/core/io.islandtime/kotlin.-string/to-year-month/#toyearmonth","text":"(iosArm64) fun String .toYearMonth(): YearMonth (iosX64) fun String .toYearMonth(): YearMonth (jvm) fun String .toYearMonth(): YearMonth (macosX64) fun String .toYearMonth(): YearMonth (tvosArm64) fun String .toYearMonth(): YearMonth (tvosX64) fun String .toYearMonth(): YearMonth (watchosArm64) fun String .toYearMonth(): YearMonth (watchosX86) fun String .toYearMonth(): YearMonth Convert a string to a YearMonth . The string is assumed to be an ISO-8601 year-month. For example, 2010-05 or 1960-12 . The output of YearMonth.toString can be safely parsed using this method.","title":"toYearMonth"},{"location":"api/core/io.islandtime/kotlin.-string/to-year-month/#exceptions","text":"DateTimeParseException - if parsing fails DateTimeException - if the parsed year-month is invalid(iosArm64) fun String .toYearMonth(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): YearMonth (iosX64) fun String .toYearMonth(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): YearMonth (jvm) fun String .toYearMonth(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): YearMonth (macosX64) fun String .toYearMonth(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): YearMonth (tvosArm64) fun String .toYearMonth(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): YearMonth (tvosX64) fun String .toYearMonth(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): YearMonth (watchosArm64) fun String .toYearMonth(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): YearMonth (watchosX86) fun String .toYearMonth(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): YearMonth Convert a string to a YearMonth using a specific parser. A set of predefined parsers can be found in DateTimeParsers . The parser must be capable of supplying DateTimeField.YEAR and DateTimeField.MONTH_OF_YEAR .","title":"Exceptions"},{"location":"api/core/io.islandtime/kotlin.-string/to-year-month/#exceptions_1","text":"DateTimeParseException - if parsing fails DateTimeException - if the parsed year-month is invalid","title":"Exceptions"},{"location":"api/core/io.islandtime/kotlin.-string/to-year/","text":"core / io.islandtime / kotlin.String / toYear toYear (iosArm64) fun String .toYear(): Year (iosX64) fun String .toYear(): Year (jvm) fun String .toYear(): Year (macosX64) fun String .toYear(): Year (tvosArm64) fun String .toYear(): Year (tvosX64) fun String .toYear(): Year (watchosArm64) fun String .toYear(): Year (watchosX86) fun String .toYear(): Year Convert a string to a Year . The string is assumed to be an ISO-8601 year. For example, 2010 , +002010 , or 'Y12345'. The output of Year.toString can be safely parsed using this method. Exceptions DateTimeParseException - if parsing fails DateTimeException - if the parsed year is invalid(iosArm64) fun String .toYear(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): Year (iosX64) fun String .toYear(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): Year (jvm) fun String .toYear(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): Year (macosX64) fun String .toYear(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): Year (tvosArm64) fun String .toYear(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): Year (tvosX64) fun String .toYear(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): Year (watchosArm64) fun String .toYear(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): Year (watchosX86) fun String .toYear(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): Year Convert a string to a Year using a specific parser. A set of predefined parsers can be found in DateTimeParsers . The parser must be capable of supplying DateTimeField.YEAR . Exceptions DateTimeParseException - if parsing fails DateTimeException - if the parsed year is invalid","title":"To year"},{"location":"api/core/io.islandtime/kotlin.-string/to-year/#toyear","text":"(iosArm64) fun String .toYear(): Year (iosX64) fun String .toYear(): Year (jvm) fun String .toYear(): Year (macosX64) fun String .toYear(): Year (tvosArm64) fun String .toYear(): Year (tvosX64) fun String .toYear(): Year (watchosArm64) fun String .toYear(): Year (watchosX86) fun String .toYear(): Year Convert a string to a Year . The string is assumed to be an ISO-8601 year. For example, 2010 , +002010 , or 'Y12345'. The output of Year.toString can be safely parsed using this method.","title":"toYear"},{"location":"api/core/io.islandtime/kotlin.-string/to-year/#exceptions","text":"DateTimeParseException - if parsing fails DateTimeException - if the parsed year is invalid(iosArm64) fun String .toYear(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): Year (iosX64) fun String .toYear(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): Year (jvm) fun String .toYear(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): Year (macosX64) fun String .toYear(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): Year (tvosArm64) fun String .toYear(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): Year (tvosX64) fun String .toYear(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): Year (watchosArm64) fun String .toYear(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): Year (watchosX86) fun String .toYear(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): Year Convert a string to a Year using a specific parser. A set of predefined parsers can be found in DateTimeParsers . The parser must be capable of supplying DateTimeField.YEAR .","title":"Exceptions"},{"location":"api/core/io.islandtime/kotlin.-string/to-year/#exceptions_1","text":"DateTimeParseException - if parsing fails DateTimeException - if the parsed year is invalid","title":"Exceptions"},{"location":"api/core/io.islandtime/kotlin.-string/to-zoned-date-time/","text":"core / io.islandtime / kotlin.String / toZonedDateTime toZonedDateTime (iosArm64) fun String .toZonedDateTime(): ZonedDateTime (iosX64) fun String .toZonedDateTime(): ZonedDateTime (jvm) fun String .toZonedDateTime(): ZonedDateTime (macosX64) fun String .toZonedDateTime(): ZonedDateTime (tvosArm64) fun String .toZonedDateTime(): ZonedDateTime (tvosX64) fun String .toZonedDateTime(): ZonedDateTime (watchosArm64) fun String .toZonedDateTime(): ZonedDateTime (watchosX86) fun String .toZonedDateTime(): ZonedDateTime Convert a string to a ZonedDateTime . The string is assumed to be a complete ISO-8601 date and time representation in extended format, optionally including a non-standard region ID. For example, 2005-05-06T23:30+01 or 2005-05-06T23:30-04:00[America/New_York] . The output of ZonedDateTime.toString can be safely parsed using this method. Exceptions DateTimeParseException - if parsing fails DateTimeException - if the parsed date-time is invalid(iosArm64) fun String .toZonedDateTime(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): ZonedDateTime (iosX64) fun String .toZonedDateTime(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): ZonedDateTime (jvm) fun String .toZonedDateTime(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): ZonedDateTime (macosX64) fun String .toZonedDateTime(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): ZonedDateTime (tvosArm64) fun String .toZonedDateTime(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): ZonedDateTime (tvosX64) fun String .toZonedDateTime(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): ZonedDateTime (watchosArm64) fun String .toZonedDateTime(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): ZonedDateTime (watchosX86) fun String .toZonedDateTime(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): ZonedDateTime Convert a string to a ZonedDateTime using a specific parser. A set of predefined parsers can be found in DateTimeParsers . Exceptions DateTimeParseException - if parsing fails DateTimeException - if the parsed date-time is invalid","title":"To zoned date time"},{"location":"api/core/io.islandtime/kotlin.-string/to-zoned-date-time/#tozoneddatetime","text":"(iosArm64) fun String .toZonedDateTime(): ZonedDateTime (iosX64) fun String .toZonedDateTime(): ZonedDateTime (jvm) fun String .toZonedDateTime(): ZonedDateTime (macosX64) fun String .toZonedDateTime(): ZonedDateTime (tvosArm64) fun String .toZonedDateTime(): ZonedDateTime (tvosX64) fun String .toZonedDateTime(): ZonedDateTime (watchosArm64) fun String .toZonedDateTime(): ZonedDateTime (watchosX86) fun String .toZonedDateTime(): ZonedDateTime Convert a string to a ZonedDateTime . The string is assumed to be a complete ISO-8601 date and time representation in extended format, optionally including a non-standard region ID. For example, 2005-05-06T23:30+01 or 2005-05-06T23:30-04:00[America/New_York] . The output of ZonedDateTime.toString can be safely parsed using this method.","title":"toZonedDateTime"},{"location":"api/core/io.islandtime/kotlin.-string/to-zoned-date-time/#exceptions","text":"DateTimeParseException - if parsing fails DateTimeException - if the parsed date-time is invalid(iosArm64) fun String .toZonedDateTime(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): ZonedDateTime (iosX64) fun String .toZonedDateTime(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): ZonedDateTime (jvm) fun String .toZonedDateTime(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): ZonedDateTime (macosX64) fun String .toZonedDateTime(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): ZonedDateTime (tvosArm64) fun String .toZonedDateTime(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): ZonedDateTime (tvosX64) fun String .toZonedDateTime(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): ZonedDateTime (watchosArm64) fun String .toZonedDateTime(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): ZonedDateTime (watchosX86) fun String .toZonedDateTime(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): ZonedDateTime Convert a string to a ZonedDateTime using a specific parser. A set of predefined parsers can be found in DateTimeParsers .","title":"Exceptions"},{"location":"api/core/io.islandtime/kotlin.-string/to-zoned-date-time/#exceptions_1","text":"DateTimeParseException - if parsing fails DateTimeException - if the parsed date-time is invalid","title":"Exceptions"},{"location":"api/core/io.islandtime.base/","text":"core / io.islandtime.base Package io.islandtime.base Experimental : Framework-level interfaces, allowing aspects of date and time to be abstracted. This area is unstable and likely to see significant change. Types Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) DateTimeField A field describing a property of a date, time, or measurement of time. enum class DateTimeField (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) TimePoint An object that can be placed exactly in time. interface TimePoint<T>","title":"Index"},{"location":"api/core/io.islandtime.base/#package-ioislandtimebase","text":"Experimental : Framework-level interfaces, allowing aspects of date and time to be abstracted. This area is unstable and likely to see significant change.","title":"Package io.islandtime.base"},{"location":"api/core/io.islandtime.base/#types","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) DateTimeField A field describing a property of a date, time, or measurement of time. enum class DateTimeField (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) TimePoint An object that can be placed exactly in time. interface TimePoint<T>","title":"Types"},{"location":"api/core/io.islandtime.base/-date-time-field/","text":"core / io.islandtime.base / DateTimeField DateTimeField (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) enum class DateTimeField A field describing a property of a date, time, or measurement of time. These are intended to be used primarily during parsing and formatting. Each date-time primitive is capable of resolving or supplying the set of fields that are applicable to it. Enum Values Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) YEAR The proleptic year. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) YEAR_OF_ERA The year of the era. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) ERA The era. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MONTH_OF_YEAR The month of the year, such as January (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) DAY_OF_YEAR The day of the year. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) DAY_OF_MONTH The day of the month. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) DAY_OF_WEEK The day of the week, such as Sunday . (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) AM_PM_OF_DAY AM or PM of the day. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) HOUR_OF_DAY The hour of the day, from 0 to 23. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MINUTE_OF_HOUR The minute of the hour, from 0 to 59. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) SECOND_OF_MINUTE The second of the minute, from 0 to 59. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) NANOSECOND_OF_SECOND The nanosecond of the second, from 0 to 999,999,999. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MILLISECOND_OF_SECOND The millisecond of the second, from 0 to 999. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) UTC_OFFSET_SIGN The sign of the UTC offset, -1 (negative) or 1 (positive). (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) UTC_OFFSET_HOURS The hour component of the UTC offset, from 0-18. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) UTC_OFFSET_MINUTES The minute component of the UTC offset, from 0-59. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) UTC_OFFSET_SECONDS The second component of the UTC offset, from 0-59. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) UTC_OFFSET_TOTAL_SECONDS The total number of seconds in the UTC offset, from (-18 * 60 * 60) to (18 * 60 * 60). (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) PERIOD_SIGN The sign of the period, -1 (negative) or 1 (positive). (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) PERIOD_OF_YEARS A period of years. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) PERIOD_OF_MONTHS A period of months. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) PERIOD_OF_WEEKS A period of weeks. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) PERIOD_OF_DAYS A period of days. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) DURATION_OF_HOURS A duration of hours. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) DURATION_OF_MINUTES A duration of minutes. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) DURATION_OF_SECONDS A duration of seconds. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) IS_UNBOUNDED Indicates the presence of the minimum or maximum sentinel value, which should treated as unbounded (in ISO-8601 parlance, \"open\") in the context of an interval. Inheritors Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) AM_PM_OF_DAY AM or PM of the day. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) DAY_OF_MONTH The day of the month. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) DAY_OF_WEEK The day of the week, such as Sunday . (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) DAY_OF_YEAR The day of the year. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) DURATION_OF_HOURS A duration of hours. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) DURATION_OF_MINUTES A duration of minutes. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) DURATION_OF_SECONDS A duration of seconds. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) ERA The era. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) HOUR_OF_DAY The hour of the day, from 0 to 23. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) IS_UNBOUNDED Indicates the presence of the minimum or maximum sentinel value, which should treated as unbounded (in ISO-8601 parlance, \"open\") in the context of an interval. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MILLISECOND_OF_SECOND The millisecond of the second, from 0 to 999. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MINUTE_OF_HOUR The minute of the hour, from 0 to 59. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MONTH_OF_YEAR The month of the year, such as January (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) NANOSECOND_OF_SECOND The nanosecond of the second, from 0 to 999,999,999. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) PERIOD_OF_DAYS A period of days. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) PERIOD_OF_MONTHS A period of months. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) PERIOD_OF_WEEKS A period of weeks. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) PERIOD_OF_YEARS A period of years. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) PERIOD_SIGN The sign of the period, -1 (negative) or 1 (positive). (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) SECOND_OF_MINUTE The second of the minute, from 0 to 59. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) UTC_OFFSET_HOURS The hour component of the UTC offset, from 0-18. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) UTC_OFFSET_MINUTES The minute component of the UTC offset, from 0-59. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) UTC_OFFSET_SECONDS The second component of the UTC offset, from 0-59. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) UTC_OFFSET_SIGN The sign of the UTC offset, -1 (negative) or 1 (positive). (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) UTC_OFFSET_TOTAL_SECONDS The total number of seconds in the UTC offset, from (-18 * 60 * 60) to (18 * 60 * 60). (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) YEAR The proleptic year. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) YEAR_OF_ERA The year of the era.","title":"Index"},{"location":"api/core/io.islandtime.base/-date-time-field/#datetimefield","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) enum class DateTimeField A field describing a property of a date, time, or measurement of time. These are intended to be used primarily during parsing and formatting. Each date-time primitive is capable of resolving or supplying the set of fields that are applicable to it.","title":"DateTimeField"},{"location":"api/core/io.islandtime.base/-date-time-field/#enum-values","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) YEAR The proleptic year. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) YEAR_OF_ERA The year of the era. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) ERA The era. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MONTH_OF_YEAR The month of the year, such as January (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) DAY_OF_YEAR The day of the year. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) DAY_OF_MONTH The day of the month. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) DAY_OF_WEEK The day of the week, such as Sunday . (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) AM_PM_OF_DAY AM or PM of the day. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) HOUR_OF_DAY The hour of the day, from 0 to 23. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MINUTE_OF_HOUR The minute of the hour, from 0 to 59. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) SECOND_OF_MINUTE The second of the minute, from 0 to 59. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) NANOSECOND_OF_SECOND The nanosecond of the second, from 0 to 999,999,999. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MILLISECOND_OF_SECOND The millisecond of the second, from 0 to 999. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) UTC_OFFSET_SIGN The sign of the UTC offset, -1 (negative) or 1 (positive). (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) UTC_OFFSET_HOURS The hour component of the UTC offset, from 0-18. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) UTC_OFFSET_MINUTES The minute component of the UTC offset, from 0-59. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) UTC_OFFSET_SECONDS The second component of the UTC offset, from 0-59. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) UTC_OFFSET_TOTAL_SECONDS The total number of seconds in the UTC offset, from (-18 * 60 * 60) to (18 * 60 * 60). (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) PERIOD_SIGN The sign of the period, -1 (negative) or 1 (positive). (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) PERIOD_OF_YEARS A period of years. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) PERIOD_OF_MONTHS A period of months. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) PERIOD_OF_WEEKS A period of weeks. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) PERIOD_OF_DAYS A period of days. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) DURATION_OF_HOURS A duration of hours. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) DURATION_OF_MINUTES A duration of minutes. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) DURATION_OF_SECONDS A duration of seconds. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) IS_UNBOUNDED Indicates the presence of the minimum or maximum sentinel value, which should treated as unbounded (in ISO-8601 parlance, \"open\") in the context of an interval.","title":"Enum Values"},{"location":"api/core/io.islandtime.base/-date-time-field/#inheritors","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) AM_PM_OF_DAY AM or PM of the day. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) DAY_OF_MONTH The day of the month. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) DAY_OF_WEEK The day of the week, such as Sunday . (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) DAY_OF_YEAR The day of the year. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) DURATION_OF_HOURS A duration of hours. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) DURATION_OF_MINUTES A duration of minutes. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) DURATION_OF_SECONDS A duration of seconds. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) ERA The era. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) HOUR_OF_DAY The hour of the day, from 0 to 23. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) IS_UNBOUNDED Indicates the presence of the minimum or maximum sentinel value, which should treated as unbounded (in ISO-8601 parlance, \"open\") in the context of an interval. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MILLISECOND_OF_SECOND The millisecond of the second, from 0 to 999. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MINUTE_OF_HOUR The minute of the hour, from 0 to 59. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MONTH_OF_YEAR The month of the year, such as January (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) NANOSECOND_OF_SECOND The nanosecond of the second, from 0 to 999,999,999. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) PERIOD_OF_DAYS A period of days. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) PERIOD_OF_MONTHS A period of months. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) PERIOD_OF_WEEKS A period of weeks. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) PERIOD_OF_YEARS A period of years. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) PERIOD_SIGN The sign of the period, -1 (negative) or 1 (positive). (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) SECOND_OF_MINUTE The second of the minute, from 0 to 59. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) UTC_OFFSET_HOURS The hour component of the UTC offset, from 0-18. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) UTC_OFFSET_MINUTES The minute component of the UTC offset, from 0-59. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) UTC_OFFSET_SECONDS The second component of the UTC offset, from 0-59. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) UTC_OFFSET_SIGN The sign of the UTC offset, -1 (negative) or 1 (positive). (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) UTC_OFFSET_TOTAL_SECONDS The total number of seconds in the UTC offset, from (-18 * 60 * 60) to (18 * 60 * 60). (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) YEAR The proleptic year. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) YEAR_OF_ERA The year of the era.","title":"Inheritors"},{"location":"api/core/io.islandtime.base/-date-time-field/-a-m_-p-m_-o-f_-d-a-y/","text":"core / io.islandtime.base / DateTimeField / AM_PM_OF_DAY AM_PM_OF_DAY (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) AM_PM_OF_DAY AM or PM of the day. 0 ( AM ) or 1 ( PM ).","title":" a m  p m  o f  d a y"},{"location":"api/core/io.islandtime.base/-date-time-field/-a-m_-p-m_-o-f_-d-a-y/#am_pm_of_day","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) AM_PM_OF_DAY AM or PM of the day. 0 ( AM ) or 1 ( PM ).","title":"AM_PM_OF_DAY"},{"location":"api/core/io.islandtime.base/-date-time-field/-d-a-y_-o-f_-m-o-n-t-h/","text":"core / io.islandtime.base / DateTimeField / DAY_OF_MONTH DAY_OF_MONTH (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) DAY_OF_MONTH The day of the month. In the ISO calendar system, this will be from 1-31.","title":" d a y  o f  m o n t h"},{"location":"api/core/io.islandtime.base/-date-time-field/-d-a-y_-o-f_-m-o-n-t-h/#day_of_month","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) DAY_OF_MONTH The day of the month. In the ISO calendar system, this will be from 1-31.","title":"DAY_OF_MONTH"},{"location":"api/core/io.islandtime.base/-date-time-field/-d-a-y_-o-f_-w-e-e-k/","text":"core / io.islandtime.base / DateTimeField / DAY_OF_WEEK DAY_OF_WEEK (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) DAY_OF_WEEK The day of the week, such as Sunday . In the ISO calendar system, this will be from 1 ( Monday ) to 7 ( Sunday ).","title":" d a y  o f  w e e k"},{"location":"api/core/io.islandtime.base/-date-time-field/-d-a-y_-o-f_-w-e-e-k/#day_of_week","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) DAY_OF_WEEK The day of the week, such as Sunday . In the ISO calendar system, this will be from 1 ( Monday ) to 7 ( Sunday ).","title":"DAY_OF_WEEK"},{"location":"api/core/io.islandtime.base/-date-time-field/-d-a-y_-o-f_-y-e-a-r/","text":"core / io.islandtime.base / DateTimeField / DAY_OF_YEAR DAY_OF_YEAR (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) DAY_OF_YEAR The day of the year. In the ISO calendar system, this will be from 1-366.","title":" d a y  o f  y e a r"},{"location":"api/core/io.islandtime.base/-date-time-field/-d-a-y_-o-f_-y-e-a-r/#day_of_year","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) DAY_OF_YEAR The day of the year. In the ISO calendar system, this will be from 1-366.","title":"DAY_OF_YEAR"},{"location":"api/core/io.islandtime.base/-date-time-field/-d-u-r-a-t-i-o-n_-o-f_-h-o-u-r-s/","text":"core / io.islandtime.base / DateTimeField / DURATION_OF_HOURS DURATION_OF_HOURS (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) DURATION_OF_HOURS A duration of hours.","title":" d u r a t i o n  o f  h o u r s"},{"location":"api/core/io.islandtime.base/-date-time-field/-d-u-r-a-t-i-o-n_-o-f_-h-o-u-r-s/#duration_of_hours","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) DURATION_OF_HOURS A duration of hours.","title":"DURATION_OF_HOURS"},{"location":"api/core/io.islandtime.base/-date-time-field/-d-u-r-a-t-i-o-n_-o-f_-m-i-n-u-t-e-s/","text":"core / io.islandtime.base / DateTimeField / DURATION_OF_MINUTES DURATION_OF_MINUTES (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) DURATION_OF_MINUTES A duration of minutes.","title":" d u r a t i o n  o f  m i n u t e s"},{"location":"api/core/io.islandtime.base/-date-time-field/-d-u-r-a-t-i-o-n_-o-f_-m-i-n-u-t-e-s/#duration_of_minutes","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) DURATION_OF_MINUTES A duration of minutes.","title":"DURATION_OF_MINUTES"},{"location":"api/core/io.islandtime.base/-date-time-field/-d-u-r-a-t-i-o-n_-o-f_-s-e-c-o-n-d-s/","text":"core / io.islandtime.base / DateTimeField / DURATION_OF_SECONDS DURATION_OF_SECONDS (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) DURATION_OF_SECONDS A duration of seconds.","title":" d u r a t i o n  o f  s e c o n d s"},{"location":"api/core/io.islandtime.base/-date-time-field/-d-u-r-a-t-i-o-n_-o-f_-s-e-c-o-n-d-s/#duration_of_seconds","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) DURATION_OF_SECONDS A duration of seconds.","title":"DURATION_OF_SECONDS"},{"location":"api/core/io.islandtime.base/-date-time-field/-e-r-a/","text":"core / io.islandtime.base / DateTimeField / ERA ERA (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) ERA The era. In the ISO calendar system, this will be 0 ( BCE ) or 1 ( CE ).","title":" e r a"},{"location":"api/core/io.islandtime.base/-date-time-field/-e-r-a/#era","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) ERA The era. In the ISO calendar system, this will be 0 ( BCE ) or 1 ( CE ).","title":"ERA"},{"location":"api/core/io.islandtime.base/-date-time-field/-h-o-u-r_-o-f_-d-a-y/","text":"core / io.islandtime.base / DateTimeField / HOUR_OF_DAY HOUR_OF_DAY (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) HOUR_OF_DAY The hour of the day, from 0 to 23.","title":" h o u r  o f  d a y"},{"location":"api/core/io.islandtime.base/-date-time-field/-h-o-u-r_-o-f_-d-a-y/#hour_of_day","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) HOUR_OF_DAY The hour of the day, from 0 to 23.","title":"HOUR_OF_DAY"},{"location":"api/core/io.islandtime.base/-date-time-field/-i-s_-u-n-b-o-u-n-d-e-d/","text":"core / io.islandtime.base / DateTimeField / IS_UNBOUNDED IS_UNBOUNDED (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) IS_UNBOUNDED Indicates the presence of the minimum or maximum sentinel value, which should treated as unbounded (in ISO-8601 parlance, \"open\") in the context of an interval. -1 ( true ) or 0 ( false ).","title":" i s  u n b o u n d e d"},{"location":"api/core/io.islandtime.base/-date-time-field/-i-s_-u-n-b-o-u-n-d-e-d/#is_unbounded","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) IS_UNBOUNDED Indicates the presence of the minimum or maximum sentinel value, which should treated as unbounded (in ISO-8601 parlance, \"open\") in the context of an interval. -1 ( true ) or 0 ( false ).","title":"IS_UNBOUNDED"},{"location":"api/core/io.islandtime.base/-date-time-field/-m-i-l-l-i-s-e-c-o-n-d_-o-f_-s-e-c-o-n-d/","text":"core / io.islandtime.base / DateTimeField / MILLISECOND_OF_SECOND MILLISECOND_OF_SECOND (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MILLISECOND_OF_SECOND The millisecond of the second, from 0 to 999.","title":" m i l l i s e c o n d  o f  s e c o n d"},{"location":"api/core/io.islandtime.base/-date-time-field/-m-i-l-l-i-s-e-c-o-n-d_-o-f_-s-e-c-o-n-d/#millisecond_of_second","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MILLISECOND_OF_SECOND The millisecond of the second, from 0 to 999.","title":"MILLISECOND_OF_SECOND"},{"location":"api/core/io.islandtime.base/-date-time-field/-m-i-n-u-t-e_-o-f_-h-o-u-r/","text":"core / io.islandtime.base / DateTimeField / MINUTE_OF_HOUR MINUTE_OF_HOUR (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MINUTE_OF_HOUR The minute of the hour, from 0 to 59.","title":" m i n u t e  o f  h o u r"},{"location":"api/core/io.islandtime.base/-date-time-field/-m-i-n-u-t-e_-o-f_-h-o-u-r/#minute_of_hour","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MINUTE_OF_HOUR The minute of the hour, from 0 to 59.","title":"MINUTE_OF_HOUR"},{"location":"api/core/io.islandtime.base/-date-time-field/-m-o-n-t-h_-o-f_-y-e-a-r/","text":"core / io.islandtime.base / DateTimeField / MONTH_OF_YEAR MONTH_OF_YEAR (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MONTH_OF_YEAR The month of the year, such as January In the ISO calendar system, this will be from 1 ( January ) to 12 ( December ).","title":" m o n t h  o f  y e a r"},{"location":"api/core/io.islandtime.base/-date-time-field/-m-o-n-t-h_-o-f_-y-e-a-r/#month_of_year","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MONTH_OF_YEAR The month of the year, such as January In the ISO calendar system, this will be from 1 ( January ) to 12 ( December ).","title":"MONTH_OF_YEAR"},{"location":"api/core/io.islandtime.base/-date-time-field/-n-a-n-o-s-e-c-o-n-d_-o-f_-s-e-c-o-n-d/","text":"core / io.islandtime.base / DateTimeField / NANOSECOND_OF_SECOND NANOSECOND_OF_SECOND (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) NANOSECOND_OF_SECOND The nanosecond of the second, from 0 to 999,999,999.","title":" n a n o s e c o n d  o f  s e c o n d"},{"location":"api/core/io.islandtime.base/-date-time-field/-n-a-n-o-s-e-c-o-n-d_-o-f_-s-e-c-o-n-d/#nanosecond_of_second","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) NANOSECOND_OF_SECOND The nanosecond of the second, from 0 to 999,999,999.","title":"NANOSECOND_OF_SECOND"},{"location":"api/core/io.islandtime.base/-date-time-field/-p-e-r-i-o-d_-o-f_-d-a-y-s/","text":"core / io.islandtime.base / DateTimeField / PERIOD_OF_DAYS PERIOD_OF_DAYS (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) PERIOD_OF_DAYS A period of days.","title":" p e r i o d  o f  d a y s"},{"location":"api/core/io.islandtime.base/-date-time-field/-p-e-r-i-o-d_-o-f_-d-a-y-s/#period_of_days","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) PERIOD_OF_DAYS A period of days.","title":"PERIOD_OF_DAYS"},{"location":"api/core/io.islandtime.base/-date-time-field/-p-e-r-i-o-d_-o-f_-m-o-n-t-h-s/","text":"core / io.islandtime.base / DateTimeField / PERIOD_OF_MONTHS PERIOD_OF_MONTHS (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) PERIOD_OF_MONTHS A period of months.","title":" p e r i o d  o f  m o n t h s"},{"location":"api/core/io.islandtime.base/-date-time-field/-p-e-r-i-o-d_-o-f_-m-o-n-t-h-s/#period_of_months","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) PERIOD_OF_MONTHS A period of months.","title":"PERIOD_OF_MONTHS"},{"location":"api/core/io.islandtime.base/-date-time-field/-p-e-r-i-o-d_-o-f_-w-e-e-k-s/","text":"core / io.islandtime.base / DateTimeField / PERIOD_OF_WEEKS PERIOD_OF_WEEKS (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) PERIOD_OF_WEEKS A period of weeks.","title":" p e r i o d  o f  w e e k s"},{"location":"api/core/io.islandtime.base/-date-time-field/-p-e-r-i-o-d_-o-f_-w-e-e-k-s/#period_of_weeks","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) PERIOD_OF_WEEKS A period of weeks.","title":"PERIOD_OF_WEEKS"},{"location":"api/core/io.islandtime.base/-date-time-field/-p-e-r-i-o-d_-o-f_-y-e-a-r-s/","text":"core / io.islandtime.base / DateTimeField / PERIOD_OF_YEARS PERIOD_OF_YEARS (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) PERIOD_OF_YEARS A period of years.","title":" p e r i o d  o f  y e a r s"},{"location":"api/core/io.islandtime.base/-date-time-field/-p-e-r-i-o-d_-o-f_-y-e-a-r-s/#period_of_years","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) PERIOD_OF_YEARS A period of years.","title":"PERIOD_OF_YEARS"},{"location":"api/core/io.islandtime.base/-date-time-field/-p-e-r-i-o-d_-s-i-g-n/","text":"core / io.islandtime.base / DateTimeField / PERIOD_SIGN PERIOD_SIGN (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) PERIOD_SIGN The sign of the period, -1 (negative) or 1 (positive).","title":" p e r i o d  s i g n"},{"location":"api/core/io.islandtime.base/-date-time-field/-p-e-r-i-o-d_-s-i-g-n/#period_sign","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) PERIOD_SIGN The sign of the period, -1 (negative) or 1 (positive).","title":"PERIOD_SIGN"},{"location":"api/core/io.islandtime.base/-date-time-field/-s-e-c-o-n-d_-o-f_-m-i-n-u-t-e/","text":"core / io.islandtime.base / DateTimeField / SECOND_OF_MINUTE SECOND_OF_MINUTE (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) SECOND_OF_MINUTE The second of the minute, from 0 to 59.","title":" s e c o n d  o f  m i n u t e"},{"location":"api/core/io.islandtime.base/-date-time-field/-s-e-c-o-n-d_-o-f_-m-i-n-u-t-e/#second_of_minute","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) SECOND_OF_MINUTE The second of the minute, from 0 to 59.","title":"SECOND_OF_MINUTE"},{"location":"api/core/io.islandtime.base/-date-time-field/-u-t-c_-o-f-f-s-e-t_-h-o-u-r-s/","text":"core / io.islandtime.base / DateTimeField / UTC_OFFSET_HOURS UTC_OFFSET_HOURS (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) UTC_OFFSET_HOURS The hour component of the UTC offset, from 0-18.","title":" u t c  o f f s e t  h o u r s"},{"location":"api/core/io.islandtime.base/-date-time-field/-u-t-c_-o-f-f-s-e-t_-h-o-u-r-s/#utc_offset_hours","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) UTC_OFFSET_HOURS The hour component of the UTC offset, from 0-18.","title":"UTC_OFFSET_HOURS"},{"location":"api/core/io.islandtime.base/-date-time-field/-u-t-c_-o-f-f-s-e-t_-m-i-n-u-t-e-s/","text":"core / io.islandtime.base / DateTimeField / UTC_OFFSET_MINUTES UTC_OFFSET_MINUTES (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) UTC_OFFSET_MINUTES The minute component of the UTC offset, from 0-59.","title":" u t c  o f f s e t  m i n u t e s"},{"location":"api/core/io.islandtime.base/-date-time-field/-u-t-c_-o-f-f-s-e-t_-m-i-n-u-t-e-s/#utc_offset_minutes","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) UTC_OFFSET_MINUTES The minute component of the UTC offset, from 0-59.","title":"UTC_OFFSET_MINUTES"},{"location":"api/core/io.islandtime.base/-date-time-field/-u-t-c_-o-f-f-s-e-t_-s-e-c-o-n-d-s/","text":"core / io.islandtime.base / DateTimeField / UTC_OFFSET_SECONDS UTC_OFFSET_SECONDS (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) UTC_OFFSET_SECONDS The second component of the UTC offset, from 0-59.","title":" u t c  o f f s e t  s e c o n d s"},{"location":"api/core/io.islandtime.base/-date-time-field/-u-t-c_-o-f-f-s-e-t_-s-e-c-o-n-d-s/#utc_offset_seconds","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) UTC_OFFSET_SECONDS The second component of the UTC offset, from 0-59.","title":"UTC_OFFSET_SECONDS"},{"location":"api/core/io.islandtime.base/-date-time-field/-u-t-c_-o-f-f-s-e-t_-s-i-g-n/","text":"core / io.islandtime.base / DateTimeField / UTC_OFFSET_SIGN UTC_OFFSET_SIGN (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) UTC_OFFSET_SIGN The sign of the UTC offset, -1 (negative) or 1 (positive).","title":" u t c  o f f s e t  s i g n"},{"location":"api/core/io.islandtime.base/-date-time-field/-u-t-c_-o-f-f-s-e-t_-s-i-g-n/#utc_offset_sign","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) UTC_OFFSET_SIGN The sign of the UTC offset, -1 (negative) or 1 (positive).","title":"UTC_OFFSET_SIGN"},{"location":"api/core/io.islandtime.base/-date-time-field/-u-t-c_-o-f-f-s-e-t_-t-o-t-a-l_-s-e-c-o-n-d-s/","text":"core / io.islandtime.base / DateTimeField / UTC_OFFSET_TOTAL_SECONDS UTC_OFFSET_TOTAL_SECONDS (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) UTC_OFFSET_TOTAL_SECONDS The total number of seconds in the UTC offset, from (-18 * 60 * 60) to (18 * 60 * 60).","title":" u t c  o f f s e t  t o t a l  s e c o n d s"},{"location":"api/core/io.islandtime.base/-date-time-field/-u-t-c_-o-f-f-s-e-t_-t-o-t-a-l_-s-e-c-o-n-d-s/#utc_offset_total_seconds","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) UTC_OFFSET_TOTAL_SECONDS The total number of seconds in the UTC offset, from (-18 * 60 * 60) to (18 * 60 * 60).","title":"UTC_OFFSET_TOTAL_SECONDS"},{"location":"api/core/io.islandtime.base/-date-time-field/-y-e-a-r/","text":"core / io.islandtime.base / DateTimeField / YEAR YEAR (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) YEAR The proleptic year. In the ISO calendar system, positive values indicate years in the current era, a value of 0 is equivalent to 1 BCE, -1 to 2 BCE, and so forth.","title":" y e a r"},{"location":"api/core/io.islandtime.base/-date-time-field/-y-e-a-r/#year","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) YEAR The proleptic year. In the ISO calendar system, positive values indicate years in the current era, a value of 0 is equivalent to 1 BCE, -1 to 2 BCE, and so forth.","title":"YEAR"},{"location":"api/core/io.islandtime.base/-date-time-field/-y-e-a-r_-o-f_-e-r-a/","text":"core / io.islandtime.base / DateTimeField / YEAR_OF_ERA YEAR_OF_ERA (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) YEAR_OF_ERA The year of the era.","title":" y e a r  o f  e r a"},{"location":"api/core/io.islandtime.base/-date-time-field/-y-e-a-r_-o-f_-e-r-a/#year_of_era","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) YEAR_OF_ERA The year of the era.","title":"YEAR_OF_ERA"},{"location":"api/core/io.islandtime.base/-time-point/","text":"core / io.islandtime.base / TimePoint TimePoint (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) interface TimePoint<T> An object that can be placed exactly in time. An implementor of this interface contains enough information to represent an instant in time. As such, any time point can be compared to another on the timeline and duration units can be added or subtracted. Properties Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) additionalNanosecondsSinceUnixEpoch The number of additional nanoseconds on top of secondsSinceUnixEpoch . abstract val additionalNanosecondsSinceUnixEpoch: IntNanoseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) millisecondOfUnixEpoch The millisecond of the Unix epoch. open val millisecondOfUnixEpoch: Long (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) millisecondsSinceUnixEpoch The number of milliseconds since the Unix epoch of 1970-01-01T00:00Z. abstract val millisecondsSinceUnixEpoch: LongMilliseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) nanoOfSecondsSinceUnixEpoch open val ~~nanoOfSecondsSinceUnixEpoch~~: IntNanoseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) nanosecond The nanosecond of the second. open val nanosecond: Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) secondOfUnixEpoch The second of the Unix epoch. open val secondOfUnixEpoch: Long (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) secondsSinceUnixEpoch The number of seconds since the Unix epoch of 1970-01-01T00:00Z. abstract val secondsSinceUnixEpoch: LongSeconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) unixEpochMillisecond open val ~~unixEpochMillisecond~~: Long (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) unixEpochNanoOfSecond open val ~~unixEpochNanoOfSecond~~: Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) unixEpochSecond open val ~~unixEpochSecond~~: Long Functions Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) compareTo Time points can be compared to other time points based on timeline order, but aren't required to implement the Comparable interface since they don't necessarily have a natural order that's consistent with equals. open operator fun compareTo(other: TimePoint <*>): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isSameInstantAs Check if this time point represents the same instant as other . Unlike the equals operator, equality is determined solely by timeline order. open fun isSameInstantAs(other: TimePoint <*>): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) minus abstract operator fun minus(hours: IntHours ): T abstract operator fun minus(hours: LongHours ): T abstract operator fun minus(minutes: IntMinutes ): T abstract operator fun minus(minutes: LongMinutes ): T abstract operator fun minus(seconds: IntSeconds ): T abstract operator fun minus(seconds: LongSeconds ): T abstract operator fun minus(milliseconds: IntMilliseconds ): T abstract operator fun minus(milliseconds: LongMilliseconds ): T abstract operator fun minus(microseconds: IntMicroseconds ): T abstract operator fun minus(microseconds: LongMicroseconds ): T abstract operator fun minus(nanoseconds: IntNanoseconds ): T abstract operator fun minus(nanoseconds: LongNanoseconds ): T (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) plus abstract operator fun plus(hours: IntHours ): T abstract operator fun plus(hours: LongHours ): T abstract operator fun plus(minutes: IntMinutes ): T abstract operator fun plus(minutes: LongMinutes ): T abstract operator fun plus(seconds: IntSeconds ): T abstract operator fun plus(seconds: LongSeconds ): T abstract operator fun plus(milliseconds: IntMilliseconds ): T abstract operator fun plus(milliseconds: LongMilliseconds ): T abstract operator fun plus(microseconds: IntMicroseconds ): T abstract operator fun plus(microseconds: LongMicroseconds ): T abstract operator fun plus(nanoseconds: IntNanoseconds ): T abstract operator fun plus(nanoseconds: LongNanoseconds ): T Companion Object Properties Name Summary TIMELINE_ORDER Compare by timeline order.(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val TIMELINE_ORDER: <ERROR CLASS> (jvm) val TIMELINE_ORDER: Comparator < TimePoint <*>> Inheritors Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) Instant An instant in time with nanosecond precision. class Instant : TimePoint < Instant >, Comparable < Instant > (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) OffsetDateTime A date and time of day with an offset from UTC. class OffsetDateTime : TimePoint < OffsetDateTime > (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) ZonedDateTime A date and time of day in a particular region. class ZonedDateTime : TimePoint < ZonedDateTime >","title":"Index"},{"location":"api/core/io.islandtime.base/-time-point/#timepoint","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) interface TimePoint<T> An object that can be placed exactly in time. An implementor of this interface contains enough information to represent an instant in time. As such, any time point can be compared to another on the timeline and duration units can be added or subtracted.","title":"TimePoint"},{"location":"api/core/io.islandtime.base/-time-point/#properties","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) additionalNanosecondsSinceUnixEpoch The number of additional nanoseconds on top of secondsSinceUnixEpoch . abstract val additionalNanosecondsSinceUnixEpoch: IntNanoseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) millisecondOfUnixEpoch The millisecond of the Unix epoch. open val millisecondOfUnixEpoch: Long (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) millisecondsSinceUnixEpoch The number of milliseconds since the Unix epoch of 1970-01-01T00:00Z. abstract val millisecondsSinceUnixEpoch: LongMilliseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) nanoOfSecondsSinceUnixEpoch open val ~~nanoOfSecondsSinceUnixEpoch~~: IntNanoseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) nanosecond The nanosecond of the second. open val nanosecond: Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) secondOfUnixEpoch The second of the Unix epoch. open val secondOfUnixEpoch: Long (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) secondsSinceUnixEpoch The number of seconds since the Unix epoch of 1970-01-01T00:00Z. abstract val secondsSinceUnixEpoch: LongSeconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) unixEpochMillisecond open val ~~unixEpochMillisecond~~: Long (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) unixEpochNanoOfSecond open val ~~unixEpochNanoOfSecond~~: Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) unixEpochSecond open val ~~unixEpochSecond~~: Long","title":"Properties"},{"location":"api/core/io.islandtime.base/-time-point/#functions","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) compareTo Time points can be compared to other time points based on timeline order, but aren't required to implement the Comparable interface since they don't necessarily have a natural order that's consistent with equals. open operator fun compareTo(other: TimePoint <*>): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isSameInstantAs Check if this time point represents the same instant as other . Unlike the equals operator, equality is determined solely by timeline order. open fun isSameInstantAs(other: TimePoint <*>): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) minus abstract operator fun minus(hours: IntHours ): T abstract operator fun minus(hours: LongHours ): T abstract operator fun minus(minutes: IntMinutes ): T abstract operator fun minus(minutes: LongMinutes ): T abstract operator fun minus(seconds: IntSeconds ): T abstract operator fun minus(seconds: LongSeconds ): T abstract operator fun minus(milliseconds: IntMilliseconds ): T abstract operator fun minus(milliseconds: LongMilliseconds ): T abstract operator fun minus(microseconds: IntMicroseconds ): T abstract operator fun minus(microseconds: LongMicroseconds ): T abstract operator fun minus(nanoseconds: IntNanoseconds ): T abstract operator fun minus(nanoseconds: LongNanoseconds ): T (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) plus abstract operator fun plus(hours: IntHours ): T abstract operator fun plus(hours: LongHours ): T abstract operator fun plus(minutes: IntMinutes ): T abstract operator fun plus(minutes: LongMinutes ): T abstract operator fun plus(seconds: IntSeconds ): T abstract operator fun plus(seconds: LongSeconds ): T abstract operator fun plus(milliseconds: IntMilliseconds ): T abstract operator fun plus(milliseconds: LongMilliseconds ): T abstract operator fun plus(microseconds: IntMicroseconds ): T abstract operator fun plus(microseconds: LongMicroseconds ): T abstract operator fun plus(nanoseconds: IntNanoseconds ): T abstract operator fun plus(nanoseconds: LongNanoseconds ): T","title":"Functions"},{"location":"api/core/io.islandtime.base/-time-point/#companion-object-properties","text":"Name Summary TIMELINE_ORDER Compare by timeline order.(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val TIMELINE_ORDER: <ERROR CLASS> (jvm) val TIMELINE_ORDER: Comparator < TimePoint <*>>","title":"Companion Object Properties"},{"location":"api/core/io.islandtime.base/-time-point/#inheritors","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) Instant An instant in time with nanosecond precision. class Instant : TimePoint < Instant >, Comparable < Instant > (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) OffsetDateTime A date and time of day with an offset from UTC. class OffsetDateTime : TimePoint < OffsetDateTime > (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) ZonedDateTime A date and time of day in a particular region. class ZonedDateTime : TimePoint < ZonedDateTime >","title":"Inheritors"},{"location":"api/core/io.islandtime.base/-time-point/-t-i-m-e-l-i-n-e_-o-r-d-e-r/","text":"core / io.islandtime.base / TimePoint / TIMELINE_ORDER TIMELINE_ORDER (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val TIMELINE_ORDER: <ERROR CLASS> (jvm) val TIMELINE_ORDER: Comparator < TimePoint <*>> Compare by timeline order.","title":" t i m e l i n e  o r d e r"},{"location":"api/core/io.islandtime.base/-time-point/-t-i-m-e-l-i-n-e_-o-r-d-e-r/#timeline_order","text":"(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val TIMELINE_ORDER: <ERROR CLASS> (jvm) val TIMELINE_ORDER: Comparator < TimePoint <*>> Compare by timeline order.","title":"TIMELINE_ORDER"},{"location":"api/core/io.islandtime.base/-time-point/additional-nanoseconds-since-unix-epoch/","text":"core / io.islandtime.base / TimePoint / additionalNanosecondsSinceUnixEpoch additionalNanosecondsSinceUnixEpoch (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract val additionalNanosecondsSinceUnixEpoch: IntNanoseconds The number of additional nanoseconds on top of secondsSinceUnixEpoch .","title":"Additional nanoseconds since unix epoch"},{"location":"api/core/io.islandtime.base/-time-point/additional-nanoseconds-since-unix-epoch/#additionalnanosecondssinceunixepoch","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract val additionalNanosecondsSinceUnixEpoch: IntNanoseconds The number of additional nanoseconds on top of secondsSinceUnixEpoch .","title":"additionalNanosecondsSinceUnixEpoch"},{"location":"api/core/io.islandtime.base/-time-point/compare-to/","text":"core / io.islandtime.base / TimePoint / compareTo compareTo (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) open operator fun compareTo(other: TimePoint <*>): Int Time points can be compared to other time points based on timeline order, but aren't required to implement the Comparable interface since they don't necessarily have a natural order that's consistent with equals.","title":"Compare to"},{"location":"api/core/io.islandtime.base/-time-point/compare-to/#compareto","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) open operator fun compareTo(other: TimePoint <*>): Int Time points can be compared to other time points based on timeline order, but aren't required to implement the Comparable interface since they don't necessarily have a natural order that's consistent with equals.","title":"compareTo"},{"location":"api/core/io.islandtime.base/-time-point/is-same-instant-as/","text":"core / io.islandtime.base / TimePoint / isSameInstantAs isSameInstantAs (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) open fun isSameInstantAs(other: TimePoint <*>): Boolean Check if this time point represents the same instant as other . Unlike the equals operator, equality is determined solely by timeline order.","title":"Is same instant as"},{"location":"api/core/io.islandtime.base/-time-point/is-same-instant-as/#issameinstantas","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) open fun isSameInstantAs(other: TimePoint <*>): Boolean Check if this time point represents the same instant as other . Unlike the equals operator, equality is determined solely by timeline order.","title":"isSameInstantAs"},{"location":"api/core/io.islandtime.base/-time-point/millisecond-of-unix-epoch/","text":"core / io.islandtime.base / TimePoint / millisecondOfUnixEpoch millisecondOfUnixEpoch (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) open val millisecondOfUnixEpoch: Long The millisecond of the Unix epoch.","title":"Millisecond of unix epoch"},{"location":"api/core/io.islandtime.base/-time-point/millisecond-of-unix-epoch/#millisecondofunixepoch","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) open val millisecondOfUnixEpoch: Long The millisecond of the Unix epoch.","title":"millisecondOfUnixEpoch"},{"location":"api/core/io.islandtime.base/-time-point/milliseconds-since-unix-epoch/","text":"core / io.islandtime.base / TimePoint / millisecondsSinceUnixEpoch millisecondsSinceUnixEpoch (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract val millisecondsSinceUnixEpoch: LongMilliseconds The number of milliseconds since the Unix epoch of 1970-01-01T00:00Z.","title":"Milliseconds since unix epoch"},{"location":"api/core/io.islandtime.base/-time-point/milliseconds-since-unix-epoch/#millisecondssinceunixepoch","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract val millisecondsSinceUnixEpoch: LongMilliseconds The number of milliseconds since the Unix epoch of 1970-01-01T00:00Z.","title":"millisecondsSinceUnixEpoch"},{"location":"api/core/io.islandtime.base/-time-point/minus/","text":"core / io.islandtime.base / TimePoint / minus minus (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract operator fun minus(hours: IntHours ): T abstract operator fun minus(hours: LongHours ): T abstract operator fun minus(minutes: IntMinutes ): T abstract operator fun minus(minutes: LongMinutes ): T abstract operator fun minus(seconds: IntSeconds ): T abstract operator fun minus(seconds: LongSeconds ): T abstract operator fun minus(milliseconds: IntMilliseconds ): T abstract operator fun minus(milliseconds: LongMilliseconds ): T abstract operator fun minus(microseconds: IntMicroseconds ): T abstract operator fun minus(microseconds: LongMicroseconds ): T abstract operator fun minus(nanoseconds: IntNanoseconds ): T abstract operator fun minus(nanoseconds: LongNanoseconds ): T","title":"Minus"},{"location":"api/core/io.islandtime.base/-time-point/minus/#minus","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract operator fun minus(hours: IntHours ): T abstract operator fun minus(hours: LongHours ): T abstract operator fun minus(minutes: IntMinutes ): T abstract operator fun minus(minutes: LongMinutes ): T abstract operator fun minus(seconds: IntSeconds ): T abstract operator fun minus(seconds: LongSeconds ): T abstract operator fun minus(milliseconds: IntMilliseconds ): T abstract operator fun minus(milliseconds: LongMilliseconds ): T abstract operator fun minus(microseconds: IntMicroseconds ): T abstract operator fun minus(microseconds: LongMicroseconds ): T abstract operator fun minus(nanoseconds: IntNanoseconds ): T abstract operator fun minus(nanoseconds: LongNanoseconds ): T","title":"minus"},{"location":"api/core/io.islandtime.base/-time-point/nano-of-seconds-since-unix-epoch/","text":"core / io.islandtime.base / TimePoint / nanoOfSecondsSinceUnixEpoch nanoOfSecondsSinceUnixEpoch (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) open val ~~nanoOfSecondsSinceUnixEpoch~~: IntNanoseconds Deprecated: Use additionalNanosecondsSinceUnixEpoch instead.","title":"Nano of seconds since unix epoch"},{"location":"api/core/io.islandtime.base/-time-point/nano-of-seconds-since-unix-epoch/#nanoofsecondssinceunixepoch","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) open val ~~nanoOfSecondsSinceUnixEpoch~~: IntNanoseconds Deprecated: Use additionalNanosecondsSinceUnixEpoch instead.","title":"nanoOfSecondsSinceUnixEpoch"},{"location":"api/core/io.islandtime.base/-time-point/nanosecond/","text":"core / io.islandtime.base / TimePoint / nanosecond nanosecond (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) open val nanosecond: Int The nanosecond of the second.","title":"Nanosecond"},{"location":"api/core/io.islandtime.base/-time-point/nanosecond/#nanosecond","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) open val nanosecond: Int The nanosecond of the second.","title":"nanosecond"},{"location":"api/core/io.islandtime.base/-time-point/plus/","text":"core / io.islandtime.base / TimePoint / plus plus (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract operator fun plus(hours: IntHours ): T abstract operator fun plus(hours: LongHours ): T abstract operator fun plus(minutes: IntMinutes ): T abstract operator fun plus(minutes: LongMinutes ): T abstract operator fun plus(seconds: IntSeconds ): T abstract operator fun plus(seconds: LongSeconds ): T abstract operator fun plus(milliseconds: IntMilliseconds ): T abstract operator fun plus(milliseconds: LongMilliseconds ): T abstract operator fun plus(microseconds: IntMicroseconds ): T abstract operator fun plus(microseconds: LongMicroseconds ): T abstract operator fun plus(nanoseconds: IntNanoseconds ): T abstract operator fun plus(nanoseconds: LongNanoseconds ): T","title":"Plus"},{"location":"api/core/io.islandtime.base/-time-point/plus/#plus","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract operator fun plus(hours: IntHours ): T abstract operator fun plus(hours: LongHours ): T abstract operator fun plus(minutes: IntMinutes ): T abstract operator fun plus(minutes: LongMinutes ): T abstract operator fun plus(seconds: IntSeconds ): T abstract operator fun plus(seconds: LongSeconds ): T abstract operator fun plus(milliseconds: IntMilliseconds ): T abstract operator fun plus(milliseconds: LongMilliseconds ): T abstract operator fun plus(microseconds: IntMicroseconds ): T abstract operator fun plus(microseconds: LongMicroseconds ): T abstract operator fun plus(nanoseconds: IntNanoseconds ): T abstract operator fun plus(nanoseconds: LongNanoseconds ): T","title":"plus"},{"location":"api/core/io.islandtime.base/-time-point/second-of-unix-epoch/","text":"core / io.islandtime.base / TimePoint / secondOfUnixEpoch secondOfUnixEpoch (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) open val secondOfUnixEpoch: Long The second of the Unix epoch.","title":"Second of unix epoch"},{"location":"api/core/io.islandtime.base/-time-point/second-of-unix-epoch/#secondofunixepoch","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) open val secondOfUnixEpoch: Long The second of the Unix epoch.","title":"secondOfUnixEpoch"},{"location":"api/core/io.islandtime.base/-time-point/seconds-since-unix-epoch/","text":"core / io.islandtime.base / TimePoint / secondsSinceUnixEpoch secondsSinceUnixEpoch (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract val secondsSinceUnixEpoch: LongSeconds The number of seconds since the Unix epoch of 1970-01-01T00:00Z.","title":"Seconds since unix epoch"},{"location":"api/core/io.islandtime.base/-time-point/seconds-since-unix-epoch/#secondssinceunixepoch","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract val secondsSinceUnixEpoch: LongSeconds The number of seconds since the Unix epoch of 1970-01-01T00:00Z.","title":"secondsSinceUnixEpoch"},{"location":"api/core/io.islandtime.base/-time-point/unix-epoch-millisecond/","text":"core / io.islandtime.base / TimePoint / unixEpochMillisecond unixEpochMillisecond (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) open val ~~unixEpochMillisecond~~: Long Deprecated: Use millisecondOfUnixEpoch instead.","title":"Unix epoch millisecond"},{"location":"api/core/io.islandtime.base/-time-point/unix-epoch-millisecond/#unixepochmillisecond","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) open val ~~unixEpochMillisecond~~: Long Deprecated: Use millisecondOfUnixEpoch instead.","title":"unixEpochMillisecond"},{"location":"api/core/io.islandtime.base/-time-point/unix-epoch-nano-of-second/","text":"core / io.islandtime.base / TimePoint / unixEpochNanoOfSecond unixEpochNanoOfSecond (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) open val ~~unixEpochNanoOfSecond~~: Int Deprecated: Use nanosecond instead.","title":"Unix epoch nano of second"},{"location":"api/core/io.islandtime.base/-time-point/unix-epoch-nano-of-second/#unixepochnanoofsecond","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) open val ~~unixEpochNanoOfSecond~~: Int Deprecated: Use nanosecond instead.","title":"unixEpochNanoOfSecond"},{"location":"api/core/io.islandtime.base/-time-point/unix-epoch-second/","text":"core / io.islandtime.base / TimePoint / unixEpochSecond unixEpochSecond (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) open val ~~unixEpochSecond~~: Long Deprecated: Use secondOfUnixEpoch instead.","title":"Unix epoch second"},{"location":"api/core/io.islandtime.base/-time-point/unix-epoch-second/#unixepochsecond","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) open val ~~unixEpochSecond~~: Long Deprecated: Use secondOfUnixEpoch instead.","title":"unixEpochSecond"},{"location":"api/core/io.islandtime.calendar/","text":"core / io.islandtime.calendar Package io.islandtime.calendar Platform-independent calendar properties. Types Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) WeekSettings Week-related calendar settings. data class WeekSettings","title":"Index"},{"location":"api/core/io.islandtime.calendar/#package-ioislandtimecalendar","text":"Platform-independent calendar properties.","title":"Package io.islandtime.calendar"},{"location":"api/core/io.islandtime.calendar/#types","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) WeekSettings Week-related calendar settings. data class WeekSettings","title":"Types"},{"location":"api/core/io.islandtime.calendar/-week-settings/","text":"core / io.islandtime.calendar / WeekSettings WeekSettings (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) data class WeekSettings Week-related calendar settings. Constructors Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init> Week-related calendar settings. <init>(firstDayOfWeek: DayOfWeek , minimumDaysInFirstWeek: Int ) Properties Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) firstDayOfWeek The first day of the week. val firstDayOfWeek: DayOfWeek (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) minimumDaysInFirstWeek The minimum number of days required in the first week of the year. val minimumDaysInFirstWeek: Int Companion Object Properties Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) ISO The ISO-8601 calendar system's definition of a week, where the first day of the week is Monday and the first week of the year has a minimum of 4 days. val ISO: WeekSettings (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) SUNDAY_START A definition of a week that starts on Sunday with a minimum of 1 day in the first week of the year. val SUNDAY_START: WeekSettings Companion Object Functions Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) systemDefault The definition of a week according to the current system settings. This may differ from the definition associated with the default locale on platforms that allow this to be customized, such as iOS and macOS. fun systemDefault(): WeekSettings","title":"Index"},{"location":"api/core/io.islandtime.calendar/-week-settings/#weeksettings","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) data class WeekSettings Week-related calendar settings.","title":"WeekSettings"},{"location":"api/core/io.islandtime.calendar/-week-settings/#constructors","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init> Week-related calendar settings. <init>(firstDayOfWeek: DayOfWeek , minimumDaysInFirstWeek: Int )","title":"Constructors"},{"location":"api/core/io.islandtime.calendar/-week-settings/#properties","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) firstDayOfWeek The first day of the week. val firstDayOfWeek: DayOfWeek (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) minimumDaysInFirstWeek The minimum number of days required in the first week of the year. val minimumDaysInFirstWeek: Int","title":"Properties"},{"location":"api/core/io.islandtime.calendar/-week-settings/#companion-object-properties","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) ISO The ISO-8601 calendar system's definition of a week, where the first day of the week is Monday and the first week of the year has a minimum of 4 days. val ISO: WeekSettings (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) SUNDAY_START A definition of a week that starts on Sunday with a minimum of 1 day in the first week of the year. val SUNDAY_START: WeekSettings","title":"Companion Object Properties"},{"location":"api/core/io.islandtime.calendar/-week-settings/#companion-object-functions","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) systemDefault The definition of a week according to the current system settings. This may differ from the definition associated with the default locale on platforms that allow this to be customized, such as iOS and macOS. fun systemDefault(): WeekSettings","title":"Companion Object Functions"},{"location":"api/core/io.islandtime.calendar/-week-settings/-i-s-o/","text":"core / io.islandtime.calendar / WeekSettings / ISO ISO (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val ISO: WeekSettings The ISO-8601 calendar system's definition of a week, where the first day of the week is Monday and the first week of the year has a minimum of 4 days.","title":" i s o"},{"location":"api/core/io.islandtime.calendar/-week-settings/-i-s-o/#iso","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val ISO: WeekSettings The ISO-8601 calendar system's definition of a week, where the first day of the week is Monday and the first week of the year has a minimum of 4 days.","title":"ISO"},{"location":"api/core/io.islandtime.calendar/-week-settings/-init-/","text":"core / io.islandtime.calendar / WeekSettings / <init> <init> (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init>(firstDayOfWeek: DayOfWeek , minimumDaysInFirstWeek: Int ) Week-related calendar settings.","title":" init "},{"location":"api/core/io.islandtime.calendar/-week-settings/-init-/#init","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init>(firstDayOfWeek: DayOfWeek , minimumDaysInFirstWeek: Int ) Week-related calendar settings.","title":"&lt;init&gt;"},{"location":"api/core/io.islandtime.calendar/-week-settings/-s-u-n-d-a-y_-s-t-a-r-t/","text":"core / io.islandtime.calendar / WeekSettings / SUNDAY_START SUNDAY_START (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val SUNDAY_START: WeekSettings A definition of a week that starts on Sunday with a minimum of 1 day in the first week of the year.","title":" s u n d a y  s t a r t"},{"location":"api/core/io.islandtime.calendar/-week-settings/-s-u-n-d-a-y_-s-t-a-r-t/#sunday_start","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val SUNDAY_START: WeekSettings A definition of a week that starts on Sunday with a minimum of 1 day in the first week of the year.","title":"SUNDAY_START"},{"location":"api/core/io.islandtime.calendar/-week-settings/first-day-of-week/","text":"core / io.islandtime.calendar / WeekSettings / firstDayOfWeek firstDayOfWeek (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val firstDayOfWeek: DayOfWeek The first day of the week. Property firstDayOfWeek - The first day of the week.","title":"First day of week"},{"location":"api/core/io.islandtime.calendar/-week-settings/first-day-of-week/#firstdayofweek","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val firstDayOfWeek: DayOfWeek The first day of the week.","title":"firstDayOfWeek"},{"location":"api/core/io.islandtime.calendar/-week-settings/first-day-of-week/#property","text":"firstDayOfWeek - The first day of the week.","title":"Property"},{"location":"api/core/io.islandtime.calendar/-week-settings/minimum-days-in-first-week/","text":"core / io.islandtime.calendar / WeekSettings / minimumDaysInFirstWeek minimumDaysInFirstWeek (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val minimumDaysInFirstWeek: Int The minimum number of days required in the first week of the year. Property minimumDaysInFirstWeek - The minimum number of days required in the first week of the year.","title":"Minimum days in first week"},{"location":"api/core/io.islandtime.calendar/-week-settings/minimum-days-in-first-week/#minimumdaysinfirstweek","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val minimumDaysInFirstWeek: Int The minimum number of days required in the first week of the year.","title":"minimumDaysInFirstWeek"},{"location":"api/core/io.islandtime.calendar/-week-settings/minimum-days-in-first-week/#property","text":"minimumDaysInFirstWeek - The minimum number of days required in the first week of the year.","title":"Property"},{"location":"api/core/io.islandtime.calendar/-week-settings/system-default/","text":"core / io.islandtime.calendar / WeekSettings / systemDefault systemDefault (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun systemDefault(): WeekSettings The definition of a week according to the current system settings. This may differ from the definition associated with the default locale on platforms that allow this to be customized, such as iOS and macOS.","title":"System default"},{"location":"api/core/io.islandtime.calendar/-week-settings/system-default/#systemdefault","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun systemDefault(): WeekSettings The definition of a week according to the current system settings. This may differ from the definition associated with the default locale on platforms that allow this to be customized, such as iOS and macOS.","title":"systemDefault"},{"location":"api/core/io.islandtime.clock/","text":"core / io.islandtime.clock Package io.islandtime.clock The default clock implementation, providing access to the system clock at millisecond precision and a FixedClock for testing purposes. Types Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) Clock A time source. interface Clock (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) FixedClock A clock with fixed time, suitable for testing. class FixedClock : Clock (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) SystemClock A clock that provides the time from the current system. class SystemClock : Clock Functions Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) FixedClock fun FixedClock(days: LongDays , zone: TimeZone = TimeZone.UTC): FixedClock fun FixedClock(days: IntDays , zone: TimeZone = TimeZone.UTC): FixedClock fun FixedClock(hours: LongHours , zone: TimeZone = TimeZone.UTC): FixedClock fun FixedClock(hours: IntHours , zone: TimeZone = TimeZone.UTC): FixedClock fun FixedClock(minutes: LongMinutes , zone: TimeZone = TimeZone.UTC): FixedClock fun FixedClock(minutes: IntMinutes , zone: TimeZone = TimeZone.UTC): FixedClock fun FixedClock(seconds: LongSeconds , zone: TimeZone = TimeZone.UTC): FixedClock fun FixedClock(seconds: IntSeconds , zone: TimeZone = TimeZone.UTC): FixedClock fun FixedClock(milliseconds: IntMilliseconds , zone: TimeZone = TimeZone.UTC): FixedClock Companion Object Functions Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) now Get the current Instant from the system clock. fun Instant.Companion.now(): Instant Get the current Instant from the specified clock. fun Instant.Companion.now(clock: Clock ): Instant Get the current Year from the system clock. fun Year.Companion.now(): Year Get the current Year from the specified clock. fun Year.Companion.now(clock: Clock ): Year Get the current YearMonth from the system clock. fun YearMonth.Companion.now(): YearMonth Get the current YearMonth from the specified clock. fun YearMonth.Companion.now(clock: Clock ): YearMonth Get the current Date from the system clock. fun Date.Companion.now(): Date Get the current Date from the specified clock. fun Date.Companion.now(clock: Clock ): Date Get the current DateTime from the system clock. fun DateTime.Companion.now(): DateTime Get the current DateTime from the specified clock. fun DateTime.Companion.now(clock: Clock ): DateTime Get the current OffsetDateTime from the system clock. fun OffsetDateTime.Companion.now(): OffsetDateTime Get the current OffsetDateTime from the specified clock. fun OffsetDateTime.Companion.now(clock: Clock ): OffsetDateTime Get the current OffsetTime from the system clock. fun OffsetTime.Companion.now(): OffsetTime Get the current OffsetTime from the specified clock. fun OffsetTime.Companion.now(clock: Clock ): OffsetTime Get the current Time from the system clock. fun Time.Companion.now(): Time Get the current Time from the specified clock. fun Time.Companion.now(clock: Clock ): Time Get the current ZonedDateTime from the system clock. fun ZonedDateTime.Companion.now(): ZonedDateTime Get the current ZonedDateTime from the specified clock. fun ZonedDateTime.Companion.now(clock: Clock ): ZonedDateTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) systemDefault Get the system clock's current TimeZone . fun TimeZone.Companion.systemDefault(): TimeZone","title":"Index"},{"location":"api/core/io.islandtime.clock/#package-ioislandtimeclock","text":"The default clock implementation, providing access to the system clock at millisecond precision and a FixedClock for testing purposes.","title":"Package io.islandtime.clock"},{"location":"api/core/io.islandtime.clock/#types","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) Clock A time source. interface Clock (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) FixedClock A clock with fixed time, suitable for testing. class FixedClock : Clock (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) SystemClock A clock that provides the time from the current system. class SystemClock : Clock","title":"Types"},{"location":"api/core/io.islandtime.clock/#functions","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) FixedClock fun FixedClock(days: LongDays , zone: TimeZone = TimeZone.UTC): FixedClock fun FixedClock(days: IntDays , zone: TimeZone = TimeZone.UTC): FixedClock fun FixedClock(hours: LongHours , zone: TimeZone = TimeZone.UTC): FixedClock fun FixedClock(hours: IntHours , zone: TimeZone = TimeZone.UTC): FixedClock fun FixedClock(minutes: LongMinutes , zone: TimeZone = TimeZone.UTC): FixedClock fun FixedClock(minutes: IntMinutes , zone: TimeZone = TimeZone.UTC): FixedClock fun FixedClock(seconds: LongSeconds , zone: TimeZone = TimeZone.UTC): FixedClock fun FixedClock(seconds: IntSeconds , zone: TimeZone = TimeZone.UTC): FixedClock fun FixedClock(milliseconds: IntMilliseconds , zone: TimeZone = TimeZone.UTC): FixedClock","title":"Functions"},{"location":"api/core/io.islandtime.clock/#companion-object-functions","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) now Get the current Instant from the system clock. fun Instant.Companion.now(): Instant Get the current Instant from the specified clock. fun Instant.Companion.now(clock: Clock ): Instant Get the current Year from the system clock. fun Year.Companion.now(): Year Get the current Year from the specified clock. fun Year.Companion.now(clock: Clock ): Year Get the current YearMonth from the system clock. fun YearMonth.Companion.now(): YearMonth Get the current YearMonth from the specified clock. fun YearMonth.Companion.now(clock: Clock ): YearMonth Get the current Date from the system clock. fun Date.Companion.now(): Date Get the current Date from the specified clock. fun Date.Companion.now(clock: Clock ): Date Get the current DateTime from the system clock. fun DateTime.Companion.now(): DateTime Get the current DateTime from the specified clock. fun DateTime.Companion.now(clock: Clock ): DateTime Get the current OffsetDateTime from the system clock. fun OffsetDateTime.Companion.now(): OffsetDateTime Get the current OffsetDateTime from the specified clock. fun OffsetDateTime.Companion.now(clock: Clock ): OffsetDateTime Get the current OffsetTime from the system clock. fun OffsetTime.Companion.now(): OffsetTime Get the current OffsetTime from the specified clock. fun OffsetTime.Companion.now(clock: Clock ): OffsetTime Get the current Time from the system clock. fun Time.Companion.now(): Time Get the current Time from the specified clock. fun Time.Companion.now(clock: Clock ): Time Get the current ZonedDateTime from the system clock. fun ZonedDateTime.Companion.now(): ZonedDateTime Get the current ZonedDateTime from the specified clock. fun ZonedDateTime.Companion.now(clock: Clock ): ZonedDateTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) systemDefault Get the system clock's current TimeZone . fun TimeZone.Companion.systemDefault(): TimeZone","title":"Companion Object Functions"},{"location":"api/core/io.islandtime.clock/-fixed-clock/","text":"core / io.islandtime.clock / FixedClock FixedClock (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun FixedClock(days: LongDays , zone: TimeZone = TimeZone.UTC): FixedClock fun FixedClock(days: IntDays , zone: TimeZone = TimeZone.UTC): FixedClock fun FixedClock(hours: LongHours , zone: TimeZone = TimeZone.UTC): FixedClock fun FixedClock(hours: IntHours , zone: TimeZone = TimeZone.UTC): FixedClock fun FixedClock(minutes: LongMinutes , zone: TimeZone = TimeZone.UTC): FixedClock fun FixedClock(minutes: IntMinutes , zone: TimeZone = TimeZone.UTC): FixedClock fun FixedClock(seconds: LongSeconds , zone: TimeZone = TimeZone.UTC): FixedClock fun FixedClock(seconds: IntSeconds , zone: TimeZone = TimeZone.UTC): FixedClock fun FixedClock(milliseconds: IntMilliseconds , zone: TimeZone = TimeZone.UTC): FixedClock","title":" fixed clock"},{"location":"api/core/io.islandtime.clock/-fixed-clock/#fixedclock","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun FixedClock(days: LongDays , zone: TimeZone = TimeZone.UTC): FixedClock fun FixedClock(days: IntDays , zone: TimeZone = TimeZone.UTC): FixedClock fun FixedClock(hours: LongHours , zone: TimeZone = TimeZone.UTC): FixedClock fun FixedClock(hours: IntHours , zone: TimeZone = TimeZone.UTC): FixedClock fun FixedClock(minutes: LongMinutes , zone: TimeZone = TimeZone.UTC): FixedClock fun FixedClock(minutes: IntMinutes , zone: TimeZone = TimeZone.UTC): FixedClock fun FixedClock(seconds: LongSeconds , zone: TimeZone = TimeZone.UTC): FixedClock fun FixedClock(seconds: IntSeconds , zone: TimeZone = TimeZone.UTC): FixedClock fun FixedClock(milliseconds: IntMilliseconds , zone: TimeZone = TimeZone.UTC): FixedClock","title":"FixedClock"},{"location":"api/core/io.islandtime.clock/now/","text":"core / io.islandtime.clock / now now (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Instant.Companion.now(): Instant Get the current Instant from the system clock. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Instant.Companion.now(clock: Clock ): Instant Get the current Instant from the specified clock. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Year.Companion.now(): Year Get the current Year from the system clock. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Year.Companion.now(clock: Clock ): Year Get the current Year from the specified clock. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun YearMonth.Companion.now(): YearMonth Get the current YearMonth from the system clock. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun YearMonth.Companion.now(clock: Clock ): YearMonth Get the current YearMonth from the specified clock. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Date.Companion.now(): Date Get the current Date from the system clock. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Date.Companion.now(clock: Clock ): Date Get the current Date from the specified clock. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateTime.Companion.now(): DateTime Get the current DateTime from the system clock. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateTime.Companion.now(clock: Clock ): DateTime Get the current DateTime from the specified clock. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun OffsetDateTime.Companion.now(): OffsetDateTime Get the current OffsetDateTime from the system clock. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun OffsetDateTime.Companion.now(clock: Clock ): OffsetDateTime Get the current OffsetDateTime from the specified clock. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun OffsetTime.Companion.now(): OffsetTime Get the current OffsetTime from the system clock. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun OffsetTime.Companion.now(clock: Clock ): OffsetTime Get the current OffsetTime from the specified clock. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Time.Companion.now(): Time Get the current Time from the system clock. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Time.Companion.now(clock: Clock ): Time Get the current Time from the specified clock. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun ZonedDateTime.Companion.now(): ZonedDateTime Get the current ZonedDateTime from the system clock. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun ZonedDateTime.Companion.now(clock: Clock ): ZonedDateTime Get the current ZonedDateTime from the specified clock.","title":"Now"},{"location":"api/core/io.islandtime.clock/now/#now","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Instant.Companion.now(): Instant Get the current Instant from the system clock. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Instant.Companion.now(clock: Clock ): Instant Get the current Instant from the specified clock. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Year.Companion.now(): Year Get the current Year from the system clock. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Year.Companion.now(clock: Clock ): Year Get the current Year from the specified clock. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun YearMonth.Companion.now(): YearMonth Get the current YearMonth from the system clock. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun YearMonth.Companion.now(clock: Clock ): YearMonth Get the current YearMonth from the specified clock. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Date.Companion.now(): Date Get the current Date from the system clock. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Date.Companion.now(clock: Clock ): Date Get the current Date from the specified clock. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateTime.Companion.now(): DateTime Get the current DateTime from the system clock. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateTime.Companion.now(clock: Clock ): DateTime Get the current DateTime from the specified clock. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun OffsetDateTime.Companion.now(): OffsetDateTime Get the current OffsetDateTime from the system clock. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun OffsetDateTime.Companion.now(clock: Clock ): OffsetDateTime Get the current OffsetDateTime from the specified clock. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun OffsetTime.Companion.now(): OffsetTime Get the current OffsetTime from the system clock. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun OffsetTime.Companion.now(clock: Clock ): OffsetTime Get the current OffsetTime from the specified clock. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Time.Companion.now(): Time Get the current Time from the system clock. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Time.Companion.now(clock: Clock ): Time Get the current Time from the specified clock. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun ZonedDateTime.Companion.now(): ZonedDateTime Get the current ZonedDateTime from the system clock. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun ZonedDateTime.Companion.now(clock: Clock ): ZonedDateTime Get the current ZonedDateTime from the specified clock.","title":"now"},{"location":"api/core/io.islandtime.clock/system-default/","text":"core / io.islandtime.clock / systemDefault systemDefault (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun TimeZone.Companion.systemDefault(): TimeZone Get the system clock's current TimeZone .","title":"System default"},{"location":"api/core/io.islandtime.clock/system-default/#systemdefault","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun TimeZone.Companion.systemDefault(): TimeZone Get the system clock's current TimeZone .","title":"systemDefault"},{"location":"api/core/io.islandtime.clock/-clock/","text":"core / io.islandtime.clock / Clock Clock (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) interface Clock A time source. Properties Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) zone The clock's time zone. abstract val zone: TimeZone Functions Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) instant Get the current Instant . open fun instant(): Instant (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) read Get the current number of milliseconds since the Unix epoch of 1970-01-01T00:00 in UTC. abstract fun read(): LongMilliseconds Inheritors Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) FixedClock A clock with fixed time, suitable for testing. class FixedClock : Clock (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) SystemClock A clock that provides the time from the current system. class SystemClock : Clock","title":"Index"},{"location":"api/core/io.islandtime.clock/-clock/#clock","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) interface Clock A time source.","title":"Clock"},{"location":"api/core/io.islandtime.clock/-clock/#properties","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) zone The clock's time zone. abstract val zone: TimeZone","title":"Properties"},{"location":"api/core/io.islandtime.clock/-clock/#functions","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) instant Get the current Instant . open fun instant(): Instant (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) read Get the current number of milliseconds since the Unix epoch of 1970-01-01T00:00 in UTC. abstract fun read(): LongMilliseconds","title":"Functions"},{"location":"api/core/io.islandtime.clock/-clock/#inheritors","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) FixedClock A clock with fixed time, suitable for testing. class FixedClock : Clock (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) SystemClock A clock that provides the time from the current system. class SystemClock : Clock","title":"Inheritors"},{"location":"api/core/io.islandtime.clock/-clock/instant/","text":"core / io.islandtime.clock / Clock / instant instant (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) open fun instant(): Instant Get the current Instant .","title":"Instant"},{"location":"api/core/io.islandtime.clock/-clock/instant/#instant","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) open fun instant(): Instant Get the current Instant .","title":"instant"},{"location":"api/core/io.islandtime.clock/-clock/read/","text":"core / io.islandtime.clock / Clock / read read (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract fun read(): LongMilliseconds Get the current number of milliseconds since the Unix epoch of 1970-01-01T00:00 in UTC.","title":"Read"},{"location":"api/core/io.islandtime.clock/-clock/read/#read","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract fun read(): LongMilliseconds Get the current number of milliseconds since the Unix epoch of 1970-01-01T00:00 in UTC.","title":"read"},{"location":"api/core/io.islandtime.clock/-clock/zone/","text":"core / io.islandtime.clock / Clock / zone zone (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract val zone: TimeZone The clock's time zone.","title":"Zone"},{"location":"api/core/io.islandtime.clock/-clock/zone/#zone","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract val zone: TimeZone The clock's time zone.","title":"zone"},{"location":"api/core/io.islandtime.clock/-fixed-clock/","text":"core / io.islandtime.clock / FixedClock FixedClock (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) class FixedClock : Clock A clock with fixed time, suitable for testing. Constructors Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init> A clock with fixed time, suitable for testing. <init>(millisecondsSinceUnixEpoch: LongMilliseconds = 0L.milliseconds, zone: TimeZone = TimeZone.UTC) Properties Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) zone The clock's time zone. val zone: TimeZone Functions Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) equals fun equals(other: Any ?): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) hashCode fun hashCode(): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) minusAssign operator fun minusAssign(days: LongDays ): Unit operator fun minusAssign(days: IntDays ): Unit operator fun minusAssign(hours: LongHours ): Unit operator fun minusAssign(hours: IntHours ): Unit operator fun minusAssign(minutes: LongMinutes ): Unit operator fun minusAssign(minutes: IntMinutes ): Unit operator fun minusAssign(seconds: LongSeconds ): Unit operator fun minusAssign(seconds: IntSeconds ): Unit operator fun minusAssign(milliseconds: LongMilliseconds ): Unit operator fun minusAssign(milliseconds: IntMilliseconds ): Unit (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) plusAssign operator fun plusAssign(days: LongDays ): Unit operator fun plusAssign(days: IntDays ): Unit operator fun plusAssign(hours: LongHours ): Unit operator fun plusAssign(hours: IntHours ): Unit operator fun plusAssign(minutes: LongMinutes ): Unit operator fun plusAssign(minutes: IntMinutes ): Unit operator fun plusAssign(seconds: LongSeconds ): Unit operator fun plusAssign(seconds: IntSeconds ): Unit operator fun plusAssign(milliseconds: LongMilliseconds ): Unit operator fun plusAssign(milliseconds: IntMilliseconds ): Unit (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) read Get the current number of milliseconds since the Unix epoch of 1970-01-01T00:00 in UTC. fun read(): LongMilliseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toString fun toString(): String","title":"Index"},{"location":"api/core/io.islandtime.clock/-fixed-clock/#fixedclock","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) class FixedClock : Clock A clock with fixed time, suitable for testing.","title":"FixedClock"},{"location":"api/core/io.islandtime.clock/-fixed-clock/#constructors","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init> A clock with fixed time, suitable for testing. <init>(millisecondsSinceUnixEpoch: LongMilliseconds = 0L.milliseconds, zone: TimeZone = TimeZone.UTC)","title":"Constructors"},{"location":"api/core/io.islandtime.clock/-fixed-clock/#properties","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) zone The clock's time zone. val zone: TimeZone","title":"Properties"},{"location":"api/core/io.islandtime.clock/-fixed-clock/#functions","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) equals fun equals(other: Any ?): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) hashCode fun hashCode(): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) minusAssign operator fun minusAssign(days: LongDays ): Unit operator fun minusAssign(days: IntDays ): Unit operator fun minusAssign(hours: LongHours ): Unit operator fun minusAssign(hours: IntHours ): Unit operator fun minusAssign(minutes: LongMinutes ): Unit operator fun minusAssign(minutes: IntMinutes ): Unit operator fun minusAssign(seconds: LongSeconds ): Unit operator fun minusAssign(seconds: IntSeconds ): Unit operator fun minusAssign(milliseconds: LongMilliseconds ): Unit operator fun minusAssign(milliseconds: IntMilliseconds ): Unit (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) plusAssign operator fun plusAssign(days: LongDays ): Unit operator fun plusAssign(days: IntDays ): Unit operator fun plusAssign(hours: LongHours ): Unit operator fun plusAssign(hours: IntHours ): Unit operator fun plusAssign(minutes: LongMinutes ): Unit operator fun plusAssign(minutes: IntMinutes ): Unit operator fun plusAssign(seconds: LongSeconds ): Unit operator fun plusAssign(seconds: IntSeconds ): Unit operator fun plusAssign(milliseconds: LongMilliseconds ): Unit operator fun plusAssign(milliseconds: IntMilliseconds ): Unit (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) read Get the current number of milliseconds since the Unix epoch of 1970-01-01T00:00 in UTC. fun read(): LongMilliseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toString fun toString(): String","title":"Functions"},{"location":"api/core/io.islandtime.clock/-fixed-clock/-init-/","text":"core / io.islandtime.clock / FixedClock / <init> <init> (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init>(millisecondsSinceUnixEpoch: LongMilliseconds = 0L.milliseconds, zone: TimeZone = TimeZone.UTC) A clock with fixed time, suitable for testing.","title":" init "},{"location":"api/core/io.islandtime.clock/-fixed-clock/-init-/#init","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init>(millisecondsSinceUnixEpoch: LongMilliseconds = 0L.milliseconds, zone: TimeZone = TimeZone.UTC) A clock with fixed time, suitable for testing.","title":"&lt;init&gt;"},{"location":"api/core/io.islandtime.clock/-fixed-clock/equals/","text":"core / io.islandtime.clock / FixedClock / equals equals (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun equals(other: Any ?): Boolean","title":"Equals"},{"location":"api/core/io.islandtime.clock/-fixed-clock/equals/#equals","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun equals(other: Any ?): Boolean","title":"equals"},{"location":"api/core/io.islandtime.clock/-fixed-clock/hash-code/","text":"core / io.islandtime.clock / FixedClock / hashCode hashCode (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun hashCode(): Int","title":"Hash code"},{"location":"api/core/io.islandtime.clock/-fixed-clock/hash-code/#hashcode","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun hashCode(): Int","title":"hashCode"},{"location":"api/core/io.islandtime.clock/-fixed-clock/minus-assign/","text":"core / io.islandtime.clock / FixedClock / minusAssign minusAssign (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun minusAssign(days: LongDays ): Unit operator fun minusAssign(days: IntDays ): Unit operator fun minusAssign(hours: LongHours ): Unit operator fun minusAssign(hours: IntHours ): Unit operator fun minusAssign(minutes: LongMinutes ): Unit operator fun minusAssign(minutes: IntMinutes ): Unit operator fun minusAssign(seconds: LongSeconds ): Unit operator fun minusAssign(seconds: IntSeconds ): Unit operator fun minusAssign(milliseconds: LongMilliseconds ): Unit operator fun minusAssign(milliseconds: IntMilliseconds ): Unit","title":"Minus assign"},{"location":"api/core/io.islandtime.clock/-fixed-clock/minus-assign/#minusassign","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun minusAssign(days: LongDays ): Unit operator fun minusAssign(days: IntDays ): Unit operator fun minusAssign(hours: LongHours ): Unit operator fun minusAssign(hours: IntHours ): Unit operator fun minusAssign(minutes: LongMinutes ): Unit operator fun minusAssign(minutes: IntMinutes ): Unit operator fun minusAssign(seconds: LongSeconds ): Unit operator fun minusAssign(seconds: IntSeconds ): Unit operator fun minusAssign(milliseconds: LongMilliseconds ): Unit operator fun minusAssign(milliseconds: IntMilliseconds ): Unit","title":"minusAssign"},{"location":"api/core/io.islandtime.clock/-fixed-clock/plus-assign/","text":"core / io.islandtime.clock / FixedClock / plusAssign plusAssign (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun plusAssign(days: LongDays ): Unit operator fun plusAssign(days: IntDays ): Unit operator fun plusAssign(hours: LongHours ): Unit operator fun plusAssign(hours: IntHours ): Unit operator fun plusAssign(minutes: LongMinutes ): Unit operator fun plusAssign(minutes: IntMinutes ): Unit operator fun plusAssign(seconds: LongSeconds ): Unit operator fun plusAssign(seconds: IntSeconds ): Unit operator fun plusAssign(milliseconds: LongMilliseconds ): Unit operator fun plusAssign(milliseconds: IntMilliseconds ): Unit","title":"Plus assign"},{"location":"api/core/io.islandtime.clock/-fixed-clock/plus-assign/#plusassign","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun plusAssign(days: LongDays ): Unit operator fun plusAssign(days: IntDays ): Unit operator fun plusAssign(hours: LongHours ): Unit operator fun plusAssign(hours: IntHours ): Unit operator fun plusAssign(minutes: LongMinutes ): Unit operator fun plusAssign(minutes: IntMinutes ): Unit operator fun plusAssign(seconds: LongSeconds ): Unit operator fun plusAssign(seconds: IntSeconds ): Unit operator fun plusAssign(milliseconds: LongMilliseconds ): Unit operator fun plusAssign(milliseconds: IntMilliseconds ): Unit","title":"plusAssign"},{"location":"api/core/io.islandtime.clock/-fixed-clock/read/","text":"core / io.islandtime.clock / FixedClock / read read (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun read(): LongMilliseconds Get the current number of milliseconds since the Unix epoch of 1970-01-01T00:00 in UTC.","title":"Read"},{"location":"api/core/io.islandtime.clock/-fixed-clock/read/#read","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun read(): LongMilliseconds Get the current number of milliseconds since the Unix epoch of 1970-01-01T00:00 in UTC.","title":"read"},{"location":"api/core/io.islandtime.clock/-fixed-clock/to-string/","text":"core / io.islandtime.clock / FixedClock / toString toString (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toString(): String","title":"To string"},{"location":"api/core/io.islandtime.clock/-fixed-clock/to-string/#tostring","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toString(): String","title":"toString"},{"location":"api/core/io.islandtime.clock/-fixed-clock/zone/","text":"core / io.islandtime.clock / FixedClock / zone zone (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val zone: TimeZone The clock's time zone.","title":"Zone"},{"location":"api/core/io.islandtime.clock/-fixed-clock/zone/#zone","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val zone: TimeZone The clock's time zone.","title":"zone"},{"location":"api/core/io.islandtime.clock/-system-clock/","text":"core / io.islandtime.clock / SystemClock SystemClock (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) class SystemClock : Clock A clock that provides the time from the current system. The time zone is treated as an immutable property of the clock, set when it is created. If you wish to follow changes to the system clock's configured time zone, you must create a new SystemClock in response to any time zone changes. Constructors Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init> Create a SystemClock with a specific time zone, defaulting to the system's current zone. <init>(zone: TimeZone = currentZone()) Properties Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) zone The clock's time zone. val zone: TimeZone Functions Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) equals fun equals(other: Any ?): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) hashCode fun hashCode(): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) read Get the current number of milliseconds since the Unix epoch of 1970-01-01T00:00 in UTC. fun read(): LongMilliseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toString fun toString(): String Companion Object Properties Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) UTC A system clock in the UTC time zone. val UTC: SystemClock Companion Object Functions Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) currentZone Get the current system time zone. fun currentZone(): TimeZone","title":"Index"},{"location":"api/core/io.islandtime.clock/-system-clock/#systemclock","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) class SystemClock : Clock A clock that provides the time from the current system. The time zone is treated as an immutable property of the clock, set when it is created. If you wish to follow changes to the system clock's configured time zone, you must create a new SystemClock in response to any time zone changes.","title":"SystemClock"},{"location":"api/core/io.islandtime.clock/-system-clock/#constructors","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init> Create a SystemClock with a specific time zone, defaulting to the system's current zone. <init>(zone: TimeZone = currentZone())","title":"Constructors"},{"location":"api/core/io.islandtime.clock/-system-clock/#properties","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) zone The clock's time zone. val zone: TimeZone","title":"Properties"},{"location":"api/core/io.islandtime.clock/-system-clock/#functions","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) equals fun equals(other: Any ?): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) hashCode fun hashCode(): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) read Get the current number of milliseconds since the Unix epoch of 1970-01-01T00:00 in UTC. fun read(): LongMilliseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toString fun toString(): String","title":"Functions"},{"location":"api/core/io.islandtime.clock/-system-clock/#companion-object-properties","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) UTC A system clock in the UTC time zone. val UTC: SystemClock","title":"Companion Object Properties"},{"location":"api/core/io.islandtime.clock/-system-clock/#companion-object-functions","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) currentZone Get the current system time zone. fun currentZone(): TimeZone","title":"Companion Object Functions"},{"location":"api/core/io.islandtime.clock/-system-clock/-init-/","text":"core / io.islandtime.clock / SystemClock / <init> <init> (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init>(zone: TimeZone = currentZone()) Create a SystemClock with a specific time zone, defaulting to the system's current zone. Constructor Create a SystemClock with a specific time zone, defaulting to the system's current zone. See Also currentZone","title":" init "},{"location":"api/core/io.islandtime.clock/-system-clock/-init-/#init","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init>(zone: TimeZone = currentZone()) Create a SystemClock with a specific time zone, defaulting to the system's current zone. Constructor Create a SystemClock with a specific time zone, defaulting to the system's current zone. See Also currentZone","title":"&lt;init&gt;"},{"location":"api/core/io.islandtime.clock/-system-clock/-u-t-c/","text":"core / io.islandtime.clock / SystemClock / UTC UTC (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val UTC: SystemClock A system clock in the UTC time zone.","title":" u t c"},{"location":"api/core/io.islandtime.clock/-system-clock/-u-t-c/#utc","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val UTC: SystemClock A system clock in the UTC time zone.","title":"UTC"},{"location":"api/core/io.islandtime.clock/-system-clock/current-zone/","text":"core / io.islandtime.clock / SystemClock / currentZone currentZone (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun currentZone(): TimeZone Get the current system time zone.","title":"Current zone"},{"location":"api/core/io.islandtime.clock/-system-clock/current-zone/#currentzone","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun currentZone(): TimeZone Get the current system time zone.","title":"currentZone"},{"location":"api/core/io.islandtime.clock/-system-clock/equals/","text":"core / io.islandtime.clock / SystemClock / equals equals (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun equals(other: Any ?): Boolean","title":"Equals"},{"location":"api/core/io.islandtime.clock/-system-clock/equals/#equals","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun equals(other: Any ?): Boolean","title":"equals"},{"location":"api/core/io.islandtime.clock/-system-clock/hash-code/","text":"core / io.islandtime.clock / SystemClock / hashCode hashCode (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun hashCode(): Int","title":"Hash code"},{"location":"api/core/io.islandtime.clock/-system-clock/hash-code/#hashcode","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun hashCode(): Int","title":"hashCode"},{"location":"api/core/io.islandtime.clock/-system-clock/read/","text":"core / io.islandtime.clock / SystemClock / read read (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun read(): LongMilliseconds Get the current number of milliseconds since the Unix epoch of 1970-01-01T00:00 in UTC.","title":"Read"},{"location":"api/core/io.islandtime.clock/-system-clock/read/#read","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun read(): LongMilliseconds Get the current number of milliseconds since the Unix epoch of 1970-01-01T00:00 in UTC.","title":"read"},{"location":"api/core/io.islandtime.clock/-system-clock/to-string/","text":"core / io.islandtime.clock / SystemClock / toString toString (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toString(): String","title":"To string"},{"location":"api/core/io.islandtime.clock/-system-clock/to-string/#tostring","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toString(): String","title":"toString"},{"location":"api/core/io.islandtime.clock/-system-clock/zone/","text":"core / io.islandtime.clock / SystemClock / zone zone (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val zone: TimeZone The clock's time zone.","title":"Zone"},{"location":"api/core/io.islandtime.clock/-system-clock/zone/#zone","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val zone: TimeZone The clock's time zone.","title":"zone"},{"location":"api/core/io.islandtime.darwin/","text":"core / io.islandtime.darwin Package io.islandtime.darwin Various extensions specifically for the Apple platform. Functions Name Summary (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toIslandDate Convert an NSDateComponents object to an Island Time Date . fun <ERROR CLASS>.toIslandDate(): Date (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toIslandDateTime Convert an NSDateComponents object to an Island Time DateTime . fun <ERROR CLASS>.toIslandDateTime(): DateTime (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toIslandDateTimeAt Convert an NSDate to an Island Time DateTime at the specified UTC offset. fun <ERROR CLASS>.toIslandDateTimeAt(offset: UtcOffset ): DateTime Convert an NSDate to an Island Time DateTime at the specified time zone. fun <ERROR CLASS>.toIslandDateTimeAt(nsTimeZone: <ERROR CLASS>): <ERROR CLASS> (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toIslandInstant Convert an NSDate to an Island Time Instant . fun <ERROR CLASS>.toIslandInstant(): Instant (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toIslandInstantInterval Convert to an equivalent Island Time InstantInterval . fun <ERROR CLASS>.toIslandInstantInterval(): InstantInterval (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toIslandOffsetDateTime Convert an NSDateComponents object to an Island Time OffsetDateTime . fun <ERROR CLASS>.toIslandOffsetDateTime(): Nothing (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toIslandOffsetDateTimeAt Convert an NSDate to an Island Time OffsetDateTime at the specified UTC offset. fun <ERROR CLASS>.toIslandOffsetDateTimeAt(offset: UtcOffset ): OffsetDateTime Convert an NSDate to an Island Time OffsetDateTime at the specified time zone. fun <ERROR CLASS>.toIslandOffsetDateTimeAt(nsTimeZone: <ERROR CLASS>): OffsetDateTime (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toIslandOffsetDateTimeOrNull Convert an NSDateComponents object to an Island Time OffsetDateTime or null if the timeZone property is absent. fun <ERROR CLASS>.toIslandOffsetDateTimeOrNull(): OffsetDateTime ? (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toIslandTime Convert an NSDateComponents object to an Island Time Time . fun <ERROR CLASS>.toIslandTime(): Time (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toIslandTimeZone Convert an NSTimeZone to an Island Time [TimeZone](../io.islandtime/-time-zone/index.md#io.islandtime.TimeZone) with the same identifier. fun .toIslandTimeZone(): [ TimeZone`](../io.islandtime/-time-zone/index.md) (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toIslandUtcOffset fun <ERROR CLASS>.~~toIslandUtcOffset~~(): UtcOffset (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toIslandUtcOffsetAt Convert an NSTimeZone to an Island Time UtcOffset at the provided date. fun <ERROR CLASS>.toIslandUtcOffsetAt(date: <ERROR CLASS>): UtcOffset (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toIslandZonedDateTime Convert an NSDateComponents object to an Island Time ZonedDateTime . fun <ERROR CLASS>.toIslandZonedDateTime(): Nothing (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toIslandZonedDateTimeAt Convert an NSDate to an Island Time ZonedDateTime at the specified time zone. fun <ERROR CLASS>.toIslandZonedDateTimeAt(zone: TimeZone ): ZonedDateTime fun <ERROR CLASS>.toIslandZonedDateTimeAt(nsTimeZone: <ERROR CLASS>): <ERROR CLASS> (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toIslandZonedDateTimeOrNull Convert an NSDateComponents object to an Island Time ZonedDateTime or null if the timeZone property is absent. fun <ERROR CLASS>.toIslandZonedDateTimeOrNull(): ZonedDateTime ? (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toNSDate Convert an Island Time TimePoint to an NSDate . fun <T> TimePoint <T>.toNSDate(): <ERROR CLASS> (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toNSDateComponents Convert an Island Time Year to an equivalent NSDateComponents object. fun Year .toNSDateComponents(includeCalendar: Boolean = false): <ERROR CLASS> Convert an Island Time YearMonth to an equivalent NSDateComponents object. fun YearMonth .toNSDateComponents(includeCalendar: Boolean = false): <ERROR CLASS> Convert an Island Time Date to an equivalent NSDateComponents object. fun Date .toNSDateComponents(includeCalendar: Boolean = false): <ERROR CLASS> Convert an Island Time Time to an equivalent NSDateComponents object. fun Time .toNSDateComponents(includeCalendar: Boolean = false): <ERROR CLASS> Convert an Island Time DateTime to an equivalent NSDateComponents object. fun DateTime .toNSDateComponents(includeCalendar: Boolean = false): <ERROR CLASS> Convert an Island Time OffsetTime to an equivalent NSDateComponents object. fun OffsetTime .toNSDateComponents(includeCalendar: Boolean = false): <ERROR CLASS> Convert an Island Time OffsetDateTime to an equivalent NSDateComponents object. fun OffsetDateTime .toNSDateComponents(includeCalendar: Boolean = false): <ERROR CLASS> Convert an Island Time ZonedDateTime to an equivalent NSDateComponents object. fun ZonedDateTime .toNSDateComponents(includeCalendar: Boolean = false): <ERROR CLASS> (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toNSDateInterval Convert to an equivalent NSDateInterval . fun <T : TimePoint <T>> TimePointInterval <T>.toNSDateInterval(): <ERROR CLASS> (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toNSDateIntervalOrNull Convert to an equivalent NSDateInterval or null if the interval is unbounded. fun <T : TimePoint <T>> TimePointInterval <T>.toNSDateIntervalOrNull(): <ERROR CLASS>? (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toNSTimeInterval Convert to an equivalent NSTimeInterval . fun Duration .toNSTimeInterval(): <ERROR CLASS> fun IntDays .toNSTimeInterval(): <ERROR CLASS> fun LongDays .toNSTimeInterval(): <ERROR CLASS> fun IntHours .toNSTimeInterval(): <ERROR CLASS> fun LongHours .toNSTimeInterval(): <ERROR CLASS> fun IntMinutes .toNSTimeInterval(): <ERROR CLASS> fun LongMinutes .toNSTimeInterval(): <ERROR CLASS> fun IntSeconds .toNSTimeInterval(): <ERROR CLASS> fun LongSeconds .toNSTimeInterval(): <ERROR CLASS> fun IntMilliseconds .toNSTimeInterval(): <ERROR CLASS> fun LongMilliseconds .toNSTimeInterval(): <ERROR CLASS> fun IntMicroseconds .toNSTimeInterval(): <ERROR CLASS> fun LongMicroseconds .toNSTimeInterval(): <ERROR CLASS> fun IntNanoseconds .toNSTimeInterval(): <ERROR CLASS> fun LongNanoseconds .toNSTimeInterval(): <ERROR CLASS> (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toNSTimeZone Convert an Island Time UtcOffset into an equivalent NSTimeZone with a fixed UTC offset. fun UtcOffset .toNSTimeZone(): <ERROR CLASS> Convert an Island Time TimeZone to an NSTimeZone . fun TimeZone .toNSTimeZone(): <ERROR CLASS> (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toNSTimeZoneOrNull Convert an Island Time TimeZone to an NSTimeZone or null if the identifier isn't recognized as valid for an NSTimeZone . fun TimeZone .toNSTimeZoneOrNull(): <ERROR CLASS>?","title":"Index"},{"location":"api/core/io.islandtime.darwin/#package-ioislandtimedarwin","text":"Various extensions specifically for the Apple platform.","title":"Package io.islandtime.darwin"},{"location":"api/core/io.islandtime.darwin/#functions","text":"Name Summary (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toIslandDate Convert an NSDateComponents object to an Island Time Date . fun <ERROR CLASS>.toIslandDate(): Date (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toIslandDateTime Convert an NSDateComponents object to an Island Time DateTime . fun <ERROR CLASS>.toIslandDateTime(): DateTime (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toIslandDateTimeAt Convert an NSDate to an Island Time DateTime at the specified UTC offset. fun <ERROR CLASS>.toIslandDateTimeAt(offset: UtcOffset ): DateTime Convert an NSDate to an Island Time DateTime at the specified time zone. fun <ERROR CLASS>.toIslandDateTimeAt(nsTimeZone: <ERROR CLASS>): <ERROR CLASS> (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toIslandInstant Convert an NSDate to an Island Time Instant . fun <ERROR CLASS>.toIslandInstant(): Instant (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toIslandInstantInterval Convert to an equivalent Island Time InstantInterval . fun <ERROR CLASS>.toIslandInstantInterval(): InstantInterval (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toIslandOffsetDateTime Convert an NSDateComponents object to an Island Time OffsetDateTime . fun <ERROR CLASS>.toIslandOffsetDateTime(): Nothing (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toIslandOffsetDateTimeAt Convert an NSDate to an Island Time OffsetDateTime at the specified UTC offset. fun <ERROR CLASS>.toIslandOffsetDateTimeAt(offset: UtcOffset ): OffsetDateTime Convert an NSDate to an Island Time OffsetDateTime at the specified time zone. fun <ERROR CLASS>.toIslandOffsetDateTimeAt(nsTimeZone: <ERROR CLASS>): OffsetDateTime (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toIslandOffsetDateTimeOrNull Convert an NSDateComponents object to an Island Time OffsetDateTime or null if the timeZone property is absent. fun <ERROR CLASS>.toIslandOffsetDateTimeOrNull(): OffsetDateTime ? (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toIslandTime Convert an NSDateComponents object to an Island Time Time . fun <ERROR CLASS>.toIslandTime(): Time (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toIslandTimeZone Convert an NSTimeZone to an Island Time [TimeZone](../io.islandtime/-time-zone/index.md#io.islandtime.TimeZone) with the same identifier. fun .toIslandTimeZone(): [ TimeZone`](../io.islandtime/-time-zone/index.md) (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toIslandUtcOffset fun <ERROR CLASS>.~~toIslandUtcOffset~~(): UtcOffset (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toIslandUtcOffsetAt Convert an NSTimeZone to an Island Time UtcOffset at the provided date. fun <ERROR CLASS>.toIslandUtcOffsetAt(date: <ERROR CLASS>): UtcOffset (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toIslandZonedDateTime Convert an NSDateComponents object to an Island Time ZonedDateTime . fun <ERROR CLASS>.toIslandZonedDateTime(): Nothing (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toIslandZonedDateTimeAt Convert an NSDate to an Island Time ZonedDateTime at the specified time zone. fun <ERROR CLASS>.toIslandZonedDateTimeAt(zone: TimeZone ): ZonedDateTime fun <ERROR CLASS>.toIslandZonedDateTimeAt(nsTimeZone: <ERROR CLASS>): <ERROR CLASS> (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toIslandZonedDateTimeOrNull Convert an NSDateComponents object to an Island Time ZonedDateTime or null if the timeZone property is absent. fun <ERROR CLASS>.toIslandZonedDateTimeOrNull(): ZonedDateTime ? (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toNSDate Convert an Island Time TimePoint to an NSDate . fun <T> TimePoint <T>.toNSDate(): <ERROR CLASS> (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toNSDateComponents Convert an Island Time Year to an equivalent NSDateComponents object. fun Year .toNSDateComponents(includeCalendar: Boolean = false): <ERROR CLASS> Convert an Island Time YearMonth to an equivalent NSDateComponents object. fun YearMonth .toNSDateComponents(includeCalendar: Boolean = false): <ERROR CLASS> Convert an Island Time Date to an equivalent NSDateComponents object. fun Date .toNSDateComponents(includeCalendar: Boolean = false): <ERROR CLASS> Convert an Island Time Time to an equivalent NSDateComponents object. fun Time .toNSDateComponents(includeCalendar: Boolean = false): <ERROR CLASS> Convert an Island Time DateTime to an equivalent NSDateComponents object. fun DateTime .toNSDateComponents(includeCalendar: Boolean = false): <ERROR CLASS> Convert an Island Time OffsetTime to an equivalent NSDateComponents object. fun OffsetTime .toNSDateComponents(includeCalendar: Boolean = false): <ERROR CLASS> Convert an Island Time OffsetDateTime to an equivalent NSDateComponents object. fun OffsetDateTime .toNSDateComponents(includeCalendar: Boolean = false): <ERROR CLASS> Convert an Island Time ZonedDateTime to an equivalent NSDateComponents object. fun ZonedDateTime .toNSDateComponents(includeCalendar: Boolean = false): <ERROR CLASS> (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toNSDateInterval Convert to an equivalent NSDateInterval . fun <T : TimePoint <T>> TimePointInterval <T>.toNSDateInterval(): <ERROR CLASS> (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toNSDateIntervalOrNull Convert to an equivalent NSDateInterval or null if the interval is unbounded. fun <T : TimePoint <T>> TimePointInterval <T>.toNSDateIntervalOrNull(): <ERROR CLASS>? (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toNSTimeInterval Convert to an equivalent NSTimeInterval . fun Duration .toNSTimeInterval(): <ERROR CLASS> fun IntDays .toNSTimeInterval(): <ERROR CLASS> fun LongDays .toNSTimeInterval(): <ERROR CLASS> fun IntHours .toNSTimeInterval(): <ERROR CLASS> fun LongHours .toNSTimeInterval(): <ERROR CLASS> fun IntMinutes .toNSTimeInterval(): <ERROR CLASS> fun LongMinutes .toNSTimeInterval(): <ERROR CLASS> fun IntSeconds .toNSTimeInterval(): <ERROR CLASS> fun LongSeconds .toNSTimeInterval(): <ERROR CLASS> fun IntMilliseconds .toNSTimeInterval(): <ERROR CLASS> fun LongMilliseconds .toNSTimeInterval(): <ERROR CLASS> fun IntMicroseconds .toNSTimeInterval(): <ERROR CLASS> fun LongMicroseconds .toNSTimeInterval(): <ERROR CLASS> fun IntNanoseconds .toNSTimeInterval(): <ERROR CLASS> fun LongNanoseconds .toNSTimeInterval(): <ERROR CLASS> (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toNSTimeZone Convert an Island Time UtcOffset into an equivalent NSTimeZone with a fixed UTC offset. fun UtcOffset .toNSTimeZone(): <ERROR CLASS> Convert an Island Time TimeZone to an NSTimeZone . fun TimeZone .toNSTimeZone(): <ERROR CLASS> (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toNSTimeZoneOrNull Convert an Island Time TimeZone to an NSTimeZone or null if the identifier isn't recognized as valid for an NSTimeZone . fun TimeZone .toNSTimeZoneOrNull(): <ERROR CLASS>?","title":"Functions"},{"location":"api/core/io.islandtime.darwin/to-island-date-time-at/","text":"core / io.islandtime.darwin / toIslandDateTimeAt toIslandDateTimeAt (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun <ERROR CLASS>.toIslandDateTimeAt(offset: UtcOffset ): DateTime Convert an NSDate to an Island Time DateTime at the specified UTC offset. (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun <ERROR CLASS>.toIslandDateTimeAt(nsTimeZone: <ERROR CLASS>): <ERROR CLASS> Convert an NSDate to an Island Time DateTime at the specified time zone.","title":"To island date time at"},{"location":"api/core/io.islandtime.darwin/to-island-date-time-at/#toislanddatetimeat","text":"(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun <ERROR CLASS>.toIslandDateTimeAt(offset: UtcOffset ): DateTime Convert an NSDate to an Island Time DateTime at the specified UTC offset. (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun <ERROR CLASS>.toIslandDateTimeAt(nsTimeZone: <ERROR CLASS>): <ERROR CLASS> Convert an NSDate to an Island Time DateTime at the specified time zone.","title":"toIslandDateTimeAt"},{"location":"api/core/io.islandtime.darwin/to-island-date-time/","text":"core / io.islandtime.darwin / toIslandDateTime toIslandDateTime (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun <ERROR CLASS>.toIslandDateTime(): DateTime Convert an NSDateComponents object to an Island Time DateTime .","title":"To island date time"},{"location":"api/core/io.islandtime.darwin/to-island-date-time/#toislanddatetime","text":"(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun <ERROR CLASS>.toIslandDateTime(): DateTime Convert an NSDateComponents object to an Island Time DateTime .","title":"toIslandDateTime"},{"location":"api/core/io.islandtime.darwin/to-island-date/","text":"core / io.islandtime.darwin / toIslandDate toIslandDate (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun <ERROR CLASS>.toIslandDate(): Date Convert an NSDateComponents object to an Island Time Date .","title":"To island date"},{"location":"api/core/io.islandtime.darwin/to-island-date/#toislanddate","text":"(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun <ERROR CLASS>.toIslandDate(): Date Convert an NSDateComponents object to an Island Time Date .","title":"toIslandDate"},{"location":"api/core/io.islandtime.darwin/to-island-instant-interval/","text":"core / io.islandtime.darwin / toIslandInstantInterval toIslandInstantInterval (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun <ERROR CLASS>.toIslandInstantInterval(): InstantInterval Convert to an equivalent Island Time InstantInterval .","title":"To island instant interval"},{"location":"api/core/io.islandtime.darwin/to-island-instant-interval/#toislandinstantinterval","text":"(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun <ERROR CLASS>.toIslandInstantInterval(): InstantInterval Convert to an equivalent Island Time InstantInterval .","title":"toIslandInstantInterval"},{"location":"api/core/io.islandtime.darwin/to-island-instant/","text":"core / io.islandtime.darwin / toIslandInstant toIslandInstant (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun <ERROR CLASS>.toIslandInstant(): Instant Convert an NSDate to an Island Time Instant .","title":"To island instant"},{"location":"api/core/io.islandtime.darwin/to-island-instant/#toislandinstant","text":"(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun <ERROR CLASS>.toIslandInstant(): Instant Convert an NSDate to an Island Time Instant .","title":"toIslandInstant"},{"location":"api/core/io.islandtime.darwin/to-island-offset-date-time-at/","text":"core / io.islandtime.darwin / toIslandOffsetDateTimeAt toIslandOffsetDateTimeAt (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun <ERROR CLASS>.toIslandOffsetDateTimeAt(offset: UtcOffset ): OffsetDateTime Convert an NSDate to an Island Time OffsetDateTime at the specified UTC offset. (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun <ERROR CLASS>.toIslandOffsetDateTimeAt(nsTimeZone: <ERROR CLASS>): OffsetDateTime Convert an NSDate to an Island Time OffsetDateTime at the specified time zone.","title":"To island offset date time at"},{"location":"api/core/io.islandtime.darwin/to-island-offset-date-time-at/#toislandoffsetdatetimeat","text":"(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun <ERROR CLASS>.toIslandOffsetDateTimeAt(offset: UtcOffset ): OffsetDateTime Convert an NSDate to an Island Time OffsetDateTime at the specified UTC offset. (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun <ERROR CLASS>.toIslandOffsetDateTimeAt(nsTimeZone: <ERROR CLASS>): OffsetDateTime Convert an NSDate to an Island Time OffsetDateTime at the specified time zone.","title":"toIslandOffsetDateTimeAt"},{"location":"api/core/io.islandtime.darwin/to-island-offset-date-time-or-null/","text":"core / io.islandtime.darwin / toIslandOffsetDateTimeOrNull toIslandOffsetDateTimeOrNull (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun <ERROR CLASS>.toIslandOffsetDateTimeOrNull(): OffsetDateTime ? Convert an NSDateComponents object to an Island Time OffsetDateTime or null if the timeZone property is absent.","title":"To island offset date time or null"},{"location":"api/core/io.islandtime.darwin/to-island-offset-date-time-or-null/#toislandoffsetdatetimeornull","text":"(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun <ERROR CLASS>.toIslandOffsetDateTimeOrNull(): OffsetDateTime ? Convert an NSDateComponents object to an Island Time OffsetDateTime or null if the timeZone property is absent.","title":"toIslandOffsetDateTimeOrNull"},{"location":"api/core/io.islandtime.darwin/to-island-offset-date-time/","text":"core / io.islandtime.darwin / toIslandOffsetDateTime toIslandOffsetDateTime (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun <ERROR CLASS>.toIslandOffsetDateTime(): Nothing Convert an NSDateComponents object to an Island Time OffsetDateTime . Exceptions DateTimeException - if the timeZone property is absent.","title":"To island offset date time"},{"location":"api/core/io.islandtime.darwin/to-island-offset-date-time/#toislandoffsetdatetime","text":"(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun <ERROR CLASS>.toIslandOffsetDateTime(): Nothing Convert an NSDateComponents object to an Island Time OffsetDateTime .","title":"toIslandOffsetDateTime"},{"location":"api/core/io.islandtime.darwin/to-island-offset-date-time/#exceptions","text":"DateTimeException - if the timeZone property is absent.","title":"Exceptions"},{"location":"api/core/io.islandtime.darwin/to-island-time-zone/","text":"core / io.islandtime.darwin / toIslandTimeZone toIslandTimeZone (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun <ERROR CLASS>.toIslandTimeZone(): TimeZone Convert an NSTimeZone` to an Island Time TimeZone with the same identifier.","title":"To island time zone"},{"location":"api/core/io.islandtime.darwin/to-island-time-zone/#toislandtimezone","text":"(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun <ERROR CLASS>.toIslandTimeZone(): TimeZone Convert an NSTimeZone` to an Island Time TimeZone with the same identifier.","title":"toIslandTimeZone"},{"location":"api/core/io.islandtime.darwin/to-island-time/","text":"core / io.islandtime.darwin / toIslandTime toIslandTime (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun <ERROR CLASS>.toIslandTime(): Time Convert an NSDateComponents object to an Island Time Time .","title":"To island time"},{"location":"api/core/io.islandtime.darwin/to-island-time/#toislandtime","text":"(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun <ERROR CLASS>.toIslandTime(): Time Convert an NSDateComponents object to an Island Time Time .","title":"toIslandTime"},{"location":"api/core/io.islandtime.darwin/to-island-utc-offset-at/","text":"core / io.islandtime.darwin / toIslandUtcOffsetAt toIslandUtcOffsetAt (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun <ERROR CLASS>.toIslandUtcOffsetAt(date: <ERROR CLASS>): UtcOffset Convert an NSTimeZone to an Island Time UtcOffset at the provided date.","title":"To island utc offset at"},{"location":"api/core/io.islandtime.darwin/to-island-utc-offset-at/#toislandutcoffsetat","text":"(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun <ERROR CLASS>.toIslandUtcOffsetAt(date: <ERROR CLASS>): UtcOffset Convert an NSTimeZone to an Island Time UtcOffset at the provided date.","title":"toIslandUtcOffsetAt"},{"location":"api/core/io.islandtime.darwin/to-island-utc-offset/","text":"core / io.islandtime.darwin / toIslandUtcOffset toIslandUtcOffset (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun <ERROR CLASS>.~~toIslandUtcOffset~~(): UtcOffset Deprecated: This operation is ambiguous. An NSDate must be provided.","title":"To island utc offset"},{"location":"api/core/io.islandtime.darwin/to-island-utc-offset/#toislandutcoffset","text":"(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun <ERROR CLASS>.~~toIslandUtcOffset~~(): UtcOffset Deprecated: This operation is ambiguous. An NSDate must be provided.","title":"toIslandUtcOffset"},{"location":"api/core/io.islandtime.darwin/to-island-zoned-date-time-at/","text":"core / io.islandtime.darwin / toIslandZonedDateTimeAt toIslandZonedDateTimeAt (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun <ERROR CLASS>.toIslandZonedDateTimeAt(zone: TimeZone ): ZonedDateTime fun <ERROR CLASS>.toIslandZonedDateTimeAt(nsTimeZone: <ERROR CLASS>): <ERROR CLASS> Convert an NSDate to an Island Time ZonedDateTime at the specified time zone.","title":"To island zoned date time at"},{"location":"api/core/io.islandtime.darwin/to-island-zoned-date-time-at/#toislandzoneddatetimeat","text":"(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun <ERROR CLASS>.toIslandZonedDateTimeAt(zone: TimeZone ): ZonedDateTime fun <ERROR CLASS>.toIslandZonedDateTimeAt(nsTimeZone: <ERROR CLASS>): <ERROR CLASS> Convert an NSDate to an Island Time ZonedDateTime at the specified time zone.","title":"toIslandZonedDateTimeAt"},{"location":"api/core/io.islandtime.darwin/to-island-zoned-date-time-or-null/","text":"core / io.islandtime.darwin / toIslandZonedDateTimeOrNull toIslandZonedDateTimeOrNull (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun <ERROR CLASS>.toIslandZonedDateTimeOrNull(): ZonedDateTime ? Convert an NSDateComponents object to an Island Time ZonedDateTime or null if the timeZone property is absent.","title":"To island zoned date time or null"},{"location":"api/core/io.islandtime.darwin/to-island-zoned-date-time-or-null/#toislandzoneddatetimeornull","text":"(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun <ERROR CLASS>.toIslandZonedDateTimeOrNull(): ZonedDateTime ? Convert an NSDateComponents object to an Island Time ZonedDateTime or null if the timeZone property is absent.","title":"toIslandZonedDateTimeOrNull"},{"location":"api/core/io.islandtime.darwin/to-island-zoned-date-time/","text":"core / io.islandtime.darwin / toIslandZonedDateTime toIslandZonedDateTime (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun <ERROR CLASS>.toIslandZonedDateTime(): Nothing Convert an NSDateComponents object to an Island Time ZonedDateTime . Exceptions DateTimeException - if the timeZone property is absent.","title":"To island zoned date time"},{"location":"api/core/io.islandtime.darwin/to-island-zoned-date-time/#toislandzoneddatetime","text":"(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun <ERROR CLASS>.toIslandZonedDateTime(): Nothing Convert an NSDateComponents object to an Island Time ZonedDateTime .","title":"toIslandZonedDateTime"},{"location":"api/core/io.islandtime.darwin/to-island-zoned-date-time/#exceptions","text":"DateTimeException - if the timeZone property is absent.","title":"Exceptions"},{"location":"api/core/io.islandtime.darwin/to-n-s-date-components/","text":"core / io.islandtime.darwin / toNSDateComponents toNSDateComponents (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Year .toNSDateComponents(includeCalendar: Boolean = false): <ERROR CLASS> Convert an Island Time Year to an equivalent NSDateComponents object. Parameters includeCalendar - true if the resulting NSDateComponents should include the ISO-8601 calendar Return an equivalent NSDateComponents object (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun YearMonth .toNSDateComponents(includeCalendar: Boolean = false): <ERROR CLASS> Convert an Island Time YearMonth to an equivalent NSDateComponents object. Parameters includeCalendar - true if the resulting NSDateComponents should include the ISO-8601 calendar Return an equivalent NSDateComponents object (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Date .toNSDateComponents(includeCalendar: Boolean = false): <ERROR CLASS> Convert an Island Time Date to an equivalent NSDateComponents object. Parameters includeCalendar - true if the resulting NSDateComponents should include the ISO-8601 calendar Return an equivalent NSDateComponents object (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Time .toNSDateComponents(includeCalendar: Boolean = false): <ERROR CLASS> Convert an Island Time Time to an equivalent NSDateComponents object. Parameters includeCalendar - true if the resulting NSDateComponents should include the ISO-8601 calendar Return an equivalent NSDateComponents object (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateTime .toNSDateComponents(includeCalendar: Boolean = false): <ERROR CLASS> Convert an Island Time DateTime to an equivalent NSDateComponents object. Parameters includeCalendar - true if the resulting NSDateComponents should include the ISO-8601 calendar Return an equivalent NSDateComponents object (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun OffsetTime .toNSDateComponents(includeCalendar: Boolean = false): <ERROR CLASS> Convert an Island Time OffsetTime to an equivalent NSDateComponents object. Parameters includeCalendar - true if the resulting NSDateComponents should include the ISO-8601 calendar Return an equivalent NSDateComponents object (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun OffsetDateTime .toNSDateComponents(includeCalendar: Boolean = false): <ERROR CLASS> Convert an Island Time OffsetDateTime to an equivalent NSDateComponents object. Parameters includeCalendar - true if the resulting NSDateComponents should include the ISO-8601 calendar Return an equivalent NSDateComponents object (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun ZonedDateTime .toNSDateComponents(includeCalendar: Boolean = false): <ERROR CLASS> Convert an Island Time ZonedDateTime to an equivalent NSDateComponents object. Parameters includeCalendar - true if the resulting NSDateComponents should include the ISO-8601 calendar Return an equivalent NSDateComponents object","title":"To n s date components"},{"location":"api/core/io.islandtime.darwin/to-n-s-date-components/#tonsdatecomponents","text":"(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Year .toNSDateComponents(includeCalendar: Boolean = false): <ERROR CLASS> Convert an Island Time Year to an equivalent NSDateComponents object.","title":"toNSDateComponents"},{"location":"api/core/io.islandtime.darwin/to-n-s-date-components/#parameters","text":"includeCalendar - true if the resulting NSDateComponents should include the ISO-8601 calendar Return an equivalent NSDateComponents object (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun YearMonth .toNSDateComponents(includeCalendar: Boolean = false): <ERROR CLASS> Convert an Island Time YearMonth to an equivalent NSDateComponents object.","title":"Parameters"},{"location":"api/core/io.islandtime.darwin/to-n-s-date-components/#parameters_1","text":"includeCalendar - true if the resulting NSDateComponents should include the ISO-8601 calendar Return an equivalent NSDateComponents object (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Date .toNSDateComponents(includeCalendar: Boolean = false): <ERROR CLASS> Convert an Island Time Date to an equivalent NSDateComponents object.","title":"Parameters"},{"location":"api/core/io.islandtime.darwin/to-n-s-date-components/#parameters_2","text":"includeCalendar - true if the resulting NSDateComponents should include the ISO-8601 calendar Return an equivalent NSDateComponents object (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Time .toNSDateComponents(includeCalendar: Boolean = false): <ERROR CLASS> Convert an Island Time Time to an equivalent NSDateComponents object.","title":"Parameters"},{"location":"api/core/io.islandtime.darwin/to-n-s-date-components/#parameters_3","text":"includeCalendar - true if the resulting NSDateComponents should include the ISO-8601 calendar Return an equivalent NSDateComponents object (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateTime .toNSDateComponents(includeCalendar: Boolean = false): <ERROR CLASS> Convert an Island Time DateTime to an equivalent NSDateComponents object.","title":"Parameters"},{"location":"api/core/io.islandtime.darwin/to-n-s-date-components/#parameters_4","text":"includeCalendar - true if the resulting NSDateComponents should include the ISO-8601 calendar Return an equivalent NSDateComponents object (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun OffsetTime .toNSDateComponents(includeCalendar: Boolean = false): <ERROR CLASS> Convert an Island Time OffsetTime to an equivalent NSDateComponents object.","title":"Parameters"},{"location":"api/core/io.islandtime.darwin/to-n-s-date-components/#parameters_5","text":"includeCalendar - true if the resulting NSDateComponents should include the ISO-8601 calendar Return an equivalent NSDateComponents object (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun OffsetDateTime .toNSDateComponents(includeCalendar: Boolean = false): <ERROR CLASS> Convert an Island Time OffsetDateTime to an equivalent NSDateComponents object.","title":"Parameters"},{"location":"api/core/io.islandtime.darwin/to-n-s-date-components/#parameters_6","text":"includeCalendar - true if the resulting NSDateComponents should include the ISO-8601 calendar Return an equivalent NSDateComponents object (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun ZonedDateTime .toNSDateComponents(includeCalendar: Boolean = false): <ERROR CLASS> Convert an Island Time ZonedDateTime to an equivalent NSDateComponents object.","title":"Parameters"},{"location":"api/core/io.islandtime.darwin/to-n-s-date-components/#parameters_7","text":"includeCalendar - true if the resulting NSDateComponents should include the ISO-8601 calendar Return an equivalent NSDateComponents object","title":"Parameters"},{"location":"api/core/io.islandtime.darwin/to-n-s-date-interval-or-null/","text":"core / io.islandtime.darwin / toNSDateIntervalOrNull toNSDateIntervalOrNull (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun <T : TimePoint <T>> TimePointInterval <T>.toNSDateIntervalOrNull(): <ERROR CLASS>? Convert to an equivalent NSDateInterval or null if the interval is unbounded.","title":"To n s date interval or null"},{"location":"api/core/io.islandtime.darwin/to-n-s-date-interval-or-null/#tonsdateintervalornull","text":"(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun <T : TimePoint <T>> TimePointInterval <T>.toNSDateIntervalOrNull(): <ERROR CLASS>? Convert to an equivalent NSDateInterval or null if the interval is unbounded.","title":"toNSDateIntervalOrNull"},{"location":"api/core/io.islandtime.darwin/to-n-s-date-interval/","text":"core / io.islandtime.darwin / toNSDateInterval toNSDateInterval (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun <T : TimePoint <T>> TimePointInterval <T>.toNSDateInterval(): <ERROR CLASS> Convert to an equivalent NSDateInterval . Exceptions UnsupportedOperationException - if the interval is unbounded","title":"To n s date interval"},{"location":"api/core/io.islandtime.darwin/to-n-s-date-interval/#tonsdateinterval","text":"(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun <T : TimePoint <T>> TimePointInterval <T>.toNSDateInterval(): <ERROR CLASS> Convert to an equivalent NSDateInterval .","title":"toNSDateInterval"},{"location":"api/core/io.islandtime.darwin/to-n-s-date-interval/#exceptions","text":"UnsupportedOperationException - if the interval is unbounded","title":"Exceptions"},{"location":"api/core/io.islandtime.darwin/to-n-s-date/","text":"core / io.islandtime.darwin / toNSDate toNSDate (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun <T> TimePoint <T>.toNSDate(): <ERROR CLASS> Convert an Island Time TimePoint to an NSDate .","title":"To n s date"},{"location":"api/core/io.islandtime.darwin/to-n-s-date/#tonsdate","text":"(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun <T> TimePoint <T>.toNSDate(): <ERROR CLASS> Convert an Island Time TimePoint to an NSDate .","title":"toNSDate"},{"location":"api/core/io.islandtime.darwin/to-n-s-time-interval/","text":"core / io.islandtime.darwin / toNSTimeInterval toNSTimeInterval (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Duration .toNSTimeInterval(): <ERROR CLASS> fun IntDays .toNSTimeInterval(): <ERROR CLASS> fun LongDays .toNSTimeInterval(): <ERROR CLASS> fun IntHours .toNSTimeInterval(): <ERROR CLASS> fun LongHours .toNSTimeInterval(): <ERROR CLASS> fun IntMinutes .toNSTimeInterval(): <ERROR CLASS> fun LongMinutes .toNSTimeInterval(): <ERROR CLASS> fun IntSeconds .toNSTimeInterval(): <ERROR CLASS> fun LongSeconds .toNSTimeInterval(): <ERROR CLASS> fun IntMilliseconds .toNSTimeInterval(): <ERROR CLASS> fun LongMilliseconds .toNSTimeInterval(): <ERROR CLASS> fun IntMicroseconds .toNSTimeInterval(): <ERROR CLASS> fun LongMicroseconds .toNSTimeInterval(): <ERROR CLASS> fun IntNanoseconds .toNSTimeInterval(): <ERROR CLASS> fun LongNanoseconds .toNSTimeInterval(): <ERROR CLASS> Convert to an equivalent NSTimeInterval .","title":"To n s time interval"},{"location":"api/core/io.islandtime.darwin/to-n-s-time-interval/#tonstimeinterval","text":"(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Duration .toNSTimeInterval(): <ERROR CLASS> fun IntDays .toNSTimeInterval(): <ERROR CLASS> fun LongDays .toNSTimeInterval(): <ERROR CLASS> fun IntHours .toNSTimeInterval(): <ERROR CLASS> fun LongHours .toNSTimeInterval(): <ERROR CLASS> fun IntMinutes .toNSTimeInterval(): <ERROR CLASS> fun LongMinutes .toNSTimeInterval(): <ERROR CLASS> fun IntSeconds .toNSTimeInterval(): <ERROR CLASS> fun LongSeconds .toNSTimeInterval(): <ERROR CLASS> fun IntMilliseconds .toNSTimeInterval(): <ERROR CLASS> fun LongMilliseconds .toNSTimeInterval(): <ERROR CLASS> fun IntMicroseconds .toNSTimeInterval(): <ERROR CLASS> fun LongMicroseconds .toNSTimeInterval(): <ERROR CLASS> fun IntNanoseconds .toNSTimeInterval(): <ERROR CLASS> fun LongNanoseconds .toNSTimeInterval(): <ERROR CLASS> Convert to an equivalent NSTimeInterval .","title":"toNSTimeInterval"},{"location":"api/core/io.islandtime.darwin/to-n-s-time-zone-or-null/","text":"core / io.islandtime.darwin / toNSTimeZoneOrNull toNSTimeZoneOrNull (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun TimeZone .toNSTimeZoneOrNull(): <ERROR CLASS>? Convert an Island Time TimeZone to an NSTimeZone or null if the identifier isn't recognized as valid for an NSTimeZone .","title":"To n s time zone or null"},{"location":"api/core/io.islandtime.darwin/to-n-s-time-zone-or-null/#tonstimezoneornull","text":"(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun TimeZone .toNSTimeZoneOrNull(): <ERROR CLASS>? Convert an Island Time TimeZone to an NSTimeZone or null if the identifier isn't recognized as valid for an NSTimeZone .","title":"toNSTimeZoneOrNull"},{"location":"api/core/io.islandtime.darwin/to-n-s-time-zone/","text":"core / io.islandtime.darwin / toNSTimeZone toNSTimeZone (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun UtcOffset .toNSTimeZone(): <ERROR CLASS> Convert an Island Time UtcOffset into an equivalent NSTimeZone with a fixed UTC offset. Note that NSTimeZone will round the totalSeconds value to the nearest minute. (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun TimeZone .toNSTimeZone(): <ERROR CLASS> Convert an Island Time TimeZone to an NSTimeZone . Exceptions TimeZoneRulesException - if the identifier isn't recognized as valid for an NSTimeZone","title":"To n s time zone"},{"location":"api/core/io.islandtime.darwin/to-n-s-time-zone/#tonstimezone","text":"(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun UtcOffset .toNSTimeZone(): <ERROR CLASS> Convert an Island Time UtcOffset into an equivalent NSTimeZone with a fixed UTC offset. Note that NSTimeZone will round the totalSeconds value to the nearest minute. (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun TimeZone .toNSTimeZone(): <ERROR CLASS> Convert an Island Time TimeZone to an NSTimeZone .","title":"toNSTimeZone"},{"location":"api/core/io.islandtime.darwin/to-n-s-time-zone/#exceptions","text":"TimeZoneRulesException - if the identifier isn't recognized as valid for an NSTimeZone","title":"Exceptions"},{"location":"api/core/io.islandtime.format/","text":"core / io.islandtime.format Package io.islandtime.format Classes involved in the formatting of dates and times. Types Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) DateTimeTextProvider An abstraction that allows localized date-time text to be supplied from different data sources. interface DateTimeTextProvider (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) NumberStyle Defines the set of characters that should be used when parsing or formatting numbers. data class NumberStyle ParsableTextList (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) typealias ParsableTextList = List <<ERROR CLASS>< String , Long >> (jvm) typealias ParsableTextList = List < Pair < String , Long >> (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) PlatformDateTimeTextProvider The default provider of localized date-time text for the current platform. object PlatformDateTimeTextProvider : DateTimeTextProvider (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) PlatformTimeZoneTextProvider The default provider of localized time zone text for the current platform. object PlatformTimeZoneTextProvider : TimeZoneTextProvider (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) TextStyle A style of text. The meaning may vary depending on the context. Standalone styles should be used when displaying text by itself since some languages have different names in the context of a date and time. enum class TextStyle (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) TimeZoneTextProvider An abstraction that allows localized time zone names to be supplied from different data sources. interface TimeZoneTextProvider (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) TimeZoneTextStyle A time zone text style. enum class TimeZoneTextStyle Extensions for External Classes Name Summary (jvm) java.util.Locale Properties Name Summary (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) numberStyle The NumberStyle associated with this locale. val <ERROR CLASS>.numberStyle: NumberStyle","title":"Index"},{"location":"api/core/io.islandtime.format/#package-ioislandtimeformat","text":"Classes involved in the formatting of dates and times.","title":"Package io.islandtime.format"},{"location":"api/core/io.islandtime.format/#types","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) DateTimeTextProvider An abstraction that allows localized date-time text to be supplied from different data sources. interface DateTimeTextProvider (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) NumberStyle Defines the set of characters that should be used when parsing or formatting numbers. data class NumberStyle ParsableTextList (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) typealias ParsableTextList = List <<ERROR CLASS>< String , Long >> (jvm) typealias ParsableTextList = List < Pair < String , Long >> (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) PlatformDateTimeTextProvider The default provider of localized date-time text for the current platform. object PlatformDateTimeTextProvider : DateTimeTextProvider (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) PlatformTimeZoneTextProvider The default provider of localized time zone text for the current platform. object PlatformTimeZoneTextProvider : TimeZoneTextProvider (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) TextStyle A style of text. The meaning may vary depending on the context. Standalone styles should be used when displaying text by itself since some languages have different names in the context of a date and time. enum class TextStyle (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) TimeZoneTextProvider An abstraction that allows localized time zone names to be supplied from different data sources. interface TimeZoneTextProvider (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) TimeZoneTextStyle A time zone text style. enum class TimeZoneTextStyle","title":"Types"},{"location":"api/core/io.islandtime.format/#extensions-for-external-classes","text":"Name Summary (jvm) java.util.Locale","title":"Extensions for External Classes"},{"location":"api/core/io.islandtime.format/#properties","text":"Name Summary (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) numberStyle The NumberStyle associated with this locale. val <ERROR CLASS>.numberStyle: NumberStyle","title":"Properties"},{"location":"api/core/io.islandtime.format/-parsable-text-list/","text":"core / io.islandtime.format / ParsableTextList ParsableTextList (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) typealias ParsableTextList = List <<ERROR CLASS>< String , Long >> (jvm) typealias ParsableTextList = List < Pair < String , Long >>","title":" parsable text list"},{"location":"api/core/io.islandtime.format/-parsable-text-list/#parsabletextlist","text":"(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) typealias ParsableTextList = List <<ERROR CLASS>< String , Long >> (jvm) typealias ParsableTextList = List < Pair < String , Long >>","title":"ParsableTextList"},{"location":"api/core/io.islandtime.format/number-style/","text":"core / io.islandtime.format / numberStyle numberStyle (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val <ERROR CLASS>.numberStyle: NumberStyle The NumberStyle associated with this locale.","title":"Number style"},{"location":"api/core/io.islandtime.format/number-style/#numberstyle","text":"(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val <ERROR CLASS>.numberStyle: NumberStyle The NumberStyle associated with this locale.","title":"numberStyle"},{"location":"api/core/io.islandtime.format/-date-time-text-provider/","text":"core / io.islandtime.format / DateTimeTextProvider DateTimeTextProvider (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) interface DateTimeTextProvider An abstraction that allows localized date-time text to be supplied from different data sources. Types Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) Companion companion object Companion : DateTimeTextProvider Functions Name Summary amPmTextFor Get the localized AM/PM text.(jvm) open fun amPmTextFor(value: Long , locale: Locale ): String ? (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) open fun amPmTextFor(value: Long , locale: <ERROR CLASS>): String ? dayOfWeekTextFor Get the localized day of the week text for a given ISO day of week number.(jvm) open fun dayOfWeekTextFor(value: Long , style: TextStyle , locale: Locale ): String ? (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) open fun dayOfWeekTextFor(value: Long , style: TextStyle , locale: <ERROR CLASS>): String ? eraTextFor Get the localized ISO era text.(jvm) open fun eraTextFor(value: Long , style: TextStyle , locale: Locale ): String ? (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) open fun eraTextFor(value: Long , style: TextStyle , locale: <ERROR CLASS>): String ? monthTextFor Get the localized month text for a given ISO month number.(jvm) open fun monthTextFor(value: Long , style: TextStyle , locale: Locale ): String ? (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) open fun monthTextFor(value: Long , style: TextStyle , locale: <ERROR CLASS>): String ? parsableTextFor Get a list of all localized text in a particular style along with the values associated that text. The list will be sorted in descending order by the length of text, making it suitable for parsing.(jvm) open fun parsableTextFor(field: DateTimeField , style: TextStyle , locale: Locale ): ParsableTextList (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) open fun parsableTextFor(field: DateTimeField , style: TextStyle , locale: <ERROR CLASS>): ParsableTextList Get a list of all localized text in a set of styles along with the values associated that text. The list will be sorted in descending order by the length of text, making it suitable for parsing.(jvm) abstract fun parsableTextFor(field: DateTimeField , styles: Set < TextStyle >, locale: Locale ): ParsableTextList (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract fun parsableTextFor(field: DateTimeField , styles: Set < TextStyle >, locale: <ERROR CLASS>): ParsableTextList textFor Get localized text for the specified field, value, style, and locale.(jvm) open fun textFor(field: DateTimeField , value: Long , style: TextStyle , locale: Locale ): String ? (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) open fun textFor(field: DateTimeField , value: Long , style: TextStyle , locale: <ERROR CLASS>): String ? Inheritors Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) Companion companion object Companion : DateTimeTextProvider (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) PlatformDateTimeTextProvider The default provider of localized date-time text for the current platform. object PlatformDateTimeTextProvider : DateTimeTextProvider","title":"Index"},{"location":"api/core/io.islandtime.format/-date-time-text-provider/#datetimetextprovider","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) interface DateTimeTextProvider An abstraction that allows localized date-time text to be supplied from different data sources.","title":"DateTimeTextProvider"},{"location":"api/core/io.islandtime.format/-date-time-text-provider/#types","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) Companion companion object Companion : DateTimeTextProvider","title":"Types"},{"location":"api/core/io.islandtime.format/-date-time-text-provider/#functions","text":"Name Summary amPmTextFor Get the localized AM/PM text.(jvm) open fun amPmTextFor(value: Long , locale: Locale ): String ? (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) open fun amPmTextFor(value: Long , locale: <ERROR CLASS>): String ? dayOfWeekTextFor Get the localized day of the week text for a given ISO day of week number.(jvm) open fun dayOfWeekTextFor(value: Long , style: TextStyle , locale: Locale ): String ? (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) open fun dayOfWeekTextFor(value: Long , style: TextStyle , locale: <ERROR CLASS>): String ? eraTextFor Get the localized ISO era text.(jvm) open fun eraTextFor(value: Long , style: TextStyle , locale: Locale ): String ? (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) open fun eraTextFor(value: Long , style: TextStyle , locale: <ERROR CLASS>): String ? monthTextFor Get the localized month text for a given ISO month number.(jvm) open fun monthTextFor(value: Long , style: TextStyle , locale: Locale ): String ? (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) open fun monthTextFor(value: Long , style: TextStyle , locale: <ERROR CLASS>): String ? parsableTextFor Get a list of all localized text in a particular style along with the values associated that text. The list will be sorted in descending order by the length of text, making it suitable for parsing.(jvm) open fun parsableTextFor(field: DateTimeField , style: TextStyle , locale: Locale ): ParsableTextList (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) open fun parsableTextFor(field: DateTimeField , style: TextStyle , locale: <ERROR CLASS>): ParsableTextList Get a list of all localized text in a set of styles along with the values associated that text. The list will be sorted in descending order by the length of text, making it suitable for parsing.(jvm) abstract fun parsableTextFor(field: DateTimeField , styles: Set < TextStyle >, locale: Locale ): ParsableTextList (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract fun parsableTextFor(field: DateTimeField , styles: Set < TextStyle >, locale: <ERROR CLASS>): ParsableTextList textFor Get localized text for the specified field, value, style, and locale.(jvm) open fun textFor(field: DateTimeField , value: Long , style: TextStyle , locale: Locale ): String ? (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) open fun textFor(field: DateTimeField , value: Long , style: TextStyle , locale: <ERROR CLASS>): String ?","title":"Functions"},{"location":"api/core/io.islandtime.format/-date-time-text-provider/#inheritors","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) Companion companion object Companion : DateTimeTextProvider (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) PlatformDateTimeTextProvider The default provider of localized date-time text for the current platform. object PlatformDateTimeTextProvider : DateTimeTextProvider","title":"Inheritors"},{"location":"api/core/io.islandtime.format/-date-time-text-provider/-companion/","text":"core / io.islandtime.format / DateTimeTextProvider / Companion Companion (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) companion object Companion : DateTimeTextProvider","title":" companion"},{"location":"api/core/io.islandtime.format/-date-time-text-provider/-companion/#companion","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) companion object Companion : DateTimeTextProvider","title":"Companion"},{"location":"api/core/io.islandtime.format/-date-time-text-provider/am-pm-text-for/","text":"core / io.islandtime.format / DateTimeTextProvider / amPmTextFor amPmTextFor (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) open fun amPmTextFor(value: Long , locale: <ERROR CLASS>): String ? Get the localized AM/PM text. Parameters value - 0 for AM or 1 for PM locale - the locale Exceptions DateTimeException - if the value is not 0 or 1 Return the localized AM/PM text or null if unavailable (jvm) open fun amPmTextFor(value: Long , locale: Locale ): String ? Get the localized AM/PM text. Parameters value - 0 for AM or 1 for PM locale - the locale Exceptions DateTimeException - if the value is not 0 or 1 Return the localized AM/PM text or null if unavailable","title":"Am pm text for"},{"location":"api/core/io.islandtime.format/-date-time-text-provider/am-pm-text-for/#ampmtextfor","text":"(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) open fun amPmTextFor(value: Long , locale: <ERROR CLASS>): String ? Get the localized AM/PM text.","title":"amPmTextFor"},{"location":"api/core/io.islandtime.format/-date-time-text-provider/am-pm-text-for/#parameters","text":"value - 0 for AM or 1 for PM locale - the locale","title":"Parameters"},{"location":"api/core/io.islandtime.format/-date-time-text-provider/am-pm-text-for/#exceptions","text":"DateTimeException - if the value is not 0 or 1 Return the localized AM/PM text or null if unavailable (jvm) open fun amPmTextFor(value: Long , locale: Locale ): String ? Get the localized AM/PM text.","title":"Exceptions"},{"location":"api/core/io.islandtime.format/-date-time-text-provider/am-pm-text-for/#parameters_1","text":"value - 0 for AM or 1 for PM locale - the locale","title":"Parameters"},{"location":"api/core/io.islandtime.format/-date-time-text-provider/am-pm-text-for/#exceptions_1","text":"DateTimeException - if the value is not 0 or 1 Return the localized AM/PM text or null if unavailable","title":"Exceptions"},{"location":"api/core/io.islandtime.format/-date-time-text-provider/day-of-week-text-for/","text":"core / io.islandtime.format / DateTimeTextProvider / dayOfWeekTextFor dayOfWeekTextFor (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) open fun dayOfWeekTextFor(value: Long , style: TextStyle , locale: <ERROR CLASS>): String ? Get the localized day of the week text for a given ISO day of week number. Parameters value - an ISO day of week number, from Monday (1) to Sunday (7) style - the style of the text locale - the locale Exceptions DateTimeException - if the value is not a valid day of the week number Return the localized day of week text or null if unavailable (jvm) open fun dayOfWeekTextFor(value: Long , style: TextStyle , locale: Locale ): String ? Get the localized day of the week text for a given ISO day of week number. Parameters value - an ISO day of week number, from Monday (1) to Sunday (7) style - the style of the text locale - the locale Exceptions DateTimeException - if the value is not a valid day of the week number Return the localized day of week text or null if unavailable","title":"Day of week text for"},{"location":"api/core/io.islandtime.format/-date-time-text-provider/day-of-week-text-for/#dayofweektextfor","text":"(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) open fun dayOfWeekTextFor(value: Long , style: TextStyle , locale: <ERROR CLASS>): String ? Get the localized day of the week text for a given ISO day of week number.","title":"dayOfWeekTextFor"},{"location":"api/core/io.islandtime.format/-date-time-text-provider/day-of-week-text-for/#parameters","text":"value - an ISO day of week number, from Monday (1) to Sunday (7) style - the style of the text locale - the locale","title":"Parameters"},{"location":"api/core/io.islandtime.format/-date-time-text-provider/day-of-week-text-for/#exceptions","text":"DateTimeException - if the value is not a valid day of the week number Return the localized day of week text or null if unavailable (jvm) open fun dayOfWeekTextFor(value: Long , style: TextStyle , locale: Locale ): String ? Get the localized day of the week text for a given ISO day of week number.","title":"Exceptions"},{"location":"api/core/io.islandtime.format/-date-time-text-provider/day-of-week-text-for/#parameters_1","text":"value - an ISO day of week number, from Monday (1) to Sunday (7) style - the style of the text locale - the locale","title":"Parameters"},{"location":"api/core/io.islandtime.format/-date-time-text-provider/day-of-week-text-for/#exceptions_1","text":"DateTimeException - if the value is not a valid day of the week number Return the localized day of week text or null if unavailable","title":"Exceptions"},{"location":"api/core/io.islandtime.format/-date-time-text-provider/era-text-for/","text":"core / io.islandtime.format / DateTimeTextProvider / eraTextFor eraTextFor (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) open fun eraTextFor(value: Long , style: TextStyle , locale: <ERROR CLASS>): String ? Get the localized ISO era text. Parameters value - 0 for BCE or 1 for CE locale - the locale style - the style of the text Exceptions DateTimeException - if the value is not 0 or 1 Return the localized era text or null if unavailable (jvm) open fun eraTextFor(value: Long , style: TextStyle , locale: Locale ): String ? Get the localized ISO era text. Parameters value - 0 for BCE or 1 for CE locale - the locale style - the style of the text Exceptions DateTimeException - if the value is not 0 or 1 Return the localized era text or null if unavailable","title":"Era text for"},{"location":"api/core/io.islandtime.format/-date-time-text-provider/era-text-for/#eratextfor","text":"(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) open fun eraTextFor(value: Long , style: TextStyle , locale: <ERROR CLASS>): String ? Get the localized ISO era text.","title":"eraTextFor"},{"location":"api/core/io.islandtime.format/-date-time-text-provider/era-text-for/#parameters","text":"value - 0 for BCE or 1 for CE locale - the locale style - the style of the text","title":"Parameters"},{"location":"api/core/io.islandtime.format/-date-time-text-provider/era-text-for/#exceptions","text":"DateTimeException - if the value is not 0 or 1 Return the localized era text or null if unavailable (jvm) open fun eraTextFor(value: Long , style: TextStyle , locale: Locale ): String ? Get the localized ISO era text.","title":"Exceptions"},{"location":"api/core/io.islandtime.format/-date-time-text-provider/era-text-for/#parameters_1","text":"value - 0 for BCE or 1 for CE locale - the locale style - the style of the text","title":"Parameters"},{"location":"api/core/io.islandtime.format/-date-time-text-provider/era-text-for/#exceptions_1","text":"DateTimeException - if the value is not 0 or 1 Return the localized era text or null if unavailable","title":"Exceptions"},{"location":"api/core/io.islandtime.format/-date-time-text-provider/month-text-for/","text":"core / io.islandtime.format / DateTimeTextProvider / monthTextFor monthTextFor (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) open fun monthTextFor(value: Long , style: TextStyle , locale: <ERROR CLASS>): String ? Get the localized month text for a given ISO month number. Parameters value - an ISO month number, from January (1) to December (12) style - the style of the text locale - the locale Exceptions DateTimeException - if the value is not a valid month number Return the localized month text or null if unavailable (jvm) open fun monthTextFor(value: Long , style: TextStyle , locale: Locale ): String ? Get the localized month text for a given ISO month number. Parameters value - an ISO month number, from January (1) to December (12) style - the style of the text locale - the locale Exceptions DateTimeException - if the value is not a valid month number Return the localized month text or null if unavailable","title":"Month text for"},{"location":"api/core/io.islandtime.format/-date-time-text-provider/month-text-for/#monthtextfor","text":"(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) open fun monthTextFor(value: Long , style: TextStyle , locale: <ERROR CLASS>): String ? Get the localized month text for a given ISO month number.","title":"monthTextFor"},{"location":"api/core/io.islandtime.format/-date-time-text-provider/month-text-for/#parameters","text":"value - an ISO month number, from January (1) to December (12) style - the style of the text locale - the locale","title":"Parameters"},{"location":"api/core/io.islandtime.format/-date-time-text-provider/month-text-for/#exceptions","text":"DateTimeException - if the value is not a valid month number Return the localized month text or null if unavailable (jvm) open fun monthTextFor(value: Long , style: TextStyle , locale: Locale ): String ? Get the localized month text for a given ISO month number.","title":"Exceptions"},{"location":"api/core/io.islandtime.format/-date-time-text-provider/month-text-for/#parameters_1","text":"value - an ISO month number, from January (1) to December (12) style - the style of the text locale - the locale","title":"Parameters"},{"location":"api/core/io.islandtime.format/-date-time-text-provider/month-text-for/#exceptions_1","text":"DateTimeException - if the value is not a valid month number Return the localized month text or null if unavailable","title":"Exceptions"},{"location":"api/core/io.islandtime.format/-date-time-text-provider/parsable-text-for/","text":"core / io.islandtime.format / DateTimeTextProvider / parsableTextFor parsableTextFor (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) open fun parsableTextFor(field: DateTimeField , style: TextStyle , locale: <ERROR CLASS>): ParsableTextList Get a list of all localized text in a particular style along with the values associated that text. The list will be sorted in descending order by the length of text, making it suitable for parsing. Any text with conflicting values will be excluded. For example, the English narrow month name \"M\" could be March or May , so any attempt to parse it would be ambiguous. Parameters field - the field to get text for style - the style of the text locale - the locale Return the list of parsable text -- empty if the field is invalid (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract fun parsableTextFor(field: DateTimeField , styles: Set < TextStyle >, locale: <ERROR CLASS>): ParsableTextList Get a list of all localized text in a set of styles along with the values associated that text. The list will be sorted in descending order by the length of text, making it suitable for parsing. Any text with conflicting values will be excluded. For example, the English narrow month name \"M\" could be March or May , so any attempt to parse it would be ambiguous. Parameters field - the field to get text for styles - the set of styles to include locale - the locale Return the list of parsable text -- empty if the field is invalid or no styles are specified (jvm) open fun parsableTextFor(field: DateTimeField , style: TextStyle , locale: Locale ): ParsableTextList Get a list of all localized text in a particular style along with the values associated that text. The list will be sorted in descending order by the length of text, making it suitable for parsing. Any text with conflicting values will be excluded. For example, the English narrow month name \"M\" could be March or May , so any attempt to parse it would be ambiguous. Parameters field - the field to get text for style - the style of the text locale - the locale Return the list of parsable text -- empty if the field is invalid (jvm) abstract fun parsableTextFor(field: DateTimeField , styles: Set < TextStyle >, locale: Locale ): ParsableTextList Get a list of all localized text in a set of styles along with the values associated that text. The list will be sorted in descending order by the length of text, making it suitable for parsing. Any text with conflicting values will be excluded. For example, the English narrow month name \"M\" could be March or May , so any attempt to parse it would be ambiguous. Parameters field - the field to get text for styles - the set of styles to include locale - the locale Return the list of parsable text -- empty if the field is invalid or no styles are specified","title":"Parsable text for"},{"location":"api/core/io.islandtime.format/-date-time-text-provider/parsable-text-for/#parsabletextfor","text":"(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) open fun parsableTextFor(field: DateTimeField , style: TextStyle , locale: <ERROR CLASS>): ParsableTextList Get a list of all localized text in a particular style along with the values associated that text. The list will be sorted in descending order by the length of text, making it suitable for parsing. Any text with conflicting values will be excluded. For example, the English narrow month name \"M\" could be March or May , so any attempt to parse it would be ambiguous.","title":"parsableTextFor"},{"location":"api/core/io.islandtime.format/-date-time-text-provider/parsable-text-for/#parameters","text":"field - the field to get text for style - the style of the text locale - the locale Return the list of parsable text -- empty if the field is invalid (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract fun parsableTextFor(field: DateTimeField , styles: Set < TextStyle >, locale: <ERROR CLASS>): ParsableTextList Get a list of all localized text in a set of styles along with the values associated that text. The list will be sorted in descending order by the length of text, making it suitable for parsing. Any text with conflicting values will be excluded. For example, the English narrow month name \"M\" could be March or May , so any attempt to parse it would be ambiguous.","title":"Parameters"},{"location":"api/core/io.islandtime.format/-date-time-text-provider/parsable-text-for/#parameters_1","text":"field - the field to get text for styles - the set of styles to include locale - the locale Return the list of parsable text -- empty if the field is invalid or no styles are specified (jvm) open fun parsableTextFor(field: DateTimeField , style: TextStyle , locale: Locale ): ParsableTextList Get a list of all localized text in a particular style along with the values associated that text. The list will be sorted in descending order by the length of text, making it suitable for parsing. Any text with conflicting values will be excluded. For example, the English narrow month name \"M\" could be March or May , so any attempt to parse it would be ambiguous.","title":"Parameters"},{"location":"api/core/io.islandtime.format/-date-time-text-provider/parsable-text-for/#parameters_2","text":"field - the field to get text for style - the style of the text locale - the locale Return the list of parsable text -- empty if the field is invalid (jvm) abstract fun parsableTextFor(field: DateTimeField , styles: Set < TextStyle >, locale: Locale ): ParsableTextList Get a list of all localized text in a set of styles along with the values associated that text. The list will be sorted in descending order by the length of text, making it suitable for parsing. Any text with conflicting values will be excluded. For example, the English narrow month name \"M\" could be March or May , so any attempt to parse it would be ambiguous.","title":"Parameters"},{"location":"api/core/io.islandtime.format/-date-time-text-provider/parsable-text-for/#parameters_3","text":"field - the field to get text for styles - the set of styles to include locale - the locale Return the list of parsable text -- empty if the field is invalid or no styles are specified","title":"Parameters"},{"location":"api/core/io.islandtime.format/-date-time-text-provider/text-for/","text":"core / io.islandtime.format / DateTimeTextProvider / textFor textFor (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) open fun textFor(field: DateTimeField , value: Long , style: TextStyle , locale: <ERROR CLASS>): String ? Get localized text for the specified field, value, style, and locale. Parameters field - the field to get text for value - the value of the field style - the style of the text locale - the locale Exceptions DateTimeException - if the value if out of range for the specified field Return the localized text or null if unavailable (jvm) open fun textFor(field: DateTimeField , value: Long , style: TextStyle , locale: Locale ): String ? Get localized text for the specified field, value, style, and locale. Parameters field - the field to get text for value - the value of the field style - the style of the text locale - the locale Exceptions DateTimeException - if the value if out of range for the specified field Return the localized text or null if unavailable","title":"Text for"},{"location":"api/core/io.islandtime.format/-date-time-text-provider/text-for/#textfor","text":"(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) open fun textFor(field: DateTimeField , value: Long , style: TextStyle , locale: <ERROR CLASS>): String ? Get localized text for the specified field, value, style, and locale.","title":"textFor"},{"location":"api/core/io.islandtime.format/-date-time-text-provider/text-for/#parameters","text":"field - the field to get text for value - the value of the field style - the style of the text locale - the locale","title":"Parameters"},{"location":"api/core/io.islandtime.format/-date-time-text-provider/text-for/#exceptions","text":"DateTimeException - if the value if out of range for the specified field Return the localized text or null if unavailable (jvm) open fun textFor(field: DateTimeField , value: Long , style: TextStyle , locale: Locale ): String ? Get localized text for the specified field, value, style, and locale.","title":"Exceptions"},{"location":"api/core/io.islandtime.format/-date-time-text-provider/text-for/#parameters_1","text":"field - the field to get text for value - the value of the field style - the style of the text locale - the locale","title":"Parameters"},{"location":"api/core/io.islandtime.format/-date-time-text-provider/text-for/#exceptions_1","text":"DateTimeException - if the value if out of range for the specified field Return the localized text or null if unavailable","title":"Exceptions"},{"location":"api/core/io.islandtime.format/-number-style/","text":"core / io.islandtime.format / NumberStyle NumberStyle (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) data class NumberStyle Defines the set of characters that should be used when parsing or formatting numbers. Constructors Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init> Defines the set of characters that should be used when parsing or formatting numbers. <init>(zeroDigit: Char , plusSign: List < Char >, minusSign: List < Char >, decimalSeparator: List < Char >) Properties Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) decimalSeparator A list of allowed decimal separator characters. The first element will be used when formatting val decimalSeparator: List < Char > (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) minusSign A list of allowed minus sign characters. The first element will be used when formatting. val minusSign: List < Char > (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) plusSign A list of allowed plus sign characters. The first element will be used when formatting. val plusSign: List < Char > (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) zeroDigit The character that represents zero. val zeroDigit: Char Companion Object Properties Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) DEFAULT A locale-agnostic set of characters, matching those allowed in the date-time formats defined in ISO-8601. val DEFAULT: NumberStyle","title":"Index"},{"location":"api/core/io.islandtime.format/-number-style/#numberstyle","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) data class NumberStyle Defines the set of characters that should be used when parsing or formatting numbers.","title":"NumberStyle"},{"location":"api/core/io.islandtime.format/-number-style/#constructors","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init> Defines the set of characters that should be used when parsing or formatting numbers. <init>(zeroDigit: Char , plusSign: List < Char >, minusSign: List < Char >, decimalSeparator: List < Char >)","title":"Constructors"},{"location":"api/core/io.islandtime.format/-number-style/#properties","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) decimalSeparator A list of allowed decimal separator characters. The first element will be used when formatting val decimalSeparator: List < Char > (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) minusSign A list of allowed minus sign characters. The first element will be used when formatting. val minusSign: List < Char > (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) plusSign A list of allowed plus sign characters. The first element will be used when formatting. val plusSign: List < Char > (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) zeroDigit The character that represents zero. val zeroDigit: Char","title":"Properties"},{"location":"api/core/io.islandtime.format/-number-style/#companion-object-properties","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) DEFAULT A locale-agnostic set of characters, matching those allowed in the date-time formats defined in ISO-8601. val DEFAULT: NumberStyle","title":"Companion Object Properties"},{"location":"api/core/io.islandtime.format/-number-style/-d-e-f-a-u-l-t/","text":"core / io.islandtime.format / NumberStyle / DEFAULT DEFAULT (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val DEFAULT: NumberStyle A locale-agnostic set of characters, matching those allowed in the date-time formats defined in ISO-8601. Zero: '0' Plus sign: '+' Minus sign: '-' or '\u2212' Decimal separator: '.' or ','","title":" d e f a u l t"},{"location":"api/core/io.islandtime.format/-number-style/-d-e-f-a-u-l-t/#default","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val DEFAULT: NumberStyle A locale-agnostic set of characters, matching those allowed in the date-time formats defined in ISO-8601. Zero: '0' Plus sign: '+' Minus sign: '-' or '\u2212' Decimal separator: '.' or ','","title":"DEFAULT"},{"location":"api/core/io.islandtime.format/-number-style/-init-/","text":"core / io.islandtime.format / NumberStyle / <init> <init> (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init>(zeroDigit: Char , plusSign: List < Char >, minusSign: List < Char >, decimalSeparator: List < Char >) Defines the set of characters that should be used when parsing or formatting numbers.","title":" init "},{"location":"api/core/io.islandtime.format/-number-style/-init-/#init","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init>(zeroDigit: Char , plusSign: List < Char >, minusSign: List < Char >, decimalSeparator: List < Char >) Defines the set of characters that should be used when parsing or formatting numbers.","title":"&lt;init&gt;"},{"location":"api/core/io.islandtime.format/-number-style/decimal-separator/","text":"core / io.islandtime.format / NumberStyle / decimalSeparator decimalSeparator (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val decimalSeparator: List < Char > A list of allowed decimal separator characters. The first element will be used when formatting Property decimalSeparator - A list of allowed decimal separator characters. The first element will be used when formatting","title":"Decimal separator"},{"location":"api/core/io.islandtime.format/-number-style/decimal-separator/#decimalseparator","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val decimalSeparator: List < Char > A list of allowed decimal separator characters. The first element will be used when formatting","title":"decimalSeparator"},{"location":"api/core/io.islandtime.format/-number-style/decimal-separator/#property","text":"decimalSeparator - A list of allowed decimal separator characters. The first element will be used when formatting","title":"Property"},{"location":"api/core/io.islandtime.format/-number-style/minus-sign/","text":"core / io.islandtime.format / NumberStyle / minusSign minusSign (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val minusSign: List < Char > A list of allowed minus sign characters. The first element will be used when formatting. Property minusSign - A list of allowed minus sign characters. The first element will be used when formatting.","title":"Minus sign"},{"location":"api/core/io.islandtime.format/-number-style/minus-sign/#minussign","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val minusSign: List < Char > A list of allowed minus sign characters. The first element will be used when formatting.","title":"minusSign"},{"location":"api/core/io.islandtime.format/-number-style/minus-sign/#property","text":"minusSign - A list of allowed minus sign characters. The first element will be used when formatting.","title":"Property"},{"location":"api/core/io.islandtime.format/-number-style/plus-sign/","text":"core / io.islandtime.format / NumberStyle / plusSign plusSign (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val plusSign: List < Char > A list of allowed plus sign characters. The first element will be used when formatting. Property plusSign - A list of allowed plus sign characters. The first element will be used when formatting.","title":"Plus sign"},{"location":"api/core/io.islandtime.format/-number-style/plus-sign/#plussign","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val plusSign: List < Char > A list of allowed plus sign characters. The first element will be used when formatting.","title":"plusSign"},{"location":"api/core/io.islandtime.format/-number-style/plus-sign/#property","text":"plusSign - A list of allowed plus sign characters. The first element will be used when formatting.","title":"Property"},{"location":"api/core/io.islandtime.format/-number-style/zero-digit/","text":"core / io.islandtime.format / NumberStyle / zeroDigit zeroDigit (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val zeroDigit: Char The character that represents zero. Property zeroDigit - The character that represents zero.","title":"Zero digit"},{"location":"api/core/io.islandtime.format/-number-style/zero-digit/#zerodigit","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val zeroDigit: Char The character that represents zero.","title":"zeroDigit"},{"location":"api/core/io.islandtime.format/-number-style/zero-digit/#property","text":"zeroDigit - The character that represents zero.","title":"Property"},{"location":"api/core/io.islandtime.format/-platform-date-time-text-provider/","text":"core / io.islandtime.format / PlatformDateTimeTextProvider PlatformDateTimeTextProvider (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) object PlatformDateTimeTextProvider : DateTimeTextProvider The default provider of localized date-time text for the current platform. Functions Name Summary amPmTextFor Get the localized AM/PM text.(jvm) fun amPmTextFor(value: Long , locale: Locale ): String ? (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun amPmTextFor(value: Long , locale: <ERROR CLASS>): String ? dayOfWeekTextFor Get the localized day of the week text for a given ISO day of week number.(jvm) fun dayOfWeekTextFor(value: Long , style: TextStyle , locale: Locale ): String ? (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun dayOfWeekTextFor(value: Long , style: TextStyle , locale: <ERROR CLASS>): String ? eraTextFor Get the localized ISO era text.(jvm) fun eraTextFor(value: Long , style: TextStyle , locale: Locale ): String ? (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun eraTextFor(value: Long , style: TextStyle , locale: <ERROR CLASS>): String ? monthTextFor Get the localized month text for a given ISO month number.(jvm) fun monthTextFor(value: Long , style: TextStyle , locale: Locale ): String ? (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun monthTextFor(value: Long , style: TextStyle , locale: <ERROR CLASS>): String ? parsableTextFor Get a list of all localized text in a set of styles along with the values associated that text. The list will be sorted in descending order by the length of text, making it suitable for parsing.(jvm) fun parsableTextFor(field: DateTimeField , styles: Set < TextStyle >, locale: Locale ): ParsableTextList (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun parsableTextFor(field: DateTimeField , styles: Set < TextStyle >, locale: <ERROR CLASS>): ParsableTextList Inherited Functions Name Summary (jvm) amPmTextFor Get the localized AM/PM text. open fun amPmTextFor(value: Long , locale: Locale ): String ? (jvm) dayOfWeekTextFor Get the localized day of the week text for a given ISO day of week number. open fun dayOfWeekTextFor(value: Long , style: TextStyle , locale: Locale ): String ? (jvm) eraTextFor Get the localized ISO era text. open fun eraTextFor(value: Long , style: TextStyle , locale: Locale ): String ? (jvm) monthTextFor Get the localized month text for a given ISO month number. open fun monthTextFor(value: Long , style: TextStyle , locale: Locale ): String ? (jvm) parsableTextFor Get a list of all localized text in a particular style along with the values associated that text. The list will be sorted in descending order by the length of text, making it suitable for parsing. open fun parsableTextFor(field: DateTimeField , style: TextStyle , locale: Locale ): ParsableTextList Get a list of all localized text in a set of styles along with the values associated that text. The list will be sorted in descending order by the length of text, making it suitable for parsing. abstract fun parsableTextFor(field: DateTimeField , styles: Set < TextStyle >, locale: Locale ): ParsableTextList (jvm) textFor Get localized text for the specified field, value, style, and locale. open fun textFor(field: DateTimeField , value: Long , style: TextStyle , locale: Locale ): String ?","title":"Index"},{"location":"api/core/io.islandtime.format/-platform-date-time-text-provider/#platformdatetimetextprovider","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) object PlatformDateTimeTextProvider : DateTimeTextProvider The default provider of localized date-time text for the current platform.","title":"PlatformDateTimeTextProvider"},{"location":"api/core/io.islandtime.format/-platform-date-time-text-provider/#functions","text":"Name Summary amPmTextFor Get the localized AM/PM text.(jvm) fun amPmTextFor(value: Long , locale: Locale ): String ? (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun amPmTextFor(value: Long , locale: <ERROR CLASS>): String ? dayOfWeekTextFor Get the localized day of the week text for a given ISO day of week number.(jvm) fun dayOfWeekTextFor(value: Long , style: TextStyle , locale: Locale ): String ? (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun dayOfWeekTextFor(value: Long , style: TextStyle , locale: <ERROR CLASS>): String ? eraTextFor Get the localized ISO era text.(jvm) fun eraTextFor(value: Long , style: TextStyle , locale: Locale ): String ? (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun eraTextFor(value: Long , style: TextStyle , locale: <ERROR CLASS>): String ? monthTextFor Get the localized month text for a given ISO month number.(jvm) fun monthTextFor(value: Long , style: TextStyle , locale: Locale ): String ? (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun monthTextFor(value: Long , style: TextStyle , locale: <ERROR CLASS>): String ? parsableTextFor Get a list of all localized text in a set of styles along with the values associated that text. The list will be sorted in descending order by the length of text, making it suitable for parsing.(jvm) fun parsableTextFor(field: DateTimeField , styles: Set < TextStyle >, locale: Locale ): ParsableTextList (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun parsableTextFor(field: DateTimeField , styles: Set < TextStyle >, locale: <ERROR CLASS>): ParsableTextList","title":"Functions"},{"location":"api/core/io.islandtime.format/-platform-date-time-text-provider/#inherited-functions","text":"Name Summary (jvm) amPmTextFor Get the localized AM/PM text. open fun amPmTextFor(value: Long , locale: Locale ): String ? (jvm) dayOfWeekTextFor Get the localized day of the week text for a given ISO day of week number. open fun dayOfWeekTextFor(value: Long , style: TextStyle , locale: Locale ): String ? (jvm) eraTextFor Get the localized ISO era text. open fun eraTextFor(value: Long , style: TextStyle , locale: Locale ): String ? (jvm) monthTextFor Get the localized month text for a given ISO month number. open fun monthTextFor(value: Long , style: TextStyle , locale: Locale ): String ? (jvm) parsableTextFor Get a list of all localized text in a particular style along with the values associated that text. The list will be sorted in descending order by the length of text, making it suitable for parsing. open fun parsableTextFor(field: DateTimeField , style: TextStyle , locale: Locale ): ParsableTextList Get a list of all localized text in a set of styles along with the values associated that text. The list will be sorted in descending order by the length of text, making it suitable for parsing. abstract fun parsableTextFor(field: DateTimeField , styles: Set < TextStyle >, locale: Locale ): ParsableTextList (jvm) textFor Get localized text for the specified field, value, style, and locale. open fun textFor(field: DateTimeField , value: Long , style: TextStyle , locale: Locale ): String ?","title":"Inherited Functions"},{"location":"api/core/io.islandtime.format/-platform-date-time-text-provider/am-pm-text-for/","text":"core / io.islandtime.format / PlatformDateTimeTextProvider / amPmTextFor amPmTextFor (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun amPmTextFor(value: Long , locale: <ERROR CLASS>): String ? Get the localized AM/PM text. Parameters value - 0 for AM or 1 for PM locale - the locale Exceptions DateTimeException - if the value is not 0 or 1 Return the localized AM/PM text or null if unavailable (jvm) fun amPmTextFor(value: Long , locale: Locale ): String ? Overrides DateTimeTextProvider.amPmTextFor Get the localized AM/PM text. Parameters value - 0 for AM or 1 for PM locale - the locale Exceptions DateTimeException - if the value is not 0 or 1 Return the localized AM/PM text or null if unavailable","title":"Am pm text for"},{"location":"api/core/io.islandtime.format/-platform-date-time-text-provider/am-pm-text-for/#ampmtextfor","text":"(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun amPmTextFor(value: Long , locale: <ERROR CLASS>): String ? Get the localized AM/PM text.","title":"amPmTextFor"},{"location":"api/core/io.islandtime.format/-platform-date-time-text-provider/am-pm-text-for/#parameters","text":"value - 0 for AM or 1 for PM locale - the locale","title":"Parameters"},{"location":"api/core/io.islandtime.format/-platform-date-time-text-provider/am-pm-text-for/#exceptions","text":"DateTimeException - if the value is not 0 or 1 Return the localized AM/PM text or null if unavailable (jvm) fun amPmTextFor(value: Long , locale: Locale ): String ? Overrides DateTimeTextProvider.amPmTextFor Get the localized AM/PM text.","title":"Exceptions"},{"location":"api/core/io.islandtime.format/-platform-date-time-text-provider/am-pm-text-for/#parameters_1","text":"value - 0 for AM or 1 for PM locale - the locale","title":"Parameters"},{"location":"api/core/io.islandtime.format/-platform-date-time-text-provider/am-pm-text-for/#exceptions_1","text":"DateTimeException - if the value is not 0 or 1 Return the localized AM/PM text or null if unavailable","title":"Exceptions"},{"location":"api/core/io.islandtime.format/-platform-date-time-text-provider/day-of-week-text-for/","text":"core / io.islandtime.format / PlatformDateTimeTextProvider / dayOfWeekTextFor dayOfWeekTextFor (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun dayOfWeekTextFor(value: Long , style: TextStyle , locale: <ERROR CLASS>): String ? Get the localized day of the week text for a given ISO day of week number. Parameters value - an ISO day of week number, from Monday (1) to Sunday (7) style - the style of the text locale - the locale Exceptions DateTimeException - if the value is not a valid day of the week number Return the localized day of week text or null if unavailable (jvm) fun dayOfWeekTextFor(value: Long , style: TextStyle , locale: Locale ): String ? Overrides DateTimeTextProvider.dayOfWeekTextFor Get the localized day of the week text for a given ISO day of week number. Parameters value - an ISO day of week number, from Monday (1) to Sunday (7) style - the style of the text locale - the locale Exceptions DateTimeException - if the value is not a valid day of the week number Return the localized day of week text or null if unavailable","title":"Day of week text for"},{"location":"api/core/io.islandtime.format/-platform-date-time-text-provider/day-of-week-text-for/#dayofweektextfor","text":"(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun dayOfWeekTextFor(value: Long , style: TextStyle , locale: <ERROR CLASS>): String ? Get the localized day of the week text for a given ISO day of week number.","title":"dayOfWeekTextFor"},{"location":"api/core/io.islandtime.format/-platform-date-time-text-provider/day-of-week-text-for/#parameters","text":"value - an ISO day of week number, from Monday (1) to Sunday (7) style - the style of the text locale - the locale","title":"Parameters"},{"location":"api/core/io.islandtime.format/-platform-date-time-text-provider/day-of-week-text-for/#exceptions","text":"DateTimeException - if the value is not a valid day of the week number Return the localized day of week text or null if unavailable (jvm) fun dayOfWeekTextFor(value: Long , style: TextStyle , locale: Locale ): String ? Overrides DateTimeTextProvider.dayOfWeekTextFor Get the localized day of the week text for a given ISO day of week number.","title":"Exceptions"},{"location":"api/core/io.islandtime.format/-platform-date-time-text-provider/day-of-week-text-for/#parameters_1","text":"value - an ISO day of week number, from Monday (1) to Sunday (7) style - the style of the text locale - the locale","title":"Parameters"},{"location":"api/core/io.islandtime.format/-platform-date-time-text-provider/day-of-week-text-for/#exceptions_1","text":"DateTimeException - if the value is not a valid day of the week number Return the localized day of week text or null if unavailable","title":"Exceptions"},{"location":"api/core/io.islandtime.format/-platform-date-time-text-provider/era-text-for/","text":"core / io.islandtime.format / PlatformDateTimeTextProvider / eraTextFor eraTextFor (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun eraTextFor(value: Long , style: TextStyle , locale: <ERROR CLASS>): String ? Get the localized ISO era text. Parameters value - 0 for BCE or 1 for CE locale - the locale style - the style of the text Exceptions DateTimeException - if the value is not 0 or 1 Return the localized era text or null if unavailable (jvm) fun eraTextFor(value: Long , style: TextStyle , locale: Locale ): String ? Overrides DateTimeTextProvider.eraTextFor Get the localized ISO era text. Parameters value - 0 for BCE or 1 for CE locale - the locale style - the style of the text Exceptions DateTimeException - if the value is not 0 or 1 Return the localized era text or null if unavailable","title":"Era text for"},{"location":"api/core/io.islandtime.format/-platform-date-time-text-provider/era-text-for/#eratextfor","text":"(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun eraTextFor(value: Long , style: TextStyle , locale: <ERROR CLASS>): String ? Get the localized ISO era text.","title":"eraTextFor"},{"location":"api/core/io.islandtime.format/-platform-date-time-text-provider/era-text-for/#parameters","text":"value - 0 for BCE or 1 for CE locale - the locale style - the style of the text","title":"Parameters"},{"location":"api/core/io.islandtime.format/-platform-date-time-text-provider/era-text-for/#exceptions","text":"DateTimeException - if the value is not 0 or 1 Return the localized era text or null if unavailable (jvm) fun eraTextFor(value: Long , style: TextStyle , locale: Locale ): String ? Overrides DateTimeTextProvider.eraTextFor Get the localized ISO era text.","title":"Exceptions"},{"location":"api/core/io.islandtime.format/-platform-date-time-text-provider/era-text-for/#parameters_1","text":"value - 0 for BCE or 1 for CE locale - the locale style - the style of the text","title":"Parameters"},{"location":"api/core/io.islandtime.format/-platform-date-time-text-provider/era-text-for/#exceptions_1","text":"DateTimeException - if the value is not 0 or 1 Return the localized era text or null if unavailable","title":"Exceptions"},{"location":"api/core/io.islandtime.format/-platform-date-time-text-provider/month-text-for/","text":"core / io.islandtime.format / PlatformDateTimeTextProvider / monthTextFor monthTextFor (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun monthTextFor(value: Long , style: TextStyle , locale: <ERROR CLASS>): String ? Get the localized month text for a given ISO month number. Parameters value - an ISO month number, from January (1) to December (12) style - the style of the text locale - the locale Exceptions DateTimeException - if the value is not a valid month number Return the localized month text or null if unavailable (jvm) fun monthTextFor(value: Long , style: TextStyle , locale: Locale ): String ? Overrides DateTimeTextProvider.monthTextFor Get the localized month text for a given ISO month number. Parameters value - an ISO month number, from January (1) to December (12) style - the style of the text locale - the locale Exceptions DateTimeException - if the value is not a valid month number Return the localized month text or null if unavailable","title":"Month text for"},{"location":"api/core/io.islandtime.format/-platform-date-time-text-provider/month-text-for/#monthtextfor","text":"(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun monthTextFor(value: Long , style: TextStyle , locale: <ERROR CLASS>): String ? Get the localized month text for a given ISO month number.","title":"monthTextFor"},{"location":"api/core/io.islandtime.format/-platform-date-time-text-provider/month-text-for/#parameters","text":"value - an ISO month number, from January (1) to December (12) style - the style of the text locale - the locale","title":"Parameters"},{"location":"api/core/io.islandtime.format/-platform-date-time-text-provider/month-text-for/#exceptions","text":"DateTimeException - if the value is not a valid month number Return the localized month text or null if unavailable (jvm) fun monthTextFor(value: Long , style: TextStyle , locale: Locale ): String ? Overrides DateTimeTextProvider.monthTextFor Get the localized month text for a given ISO month number.","title":"Exceptions"},{"location":"api/core/io.islandtime.format/-platform-date-time-text-provider/month-text-for/#parameters_1","text":"value - an ISO month number, from January (1) to December (12) style - the style of the text locale - the locale","title":"Parameters"},{"location":"api/core/io.islandtime.format/-platform-date-time-text-provider/month-text-for/#exceptions_1","text":"DateTimeException - if the value is not a valid month number Return the localized month text or null if unavailable","title":"Exceptions"},{"location":"api/core/io.islandtime.format/-platform-date-time-text-provider/parsable-text-for/","text":"core / io.islandtime.format / PlatformDateTimeTextProvider / parsableTextFor parsableTextFor (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun parsableTextFor(field: DateTimeField , styles: Set < TextStyle >, locale: <ERROR CLASS>): ParsableTextList Get a list of all localized text in a set of styles along with the values associated that text. The list will be sorted in descending order by the length of text, making it suitable for parsing. Any text with conflicting values will be excluded. For example, the English narrow month name \"M\" could be March or May , so any attempt to parse it would be ambiguous. Parameters field - the field to get text for styles - the set of styles to include locale - the locale Return the list of parsable text -- empty if the field is invalid or no styles are specified (jvm) fun parsableTextFor(field: DateTimeField , styles: Set < TextStyle >, locale: Locale ): ParsableTextList Overrides DateTimeTextProvider.parsableTextFor Get a list of all localized text in a set of styles along with the values associated that text. The list will be sorted in descending order by the length of text, making it suitable for parsing. Any text with conflicting values will be excluded. For example, the English narrow month name \"M\" could be March or May , so any attempt to parse it would be ambiguous. Parameters field - the field to get text for styles - the set of styles to include locale - the locale Return the list of parsable text -- empty if the field is invalid or no styles are specified","title":"Parsable text for"},{"location":"api/core/io.islandtime.format/-platform-date-time-text-provider/parsable-text-for/#parsabletextfor","text":"(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun parsableTextFor(field: DateTimeField , styles: Set < TextStyle >, locale: <ERROR CLASS>): ParsableTextList Get a list of all localized text in a set of styles along with the values associated that text. The list will be sorted in descending order by the length of text, making it suitable for parsing. Any text with conflicting values will be excluded. For example, the English narrow month name \"M\" could be March or May , so any attempt to parse it would be ambiguous.","title":"parsableTextFor"},{"location":"api/core/io.islandtime.format/-platform-date-time-text-provider/parsable-text-for/#parameters","text":"field - the field to get text for styles - the set of styles to include locale - the locale Return the list of parsable text -- empty if the field is invalid or no styles are specified (jvm) fun parsableTextFor(field: DateTimeField , styles: Set < TextStyle >, locale: Locale ): ParsableTextList Overrides DateTimeTextProvider.parsableTextFor Get a list of all localized text in a set of styles along with the values associated that text. The list will be sorted in descending order by the length of text, making it suitable for parsing. Any text with conflicting values will be excluded. For example, the English narrow month name \"M\" could be March or May , so any attempt to parse it would be ambiguous.","title":"Parameters"},{"location":"api/core/io.islandtime.format/-platform-date-time-text-provider/parsable-text-for/#parameters_1","text":"field - the field to get text for styles - the set of styles to include locale - the locale Return the list of parsable text -- empty if the field is invalid or no styles are specified","title":"Parameters"},{"location":"api/core/io.islandtime.format/-platform-time-zone-text-provider/","text":"core / io.islandtime.format / PlatformTimeZoneTextProvider PlatformTimeZoneTextProvider (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) object PlatformTimeZoneTextProvider : TimeZoneTextProvider The default provider of localized time zone text for the current platform. Functions Name Summary timeZoneTextFor Get the localized time zone text.(jvm) fun timeZoneTextFor(zone: TimeZone , style: TimeZoneTextStyle , locale: Locale ): String ? (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun timeZoneTextFor(zone: TimeZone , style: TimeZoneTextStyle , locale: <ERROR CLASS>): String ? Inherited Functions Name Summary (jvm) timeZoneTextFor Get the localized time zone text. open fun timeZoneTextFor(zone: TimeZone , style: TimeZoneTextStyle , locale: Locale ): String ?","title":"Index"},{"location":"api/core/io.islandtime.format/-platform-time-zone-text-provider/#platformtimezonetextprovider","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) object PlatformTimeZoneTextProvider : TimeZoneTextProvider The default provider of localized time zone text for the current platform.","title":"PlatformTimeZoneTextProvider"},{"location":"api/core/io.islandtime.format/-platform-time-zone-text-provider/#functions","text":"Name Summary timeZoneTextFor Get the localized time zone text.(jvm) fun timeZoneTextFor(zone: TimeZone , style: TimeZoneTextStyle , locale: Locale ): String ? (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun timeZoneTextFor(zone: TimeZone , style: TimeZoneTextStyle , locale: <ERROR CLASS>): String ?","title":"Functions"},{"location":"api/core/io.islandtime.format/-platform-time-zone-text-provider/#inherited-functions","text":"Name Summary (jvm) timeZoneTextFor Get the localized time zone text. open fun timeZoneTextFor(zone: TimeZone , style: TimeZoneTextStyle , locale: Locale ): String ?","title":"Inherited Functions"},{"location":"api/core/io.islandtime.format/-platform-time-zone-text-provider/time-zone-text-for/","text":"core / io.islandtime.format / PlatformTimeZoneTextProvider / timeZoneTextFor timeZoneTextFor (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun timeZoneTextFor(zone: TimeZone , style: TimeZoneTextStyle , locale: <ERROR CLASS>): String ? Get the localized time zone text. Parameters zone - the time zone style - the style of the text locale - the locale Return the localized time zone text or null if unavailable in the specified style (jvm) fun timeZoneTextFor(zone: TimeZone , style: TimeZoneTextStyle , locale: Locale ): String ? Overrides TimeZoneTextProvider.timeZoneTextFor Get the localized time zone text. Parameters zone - the time zone style - the style of the text locale - the locale Return the localized time zone text or null if unavailable in the specified style","title":"Time zone text for"},{"location":"api/core/io.islandtime.format/-platform-time-zone-text-provider/time-zone-text-for/#timezonetextfor","text":"(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun timeZoneTextFor(zone: TimeZone , style: TimeZoneTextStyle , locale: <ERROR CLASS>): String ? Get the localized time zone text.","title":"timeZoneTextFor"},{"location":"api/core/io.islandtime.format/-platform-time-zone-text-provider/time-zone-text-for/#parameters","text":"zone - the time zone style - the style of the text locale - the locale Return the localized time zone text or null if unavailable in the specified style (jvm) fun timeZoneTextFor(zone: TimeZone , style: TimeZoneTextStyle , locale: Locale ): String ? Overrides TimeZoneTextProvider.timeZoneTextFor Get the localized time zone text.","title":"Parameters"},{"location":"api/core/io.islandtime.format/-platform-time-zone-text-provider/time-zone-text-for/#parameters_1","text":"zone - the time zone style - the style of the text locale - the locale Return the localized time zone text or null if unavailable in the specified style","title":"Parameters"},{"location":"api/core/io.islandtime.format/-text-style/","text":"core / io.islandtime.format / TextStyle TextStyle (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) enum class TextStyle A style of text. The meaning may vary depending on the context. Standalone styles should be used when displaying text by itself since some languages have different names in the context of a date and time. Enum Values Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) FULL (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) FULL_STANDALONE (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) SHORT (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) SHORT_STANDALONE (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) NARROW (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) NARROW_STANDALONE Functions Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) asNormal Convert to a normal style, if standalone. fun asNormal(): TextStyle (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) asStandalone Convert to a standalone style, if normal. fun asStandalone(): TextStyle (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isStandalone Is this a standalone style? fun isStandalone(): Boolean Inheritors Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) FULL (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) FULL_STANDALONE (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) NARROW (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) NARROW_STANDALONE (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) SHORT (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) SHORT_STANDALONE","title":"Index"},{"location":"api/core/io.islandtime.format/-text-style/#textstyle","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) enum class TextStyle A style of text. The meaning may vary depending on the context. Standalone styles should be used when displaying text by itself since some languages have different names in the context of a date and time.","title":"TextStyle"},{"location":"api/core/io.islandtime.format/-text-style/#enum-values","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) FULL (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) FULL_STANDALONE (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) SHORT (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) SHORT_STANDALONE (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) NARROW (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) NARROW_STANDALONE","title":"Enum Values"},{"location":"api/core/io.islandtime.format/-text-style/#functions","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) asNormal Convert to a normal style, if standalone. fun asNormal(): TextStyle (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) asStandalone Convert to a standalone style, if normal. fun asStandalone(): TextStyle (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isStandalone Is this a standalone style? fun isStandalone(): Boolean","title":"Functions"},{"location":"api/core/io.islandtime.format/-text-style/#inheritors","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) FULL (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) FULL_STANDALONE (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) NARROW (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) NARROW_STANDALONE (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) SHORT (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) SHORT_STANDALONE","title":"Inheritors"},{"location":"api/core/io.islandtime.format/-text-style/-f-u-l-l/","text":"core / io.islandtime.format / TextStyle / FULL FULL (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) FULL","title":" f u l l"},{"location":"api/core/io.islandtime.format/-text-style/-f-u-l-l/#full","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) FULL","title":"FULL"},{"location":"api/core/io.islandtime.format/-text-style/-f-u-l-l_-s-t-a-n-d-a-l-o-n-e/","text":"core / io.islandtime.format / TextStyle / FULL_STANDALONE FULL_STANDALONE (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) FULL_STANDALONE","title":" f u l l  s t a n d a l o n e"},{"location":"api/core/io.islandtime.format/-text-style/-f-u-l-l_-s-t-a-n-d-a-l-o-n-e/#full_standalone","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) FULL_STANDALONE","title":"FULL_STANDALONE"},{"location":"api/core/io.islandtime.format/-text-style/-n-a-r-r-o-w/","text":"core / io.islandtime.format / TextStyle / NARROW NARROW (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) NARROW","title":" n a r r o w"},{"location":"api/core/io.islandtime.format/-text-style/-n-a-r-r-o-w/#narrow","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) NARROW","title":"NARROW"},{"location":"api/core/io.islandtime.format/-text-style/-n-a-r-r-o-w_-s-t-a-n-d-a-l-o-n-e/","text":"core / io.islandtime.format / TextStyle / NARROW_STANDALONE NARROW_STANDALONE (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) NARROW_STANDALONE","title":" n a r r o w  s t a n d a l o n e"},{"location":"api/core/io.islandtime.format/-text-style/-n-a-r-r-o-w_-s-t-a-n-d-a-l-o-n-e/#narrow_standalone","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) NARROW_STANDALONE","title":"NARROW_STANDALONE"},{"location":"api/core/io.islandtime.format/-text-style/-s-h-o-r-t/","text":"core / io.islandtime.format / TextStyle / SHORT SHORT (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) SHORT","title":" s h o r t"},{"location":"api/core/io.islandtime.format/-text-style/-s-h-o-r-t/#short","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) SHORT","title":"SHORT"},{"location":"api/core/io.islandtime.format/-text-style/-s-h-o-r-t_-s-t-a-n-d-a-l-o-n-e/","text":"core / io.islandtime.format / TextStyle / SHORT_STANDALONE SHORT_STANDALONE (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) SHORT_STANDALONE","title":" s h o r t  s t a n d a l o n e"},{"location":"api/core/io.islandtime.format/-text-style/-s-h-o-r-t_-s-t-a-n-d-a-l-o-n-e/#short_standalone","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) SHORT_STANDALONE","title":"SHORT_STANDALONE"},{"location":"api/core/io.islandtime.format/-text-style/as-normal/","text":"core / io.islandtime.format / TextStyle / asNormal asNormal (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun asNormal(): TextStyle Convert to a normal style, if standalone.","title":"As normal"},{"location":"api/core/io.islandtime.format/-text-style/as-normal/#asnormal","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun asNormal(): TextStyle Convert to a normal style, if standalone.","title":"asNormal"},{"location":"api/core/io.islandtime.format/-text-style/as-standalone/","text":"core / io.islandtime.format / TextStyle / asStandalone asStandalone (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun asStandalone(): TextStyle Convert to a standalone style, if normal.","title":"As standalone"},{"location":"api/core/io.islandtime.format/-text-style/as-standalone/#asstandalone","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun asStandalone(): TextStyle Convert to a standalone style, if normal.","title":"asStandalone"},{"location":"api/core/io.islandtime.format/-text-style/is-standalone/","text":"core / io.islandtime.format / TextStyle / isStandalone isStandalone (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isStandalone(): Boolean Is this a standalone style?","title":"Is standalone"},{"location":"api/core/io.islandtime.format/-text-style/is-standalone/#isstandalone","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isStandalone(): Boolean Is this a standalone style?","title":"isStandalone"},{"location":"api/core/io.islandtime.format/-time-zone-text-provider/","text":"core / io.islandtime.format / TimeZoneTextProvider TimeZoneTextProvider (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) interface TimeZoneTextProvider An abstraction that allows localized time zone names to be supplied from different data sources. Types Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) Companion companion object Companion : TimeZoneTextProvider Functions Name Summary timeZoneTextFor Get the localized time zone text.(jvm) open fun timeZoneTextFor(zone: TimeZone , style: TimeZoneTextStyle , locale: Locale ): String ? (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) open fun timeZoneTextFor(zone: TimeZone , style: TimeZoneTextStyle , locale: <ERROR CLASS>): String ? Inheritors Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) Companion companion object Companion : TimeZoneTextProvider (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) PlatformTimeZoneTextProvider The default provider of localized time zone text for the current platform. object PlatformTimeZoneTextProvider : TimeZoneTextProvider","title":"Index"},{"location":"api/core/io.islandtime.format/-time-zone-text-provider/#timezonetextprovider","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) interface TimeZoneTextProvider An abstraction that allows localized time zone names to be supplied from different data sources.","title":"TimeZoneTextProvider"},{"location":"api/core/io.islandtime.format/-time-zone-text-provider/#types","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) Companion companion object Companion : TimeZoneTextProvider","title":"Types"},{"location":"api/core/io.islandtime.format/-time-zone-text-provider/#functions","text":"Name Summary timeZoneTextFor Get the localized time zone text.(jvm) open fun timeZoneTextFor(zone: TimeZone , style: TimeZoneTextStyle , locale: Locale ): String ? (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) open fun timeZoneTextFor(zone: TimeZone , style: TimeZoneTextStyle , locale: <ERROR CLASS>): String ?","title":"Functions"},{"location":"api/core/io.islandtime.format/-time-zone-text-provider/#inheritors","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) Companion companion object Companion : TimeZoneTextProvider (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) PlatformTimeZoneTextProvider The default provider of localized time zone text for the current platform. object PlatformTimeZoneTextProvider : TimeZoneTextProvider","title":"Inheritors"},{"location":"api/core/io.islandtime.format/-time-zone-text-provider/-companion/","text":"core / io.islandtime.format / TimeZoneTextProvider / Companion Companion (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) companion object Companion : TimeZoneTextProvider","title":" companion"},{"location":"api/core/io.islandtime.format/-time-zone-text-provider/-companion/#companion","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) companion object Companion : TimeZoneTextProvider","title":"Companion"},{"location":"api/core/io.islandtime.format/-time-zone-text-provider/time-zone-text-for/","text":"core / io.islandtime.format / TimeZoneTextProvider / timeZoneTextFor timeZoneTextFor (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) open fun timeZoneTextFor(zone: TimeZone , style: TimeZoneTextStyle , locale: <ERROR CLASS>): String ? Get the localized time zone text. Parameters zone - the time zone style - the style of the text locale - the locale Return the localized time zone text or null if unavailable in the specified style (jvm) open fun timeZoneTextFor(zone: TimeZone , style: TimeZoneTextStyle , locale: Locale ): String ? Get the localized time zone text. Parameters zone - the time zone style - the style of the text locale - the locale Return the localized time zone text or null if unavailable in the specified style","title":"Time zone text for"},{"location":"api/core/io.islandtime.format/-time-zone-text-provider/time-zone-text-for/#timezonetextfor","text":"(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) open fun timeZoneTextFor(zone: TimeZone , style: TimeZoneTextStyle , locale: <ERROR CLASS>): String ? Get the localized time zone text.","title":"timeZoneTextFor"},{"location":"api/core/io.islandtime.format/-time-zone-text-provider/time-zone-text-for/#parameters","text":"zone - the time zone style - the style of the text locale - the locale Return the localized time zone text or null if unavailable in the specified style (jvm) open fun timeZoneTextFor(zone: TimeZone , style: TimeZoneTextStyle , locale: Locale ): String ? Get the localized time zone text.","title":"Parameters"},{"location":"api/core/io.islandtime.format/-time-zone-text-provider/time-zone-text-for/#parameters_1","text":"zone - the time zone style - the style of the text locale - the locale Return the localized time zone text or null if unavailable in the specified style","title":"Parameters"},{"location":"api/core/io.islandtime.format/-time-zone-text-style/","text":"core / io.islandtime.format / TimeZoneTextStyle TimeZoneTextStyle (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) enum class TimeZoneTextStyle A time zone text style. Standard versions indicate the name for standard time, like \"Eastern Standard Time\". Daylight versions indicate the name of daylight savings time, like \"Eastern Daylight Time\". Generic is agnostic to daylight savings -- ie. \"Eastern Time\". Enum Values Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) STANDARD (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) SHORT_STANDARD (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) DAYLIGHT_SAVING (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) SHORT_DAYLIGHT_SAVING (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) GENERIC (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) SHORT_GENERIC Functions Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isDaylightSaving Is this a daylight savings style? fun isDaylightSaving(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isGeneric Is this a generic style? fun isGeneric(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isShort Is this a short style? fun isShort(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isStandard Is this a standard style? fun isStandard(): Boolean Inheritors Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) DAYLIGHT_SAVING (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) GENERIC (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) SHORT_DAYLIGHT_SAVING (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) SHORT_GENERIC (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) SHORT_STANDARD (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) STANDARD","title":"Index"},{"location":"api/core/io.islandtime.format/-time-zone-text-style/#timezonetextstyle","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) enum class TimeZoneTextStyle A time zone text style. Standard versions indicate the name for standard time, like \"Eastern Standard Time\". Daylight versions indicate the name of daylight savings time, like \"Eastern Daylight Time\". Generic is agnostic to daylight savings -- ie. \"Eastern Time\".","title":"TimeZoneTextStyle"},{"location":"api/core/io.islandtime.format/-time-zone-text-style/#enum-values","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) STANDARD (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) SHORT_STANDARD (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) DAYLIGHT_SAVING (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) SHORT_DAYLIGHT_SAVING (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) GENERIC (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) SHORT_GENERIC","title":"Enum Values"},{"location":"api/core/io.islandtime.format/-time-zone-text-style/#functions","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isDaylightSaving Is this a daylight savings style? fun isDaylightSaving(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isGeneric Is this a generic style? fun isGeneric(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isShort Is this a short style? fun isShort(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isStandard Is this a standard style? fun isStandard(): Boolean","title":"Functions"},{"location":"api/core/io.islandtime.format/-time-zone-text-style/#inheritors","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) DAYLIGHT_SAVING (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) GENERIC (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) SHORT_DAYLIGHT_SAVING (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) SHORT_GENERIC (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) SHORT_STANDARD (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) STANDARD","title":"Inheritors"},{"location":"api/core/io.islandtime.format/-time-zone-text-style/-d-a-y-l-i-g-h-t_-s-a-v-i-n-g/","text":"core / io.islandtime.format / TimeZoneTextStyle / DAYLIGHT_SAVING DAYLIGHT_SAVING (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) DAYLIGHT_SAVING","title":" d a y l i g h t  s a v i n g"},{"location":"api/core/io.islandtime.format/-time-zone-text-style/-d-a-y-l-i-g-h-t_-s-a-v-i-n-g/#daylight_saving","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) DAYLIGHT_SAVING","title":"DAYLIGHT_SAVING"},{"location":"api/core/io.islandtime.format/-time-zone-text-style/-g-e-n-e-r-i-c/","text":"core / io.islandtime.format / TimeZoneTextStyle / GENERIC GENERIC (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) GENERIC","title":" g e n e r i c"},{"location":"api/core/io.islandtime.format/-time-zone-text-style/-g-e-n-e-r-i-c/#generic","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) GENERIC","title":"GENERIC"},{"location":"api/core/io.islandtime.format/-time-zone-text-style/-s-h-o-r-t_-d-a-y-l-i-g-h-t_-s-a-v-i-n-g/","text":"core / io.islandtime.format / TimeZoneTextStyle / SHORT_DAYLIGHT_SAVING SHORT_DAYLIGHT_SAVING (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) SHORT_DAYLIGHT_SAVING","title":" s h o r t  d a y l i g h t  s a v i n g"},{"location":"api/core/io.islandtime.format/-time-zone-text-style/-s-h-o-r-t_-d-a-y-l-i-g-h-t_-s-a-v-i-n-g/#short_daylight_saving","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) SHORT_DAYLIGHT_SAVING","title":"SHORT_DAYLIGHT_SAVING"},{"location":"api/core/io.islandtime.format/-time-zone-text-style/-s-h-o-r-t_-g-e-n-e-r-i-c/","text":"core / io.islandtime.format / TimeZoneTextStyle / SHORT_GENERIC SHORT_GENERIC (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) SHORT_GENERIC","title":" s h o r t  g e n e r i c"},{"location":"api/core/io.islandtime.format/-time-zone-text-style/-s-h-o-r-t_-g-e-n-e-r-i-c/#short_generic","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) SHORT_GENERIC","title":"SHORT_GENERIC"},{"location":"api/core/io.islandtime.format/-time-zone-text-style/-s-h-o-r-t_-s-t-a-n-d-a-r-d/","text":"core / io.islandtime.format / TimeZoneTextStyle / SHORT_STANDARD SHORT_STANDARD (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) SHORT_STANDARD","title":" s h o r t  s t a n d a r d"},{"location":"api/core/io.islandtime.format/-time-zone-text-style/-s-h-o-r-t_-s-t-a-n-d-a-r-d/#short_standard","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) SHORT_STANDARD","title":"SHORT_STANDARD"},{"location":"api/core/io.islandtime.format/-time-zone-text-style/-s-t-a-n-d-a-r-d/","text":"core / io.islandtime.format / TimeZoneTextStyle / STANDARD STANDARD (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) STANDARD","title":" s t a n d a r d"},{"location":"api/core/io.islandtime.format/-time-zone-text-style/-s-t-a-n-d-a-r-d/#standard","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) STANDARD","title":"STANDARD"},{"location":"api/core/io.islandtime.format/-time-zone-text-style/is-daylight-saving/","text":"core / io.islandtime.format / TimeZoneTextStyle / isDaylightSaving isDaylightSaving (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isDaylightSaving(): Boolean Is this a daylight savings style?","title":"Is daylight saving"},{"location":"api/core/io.islandtime.format/-time-zone-text-style/is-daylight-saving/#isdaylightsaving","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isDaylightSaving(): Boolean Is this a daylight savings style?","title":"isDaylightSaving"},{"location":"api/core/io.islandtime.format/-time-zone-text-style/is-generic/","text":"core / io.islandtime.format / TimeZoneTextStyle / isGeneric isGeneric (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isGeneric(): Boolean Is this a generic style?","title":"Is generic"},{"location":"api/core/io.islandtime.format/-time-zone-text-style/is-generic/#isgeneric","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isGeneric(): Boolean Is this a generic style?","title":"isGeneric"},{"location":"api/core/io.islandtime.format/-time-zone-text-style/is-short/","text":"core / io.islandtime.format / TimeZoneTextStyle / isShort isShort (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isShort(): Boolean Is this a short style?","title":"Is short"},{"location":"api/core/io.islandtime.format/-time-zone-text-style/is-short/#isshort","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isShort(): Boolean Is this a short style?","title":"isShort"},{"location":"api/core/io.islandtime.format/-time-zone-text-style/is-standard/","text":"core / io.islandtime.format / TimeZoneTextStyle / isStandard isStandard (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isStandard(): Boolean Is this a standard style?","title":"Is standard"},{"location":"api/core/io.islandtime.format/-time-zone-text-style/is-standard/#isstandard","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isStandard(): Boolean Is this a standard style?","title":"isStandard"},{"location":"api/core/io.islandtime.format/java.util.-locale/","text":"core / io.islandtime.format / java.util.Locale Extensions for java.util.Locale Name Summary (jvm) numberStyle The NumberStyle associated with this locale. val Locale .numberStyle: NumberStyle","title":"Index"},{"location":"api/core/io.islandtime.format/java.util.-locale/#extensions-for-javautillocale","text":"Name Summary (jvm) numberStyle The NumberStyle associated with this locale. val Locale .numberStyle: NumberStyle","title":"Extensions for java.util.Locale"},{"location":"api/core/io.islandtime.format/java.util.-locale/number-style/","text":"core / io.islandtime.format / java.util.Locale / numberStyle numberStyle (jvm) val Locale .numberStyle: NumberStyle The NumberStyle associated with this locale.","title":"Number style"},{"location":"api/core/io.islandtime.format/java.util.-locale/number-style/#numberstyle","text":"(jvm) val Locale .numberStyle: NumberStyle The NumberStyle associated with this locale.","title":"numberStyle"},{"location":"api/core/io.islandtime.jvm/","text":"core / io.islandtime.jvm Package io.islandtime.jvm Various extensions specifically for the JVM. Extensions for External Classes Name Summary (jvm) java.time.Duration (jvm) java.time.Instant (jvm) java.time.LocalDate (jvm) java.time.LocalDateTime (jvm) java.time.LocalTime (jvm) java.time.OffsetDateTime (jvm) java.time.OffsetTime (jvm) java.time.Period (jvm) java.time.Year (jvm) java.time.YearMonth (jvm) java.time.ZonedDateTime (jvm) java.time.ZoneId (jvm) java.time.ZoneOffset Functions Name Summary (jvm) toJavaDuration Convert to an equivalent Java Duration . fun Duration .toJavaDuration(): Duration fun IntDays .toJavaDuration(): Duration fun LongDays .toJavaDuration(): Duration fun IntHours .toJavaDuration(): Duration fun LongHours .toJavaDuration(): Duration fun IntMinutes .toJavaDuration(): Duration fun LongMinutes .toJavaDuration(): Duration fun IntSeconds .toJavaDuration(): Duration fun LongSeconds .toJavaDuration(): Duration fun IntMilliseconds .toJavaDuration(): Duration fun LongMilliseconds .toJavaDuration(): Duration fun IntMicroseconds .toJavaDuration(): Duration fun LongMicroseconds .toJavaDuration(): Duration fun IntNanoseconds .toJavaDuration(): Duration fun LongNanoseconds .toJavaDuration(): Duration (jvm) toJavaInstant Convert to an equivalent Java Instant . fun Instant .toJavaInstant(): Instant (jvm) toJavaLocalDate Convert to an equivalent Java LocalDate . fun Date .toJavaLocalDate(): LocalDate (jvm) toJavaLocalDateTime Convert to an equivalent Java LocalDateTime . fun DateTime .toJavaLocalDateTime(): LocalDateTime (jvm) toJavaLocalTime Convert to an equivalent Java LocalTime . fun Time .toJavaLocalTime(): LocalTime (jvm) toJavaOffsetDateTime Convert to an equivalent Java OffsetDateTime . fun OffsetDateTime .toJavaOffsetDateTime(): OffsetDateTime (jvm) toJavaOffsetTime Convert to an equivalent Java OffsetTime . fun OffsetTime .toJavaOffsetTime(): OffsetTime (jvm) toJavaPeriod Convert to an equivalent Java Period . fun Period .toJavaPeriod(): Period fun IntCenturies .toJavaPeriod(): Period fun LongCenturies .toJavaPeriod(): Period fun IntDecades .toJavaPeriod(): Period fun LongDecades .toJavaPeriod(): Period fun IntYears .toJavaPeriod(): Period fun LongYears .toJavaPeriod(): Period fun IntMonths .toJavaPeriod(): Period fun LongMonths .toJavaPeriod(): Period fun IntWeeks .toJavaPeriod(): Period fun LongWeeks .toJavaPeriod(): Period fun IntDays .toJavaPeriod(): Period fun LongDays .toJavaPeriod(): Period (jvm) toJavaYear Convert to an equivalent Java Year . fun Year .toJavaYear(): Year (jvm) toJavaYearMonth Convert to an equivalent Java YearMonth . fun YearMonth .toJavaYearMonth(): YearMonth (jvm) toJavaZonedDateTime Convert to an equivalent Java ZonedDateTime . fun ZonedDateTime .toJavaZonedDateTime(): ZonedDateTime (jvm) toJavaZoneId Convert to an equivalent Java ZoneId . fun TimeZone .toJavaZoneId(): ZoneId (jvm) toJavaZoneOffset Convert to an equivalent Java ZoneOffset . fun UtcOffset .toJavaZoneOffset(): ZoneOffset","title":"Index"},{"location":"api/core/io.islandtime.jvm/#package-ioislandtimejvm","text":"Various extensions specifically for the JVM.","title":"Package io.islandtime.jvm"},{"location":"api/core/io.islandtime.jvm/#extensions-for-external-classes","text":"Name Summary (jvm) java.time.Duration (jvm) java.time.Instant (jvm) java.time.LocalDate (jvm) java.time.LocalDateTime (jvm) java.time.LocalTime (jvm) java.time.OffsetDateTime (jvm) java.time.OffsetTime (jvm) java.time.Period (jvm) java.time.Year (jvm) java.time.YearMonth (jvm) java.time.ZonedDateTime (jvm) java.time.ZoneId (jvm) java.time.ZoneOffset","title":"Extensions for External Classes"},{"location":"api/core/io.islandtime.jvm/#functions","text":"Name Summary (jvm) toJavaDuration Convert to an equivalent Java Duration . fun Duration .toJavaDuration(): Duration fun IntDays .toJavaDuration(): Duration fun LongDays .toJavaDuration(): Duration fun IntHours .toJavaDuration(): Duration fun LongHours .toJavaDuration(): Duration fun IntMinutes .toJavaDuration(): Duration fun LongMinutes .toJavaDuration(): Duration fun IntSeconds .toJavaDuration(): Duration fun LongSeconds .toJavaDuration(): Duration fun IntMilliseconds .toJavaDuration(): Duration fun LongMilliseconds .toJavaDuration(): Duration fun IntMicroseconds .toJavaDuration(): Duration fun LongMicroseconds .toJavaDuration(): Duration fun IntNanoseconds .toJavaDuration(): Duration fun LongNanoseconds .toJavaDuration(): Duration (jvm) toJavaInstant Convert to an equivalent Java Instant . fun Instant .toJavaInstant(): Instant (jvm) toJavaLocalDate Convert to an equivalent Java LocalDate . fun Date .toJavaLocalDate(): LocalDate (jvm) toJavaLocalDateTime Convert to an equivalent Java LocalDateTime . fun DateTime .toJavaLocalDateTime(): LocalDateTime (jvm) toJavaLocalTime Convert to an equivalent Java LocalTime . fun Time .toJavaLocalTime(): LocalTime (jvm) toJavaOffsetDateTime Convert to an equivalent Java OffsetDateTime . fun OffsetDateTime .toJavaOffsetDateTime(): OffsetDateTime (jvm) toJavaOffsetTime Convert to an equivalent Java OffsetTime . fun OffsetTime .toJavaOffsetTime(): OffsetTime (jvm) toJavaPeriod Convert to an equivalent Java Period . fun Period .toJavaPeriod(): Period fun IntCenturies .toJavaPeriod(): Period fun LongCenturies .toJavaPeriod(): Period fun IntDecades .toJavaPeriod(): Period fun LongDecades .toJavaPeriod(): Period fun IntYears .toJavaPeriod(): Period fun LongYears .toJavaPeriod(): Period fun IntMonths .toJavaPeriod(): Period fun LongMonths .toJavaPeriod(): Period fun IntWeeks .toJavaPeriod(): Period fun LongWeeks .toJavaPeriod(): Period fun IntDays .toJavaPeriod(): Period fun LongDays .toJavaPeriod(): Period (jvm) toJavaYear Convert to an equivalent Java Year . fun Year .toJavaYear(): Year (jvm) toJavaYearMonth Convert to an equivalent Java YearMonth . fun YearMonth .toJavaYearMonth(): YearMonth (jvm) toJavaZonedDateTime Convert to an equivalent Java ZonedDateTime . fun ZonedDateTime .toJavaZonedDateTime(): ZonedDateTime (jvm) toJavaZoneId Convert to an equivalent Java ZoneId . fun TimeZone .toJavaZoneId(): ZoneId (jvm) toJavaZoneOffset Convert to an equivalent Java ZoneOffset . fun UtcOffset .toJavaZoneOffset(): ZoneOffset","title":"Functions"},{"location":"api/core/io.islandtime.jvm/to-java-duration/","text":"core / io.islandtime.jvm / toJavaDuration toJavaDuration (jvm) fun Duration .toJavaDuration(): Duration fun IntDays .toJavaDuration(): Duration fun LongDays .toJavaDuration(): Duration fun IntHours .toJavaDuration(): Duration fun LongHours .toJavaDuration(): Duration fun IntMinutes .toJavaDuration(): Duration fun LongMinutes .toJavaDuration(): Duration fun IntSeconds .toJavaDuration(): Duration fun LongSeconds .toJavaDuration(): Duration fun IntMilliseconds .toJavaDuration(): Duration fun LongMilliseconds .toJavaDuration(): Duration fun IntMicroseconds .toJavaDuration(): Duration fun LongMicroseconds .toJavaDuration(): Duration fun IntNanoseconds .toJavaDuration(): Duration fun LongNanoseconds .toJavaDuration(): Duration Convert to an equivalent Java Duration .","title":"To java duration"},{"location":"api/core/io.islandtime.jvm/to-java-duration/#tojavaduration","text":"(jvm) fun Duration .toJavaDuration(): Duration fun IntDays .toJavaDuration(): Duration fun LongDays .toJavaDuration(): Duration fun IntHours .toJavaDuration(): Duration fun LongHours .toJavaDuration(): Duration fun IntMinutes .toJavaDuration(): Duration fun LongMinutes .toJavaDuration(): Duration fun IntSeconds .toJavaDuration(): Duration fun LongSeconds .toJavaDuration(): Duration fun IntMilliseconds .toJavaDuration(): Duration fun LongMilliseconds .toJavaDuration(): Duration fun IntMicroseconds .toJavaDuration(): Duration fun LongMicroseconds .toJavaDuration(): Duration fun IntNanoseconds .toJavaDuration(): Duration fun LongNanoseconds .toJavaDuration(): Duration Convert to an equivalent Java Duration .","title":"toJavaDuration"},{"location":"api/core/io.islandtime.jvm/to-java-instant/","text":"core / io.islandtime.jvm / toJavaInstant toJavaInstant (jvm) fun Instant .toJavaInstant(): Instant Convert to an equivalent Java Instant .","title":"To java instant"},{"location":"api/core/io.islandtime.jvm/to-java-instant/#tojavainstant","text":"(jvm) fun Instant .toJavaInstant(): Instant Convert to an equivalent Java Instant .","title":"toJavaInstant"},{"location":"api/core/io.islandtime.jvm/to-java-local-date-time/","text":"core / io.islandtime.jvm / toJavaLocalDateTime toJavaLocalDateTime (jvm) fun DateTime .toJavaLocalDateTime(): LocalDateTime Convert to an equivalent Java LocalDateTime .","title":"To java local date time"},{"location":"api/core/io.islandtime.jvm/to-java-local-date-time/#tojavalocaldatetime","text":"(jvm) fun DateTime .toJavaLocalDateTime(): LocalDateTime Convert to an equivalent Java LocalDateTime .","title":"toJavaLocalDateTime"},{"location":"api/core/io.islandtime.jvm/to-java-local-date/","text":"core / io.islandtime.jvm / toJavaLocalDate toJavaLocalDate (jvm) fun Date .toJavaLocalDate(): LocalDate Convert to an equivalent Java LocalDate .","title":"To java local date"},{"location":"api/core/io.islandtime.jvm/to-java-local-date/#tojavalocaldate","text":"(jvm) fun Date .toJavaLocalDate(): LocalDate Convert to an equivalent Java LocalDate .","title":"toJavaLocalDate"},{"location":"api/core/io.islandtime.jvm/to-java-local-time/","text":"core / io.islandtime.jvm / toJavaLocalTime toJavaLocalTime (jvm) fun Time .toJavaLocalTime(): LocalTime Convert to an equivalent Java LocalTime .","title":"To java local time"},{"location":"api/core/io.islandtime.jvm/to-java-local-time/#tojavalocaltime","text":"(jvm) fun Time .toJavaLocalTime(): LocalTime Convert to an equivalent Java LocalTime .","title":"toJavaLocalTime"},{"location":"api/core/io.islandtime.jvm/to-java-offset-date-time/","text":"core / io.islandtime.jvm / toJavaOffsetDateTime toJavaOffsetDateTime (jvm) fun OffsetDateTime .toJavaOffsetDateTime(): OffsetDateTime Convert to an equivalent Java OffsetDateTime .","title":"To java offset date time"},{"location":"api/core/io.islandtime.jvm/to-java-offset-date-time/#tojavaoffsetdatetime","text":"(jvm) fun OffsetDateTime .toJavaOffsetDateTime(): OffsetDateTime Convert to an equivalent Java OffsetDateTime .","title":"toJavaOffsetDateTime"},{"location":"api/core/io.islandtime.jvm/to-java-offset-time/","text":"core / io.islandtime.jvm / toJavaOffsetTime toJavaOffsetTime (jvm) fun OffsetTime .toJavaOffsetTime(): OffsetTime Convert to an equivalent Java OffsetTime .","title":"To java offset time"},{"location":"api/core/io.islandtime.jvm/to-java-offset-time/#tojavaoffsettime","text":"(jvm) fun OffsetTime .toJavaOffsetTime(): OffsetTime Convert to an equivalent Java OffsetTime .","title":"toJavaOffsetTime"},{"location":"api/core/io.islandtime.jvm/to-java-period/","text":"core / io.islandtime.jvm / toJavaPeriod toJavaPeriod (jvm) fun Period .toJavaPeriod(): Period fun IntCenturies .toJavaPeriod(): Period fun LongCenturies .toJavaPeriod(): Period fun IntDecades .toJavaPeriod(): Period fun LongDecades .toJavaPeriod(): Period fun IntYears .toJavaPeriod(): Period fun LongYears .toJavaPeriod(): Period fun IntMonths .toJavaPeriod(): Period fun LongMonths .toJavaPeriod(): Period fun IntWeeks .toJavaPeriod(): Period fun LongWeeks .toJavaPeriod(): Period fun IntDays .toJavaPeriod(): Period fun LongDays .toJavaPeriod(): Period Convert to an equivalent Java Period .","title":"To java period"},{"location":"api/core/io.islandtime.jvm/to-java-period/#tojavaperiod","text":"(jvm) fun Period .toJavaPeriod(): Period fun IntCenturies .toJavaPeriod(): Period fun LongCenturies .toJavaPeriod(): Period fun IntDecades .toJavaPeriod(): Period fun LongDecades .toJavaPeriod(): Period fun IntYears .toJavaPeriod(): Period fun LongYears .toJavaPeriod(): Period fun IntMonths .toJavaPeriod(): Period fun LongMonths .toJavaPeriod(): Period fun IntWeeks .toJavaPeriod(): Period fun LongWeeks .toJavaPeriod(): Period fun IntDays .toJavaPeriod(): Period fun LongDays .toJavaPeriod(): Period Convert to an equivalent Java Period .","title":"toJavaPeriod"},{"location":"api/core/io.islandtime.jvm/to-java-year-month/","text":"core / io.islandtime.jvm / toJavaYearMonth toJavaYearMonth (jvm) fun YearMonth .toJavaYearMonth(): YearMonth Convert to an equivalent Java YearMonth .","title":"To java year month"},{"location":"api/core/io.islandtime.jvm/to-java-year-month/#tojavayearmonth","text":"(jvm) fun YearMonth .toJavaYearMonth(): YearMonth Convert to an equivalent Java YearMonth .","title":"toJavaYearMonth"},{"location":"api/core/io.islandtime.jvm/to-java-year/","text":"core / io.islandtime.jvm / toJavaYear toJavaYear (jvm) fun Year .toJavaYear(): Year Convert to an equivalent Java Year .","title":"To java year"},{"location":"api/core/io.islandtime.jvm/to-java-year/#tojavayear","text":"(jvm) fun Year .toJavaYear(): Year Convert to an equivalent Java Year .","title":"toJavaYear"},{"location":"api/core/io.islandtime.jvm/to-java-zone-id/","text":"core / io.islandtime.jvm / toJavaZoneId toJavaZoneId (jvm) fun TimeZone .toJavaZoneId(): ZoneId Convert to an equivalent Java ZoneId .","title":"To java zone id"},{"location":"api/core/io.islandtime.jvm/to-java-zone-id/#tojavazoneid","text":"(jvm) fun TimeZone .toJavaZoneId(): ZoneId Convert to an equivalent Java ZoneId .","title":"toJavaZoneId"},{"location":"api/core/io.islandtime.jvm/to-java-zone-offset/","text":"core / io.islandtime.jvm / toJavaZoneOffset toJavaZoneOffset (jvm) fun UtcOffset .toJavaZoneOffset(): ZoneOffset Convert to an equivalent Java ZoneOffset .","title":"To java zone offset"},{"location":"api/core/io.islandtime.jvm/to-java-zone-offset/#tojavazoneoffset","text":"(jvm) fun UtcOffset .toJavaZoneOffset(): ZoneOffset Convert to an equivalent Java ZoneOffset .","title":"toJavaZoneOffset"},{"location":"api/core/io.islandtime.jvm/to-java-zoned-date-time/","text":"core / io.islandtime.jvm / toJavaZonedDateTime toJavaZonedDateTime (jvm) fun ZonedDateTime .toJavaZonedDateTime(): ZonedDateTime Convert to an equivalent Java ZonedDateTime .","title":"To java zoned date time"},{"location":"api/core/io.islandtime.jvm/to-java-zoned-date-time/#tojavazoneddatetime","text":"(jvm) fun ZonedDateTime .toJavaZonedDateTime(): ZonedDateTime Convert to an equivalent Java ZonedDateTime .","title":"toJavaZonedDateTime"},{"location":"api/core/io.islandtime.jvm/java.time.-duration/","text":"core / io.islandtime.jvm / java.time.Duration Extensions for java.time.Duration Name Summary (jvm) toIslandDuration Convert to an equivalent Island Time Duration . fun Duration.toIslandDuration(): Duration","title":"Index"},{"location":"api/core/io.islandtime.jvm/java.time.-duration/#extensions-for-javatimeduration","text":"Name Summary (jvm) toIslandDuration Convert to an equivalent Island Time Duration . fun Duration.toIslandDuration(): Duration","title":"Extensions for java.time.Duration"},{"location":"api/core/io.islandtime.jvm/java.time.-duration/to-island-duration/","text":"core / io.islandtime.jvm / java.time.Duration / toIslandDuration toIslandDuration (jvm) fun Duration.toIslandDuration(): Duration Convert to an equivalent Island Time Duration .","title":"To island duration"},{"location":"api/core/io.islandtime.jvm/java.time.-duration/to-island-duration/#toislandduration","text":"(jvm) fun Duration.toIslandDuration(): Duration Convert to an equivalent Island Time Duration .","title":"toIslandDuration"},{"location":"api/core/io.islandtime.jvm/java.time.-instant/","text":"core / io.islandtime.jvm / java.time.Instant Extensions for java.time.Instant Name Summary (jvm) toIslandInstant Convert to an equivalent Island Time Instant . fun Instant.toIslandInstant(): Instant","title":"Index"},{"location":"api/core/io.islandtime.jvm/java.time.-instant/#extensions-for-javatimeinstant","text":"Name Summary (jvm) toIslandInstant Convert to an equivalent Island Time Instant . fun Instant.toIslandInstant(): Instant","title":"Extensions for java.time.Instant"},{"location":"api/core/io.islandtime.jvm/java.time.-instant/to-island-instant/","text":"core / io.islandtime.jvm / java.time.Instant / toIslandInstant toIslandInstant (jvm) fun Instant.toIslandInstant(): Instant Convert to an equivalent Island Time Instant .","title":"To island instant"},{"location":"api/core/io.islandtime.jvm/java.time.-instant/to-island-instant/#toislandinstant","text":"(jvm) fun Instant.toIslandInstant(): Instant Convert to an equivalent Island Time Instant .","title":"toIslandInstant"},{"location":"api/core/io.islandtime.jvm/java.time.-local-date/","text":"core / io.islandtime.jvm / java.time.LocalDate Extensions for java.time.LocalDate Name Summary (jvm) toIslandDate Convert to an equivalent Island Time Date . fun LocalDate.toIslandDate(): Date","title":"Index"},{"location":"api/core/io.islandtime.jvm/java.time.-local-date/#extensions-for-javatimelocaldate","text":"Name Summary (jvm) toIslandDate Convert to an equivalent Island Time Date . fun LocalDate.toIslandDate(): Date","title":"Extensions for java.time.LocalDate"},{"location":"api/core/io.islandtime.jvm/java.time.-local-date/to-island-date/","text":"core / io.islandtime.jvm / java.time.LocalDate / toIslandDate toIslandDate (jvm) fun LocalDate.toIslandDate(): Date Convert to an equivalent Island Time Date .","title":"To island date"},{"location":"api/core/io.islandtime.jvm/java.time.-local-date/to-island-date/#toislanddate","text":"(jvm) fun LocalDate.toIslandDate(): Date Convert to an equivalent Island Time Date .","title":"toIslandDate"},{"location":"api/core/io.islandtime.jvm/java.time.-local-date-time/","text":"core / io.islandtime.jvm / java.time.LocalDateTime Extensions for java.time.LocalDateTime Name Summary (jvm) toIslandDateTime Convert to an equivalent Island Time DateTime . fun LocalDateTime.toIslandDateTime(): DateTime","title":"Index"},{"location":"api/core/io.islandtime.jvm/java.time.-local-date-time/#extensions-for-javatimelocaldatetime","text":"Name Summary (jvm) toIslandDateTime Convert to an equivalent Island Time DateTime . fun LocalDateTime.toIslandDateTime(): DateTime","title":"Extensions for java.time.LocalDateTime"},{"location":"api/core/io.islandtime.jvm/java.time.-local-date-time/to-island-date-time/","text":"core / io.islandtime.jvm / java.time.LocalDateTime / toIslandDateTime toIslandDateTime (jvm) fun LocalDateTime.toIslandDateTime(): DateTime Convert to an equivalent Island Time DateTime .","title":"To island date time"},{"location":"api/core/io.islandtime.jvm/java.time.-local-date-time/to-island-date-time/#toislanddatetime","text":"(jvm) fun LocalDateTime.toIslandDateTime(): DateTime Convert to an equivalent Island Time DateTime .","title":"toIslandDateTime"},{"location":"api/core/io.islandtime.jvm/java.time.-local-time/","text":"core / io.islandtime.jvm / java.time.LocalTime Extensions for java.time.LocalTime Name Summary (jvm) toIslandTime Convert to an equivalent Island Time Time . fun LocalTime.toIslandTime(): Time","title":"Index"},{"location":"api/core/io.islandtime.jvm/java.time.-local-time/#extensions-for-javatimelocaltime","text":"Name Summary (jvm) toIslandTime Convert to an equivalent Island Time Time . fun LocalTime.toIslandTime(): Time","title":"Extensions for java.time.LocalTime"},{"location":"api/core/io.islandtime.jvm/java.time.-local-time/to-island-time/","text":"core / io.islandtime.jvm / java.time.LocalTime / toIslandTime toIslandTime (jvm) fun LocalTime.toIslandTime(): Time Convert to an equivalent Island Time Time .","title":"To island time"},{"location":"api/core/io.islandtime.jvm/java.time.-local-time/to-island-time/#toislandtime","text":"(jvm) fun LocalTime.toIslandTime(): Time Convert to an equivalent Island Time Time .","title":"toIslandTime"},{"location":"api/core/io.islandtime.jvm/java.time.-offset-date-time/","text":"core / io.islandtime.jvm / java.time.OffsetDateTime Extensions for java.time.OffsetDateTime Name Summary (jvm) toIslandOffsetDateTime Convert to an equivalent Island Time OffsetDateTime . fun OffsetDateTime.toIslandOffsetDateTime(): OffsetDateTime","title":"Index"},{"location":"api/core/io.islandtime.jvm/java.time.-offset-date-time/#extensions-for-javatimeoffsetdatetime","text":"Name Summary (jvm) toIslandOffsetDateTime Convert to an equivalent Island Time OffsetDateTime . fun OffsetDateTime.toIslandOffsetDateTime(): OffsetDateTime","title":"Extensions for java.time.OffsetDateTime"},{"location":"api/core/io.islandtime.jvm/java.time.-offset-date-time/to-island-offset-date-time/","text":"core / io.islandtime.jvm / java.time.OffsetDateTime / toIslandOffsetDateTime toIslandOffsetDateTime (jvm) fun OffsetDateTime.toIslandOffsetDateTime(): OffsetDateTime Convert to an equivalent Island Time OffsetDateTime .","title":"To island offset date time"},{"location":"api/core/io.islandtime.jvm/java.time.-offset-date-time/to-island-offset-date-time/#toislandoffsetdatetime","text":"(jvm) fun OffsetDateTime.toIslandOffsetDateTime(): OffsetDateTime Convert to an equivalent Island Time OffsetDateTime .","title":"toIslandOffsetDateTime"},{"location":"api/core/io.islandtime.jvm/java.time.-offset-time/","text":"core / io.islandtime.jvm / java.time.OffsetTime Extensions for java.time.OffsetTime Name Summary (jvm) toIslandOffsetTime Convert to an equivalent Island Time OffsetTime . fun OffsetTime.toIslandOffsetTime(): OffsetTime","title":"Index"},{"location":"api/core/io.islandtime.jvm/java.time.-offset-time/#extensions-for-javatimeoffsettime","text":"Name Summary (jvm) toIslandOffsetTime Convert to an equivalent Island Time OffsetTime . fun OffsetTime.toIslandOffsetTime(): OffsetTime","title":"Extensions for java.time.OffsetTime"},{"location":"api/core/io.islandtime.jvm/java.time.-offset-time/to-island-offset-time/","text":"core / io.islandtime.jvm / java.time.OffsetTime / toIslandOffsetTime toIslandOffsetTime (jvm) fun OffsetTime.toIslandOffsetTime(): OffsetTime Convert to an equivalent Island Time OffsetTime .","title":"To island offset time"},{"location":"api/core/io.islandtime.jvm/java.time.-offset-time/to-island-offset-time/#toislandoffsettime","text":"(jvm) fun OffsetTime.toIslandOffsetTime(): OffsetTime Convert to an equivalent Island Time OffsetTime .","title":"toIslandOffsetTime"},{"location":"api/core/io.islandtime.jvm/java.time.-period/","text":"core / io.islandtime.jvm / java.time.Period Extensions for java.time.Period Name Summary (jvm) toIslandPeriod Convert to an equivalent Island Time Period . fun Period.toIslandPeriod(): Period","title":"Index"},{"location":"api/core/io.islandtime.jvm/java.time.-period/#extensions-for-javatimeperiod","text":"Name Summary (jvm) toIslandPeriod Convert to an equivalent Island Time Period . fun Period.toIslandPeriod(): Period","title":"Extensions for java.time.Period"},{"location":"api/core/io.islandtime.jvm/java.time.-period/to-island-period/","text":"core / io.islandtime.jvm / java.time.Period / toIslandPeriod toIslandPeriod (jvm) fun Period.toIslandPeriod(): Period Convert to an equivalent Island Time Period .","title":"To island period"},{"location":"api/core/io.islandtime.jvm/java.time.-period/to-island-period/#toislandperiod","text":"(jvm) fun Period.toIslandPeriod(): Period Convert to an equivalent Island Time Period .","title":"toIslandPeriod"},{"location":"api/core/io.islandtime.jvm/java.time.-year/","text":"core / io.islandtime.jvm / java.time.Year Extensions for java.time.Year Name Summary (jvm) toIslandYear Convert to an equivalent Island Time Year . fun Year.toIslandYear(): Year","title":"Index"},{"location":"api/core/io.islandtime.jvm/java.time.-year/#extensions-for-javatimeyear","text":"Name Summary (jvm) toIslandYear Convert to an equivalent Island Time Year . fun Year.toIslandYear(): Year","title":"Extensions for java.time.Year"},{"location":"api/core/io.islandtime.jvm/java.time.-year/to-island-year/","text":"core / io.islandtime.jvm / java.time.Year / toIslandYear toIslandYear (jvm) fun Year.toIslandYear(): Year Convert to an equivalent Island Time Year .","title":"To island year"},{"location":"api/core/io.islandtime.jvm/java.time.-year/to-island-year/#toislandyear","text":"(jvm) fun Year.toIslandYear(): Year Convert to an equivalent Island Time Year .","title":"toIslandYear"},{"location":"api/core/io.islandtime.jvm/java.time.-year-month/","text":"core / io.islandtime.jvm / java.time.YearMonth Extensions for java.time.YearMonth Name Summary (jvm) toIslandYearMonth Convert to an equivalent Island Time YearMonth . fun YearMonth.toIslandYearMonth(): YearMonth","title":"Index"},{"location":"api/core/io.islandtime.jvm/java.time.-year-month/#extensions-for-javatimeyearmonth","text":"Name Summary (jvm) toIslandYearMonth Convert to an equivalent Island Time YearMonth . fun YearMonth.toIslandYearMonth(): YearMonth","title":"Extensions for java.time.YearMonth"},{"location":"api/core/io.islandtime.jvm/java.time.-year-month/to-island-year-month/","text":"core / io.islandtime.jvm / java.time.YearMonth / toIslandYearMonth toIslandYearMonth (jvm) fun YearMonth.toIslandYearMonth(): YearMonth Convert to an equivalent Island Time YearMonth .","title":"To island year month"},{"location":"api/core/io.islandtime.jvm/java.time.-year-month/to-island-year-month/#toislandyearmonth","text":"(jvm) fun YearMonth.toIslandYearMonth(): YearMonth Convert to an equivalent Island Time YearMonth .","title":"toIslandYearMonth"},{"location":"api/core/io.islandtime.jvm/java.time.-zone-id/","text":"core / io.islandtime.jvm / java.time.ZoneId Extensions for java.time.ZoneId Name Summary (jvm) toIslandTimeZone Convert to an equivalent Island Time TimeZone . fun ZoneId.toIslandTimeZone(): TimeZone","title":"Index"},{"location":"api/core/io.islandtime.jvm/java.time.-zone-id/#extensions-for-javatimezoneid","text":"Name Summary (jvm) toIslandTimeZone Convert to an equivalent Island Time TimeZone . fun ZoneId.toIslandTimeZone(): TimeZone","title":"Extensions for java.time.ZoneId"},{"location":"api/core/io.islandtime.jvm/java.time.-zone-id/to-island-time-zone/","text":"core / io.islandtime.jvm / java.time.ZoneId / toIslandTimeZone toIslandTimeZone (jvm) fun ZoneId.toIslandTimeZone(): TimeZone Convert to an equivalent Island Time TimeZone .","title":"To island time zone"},{"location":"api/core/io.islandtime.jvm/java.time.-zone-id/to-island-time-zone/#toislandtimezone","text":"(jvm) fun ZoneId.toIslandTimeZone(): TimeZone Convert to an equivalent Island Time TimeZone .","title":"toIslandTimeZone"},{"location":"api/core/io.islandtime.jvm/java.time.-zone-offset/","text":"core / io.islandtime.jvm / java.time.ZoneOffset Extensions for java.time.ZoneOffset Name Summary (jvm) toIslandUtcOffset Convert to an equivalent Island Time UtcOffset . fun ZoneOffset.toIslandUtcOffset(): UtcOffset","title":"Index"},{"location":"api/core/io.islandtime.jvm/java.time.-zone-offset/#extensions-for-javatimezoneoffset","text":"Name Summary (jvm) toIslandUtcOffset Convert to an equivalent Island Time UtcOffset . fun ZoneOffset.toIslandUtcOffset(): UtcOffset","title":"Extensions for java.time.ZoneOffset"},{"location":"api/core/io.islandtime.jvm/java.time.-zone-offset/to-island-utc-offset/","text":"core / io.islandtime.jvm / java.time.ZoneOffset / toIslandUtcOffset toIslandUtcOffset (jvm) fun ZoneOffset.toIslandUtcOffset(): UtcOffset Convert to an equivalent Island Time UtcOffset .","title":"To island utc offset"},{"location":"api/core/io.islandtime.jvm/java.time.-zone-offset/to-island-utc-offset/#toislandutcoffset","text":"(jvm) fun ZoneOffset.toIslandUtcOffset(): UtcOffset Convert to an equivalent Island Time UtcOffset .","title":"toIslandUtcOffset"},{"location":"api/core/io.islandtime.jvm/java.time.-zoned-date-time/","text":"core / io.islandtime.jvm / java.time.ZonedDateTime Extensions for java.time.ZonedDateTime Name Summary (jvm) toIslandZonedDateTime Convert to an equivalent Island Time ZonedDateTime . fun ZonedDateTime.toIslandZonedDateTime(): ZonedDateTime","title":"Index"},{"location":"api/core/io.islandtime.jvm/java.time.-zoned-date-time/#extensions-for-javatimezoneddatetime","text":"Name Summary (jvm) toIslandZonedDateTime Convert to an equivalent Island Time ZonedDateTime . fun ZonedDateTime.toIslandZonedDateTime(): ZonedDateTime","title":"Extensions for java.time.ZonedDateTime"},{"location":"api/core/io.islandtime.jvm/java.time.-zoned-date-time/to-island-zoned-date-time/","text":"core / io.islandtime.jvm / java.time.ZonedDateTime / toIslandZonedDateTime toIslandZonedDateTime (jvm) fun ZonedDateTime.toIslandZonedDateTime(): ZonedDateTime Convert to an equivalent Island Time ZonedDateTime .","title":"To island zoned date time"},{"location":"api/core/io.islandtime.jvm/java.time.-zoned-date-time/to-island-zoned-date-time/#toislandzoneddatetime","text":"(jvm) fun ZonedDateTime.toIslandZonedDateTime(): ZonedDateTime Convert to an equivalent Island Time ZonedDateTime .","title":"toIslandZonedDateTime"},{"location":"api/core/io.islandtime.locale/","text":"core / io.islandtime.locale Package io.islandtime.locale Platform-independent locale. Functions Name Summary defaultLocale Get the current Locale .(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun defaultLocale(): <ERROR CLASS> (jvm) fun defaultLocale(): Locale","title":"Index"},{"location":"api/core/io.islandtime.locale/#package-ioislandtimelocale","text":"Platform-independent locale.","title":"Package io.islandtime.locale"},{"location":"api/core/io.islandtime.locale/#functions","text":"Name Summary defaultLocale Get the current Locale .(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun defaultLocale(): <ERROR CLASS> (jvm) fun defaultLocale(): Locale","title":"Functions"},{"location":"api/core/io.islandtime.locale/-locale/","text":"core / io.islandtime.locale / Locale Locale Locale","title":" locale"},{"location":"api/core/io.islandtime.locale/-locale/#locale","text":"Locale","title":"Locale"},{"location":"api/core/io.islandtime.locale/default-locale/","text":"core / io.islandtime.locale / defaultLocale defaultLocale (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun defaultLocale(): <ERROR CLASS> (jvm) fun defaultLocale(): Locale Get the current Locale .","title":"Default locale"},{"location":"api/core/io.islandtime.locale/default-locale/#defaultlocale","text":"(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun defaultLocale(): <ERROR CLASS> (jvm) fun defaultLocale(): Locale Get the current Locale .","title":"defaultLocale"},{"location":"api/core/io.islandtime.measures/","text":"core / io.islandtime.measures Package io.islandtime.measures Classes related to the measurement of time, including Duration , Period , and more specific units, such as IntHours or LongYears . Types Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) Duration A duration of time at nanosecond precision. class Duration : Comparable < Duration > (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) IntCenturies A number of centuries. class IntCenturies : Comparable < IntCenturies > (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) IntDays A number of days. class IntDays : Comparable < IntDays > (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) IntDecades A number of decades. class IntDecades : Comparable < IntDecades > (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) IntHours A number of hours. class IntHours : Comparable < IntHours > (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) IntMicroseconds A number of microseconds. class IntMicroseconds : Comparable < IntMicroseconds > (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) IntMilliseconds A number of milliseconds. class IntMilliseconds : Comparable < IntMilliseconds > (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) IntMinutes A number of minutes. class IntMinutes : Comparable < IntMinutes > (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) IntMonths A number of months. class IntMonths : Comparable < IntMonths > (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) IntNanoseconds A number of nanoseconds. class IntNanoseconds : Comparable < IntNanoseconds > (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) IntSeconds A number of seconds. class IntSeconds : Comparable < IntSeconds > (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) IntWeeks A number of weeks. class IntWeeks : Comparable < IntWeeks > (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) IntYears A number of years. class IntYears : Comparable < IntYears > (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) LongCenturies A number of centuries. class LongCenturies : Comparable < LongCenturies > (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) LongDays A number of days. class LongDays : Comparable < LongDays > (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) LongDecades A number of decades. class LongDecades : Comparable < LongDecades > (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) LongHours A number of hours. class LongHours : Comparable < LongHours > (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) LongMicroseconds A number of microseconds. class LongMicroseconds : Comparable < LongMicroseconds > (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) LongMilliseconds A number of milliseconds. class LongMilliseconds : Comparable < LongMilliseconds > (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) LongMinutes A number of minutes. class LongMinutes : Comparable < LongMinutes > (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) LongMonths A number of months. class LongMonths : Comparable < LongMonths > (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) LongNanoseconds A number of nanoseconds. class LongNanoseconds : Comparable < LongNanoseconds > (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) LongSeconds A number of seconds. class LongSeconds : Comparable < LongSeconds > (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) LongWeeks A number of weeks. class LongWeeks : Comparable < LongWeeks > (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) LongYears A number of years. class LongYears : Comparable < LongYears > (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) Period A date-based period of time, such as \"2 years, 5 months, 16 days\". Unlike Duration , which uses exact increments, a Period works with conceptual days, months, and years, ignoring daylight savings and length differences. class Period (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) TimeUnit A unit of time measurement. enum class TimeUnit Extensions for External Classes Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) kotlin.Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) kotlin.Long (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) kotlin.String (jvm) kotlin.time.Duration Functions Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abs Return the absolute value of a duration fun abs(duration: Duration ): Duration (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) asDuration fun LongDays .asDuration(): Duration fun LongHours .asDuration(): Duration fun LongMinutes .asDuration(): Duration fun LongSeconds .asDuration(): Duration fun LongMilliseconds .asDuration(): Duration fun LongMicroseconds .asDuration(): Duration fun LongNanoseconds .asDuration(): Duration fun IntDays .asDuration(): Duration fun IntHours .asDuration(): Duration fun IntMinutes .asDuration(): Duration fun IntSeconds .asDuration(): Duration fun IntMilliseconds .asDuration(): Duration fun IntMicroseconds .asDuration(): Duration fun IntNanoseconds .asDuration(): Duration (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) asPeriod Convert IntYears into a Period with the same number of years fun IntYears .asPeriod(): Period Convert IntMonths into a Period with the same number of months fun IntMonths .asPeriod(): Period Convert IntWeeks into a Period with the same number of weeks fun IntWeeks .asPeriod(): Period Convert IntDays into a Period with the same number of days fun IntDays .asPeriod(): Period Convert LongYears into a Period with the same number of years fun LongYears .asPeriod(): Period Convert LongMonths into a Period with the same number of months fun LongMonths .asPeriod(): Period Convert LongWeeks into a Period with the same number of weeks fun LongWeeks .asPeriod(): Period Convert LongDays into a Period with the same number of days fun LongDays .asPeriod(): Period (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) durationOf Create a Duration . fun durationOf(seconds: IntSeconds , nanoseconds: IntNanoseconds ): Duration fun durationOf(seconds: LongSeconds , nanoseconds: IntNanoseconds ): Duration fun durationOf(seconds: IntSeconds , nanoseconds: LongNanoseconds ): Duration fun durationOf(seconds: LongSeconds , nanoseconds: LongNanoseconds ): Duration Create a Duration of 24-hour days. fun durationOf(days: IntDays ): Duration fun durationOf(days: LongDays ): Duration Create a Duration of hours. fun durationOf(hours: IntHours ): Duration fun durationOf(hours: LongHours ): Duration Create a Duration of minutes. fun durationOf(minutes: IntMinutes ): Duration fun durationOf(minutes: LongMinutes ): Duration Create a Duration of seconds. fun durationOf(seconds: IntSeconds ): Duration fun durationOf(seconds: LongSeconds ): Duration Create a Duration of milliseconds. fun durationOf(milliseconds: IntMilliseconds ): Duration fun durationOf(milliseconds: LongMilliseconds ): Duration Create a Duration of microseconds. fun durationOf(microseconds: IntMicroseconds ): Duration fun durationOf(microseconds: LongMicroseconds ): Duration Create a Duration of nanoseconds. fun durationOf(nanoseconds: IntNanoseconds ): Duration fun durationOf(nanoseconds: LongNanoseconds ): Duration (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) minus operator fun IntYears .minus(period: Period ): Period operator fun IntMonths .minus(period: Period ): Period operator fun IntWeeks .minus(period: Period ): Period operator fun IntDays .minus(period: Period ): Period operator fun LongYears .minus(period: Period ): Period operator fun LongMonths .minus(period: Period ): Period operator fun LongWeeks .minus(period: Period ): Period operator fun LongDays .minus(period: Period ): Period (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) periodOf Create a Period . fun periodOf(years: IntYears , months: IntMonths = 0.months, days: IntDays = 0.days): Period fun periodOf(years: IntYears , days: IntDays ): Period fun periodOf(months: IntMonths , days: IntDays = 0.days): Period fun periodOf(weeks: IntWeeks ): Period fun periodOf(days: IntDays ): Period (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) plus operator fun IntYears .plus(period: Period ): Period operator fun IntMonths .plus(period: Period ): Period operator fun IntWeeks .plus(period: Period ): Period operator fun IntDays .plus(period: Period ): Period operator fun LongYears .plus(period: Period ): Period operator fun LongMonths .plus(period: Period ): Period operator fun LongWeeks .plus(period: Period ): Period operator fun LongDays .plus(period: Period ): Period (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toIslandDays Convert to Island Time LongDays . fun <ERROR CLASS>.toIslandDays(): <ERROR CLASS> (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toIslandDuration fun <ERROR CLASS>.toIslandDuration(): Duration (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toIslandHours Convert to Island Time LongHours . fun <ERROR CLASS>.toIslandHours(): <ERROR CLASS> (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toIslandMicroseconds Convert to Island Time LongMicroseconds . fun <ERROR CLASS>.toIslandMicroseconds(): <ERROR CLASS> (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toIslandMilliseconds Convert to Island Time LongMilliseconds . fun <ERROR CLASS>.toIslandMilliseconds(): <ERROR CLASS> (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toIslandMinutes Convert to Island Time LongMinutes . fun <ERROR CLASS>.toIslandMinutes(): <ERROR CLASS> (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toIslandNanoseconds Convert to Island Time LongNanoseconds . fun <ERROR CLASS>.toIslandNanoseconds(): <ERROR CLASS> (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toIslandSeconds Convert to Island Time LongSeconds . fun <ERROR CLASS>.toIslandSeconds(): <ERROR CLASS>","title":"Index"},{"location":"api/core/io.islandtime.measures/#package-ioislandtimemeasures","text":"Classes related to the measurement of time, including Duration , Period , and more specific units, such as IntHours or LongYears .","title":"Package io.islandtime.measures"},{"location":"api/core/io.islandtime.measures/#types","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) Duration A duration of time at nanosecond precision. class Duration : Comparable < Duration > (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) IntCenturies A number of centuries. class IntCenturies : Comparable < IntCenturies > (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) IntDays A number of days. class IntDays : Comparable < IntDays > (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) IntDecades A number of decades. class IntDecades : Comparable < IntDecades > (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) IntHours A number of hours. class IntHours : Comparable < IntHours > (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) IntMicroseconds A number of microseconds. class IntMicroseconds : Comparable < IntMicroseconds > (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) IntMilliseconds A number of milliseconds. class IntMilliseconds : Comparable < IntMilliseconds > (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) IntMinutes A number of minutes. class IntMinutes : Comparable < IntMinutes > (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) IntMonths A number of months. class IntMonths : Comparable < IntMonths > (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) IntNanoseconds A number of nanoseconds. class IntNanoseconds : Comparable < IntNanoseconds > (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) IntSeconds A number of seconds. class IntSeconds : Comparable < IntSeconds > (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) IntWeeks A number of weeks. class IntWeeks : Comparable < IntWeeks > (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) IntYears A number of years. class IntYears : Comparable < IntYears > (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) LongCenturies A number of centuries. class LongCenturies : Comparable < LongCenturies > (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) LongDays A number of days. class LongDays : Comparable < LongDays > (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) LongDecades A number of decades. class LongDecades : Comparable < LongDecades > (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) LongHours A number of hours. class LongHours : Comparable < LongHours > (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) LongMicroseconds A number of microseconds. class LongMicroseconds : Comparable < LongMicroseconds > (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) LongMilliseconds A number of milliseconds. class LongMilliseconds : Comparable < LongMilliseconds > (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) LongMinutes A number of minutes. class LongMinutes : Comparable < LongMinutes > (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) LongMonths A number of months. class LongMonths : Comparable < LongMonths > (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) LongNanoseconds A number of nanoseconds. class LongNanoseconds : Comparable < LongNanoseconds > (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) LongSeconds A number of seconds. class LongSeconds : Comparable < LongSeconds > (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) LongWeeks A number of weeks. class LongWeeks : Comparable < LongWeeks > (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) LongYears A number of years. class LongYears : Comparable < LongYears > (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) Period A date-based period of time, such as \"2 years, 5 months, 16 days\". Unlike Duration , which uses exact increments, a Period works with conceptual days, months, and years, ignoring daylight savings and length differences. class Period (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) TimeUnit A unit of time measurement. enum class TimeUnit","title":"Types"},{"location":"api/core/io.islandtime.measures/#extensions-for-external-classes","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) kotlin.Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) kotlin.Long (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) kotlin.String (jvm) kotlin.time.Duration","title":"Extensions for External Classes"},{"location":"api/core/io.islandtime.measures/#functions","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abs Return the absolute value of a duration fun abs(duration: Duration ): Duration (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) asDuration fun LongDays .asDuration(): Duration fun LongHours .asDuration(): Duration fun LongMinutes .asDuration(): Duration fun LongSeconds .asDuration(): Duration fun LongMilliseconds .asDuration(): Duration fun LongMicroseconds .asDuration(): Duration fun LongNanoseconds .asDuration(): Duration fun IntDays .asDuration(): Duration fun IntHours .asDuration(): Duration fun IntMinutes .asDuration(): Duration fun IntSeconds .asDuration(): Duration fun IntMilliseconds .asDuration(): Duration fun IntMicroseconds .asDuration(): Duration fun IntNanoseconds .asDuration(): Duration (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) asPeriod Convert IntYears into a Period with the same number of years fun IntYears .asPeriod(): Period Convert IntMonths into a Period with the same number of months fun IntMonths .asPeriod(): Period Convert IntWeeks into a Period with the same number of weeks fun IntWeeks .asPeriod(): Period Convert IntDays into a Period with the same number of days fun IntDays .asPeriod(): Period Convert LongYears into a Period with the same number of years fun LongYears .asPeriod(): Period Convert LongMonths into a Period with the same number of months fun LongMonths .asPeriod(): Period Convert LongWeeks into a Period with the same number of weeks fun LongWeeks .asPeriod(): Period Convert LongDays into a Period with the same number of days fun LongDays .asPeriod(): Period (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) durationOf Create a Duration . fun durationOf(seconds: IntSeconds , nanoseconds: IntNanoseconds ): Duration fun durationOf(seconds: LongSeconds , nanoseconds: IntNanoseconds ): Duration fun durationOf(seconds: IntSeconds , nanoseconds: LongNanoseconds ): Duration fun durationOf(seconds: LongSeconds , nanoseconds: LongNanoseconds ): Duration Create a Duration of 24-hour days. fun durationOf(days: IntDays ): Duration fun durationOf(days: LongDays ): Duration Create a Duration of hours. fun durationOf(hours: IntHours ): Duration fun durationOf(hours: LongHours ): Duration Create a Duration of minutes. fun durationOf(minutes: IntMinutes ): Duration fun durationOf(minutes: LongMinutes ): Duration Create a Duration of seconds. fun durationOf(seconds: IntSeconds ): Duration fun durationOf(seconds: LongSeconds ): Duration Create a Duration of milliseconds. fun durationOf(milliseconds: IntMilliseconds ): Duration fun durationOf(milliseconds: LongMilliseconds ): Duration Create a Duration of microseconds. fun durationOf(microseconds: IntMicroseconds ): Duration fun durationOf(microseconds: LongMicroseconds ): Duration Create a Duration of nanoseconds. fun durationOf(nanoseconds: IntNanoseconds ): Duration fun durationOf(nanoseconds: LongNanoseconds ): Duration (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) minus operator fun IntYears .minus(period: Period ): Period operator fun IntMonths .minus(period: Period ): Period operator fun IntWeeks .minus(period: Period ): Period operator fun IntDays .minus(period: Period ): Period operator fun LongYears .minus(period: Period ): Period operator fun LongMonths .minus(period: Period ): Period operator fun LongWeeks .minus(period: Period ): Period operator fun LongDays .minus(period: Period ): Period (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) periodOf Create a Period . fun periodOf(years: IntYears , months: IntMonths = 0.months, days: IntDays = 0.days): Period fun periodOf(years: IntYears , days: IntDays ): Period fun periodOf(months: IntMonths , days: IntDays = 0.days): Period fun periodOf(weeks: IntWeeks ): Period fun periodOf(days: IntDays ): Period (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) plus operator fun IntYears .plus(period: Period ): Period operator fun IntMonths .plus(period: Period ): Period operator fun IntWeeks .plus(period: Period ): Period operator fun IntDays .plus(period: Period ): Period operator fun LongYears .plus(period: Period ): Period operator fun LongMonths .plus(period: Period ): Period operator fun LongWeeks .plus(period: Period ): Period operator fun LongDays .plus(period: Period ): Period (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toIslandDays Convert to Island Time LongDays . fun <ERROR CLASS>.toIslandDays(): <ERROR CLASS> (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toIslandDuration fun <ERROR CLASS>.toIslandDuration(): Duration (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toIslandHours Convert to Island Time LongHours . fun <ERROR CLASS>.toIslandHours(): <ERROR CLASS> (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toIslandMicroseconds Convert to Island Time LongMicroseconds . fun <ERROR CLASS>.toIslandMicroseconds(): <ERROR CLASS> (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toIslandMilliseconds Convert to Island Time LongMilliseconds . fun <ERROR CLASS>.toIslandMilliseconds(): <ERROR CLASS> (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toIslandMinutes Convert to Island Time LongMinutes . fun <ERROR CLASS>.toIslandMinutes(): <ERROR CLASS> (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toIslandNanoseconds Convert to Island Time LongNanoseconds . fun <ERROR CLASS>.toIslandNanoseconds(): <ERROR CLASS> (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toIslandSeconds Convert to Island Time LongSeconds . fun <ERROR CLASS>.toIslandSeconds(): <ERROR CLASS>","title":"Functions"},{"location":"api/core/io.islandtime.measures/abs/","text":"core / io.islandtime.measures / abs abs (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun abs(duration: Duration ): Duration Return the absolute value of a duration","title":"Abs"},{"location":"api/core/io.islandtime.measures/abs/#abs","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun abs(duration: Duration ): Duration Return the absolute value of a duration","title":"abs"},{"location":"api/core/io.islandtime.measures/as-duration/","text":"core / io.islandtime.measures / asDuration asDuration (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun LongDays .asDuration(): Duration fun LongHours .asDuration(): Duration fun LongMinutes .asDuration(): Duration fun LongSeconds .asDuration(): Duration fun LongMilliseconds .asDuration(): Duration fun LongMicroseconds .asDuration(): Duration fun LongNanoseconds .asDuration(): Duration fun IntDays .asDuration(): Duration fun IntHours .asDuration(): Duration fun IntMinutes .asDuration(): Duration fun IntSeconds .asDuration(): Duration fun IntMilliseconds .asDuration(): Duration fun IntMicroseconds .asDuration(): Duration fun IntNanoseconds .asDuration(): Duration","title":"As duration"},{"location":"api/core/io.islandtime.measures/as-duration/#asduration","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun LongDays .asDuration(): Duration fun LongHours .asDuration(): Duration fun LongMinutes .asDuration(): Duration fun LongSeconds .asDuration(): Duration fun LongMilliseconds .asDuration(): Duration fun LongMicroseconds .asDuration(): Duration fun LongNanoseconds .asDuration(): Duration fun IntDays .asDuration(): Duration fun IntHours .asDuration(): Duration fun IntMinutes .asDuration(): Duration fun IntSeconds .asDuration(): Duration fun IntMilliseconds .asDuration(): Duration fun IntMicroseconds .asDuration(): Duration fun IntNanoseconds .asDuration(): Duration","title":"asDuration"},{"location":"api/core/io.islandtime.measures/as-period/","text":"core / io.islandtime.measures / asPeriod asPeriod (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun IntYears .asPeriod(): Period Convert IntYears into a Period with the same number of years (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun IntMonths .asPeriod(): Period Convert IntMonths into a Period with the same number of months (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun IntWeeks .asPeriod(): Period Convert IntWeeks into a Period with the same number of weeks Exceptions ArithmeticException - if the resulting Period would overflow(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun IntDays .asPeriod(): Period Convert IntDays into a Period with the same number of days (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun LongYears .asPeriod(): Period Convert LongYears into a Period with the same number of years Exceptions ArithmeticException - if the resulting Period would overflow(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun LongMonths .asPeriod(): Period Convert LongMonths into a Period with the same number of months Exceptions ArithmeticException - if the resulting Period would overflow(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun LongWeeks .asPeriod(): Period Convert LongWeeks into a Period with the same number of weeks Exceptions ArithmeticException - if the resulting Period would overflow(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun LongDays .asPeriod(): Period Convert LongDays into a Period with the same number of days Exceptions ArithmeticException - if the resulting Period would overflow","title":"As period"},{"location":"api/core/io.islandtime.measures/as-period/#asperiod","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun IntYears .asPeriod(): Period Convert IntYears into a Period with the same number of years (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun IntMonths .asPeriod(): Period Convert IntMonths into a Period with the same number of months (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun IntWeeks .asPeriod(): Period Convert IntWeeks into a Period with the same number of weeks","title":"asPeriod"},{"location":"api/core/io.islandtime.measures/as-period/#exceptions","text":"ArithmeticException - if the resulting Period would overflow(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun IntDays .asPeriod(): Period Convert IntDays into a Period with the same number of days (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun LongYears .asPeriod(): Period Convert LongYears into a Period with the same number of years","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/as-period/#exceptions_1","text":"ArithmeticException - if the resulting Period would overflow(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun LongMonths .asPeriod(): Period Convert LongMonths into a Period with the same number of months","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/as-period/#exceptions_2","text":"ArithmeticException - if the resulting Period would overflow(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun LongWeeks .asPeriod(): Period Convert LongWeeks into a Period with the same number of weeks","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/as-period/#exceptions_3","text":"ArithmeticException - if the resulting Period would overflow(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun LongDays .asPeriod(): Period Convert LongDays into a Period with the same number of days","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/as-period/#exceptions_4","text":"ArithmeticException - if the resulting Period would overflow","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/duration-of/","text":"core / io.islandtime.measures / durationOf durationOf (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun durationOf(seconds: IntSeconds , nanoseconds: IntNanoseconds ): Duration fun durationOf(seconds: LongSeconds , nanoseconds: IntNanoseconds ): Duration fun durationOf(seconds: IntSeconds , nanoseconds: LongNanoseconds ): Duration fun durationOf(seconds: LongSeconds , nanoseconds: LongNanoseconds ): Duration Create a Duration . Parameters seconds - the number of seconds in the duration nanoseconds - the number of additional nanoseconds to be applied on top of seconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun durationOf(days: IntDays ): Duration Create a Duration of 24-hour days. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun durationOf(days: LongDays ): Duration Create a Duration of 24-hour days. Exceptions ArithmeticException - if overflow occurs(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun durationOf(hours: IntHours ): Duration Create a Duration of hours. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun durationOf(hours: LongHours ): Duration Create a Duration of hours. Exceptions ArithmeticException - if overflow occurs(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun durationOf(minutes: IntMinutes ): Duration Create a Duration of minutes. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun durationOf(minutes: LongMinutes ): Duration Create a Duration of minutes. Exceptions ArithmeticException - if overflow occurs(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun durationOf(seconds: IntSeconds ): Duration Create a Duration of seconds. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun durationOf(seconds: LongSeconds ): Duration Create a Duration of seconds. Exceptions ArithmeticException - if overflow occurs(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun durationOf(milliseconds: IntMilliseconds ): Duration fun durationOf(milliseconds: LongMilliseconds ): Duration Create a Duration of milliseconds. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun durationOf(microseconds: IntMicroseconds ): Duration fun durationOf(microseconds: LongMicroseconds ): Duration Create a Duration of microseconds. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun durationOf(nanoseconds: IntNanoseconds ): Duration fun durationOf(nanoseconds: LongNanoseconds ): Duration Create a Duration of nanoseconds.","title":"Duration of"},{"location":"api/core/io.islandtime.measures/duration-of/#durationof","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun durationOf(seconds: IntSeconds , nanoseconds: IntNanoseconds ): Duration fun durationOf(seconds: LongSeconds , nanoseconds: IntNanoseconds ): Duration fun durationOf(seconds: IntSeconds , nanoseconds: LongNanoseconds ): Duration fun durationOf(seconds: LongSeconds , nanoseconds: LongNanoseconds ): Duration Create a Duration .","title":"durationOf"},{"location":"api/core/io.islandtime.measures/duration-of/#parameters","text":"seconds - the number of seconds in the duration nanoseconds - the number of additional nanoseconds to be applied on top of seconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun durationOf(days: IntDays ): Duration Create a Duration of 24-hour days. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun durationOf(days: LongDays ): Duration Create a Duration of 24-hour days.","title":"Parameters"},{"location":"api/core/io.islandtime.measures/duration-of/#exceptions","text":"ArithmeticException - if overflow occurs(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun durationOf(hours: IntHours ): Duration Create a Duration of hours. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun durationOf(hours: LongHours ): Duration Create a Duration of hours.","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/duration-of/#exceptions_1","text":"ArithmeticException - if overflow occurs(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun durationOf(minutes: IntMinutes ): Duration Create a Duration of minutes. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun durationOf(minutes: LongMinutes ): Duration Create a Duration of minutes.","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/duration-of/#exceptions_2","text":"ArithmeticException - if overflow occurs(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun durationOf(seconds: IntSeconds ): Duration Create a Duration of seconds. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun durationOf(seconds: LongSeconds ): Duration Create a Duration of seconds.","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/duration-of/#exceptions_3","text":"ArithmeticException - if overflow occurs(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun durationOf(milliseconds: IntMilliseconds ): Duration fun durationOf(milliseconds: LongMilliseconds ): Duration Create a Duration of milliseconds. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun durationOf(microseconds: IntMicroseconds ): Duration fun durationOf(microseconds: LongMicroseconds ): Duration Create a Duration of microseconds. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun durationOf(nanoseconds: IntNanoseconds ): Duration fun durationOf(nanoseconds: LongNanoseconds ): Duration Create a Duration of nanoseconds.","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/minus/","text":"core / io.islandtime.measures / minus minus (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun IntYears .minus(period: Period ): Period operator fun IntMonths .minus(period: Period ): Period operator fun IntWeeks .minus(period: Period ): Period operator fun IntDays .minus(period: Period ): Period operator fun LongYears .minus(period: Period ): Period operator fun LongMonths .minus(period: Period ): Period operator fun LongWeeks .minus(period: Period ): Period operator fun LongDays .minus(period: Period ): Period","title":"Minus"},{"location":"api/core/io.islandtime.measures/minus/#minus","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun IntYears .minus(period: Period ): Period operator fun IntMonths .minus(period: Period ): Period operator fun IntWeeks .minus(period: Period ): Period operator fun IntDays .minus(period: Period ): Period operator fun LongYears .minus(period: Period ): Period operator fun LongMonths .minus(period: Period ): Period operator fun LongWeeks .minus(period: Period ): Period operator fun LongDays .minus(period: Period ): Period","title":"minus"},{"location":"api/core/io.islandtime.measures/period-of/","text":"core / io.islandtime.measures / periodOf periodOf (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun periodOf(years: IntYears , months: IntMonths = 0.months, days: IntDays = 0.days): Period fun periodOf(years: IntYears , days: IntDays ): Period fun periodOf(months: IntMonths , days: IntDays = 0.days): Period fun periodOf(days: IntDays ): Period Create a Period . (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun periodOf(weeks: IntWeeks ): Period Create a Period . Exceptions ArithmeticException - if overflow occurs","title":"Period of"},{"location":"api/core/io.islandtime.measures/period-of/#periodof","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun periodOf(years: IntYears , months: IntMonths = 0.months, days: IntDays = 0.days): Period fun periodOf(years: IntYears , days: IntDays ): Period fun periodOf(months: IntMonths , days: IntDays = 0.days): Period fun periodOf(days: IntDays ): Period Create a Period . (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun periodOf(weeks: IntWeeks ): Period Create a Period .","title":"periodOf"},{"location":"api/core/io.islandtime.measures/period-of/#exceptions","text":"ArithmeticException - if overflow occurs","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/plus/","text":"core / io.islandtime.measures / plus plus (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun IntYears .plus(period: Period ): Period operator fun IntMonths .plus(period: Period ): Period operator fun IntWeeks .plus(period: Period ): Period operator fun IntDays .plus(period: Period ): Period operator fun LongYears .plus(period: Period ): Period operator fun LongMonths .plus(period: Period ): Period operator fun LongWeeks .plus(period: Period ): Period operator fun LongDays .plus(period: Period ): Period","title":"Plus"},{"location":"api/core/io.islandtime.measures/plus/#plus","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun IntYears .plus(period: Period ): Period operator fun IntMonths .plus(period: Period ): Period operator fun IntWeeks .plus(period: Period ): Period operator fun IntDays .plus(period: Period ): Period operator fun LongYears .plus(period: Period ): Period operator fun LongMonths .plus(period: Period ): Period operator fun LongWeeks .plus(period: Period ): Period operator fun LongDays .plus(period: Period ): Period","title":"plus"},{"location":"api/core/io.islandtime.measures/to-island-days/","text":"core / io.islandtime.measures / toIslandDays toIslandDays (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun <ERROR CLASS>.toIslandDays(): <ERROR CLASS> Convert to Island Time LongDays .","title":"To island days"},{"location":"api/core/io.islandtime.measures/to-island-days/#toislanddays","text":"(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun <ERROR CLASS>.toIslandDays(): <ERROR CLASS> Convert to Island Time LongDays .","title":"toIslandDays"},{"location":"api/core/io.islandtime.measures/to-island-duration/","text":"core / io.islandtime.measures / toIslandDuration toIslandDuration (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun <ERROR CLASS>.toIslandDuration(): Duration","title":"To island duration"},{"location":"api/core/io.islandtime.measures/to-island-duration/#toislandduration","text":"(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun <ERROR CLASS>.toIslandDuration(): Duration","title":"toIslandDuration"},{"location":"api/core/io.islandtime.measures/to-island-hours/","text":"core / io.islandtime.measures / toIslandHours toIslandHours (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun <ERROR CLASS>.toIslandHours(): <ERROR CLASS> Convert to Island Time LongHours .","title":"To island hours"},{"location":"api/core/io.islandtime.measures/to-island-hours/#toislandhours","text":"(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun <ERROR CLASS>.toIslandHours(): <ERROR CLASS> Convert to Island Time LongHours .","title":"toIslandHours"},{"location":"api/core/io.islandtime.measures/to-island-microseconds/","text":"core / io.islandtime.measures / toIslandMicroseconds toIslandMicroseconds (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun <ERROR CLASS>.toIslandMicroseconds(): <ERROR CLASS> Convert to Island Time LongMicroseconds .","title":"To island microseconds"},{"location":"api/core/io.islandtime.measures/to-island-microseconds/#toislandmicroseconds","text":"(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun <ERROR CLASS>.toIslandMicroseconds(): <ERROR CLASS> Convert to Island Time LongMicroseconds .","title":"toIslandMicroseconds"},{"location":"api/core/io.islandtime.measures/to-island-milliseconds/","text":"core / io.islandtime.measures / toIslandMilliseconds toIslandMilliseconds (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun <ERROR CLASS>.toIslandMilliseconds(): <ERROR CLASS> Convert to Island Time LongMilliseconds .","title":"To island milliseconds"},{"location":"api/core/io.islandtime.measures/to-island-milliseconds/#toislandmilliseconds","text":"(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun <ERROR CLASS>.toIslandMilliseconds(): <ERROR CLASS> Convert to Island Time LongMilliseconds .","title":"toIslandMilliseconds"},{"location":"api/core/io.islandtime.measures/to-island-minutes/","text":"core / io.islandtime.measures / toIslandMinutes toIslandMinutes (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun <ERROR CLASS>.toIslandMinutes(): <ERROR CLASS> Convert to Island Time LongMinutes .","title":"To island minutes"},{"location":"api/core/io.islandtime.measures/to-island-minutes/#toislandminutes","text":"(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun <ERROR CLASS>.toIslandMinutes(): <ERROR CLASS> Convert to Island Time LongMinutes .","title":"toIslandMinutes"},{"location":"api/core/io.islandtime.measures/to-island-nanoseconds/","text":"core / io.islandtime.measures / toIslandNanoseconds toIslandNanoseconds (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun <ERROR CLASS>.toIslandNanoseconds(): <ERROR CLASS> Convert to Island Time LongNanoseconds .","title":"To island nanoseconds"},{"location":"api/core/io.islandtime.measures/to-island-nanoseconds/#toislandnanoseconds","text":"(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun <ERROR CLASS>.toIslandNanoseconds(): <ERROR CLASS> Convert to Island Time LongNanoseconds .","title":"toIslandNanoseconds"},{"location":"api/core/io.islandtime.measures/to-island-seconds/","text":"core / io.islandtime.measures / toIslandSeconds toIslandSeconds (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun <ERROR CLASS>.toIslandSeconds(): <ERROR CLASS> Convert to Island Time LongSeconds .","title":"To island seconds"},{"location":"api/core/io.islandtime.measures/to-island-seconds/#toislandseconds","text":"(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun <ERROR CLASS>.toIslandSeconds(): <ERROR CLASS> Convert to Island Time LongSeconds .","title":"toIslandSeconds"},{"location":"api/core/io.islandtime.measures/-duration/","text":"core / io.islandtime.measures / Duration Duration (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) class Duration : Comparable < Duration > A duration of time at nanosecond precision. For many applications, working with specific units like IntHours or LongSeconds is more efficient and plenty adequate. However, when working with larger durations at sub-second precision, overflow is a very real possibility. Duration is capable of representing fixed, nanosecond-precision durations that span the entire supported time scale, making it more suitable for these use cases. Properties Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) absoluteValue Get the absolute value of this duration. val absoluteValue: Duration (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inDays Convert this duration into the number of 24-hour days represented by it. val inDays: LongDays (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inHours Convert this duration into the number of whole hours represented by it. val inHours: LongHours (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inMicroseconds Convert this duration into the number of whole microseconds represented by it. val inMicroseconds: LongMicroseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inMilliseconds Convert this duration into the number of whole milliseconds represented by it. val inMilliseconds: LongMilliseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inMinutes Convert this duration into the number of whole minutes represented by it. val inMinutes: LongMinutes (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inNanoseconds Convert this duration into LongNanoseconds . val inNanoseconds: LongNanoseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inSeconds Return the number of whole seconds in this duration. val inSeconds: LongSeconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) nanosecondAdjustment val nanosecondAdjustment: IntNanoseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) seconds val seconds: LongSeconds Functions Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) compareTo fun compareTo(other: Duration ): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) div Divide by a scalar value. operator fun div(scalar: Int ): Duration (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) equals fun equals(other: Any ?): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) hashCode fun hashCode(): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isNegative Is this duration negative? fun isNegative(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isPositive Is this duration positive? fun isPositive(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isZero Is this duration zero? fun isZero(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) minus operator fun minus(other: Duration ): Duration operator fun minus(days: IntDays ): Duration operator fun minus(days: LongDays ): Duration operator fun minus(hours: IntHours ): Duration operator fun minus(hours: LongHours ): Duration operator fun minus(minutes: IntMinutes ): Duration operator fun minus(minutes: LongMinutes ): Duration operator fun minus(seconds: IntSeconds ): Duration operator fun minus(seconds: LongSeconds ): Duration operator fun minus(milliseconds: IntMilliseconds ): Duration operator fun minus(milliseconds: LongMilliseconds ): Duration operator fun minus(microseconds: IntMicroseconds ): Duration operator fun minus(microseconds: LongMicroseconds ): Duration operator fun minus(nanoseconds: IntNanoseconds ): Duration operator fun minus(nanoseconds: LongNanoseconds ): Duration (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) plus operator fun plus(other: Duration ): Duration operator fun plus(days: IntDays ): Duration operator fun plus(days: LongDays ): Duration operator fun plus(hours: IntHours ): Duration operator fun plus(hours: LongHours ): Duration operator fun plus(minutes: IntMinutes ): Duration operator fun plus(minutes: LongMinutes ): Duration operator fun plus(seconds: IntSeconds ): Duration operator fun plus(seconds: LongSeconds ): Duration operator fun plus(milliseconds: IntMilliseconds ): Duration operator fun plus(milliseconds: LongMilliseconds ): Duration operator fun plus(microseconds: IntMicroseconds ): Duration operator fun plus(microseconds: LongMicroseconds ): Duration operator fun plus(nanoseconds: IntNanoseconds ): Duration operator fun plus(nanoseconds: LongNanoseconds ): Duration (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) times Multiply by a scalar value. operator fun times(scalar: Int ): Duration (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toComponents Break this duration down into individual unit components, assuming a 24-hour day length. fun <T> toComponents(action: (days: LongDays , hours: IntHours , minutes: IntMinutes , seconds: IntSeconds , nanoseconds: IntNanoseconds ) -> T): T Break this duration down into individual unit components. fun <T> toComponents(action: (hours: LongHours , minutes: IntMinutes , seconds: IntSeconds , nanoseconds: IntNanoseconds ) -> T): T fun <T> toComponents(action: (minutes: LongMinutes , seconds: IntSeconds , nanoseconds: IntNanoseconds ) -> T): T fun <T> toComponents(action: (seconds: LongSeconds , nanoseconds: IntNanoseconds ) -> T): T toKotlinDuration (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toKotlinDuration(): <ERROR CLASS> (jvm) fun toKotlinDuration(): Duration (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toString fun toString(): String (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) truncatedTo Return this duration, rounded down to match the precision of a given unit . fun truncatedTo(unit: TimeUnit ): Duration (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) truncatedToDays Return this duration truncated to the number of 24-hour days. fun ~~truncatedToDays~~(): Duration (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) truncatedToHours Return this duration truncated to the number of whole hours. fun ~~truncatedToHours~~(): Duration (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) truncatedToMicroseconds Return this duration truncated to the number of whole microseconds. fun ~~truncatedToMicroseconds~~(): Duration (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) truncatedToMilliseconds Return this duration truncated to the number of whole milliseconds. fun ~~truncatedToMilliseconds~~(): Duration (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) truncatedToMinutes Return this duration truncated to the number of whole minutes. fun ~~truncatedToMinutes~~(): Duration (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) truncatedToSeconds Return this duration truncated to the number of whole seconds. fun ~~truncatedToSeconds~~(): Duration (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) unaryMinus operator fun unaryMinus(): Duration Companion Object Properties Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MAX val MAX: Duration (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MIN val MIN: Duration (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) ZERO val ZERO: Duration Extension Functions Name Summary (jvm) toJavaDuration Convert to an equivalent Java Duration . fun Duration .toJavaDuration(): Duration","title":"Index"},{"location":"api/core/io.islandtime.measures/-duration/#duration","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) class Duration : Comparable < Duration > A duration of time at nanosecond precision. For many applications, working with specific units like IntHours or LongSeconds is more efficient and plenty adequate. However, when working with larger durations at sub-second precision, overflow is a very real possibility. Duration is capable of representing fixed, nanosecond-precision durations that span the entire supported time scale, making it more suitable for these use cases.","title":"Duration"},{"location":"api/core/io.islandtime.measures/-duration/#properties","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) absoluteValue Get the absolute value of this duration. val absoluteValue: Duration (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inDays Convert this duration into the number of 24-hour days represented by it. val inDays: LongDays (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inHours Convert this duration into the number of whole hours represented by it. val inHours: LongHours (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inMicroseconds Convert this duration into the number of whole microseconds represented by it. val inMicroseconds: LongMicroseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inMilliseconds Convert this duration into the number of whole milliseconds represented by it. val inMilliseconds: LongMilliseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inMinutes Convert this duration into the number of whole minutes represented by it. val inMinutes: LongMinutes (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inNanoseconds Convert this duration into LongNanoseconds . val inNanoseconds: LongNanoseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inSeconds Return the number of whole seconds in this duration. val inSeconds: LongSeconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) nanosecondAdjustment val nanosecondAdjustment: IntNanoseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) seconds val seconds: LongSeconds","title":"Properties"},{"location":"api/core/io.islandtime.measures/-duration/#functions","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) compareTo fun compareTo(other: Duration ): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) div Divide by a scalar value. operator fun div(scalar: Int ): Duration (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) equals fun equals(other: Any ?): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) hashCode fun hashCode(): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isNegative Is this duration negative? fun isNegative(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isPositive Is this duration positive? fun isPositive(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isZero Is this duration zero? fun isZero(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) minus operator fun minus(other: Duration ): Duration operator fun minus(days: IntDays ): Duration operator fun minus(days: LongDays ): Duration operator fun minus(hours: IntHours ): Duration operator fun minus(hours: LongHours ): Duration operator fun minus(minutes: IntMinutes ): Duration operator fun minus(minutes: LongMinutes ): Duration operator fun minus(seconds: IntSeconds ): Duration operator fun minus(seconds: LongSeconds ): Duration operator fun minus(milliseconds: IntMilliseconds ): Duration operator fun minus(milliseconds: LongMilliseconds ): Duration operator fun minus(microseconds: IntMicroseconds ): Duration operator fun minus(microseconds: LongMicroseconds ): Duration operator fun minus(nanoseconds: IntNanoseconds ): Duration operator fun minus(nanoseconds: LongNanoseconds ): Duration (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) plus operator fun plus(other: Duration ): Duration operator fun plus(days: IntDays ): Duration operator fun plus(days: LongDays ): Duration operator fun plus(hours: IntHours ): Duration operator fun plus(hours: LongHours ): Duration operator fun plus(minutes: IntMinutes ): Duration operator fun plus(minutes: LongMinutes ): Duration operator fun plus(seconds: IntSeconds ): Duration operator fun plus(seconds: LongSeconds ): Duration operator fun plus(milliseconds: IntMilliseconds ): Duration operator fun plus(milliseconds: LongMilliseconds ): Duration operator fun plus(microseconds: IntMicroseconds ): Duration operator fun plus(microseconds: LongMicroseconds ): Duration operator fun plus(nanoseconds: IntNanoseconds ): Duration operator fun plus(nanoseconds: LongNanoseconds ): Duration (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) times Multiply by a scalar value. operator fun times(scalar: Int ): Duration (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toComponents Break this duration down into individual unit components, assuming a 24-hour day length. fun <T> toComponents(action: (days: LongDays , hours: IntHours , minutes: IntMinutes , seconds: IntSeconds , nanoseconds: IntNanoseconds ) -> T): T Break this duration down into individual unit components. fun <T> toComponents(action: (hours: LongHours , minutes: IntMinutes , seconds: IntSeconds , nanoseconds: IntNanoseconds ) -> T): T fun <T> toComponents(action: (minutes: LongMinutes , seconds: IntSeconds , nanoseconds: IntNanoseconds ) -> T): T fun <T> toComponents(action: (seconds: LongSeconds , nanoseconds: IntNanoseconds ) -> T): T toKotlinDuration (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toKotlinDuration(): <ERROR CLASS> (jvm) fun toKotlinDuration(): Duration (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toString fun toString(): String (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) truncatedTo Return this duration, rounded down to match the precision of a given unit . fun truncatedTo(unit: TimeUnit ): Duration (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) truncatedToDays Return this duration truncated to the number of 24-hour days. fun ~~truncatedToDays~~(): Duration (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) truncatedToHours Return this duration truncated to the number of whole hours. fun ~~truncatedToHours~~(): Duration (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) truncatedToMicroseconds Return this duration truncated to the number of whole microseconds. fun ~~truncatedToMicroseconds~~(): Duration (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) truncatedToMilliseconds Return this duration truncated to the number of whole milliseconds. fun ~~truncatedToMilliseconds~~(): Duration (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) truncatedToMinutes Return this duration truncated to the number of whole minutes. fun ~~truncatedToMinutes~~(): Duration (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) truncatedToSeconds Return this duration truncated to the number of whole seconds. fun ~~truncatedToSeconds~~(): Duration (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) unaryMinus operator fun unaryMinus(): Duration","title":"Functions"},{"location":"api/core/io.islandtime.measures/-duration/#companion-object-properties","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MAX val MAX: Duration (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MIN val MIN: Duration (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) ZERO val ZERO: Duration","title":"Companion Object Properties"},{"location":"api/core/io.islandtime.measures/-duration/#extension-functions","text":"Name Summary (jvm) toJavaDuration Convert to an equivalent Java Duration . fun Duration .toJavaDuration(): Duration","title":"Extension Functions"},{"location":"api/core/io.islandtime.measures/-duration/-m-a-x/","text":"core / io.islandtime.measures / Duration / MAX MAX (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val MAX: Duration","title":" m a x"},{"location":"api/core/io.islandtime.measures/-duration/-m-a-x/#max","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val MAX: Duration","title":"MAX"},{"location":"api/core/io.islandtime.measures/-duration/-m-i-n/","text":"core / io.islandtime.measures / Duration / MIN MIN (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val MIN: Duration","title":" m i n"},{"location":"api/core/io.islandtime.measures/-duration/-m-i-n/#min","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val MIN: Duration","title":"MIN"},{"location":"api/core/io.islandtime.measures/-duration/-z-e-r-o/","text":"core / io.islandtime.measures / Duration / ZERO ZERO (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val ZERO: Duration","title":" z e r o"},{"location":"api/core/io.islandtime.measures/-duration/-z-e-r-o/#zero","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val ZERO: Duration","title":"ZERO"},{"location":"api/core/io.islandtime.measures/-duration/absolute-value/","text":"core / io.islandtime.measures / Duration / absoluteValue absoluteValue (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val absoluteValue: Duration Get the absolute value of this duration.","title":"Absolute value"},{"location":"api/core/io.islandtime.measures/-duration/absolute-value/#absolutevalue","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val absoluteValue: Duration Get the absolute value of this duration.","title":"absoluteValue"},{"location":"api/core/io.islandtime.measures/-duration/compare-to/","text":"core / io.islandtime.measures / Duration / compareTo compareTo (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun compareTo(other: Duration ): Int","title":"Compare to"},{"location":"api/core/io.islandtime.measures/-duration/compare-to/#compareto","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun compareTo(other: Duration ): Int","title":"compareTo"},{"location":"api/core/io.islandtime.measures/-duration/div/","text":"core / io.islandtime.measures / Duration / div div (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun div(scalar: Int ): Duration Divide by a scalar value. Exceptions ArithmeticException - if division by zero or overflow occurs","title":"Div"},{"location":"api/core/io.islandtime.measures/-duration/div/#div","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun div(scalar: Int ): Duration Divide by a scalar value.","title":"div"},{"location":"api/core/io.islandtime.measures/-duration/div/#exceptions","text":"ArithmeticException - if division by zero or overflow occurs","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-duration/equals/","text":"core / io.islandtime.measures / Duration / equals equals (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun equals(other: Any ?): Boolean","title":"Equals"},{"location":"api/core/io.islandtime.measures/-duration/equals/#equals","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun equals(other: Any ?): Boolean","title":"equals"},{"location":"api/core/io.islandtime.measures/-duration/hash-code/","text":"core / io.islandtime.measures / Duration / hashCode hashCode (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun hashCode(): Int","title":"Hash code"},{"location":"api/core/io.islandtime.measures/-duration/hash-code/#hashcode","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun hashCode(): Int","title":"hashCode"},{"location":"api/core/io.islandtime.measures/-duration/in-days/","text":"core / io.islandtime.measures / Duration / inDays inDays (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline val inDays: LongDays Convert this duration into the number of 24-hour days represented by it.","title":"In days"},{"location":"api/core/io.islandtime.measures/-duration/in-days/#indays","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline val inDays: LongDays Convert this duration into the number of 24-hour days represented by it.","title":"inDays"},{"location":"api/core/io.islandtime.measures/-duration/in-hours/","text":"core / io.islandtime.measures / Duration / inHours inHours (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline val inHours: LongHours Convert this duration into the number of whole hours represented by it.","title":"In hours"},{"location":"api/core/io.islandtime.measures/-duration/in-hours/#inhours","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline val inHours: LongHours Convert this duration into the number of whole hours represented by it.","title":"inHours"},{"location":"api/core/io.islandtime.measures/-duration/in-microseconds/","text":"core / io.islandtime.measures / Duration / inMicroseconds inMicroseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inMicroseconds: LongMicroseconds Convert this duration into the number of whole microseconds represented by it. Exceptions ArithmeticException - if the duration cannot be represented without overflow","title":"In microseconds"},{"location":"api/core/io.islandtime.measures/-duration/in-microseconds/#inmicroseconds","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inMicroseconds: LongMicroseconds Convert this duration into the number of whole microseconds represented by it.","title":"inMicroseconds"},{"location":"api/core/io.islandtime.measures/-duration/in-microseconds/#exceptions","text":"ArithmeticException - if the duration cannot be represented without overflow","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-duration/in-milliseconds/","text":"core / io.islandtime.measures / Duration / inMilliseconds inMilliseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inMilliseconds: LongMilliseconds Convert this duration into the number of whole milliseconds represented by it. Exceptions ArithmeticException - if the duration cannot be represented without overflow","title":"In milliseconds"},{"location":"api/core/io.islandtime.measures/-duration/in-milliseconds/#inmilliseconds","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inMilliseconds: LongMilliseconds Convert this duration into the number of whole milliseconds represented by it.","title":"inMilliseconds"},{"location":"api/core/io.islandtime.measures/-duration/in-milliseconds/#exceptions","text":"ArithmeticException - if the duration cannot be represented without overflow","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-duration/in-minutes/","text":"core / io.islandtime.measures / Duration / inMinutes inMinutes (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline val inMinutes: LongMinutes Convert this duration into the number of whole minutes represented by it.","title":"In minutes"},{"location":"api/core/io.islandtime.measures/-duration/in-minutes/#inminutes","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline val inMinutes: LongMinutes Convert this duration into the number of whole minutes represented by it.","title":"inMinutes"},{"location":"api/core/io.islandtime.measures/-duration/in-nanoseconds/","text":"core / io.islandtime.measures / Duration / inNanoseconds inNanoseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inNanoseconds: LongNanoseconds Convert this duration into LongNanoseconds . Exceptions ArithmeticException - if the duration cannot be represented without overflow","title":"In nanoseconds"},{"location":"api/core/io.islandtime.measures/-duration/in-nanoseconds/#innanoseconds","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inNanoseconds: LongNanoseconds Convert this duration into LongNanoseconds .","title":"inNanoseconds"},{"location":"api/core/io.islandtime.measures/-duration/in-nanoseconds/#exceptions","text":"ArithmeticException - if the duration cannot be represented without overflow","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-duration/in-seconds/","text":"core / io.islandtime.measures / Duration / inSeconds inSeconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline val inSeconds: LongSeconds Return the number of whole seconds in this duration. See Also seconds","title":"In seconds"},{"location":"api/core/io.islandtime.measures/-duration/in-seconds/#inseconds","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline val inSeconds: LongSeconds Return the number of whole seconds in this duration. See Also seconds","title":"inSeconds"},{"location":"api/core/io.islandtime.measures/-duration/is-negative/","text":"core / io.islandtime.measures / Duration / isNegative isNegative (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isNegative(): Boolean Is this duration negative?","title":"Is negative"},{"location":"api/core/io.islandtime.measures/-duration/is-negative/#isnegative","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isNegative(): Boolean Is this duration negative?","title":"isNegative"},{"location":"api/core/io.islandtime.measures/-duration/is-positive/","text":"core / io.islandtime.measures / Duration / isPositive isPositive (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isPositive(): Boolean Is this duration positive?","title":"Is positive"},{"location":"api/core/io.islandtime.measures/-duration/is-positive/#ispositive","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isPositive(): Boolean Is this duration positive?","title":"isPositive"},{"location":"api/core/io.islandtime.measures/-duration/is-zero/","text":"core / io.islandtime.measures / Duration / isZero isZero (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isZero(): Boolean Is this duration zero?","title":"Is zero"},{"location":"api/core/io.islandtime.measures/-duration/is-zero/#iszero","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isZero(): Boolean Is this duration zero?","title":"isZero"},{"location":"api/core/io.islandtime.measures/-duration/minus/","text":"core / io.islandtime.measures / Duration / minus minus (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun minus(other: Duration ): Duration operator fun minus(days: IntDays ): Duration operator fun minus(days: LongDays ): Duration operator fun minus(hours: IntHours ): Duration operator fun minus(hours: LongHours ): Duration operator fun minus(minutes: IntMinutes ): Duration operator fun minus(minutes: LongMinutes ): Duration operator fun minus(seconds: IntSeconds ): Duration operator fun minus(seconds: LongSeconds ): Duration operator fun minus(milliseconds: IntMilliseconds ): Duration operator fun minus(milliseconds: LongMilliseconds ): Duration operator fun minus(microseconds: IntMicroseconds ): Duration operator fun minus(microseconds: LongMicroseconds ): Duration operator fun minus(nanoseconds: IntNanoseconds ): Duration operator fun minus(nanoseconds: LongNanoseconds ): Duration","title":"Minus"},{"location":"api/core/io.islandtime.measures/-duration/minus/#minus","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun minus(other: Duration ): Duration operator fun minus(days: IntDays ): Duration operator fun minus(days: LongDays ): Duration operator fun minus(hours: IntHours ): Duration operator fun minus(hours: LongHours ): Duration operator fun minus(minutes: IntMinutes ): Duration operator fun minus(minutes: LongMinutes ): Duration operator fun minus(seconds: IntSeconds ): Duration operator fun minus(seconds: LongSeconds ): Duration operator fun minus(milliseconds: IntMilliseconds ): Duration operator fun minus(milliseconds: LongMilliseconds ): Duration operator fun minus(microseconds: IntMicroseconds ): Duration operator fun minus(microseconds: LongMicroseconds ): Duration operator fun minus(nanoseconds: IntNanoseconds ): Duration operator fun minus(nanoseconds: LongNanoseconds ): Duration","title":"minus"},{"location":"api/core/io.islandtime.measures/-duration/nanosecond-adjustment/","text":"core / io.islandtime.measures / Duration / nanosecondAdjustment nanosecondAdjustment (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val nanosecondAdjustment: IntNanoseconds","title":"Nanosecond adjustment"},{"location":"api/core/io.islandtime.measures/-duration/nanosecond-adjustment/#nanosecondadjustment","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val nanosecondAdjustment: IntNanoseconds","title":"nanosecondAdjustment"},{"location":"api/core/io.islandtime.measures/-duration/plus/","text":"core / io.islandtime.measures / Duration / plus plus (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun plus(other: Duration ): Duration operator fun plus(days: IntDays ): Duration operator fun plus(days: LongDays ): Duration operator fun plus(hours: IntHours ): Duration operator fun plus(hours: LongHours ): Duration operator fun plus(minutes: IntMinutes ): Duration operator fun plus(minutes: LongMinutes ): Duration operator fun plus(seconds: IntSeconds ): Duration operator fun plus(seconds: LongSeconds ): Duration operator fun plus(milliseconds: IntMilliseconds ): Duration operator fun plus(milliseconds: LongMilliseconds ): Duration operator fun plus(microseconds: IntMicroseconds ): Duration operator fun plus(microseconds: LongMicroseconds ): Duration operator fun plus(nanoseconds: IntNanoseconds ): Duration operator fun plus(nanoseconds: LongNanoseconds ): Duration","title":"Plus"},{"location":"api/core/io.islandtime.measures/-duration/plus/#plus","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun plus(other: Duration ): Duration operator fun plus(days: IntDays ): Duration operator fun plus(days: LongDays ): Duration operator fun plus(hours: IntHours ): Duration operator fun plus(hours: LongHours ): Duration operator fun plus(minutes: IntMinutes ): Duration operator fun plus(minutes: LongMinutes ): Duration operator fun plus(seconds: IntSeconds ): Duration operator fun plus(seconds: LongSeconds ): Duration operator fun plus(milliseconds: IntMilliseconds ): Duration operator fun plus(milliseconds: LongMilliseconds ): Duration operator fun plus(microseconds: IntMicroseconds ): Duration operator fun plus(microseconds: LongMicroseconds ): Duration operator fun plus(nanoseconds: IntNanoseconds ): Duration operator fun plus(nanoseconds: LongNanoseconds ): Duration","title":"plus"},{"location":"api/core/io.islandtime.measures/-duration/seconds/","text":"core / io.islandtime.measures / Duration / seconds seconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val seconds: LongSeconds","title":"Seconds"},{"location":"api/core/io.islandtime.measures/-duration/seconds/#seconds","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val seconds: LongSeconds","title":"seconds"},{"location":"api/core/io.islandtime.measures/-duration/times/","text":"core / io.islandtime.measures / Duration / times times (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun times(scalar: Int ): Duration Multiply by a scalar value. Exceptions ArithmeticException - if overflow occurs","title":"Times"},{"location":"api/core/io.islandtime.measures/-duration/times/#times","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun times(scalar: Int ): Duration Multiply by a scalar value.","title":"times"},{"location":"api/core/io.islandtime.measures/-duration/times/#exceptions","text":"ArithmeticException - if overflow occurs","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-duration/to-components/","text":"core / io.islandtime.measures / Duration / toComponents toComponents (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline fun <T> toComponents(action: (days: LongDays , hours: IntHours , minutes: IntMinutes , seconds: IntSeconds , nanoseconds: IntNanoseconds ) -> T): T Break this duration down into individual unit components, assuming a 24-hour day length. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline fun <T> toComponents(action: (hours: LongHours , minutes: IntMinutes , seconds: IntSeconds , nanoseconds: IntNanoseconds ) -> T): T inline fun <T> toComponents(action: (minutes: LongMinutes , seconds: IntSeconds , nanoseconds: IntNanoseconds ) -> T): T inline fun <T> toComponents(action: (seconds: LongSeconds , nanoseconds: IntNanoseconds ) -> T): T Break this duration down into individual unit components.","title":"To components"},{"location":"api/core/io.islandtime.measures/-duration/to-components/#tocomponents","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline fun <T> toComponents(action: (days: LongDays , hours: IntHours , minutes: IntMinutes , seconds: IntSeconds , nanoseconds: IntNanoseconds ) -> T): T Break this duration down into individual unit components, assuming a 24-hour day length. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline fun <T> toComponents(action: (hours: LongHours , minutes: IntMinutes , seconds: IntSeconds , nanoseconds: IntNanoseconds ) -> T): T inline fun <T> toComponents(action: (minutes: LongMinutes , seconds: IntSeconds , nanoseconds: IntNanoseconds ) -> T): T inline fun <T> toComponents(action: (seconds: LongSeconds , nanoseconds: IntNanoseconds ) -> T): T Break this duration down into individual unit components.","title":"toComponents"},{"location":"api/core/io.islandtime.measures/-duration/to-kotlin-duration/","text":"core / io.islandtime.measures / Duration / toKotlinDuration toKotlinDuration (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toKotlinDuration(): <ERROR CLASS> (jvm) @ExperimentalTime fun toKotlinDuration(): Duration","title":"To kotlin duration"},{"location":"api/core/io.islandtime.measures/-duration/to-kotlin-duration/#tokotlinduration","text":"(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toKotlinDuration(): <ERROR CLASS> (jvm) @ExperimentalTime fun toKotlinDuration(): Duration","title":"toKotlinDuration"},{"location":"api/core/io.islandtime.measures/-duration/to-string/","text":"core / io.islandtime.measures / Duration / toString toString (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toString(): String","title":"To string"},{"location":"api/core/io.islandtime.measures/-duration/to-string/#tostring","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toString(): String","title":"toString"},{"location":"api/core/io.islandtime.measures/-duration/truncated-to-days/","text":"core / io.islandtime.measures / Duration / truncatedToDays truncatedToDays (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun ~~truncatedToDays~~(): Duration Deprecated: Use truncatedTo(). Return this duration truncated to the number of 24-hour days. All unit components smaller than a day will be replaced with zero.","title":"Truncated to days"},{"location":"api/core/io.islandtime.measures/-duration/truncated-to-days/#truncatedtodays","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun ~~truncatedToDays~~(): Duration Deprecated: Use truncatedTo(). Return this duration truncated to the number of 24-hour days. All unit components smaller than a day will be replaced with zero.","title":"truncatedToDays"},{"location":"api/core/io.islandtime.measures/-duration/truncated-to-hours/","text":"core / io.islandtime.measures / Duration / truncatedToHours truncatedToHours (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun ~~truncatedToHours~~(): Duration Deprecated: Use truncatedTo(). Return this duration truncated to the number of whole hours. All unit components smaller than an hour will be replaced with zero.","title":"Truncated to hours"},{"location":"api/core/io.islandtime.measures/-duration/truncated-to-hours/#truncatedtohours","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun ~~truncatedToHours~~(): Duration Deprecated: Use truncatedTo(). Return this duration truncated to the number of whole hours. All unit components smaller than an hour will be replaced with zero.","title":"truncatedToHours"},{"location":"api/core/io.islandtime.measures/-duration/truncated-to-microseconds/","text":"core / io.islandtime.measures / Duration / truncatedToMicroseconds truncatedToMicroseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun ~~truncatedToMicroseconds~~(): Duration Deprecated: Use truncatedTo(). Return this duration truncated to the number of whole microseconds. All unit components smaller than a microsecond will be replaced with zero.","title":"Truncated to microseconds"},{"location":"api/core/io.islandtime.measures/-duration/truncated-to-microseconds/#truncatedtomicroseconds","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun ~~truncatedToMicroseconds~~(): Duration Deprecated: Use truncatedTo(). Return this duration truncated to the number of whole microseconds. All unit components smaller than a microsecond will be replaced with zero.","title":"truncatedToMicroseconds"},{"location":"api/core/io.islandtime.measures/-duration/truncated-to-milliseconds/","text":"core / io.islandtime.measures / Duration / truncatedToMilliseconds truncatedToMilliseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun ~~truncatedToMilliseconds~~(): Duration Deprecated: Use truncatedTo(). Return this duration truncated to the number of whole milliseconds. All unit components smaller than a millisecond will be replaced with zero.","title":"Truncated to milliseconds"},{"location":"api/core/io.islandtime.measures/-duration/truncated-to-milliseconds/#truncatedtomilliseconds","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun ~~truncatedToMilliseconds~~(): Duration Deprecated: Use truncatedTo(). Return this duration truncated to the number of whole milliseconds. All unit components smaller than a millisecond will be replaced with zero.","title":"truncatedToMilliseconds"},{"location":"api/core/io.islandtime.measures/-duration/truncated-to-minutes/","text":"core / io.islandtime.measures / Duration / truncatedToMinutes truncatedToMinutes (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun ~~truncatedToMinutes~~(): Duration Deprecated: Use truncatedTo(). Return this duration truncated to the number of whole minutes. All unit components smaller than a minute will be replaced with zero.","title":"Truncated to minutes"},{"location":"api/core/io.islandtime.measures/-duration/truncated-to-minutes/#truncatedtominutes","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun ~~truncatedToMinutes~~(): Duration Deprecated: Use truncatedTo(). Return this duration truncated to the number of whole minutes. All unit components smaller than a minute will be replaced with zero.","title":"truncatedToMinutes"},{"location":"api/core/io.islandtime.measures/-duration/truncated-to-seconds/","text":"core / io.islandtime.measures / Duration / truncatedToSeconds truncatedToSeconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun ~~truncatedToSeconds~~(): Duration Deprecated: Use truncatedTo(). Return this duration truncated to the number of whole seconds. All unit components smaller than a second will be replaced with zero.","title":"Truncated to seconds"},{"location":"api/core/io.islandtime.measures/-duration/truncated-to-seconds/#truncatedtoseconds","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun ~~truncatedToSeconds~~(): Duration Deprecated: Use truncatedTo(). Return this duration truncated to the number of whole seconds. All unit components smaller than a second will be replaced with zero.","title":"truncatedToSeconds"},{"location":"api/core/io.islandtime.measures/-duration/truncated-to/","text":"core / io.islandtime.measures / Duration / truncatedTo truncatedTo (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun truncatedTo(unit: TimeUnit ): Duration Return this duration, rounded down to match the precision of a given unit .","title":"Truncated to"},{"location":"api/core/io.islandtime.measures/-duration/truncated-to/#truncatedto","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun truncatedTo(unit: TimeUnit ): Duration Return this duration, rounded down to match the precision of a given unit .","title":"truncatedTo"},{"location":"api/core/io.islandtime.measures/-duration/unary-minus/","text":"core / io.islandtime.measures / Duration / unaryMinus unaryMinus (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun unaryMinus(): Duration","title":"Unary minus"},{"location":"api/core/io.islandtime.measures/-duration/unary-minus/#unaryminus","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun unaryMinus(): Duration","title":"unaryMinus"},{"location":"api/core/io.islandtime.measures/-int-centuries/","text":"core / io.islandtime.measures / IntCenturies IntCenturies (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline class IntCenturies : Comparable < IntCenturies > A number of centuries. Constructors Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init> A number of centuries. <init>(value: Int ) Properties Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) absoluteValue Returns the absolute value. val absoluteValue: IntCenturies (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inDecades Convert to decades. val inDecades: IntDecades (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inMonths Convert to months. val inMonths: IntMonths (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inYears Convert to years. val inYears: IntYears (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) value The underlying value. val value: Int Functions Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) compareTo fun compareTo(other: IntCenturies ): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) div Divide by a scalar value. operator fun div(scalar: Int ): IntCenturies operator fun div(scalar: Long ): LongCenturies (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isNegative Is this duration negative? fun isNegative(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isPositive Is this duration positive? fun isPositive(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isZero Is this duration zero? fun isZero(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) minus operator fun minus(months: IntMonths ): IntMonths operator fun minus(months: LongMonths ): LongMonths operator fun minus(years: IntYears ): IntYears operator fun minus(years: LongYears ): LongYears operator fun minus(decades: IntDecades ): IntDecades operator fun minus(decades: LongDecades ): LongDecades operator fun minus(centuries: IntCenturies ): IntCenturies operator fun minus(centuries: LongCenturies ): LongCenturies (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) plus operator fun plus(months: IntMonths ): IntMonths operator fun plus(months: LongMonths ): LongMonths operator fun plus(years: IntYears ): IntYears operator fun plus(years: LongYears ): LongYears operator fun plus(decades: IntDecades ): IntDecades operator fun plus(decades: LongDecades ): LongDecades operator fun plus(centuries: IntCenturies ): IntCenturies operator fun plus(centuries: LongCenturies ): LongCenturies (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) rem operator fun rem(scalar: Int ): IntCenturies operator fun rem(scalar: Long ): LongCenturies (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) times Multiply by a scalar value. operator fun times(scalar: Int ): IntCenturies operator fun times(scalar: Long ): LongCenturies (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toLong Convert to a unit-less Long value. fun toLong(): Long (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toLongCenturies Convert to LongCenturies . fun toLongCenturies(): LongCenturies (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toString Convert to an ISO-8601 time interval representation. fun toString(): String (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) unaryMinus Negate the value. operator fun unaryMinus(): IntCenturies Companion Object Properties Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MAX The largest supported value. val MAX: IntCenturies (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MIN The smallest supported value. val MIN: IntCenturies Extension Functions Name Summary (jvm) toJavaPeriod Convert to an equivalent Java Period . fun IntCenturies .toJavaPeriod(): Period","title":"Index"},{"location":"api/core/io.islandtime.measures/-int-centuries/#intcenturies","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline class IntCenturies : Comparable < IntCenturies > A number of centuries.","title":"IntCenturies"},{"location":"api/core/io.islandtime.measures/-int-centuries/#constructors","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init> A number of centuries. <init>(value: Int )","title":"Constructors"},{"location":"api/core/io.islandtime.measures/-int-centuries/#properties","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) absoluteValue Returns the absolute value. val absoluteValue: IntCenturies (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inDecades Convert to decades. val inDecades: IntDecades (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inMonths Convert to months. val inMonths: IntMonths (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inYears Convert to years. val inYears: IntYears (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) value The underlying value. val value: Int","title":"Properties"},{"location":"api/core/io.islandtime.measures/-int-centuries/#functions","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) compareTo fun compareTo(other: IntCenturies ): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) div Divide by a scalar value. operator fun div(scalar: Int ): IntCenturies operator fun div(scalar: Long ): LongCenturies (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isNegative Is this duration negative? fun isNegative(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isPositive Is this duration positive? fun isPositive(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isZero Is this duration zero? fun isZero(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) minus operator fun minus(months: IntMonths ): IntMonths operator fun minus(months: LongMonths ): LongMonths operator fun minus(years: IntYears ): IntYears operator fun minus(years: LongYears ): LongYears operator fun minus(decades: IntDecades ): IntDecades operator fun minus(decades: LongDecades ): LongDecades operator fun minus(centuries: IntCenturies ): IntCenturies operator fun minus(centuries: LongCenturies ): LongCenturies (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) plus operator fun plus(months: IntMonths ): IntMonths operator fun plus(months: LongMonths ): LongMonths operator fun plus(years: IntYears ): IntYears operator fun plus(years: LongYears ): LongYears operator fun plus(decades: IntDecades ): IntDecades operator fun plus(decades: LongDecades ): LongDecades operator fun plus(centuries: IntCenturies ): IntCenturies operator fun plus(centuries: LongCenturies ): LongCenturies (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) rem operator fun rem(scalar: Int ): IntCenturies operator fun rem(scalar: Long ): LongCenturies (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) times Multiply by a scalar value. operator fun times(scalar: Int ): IntCenturies operator fun times(scalar: Long ): LongCenturies (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toLong Convert to a unit-less Long value. fun toLong(): Long (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toLongCenturies Convert to LongCenturies . fun toLongCenturies(): LongCenturies (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toString Convert to an ISO-8601 time interval representation. fun toString(): String (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) unaryMinus Negate the value. operator fun unaryMinus(): IntCenturies","title":"Functions"},{"location":"api/core/io.islandtime.measures/-int-centuries/#companion-object-properties","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MAX The largest supported value. val MAX: IntCenturies (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MIN The smallest supported value. val MIN: IntCenturies","title":"Companion Object Properties"},{"location":"api/core/io.islandtime.measures/-int-centuries/#extension-functions","text":"Name Summary (jvm) toJavaPeriod Convert to an equivalent Java Period . fun IntCenturies .toJavaPeriod(): Period","title":"Extension Functions"},{"location":"api/core/io.islandtime.measures/-int-centuries/-init-/","text":"core / io.islandtime.measures / IntCenturies / <init> <init> (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init>(value: Int ) A number of centuries.","title":" init "},{"location":"api/core/io.islandtime.measures/-int-centuries/-init-/#init","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init>(value: Int ) A number of centuries.","title":"&lt;init&gt;"},{"location":"api/core/io.islandtime.measures/-int-centuries/-m-a-x/","text":"core / io.islandtime.measures / IntCenturies / MAX MAX (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val MAX: IntCenturies The largest supported value.","title":" m a x"},{"location":"api/core/io.islandtime.measures/-int-centuries/-m-a-x/#max","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val MAX: IntCenturies The largest supported value.","title":"MAX"},{"location":"api/core/io.islandtime.measures/-int-centuries/-m-i-n/","text":"core / io.islandtime.measures / IntCenturies / MIN MIN (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val MIN: IntCenturies The smallest supported value.","title":" m i n"},{"location":"api/core/io.islandtime.measures/-int-centuries/-m-i-n/#min","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val MIN: IntCenturies The smallest supported value.","title":"MIN"},{"location":"api/core/io.islandtime.measures/-int-centuries/absolute-value/","text":"core / io.islandtime.measures / IntCenturies / absoluteValue absoluteValue (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val absoluteValue: IntCenturies Returns the absolute value. Exceptions ArithmeticException - if overflow occurs","title":"Absolute value"},{"location":"api/core/io.islandtime.measures/-int-centuries/absolute-value/#absolutevalue","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val absoluteValue: IntCenturies Returns the absolute value.","title":"absoluteValue"},{"location":"api/core/io.islandtime.measures/-int-centuries/absolute-value/#exceptions","text":"ArithmeticException - if overflow occurs","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-int-centuries/compare-to/","text":"core / io.islandtime.measures / IntCenturies / compareTo compareTo (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun compareTo(other: IntCenturies ): Int","title":"Compare to"},{"location":"api/core/io.islandtime.measures/-int-centuries/compare-to/#compareto","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun compareTo(other: IntCenturies ): Int","title":"compareTo"},{"location":"api/core/io.islandtime.measures/-int-centuries/div/","text":"core / io.islandtime.measures / IntCenturies / div div (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun div(scalar: Int ): IntCenturies Divide by a scalar value. Exceptions ArithmeticException - if overflow occurs or the scalar is zero(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun div(scalar: Long ): LongCenturies Divide by a scalar value. Exceptions ArithmeticException - if the scalar is zero","title":"Div"},{"location":"api/core/io.islandtime.measures/-int-centuries/div/#div","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun div(scalar: Int ): IntCenturies Divide by a scalar value.","title":"div"},{"location":"api/core/io.islandtime.measures/-int-centuries/div/#exceptions","text":"ArithmeticException - if overflow occurs or the scalar is zero(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun div(scalar: Long ): LongCenturies Divide by a scalar value.","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-int-centuries/div/#exceptions_1","text":"ArithmeticException - if the scalar is zero","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-int-centuries/in-decades/","text":"core / io.islandtime.measures / IntCenturies / inDecades inDecades (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inDecades: IntDecades Convert to decades. Exceptions ArithmeticException - if overflow occurs","title":"In decades"},{"location":"api/core/io.islandtime.measures/-int-centuries/in-decades/#indecades","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inDecades: IntDecades Convert to decades.","title":"inDecades"},{"location":"api/core/io.islandtime.measures/-int-centuries/in-decades/#exceptions","text":"ArithmeticException - if overflow occurs","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-int-centuries/in-months/","text":"core / io.islandtime.measures / IntCenturies / inMonths inMonths (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inMonths: IntMonths Convert to months. Exceptions ArithmeticException - if overflow occurs","title":"In months"},{"location":"api/core/io.islandtime.measures/-int-centuries/in-months/#inmonths","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inMonths: IntMonths Convert to months.","title":"inMonths"},{"location":"api/core/io.islandtime.measures/-int-centuries/in-months/#exceptions","text":"ArithmeticException - if overflow occurs","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-int-centuries/in-years/","text":"core / io.islandtime.measures / IntCenturies / inYears inYears (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inYears: IntYears Convert to years. Exceptions ArithmeticException - if overflow occurs","title":"In years"},{"location":"api/core/io.islandtime.measures/-int-centuries/in-years/#inyears","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inYears: IntYears Convert to years.","title":"inYears"},{"location":"api/core/io.islandtime.measures/-int-centuries/in-years/#exceptions","text":"ArithmeticException - if overflow occurs","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-int-centuries/is-negative/","text":"core / io.islandtime.measures / IntCenturies / isNegative isNegative (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isNegative(): Boolean Is this duration negative?","title":"Is negative"},{"location":"api/core/io.islandtime.measures/-int-centuries/is-negative/#isnegative","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isNegative(): Boolean Is this duration negative?","title":"isNegative"},{"location":"api/core/io.islandtime.measures/-int-centuries/is-positive/","text":"core / io.islandtime.measures / IntCenturies / isPositive isPositive (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isPositive(): Boolean Is this duration positive?","title":"Is positive"},{"location":"api/core/io.islandtime.measures/-int-centuries/is-positive/#ispositive","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isPositive(): Boolean Is this duration positive?","title":"isPositive"},{"location":"api/core/io.islandtime.measures/-int-centuries/is-zero/","text":"core / io.islandtime.measures / IntCenturies / isZero isZero (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isZero(): Boolean Is this duration zero?","title":"Is zero"},{"location":"api/core/io.islandtime.measures/-int-centuries/is-zero/#iszero","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isZero(): Boolean Is this duration zero?","title":"isZero"},{"location":"api/core/io.islandtime.measures/-int-centuries/minus/","text":"core / io.islandtime.measures / IntCenturies / minus minus (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun minus(months: IntMonths ): IntMonths operator fun minus(months: LongMonths ): LongMonths operator fun minus(years: IntYears ): IntYears operator fun minus(years: LongYears ): LongYears operator fun minus(decades: IntDecades ): IntDecades operator fun minus(decades: LongDecades ): LongDecades operator fun minus(centuries: IntCenturies ): IntCenturies operator fun minus(centuries: LongCenturies ): LongCenturies","title":"Minus"},{"location":"api/core/io.islandtime.measures/-int-centuries/minus/#minus","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun minus(months: IntMonths ): IntMonths operator fun minus(months: LongMonths ): LongMonths operator fun minus(years: IntYears ): IntYears operator fun minus(years: LongYears ): LongYears operator fun minus(decades: IntDecades ): IntDecades operator fun minus(decades: LongDecades ): LongDecades operator fun minus(centuries: IntCenturies ): IntCenturies operator fun minus(centuries: LongCenturies ): LongCenturies","title":"minus"},{"location":"api/core/io.islandtime.measures/-int-centuries/plus/","text":"core / io.islandtime.measures / IntCenturies / plus plus (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun plus(months: IntMonths ): IntMonths operator fun plus(months: LongMonths ): LongMonths operator fun plus(years: IntYears ): IntYears operator fun plus(years: LongYears ): LongYears operator fun plus(decades: IntDecades ): IntDecades operator fun plus(decades: LongDecades ): LongDecades operator fun plus(centuries: IntCenturies ): IntCenturies operator fun plus(centuries: LongCenturies ): LongCenturies","title":"Plus"},{"location":"api/core/io.islandtime.measures/-int-centuries/plus/#plus","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun plus(months: IntMonths ): IntMonths operator fun plus(months: LongMonths ): LongMonths operator fun plus(years: IntYears ): IntYears operator fun plus(years: LongYears ): LongYears operator fun plus(decades: IntDecades ): IntDecades operator fun plus(decades: LongDecades ): LongDecades operator fun plus(centuries: IntCenturies ): IntCenturies operator fun plus(centuries: LongCenturies ): LongCenturies","title":"plus"},{"location":"api/core/io.islandtime.measures/-int-centuries/rem/","text":"core / io.islandtime.measures / IntCenturies / rem rem (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun rem(scalar: Int ): IntCenturies operator fun rem(scalar: Long ): LongCenturies","title":"Rem"},{"location":"api/core/io.islandtime.measures/-int-centuries/rem/#rem","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun rem(scalar: Int ): IntCenturies operator fun rem(scalar: Long ): LongCenturies","title":"rem"},{"location":"api/core/io.islandtime.measures/-int-centuries/times/","text":"core / io.islandtime.measures / IntCenturies / times times (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun times(scalar: Int ): IntCenturies operator fun times(scalar: Long ): LongCenturies Multiply by a scalar value. Exceptions ArithmeticException - if overflow occurs","title":"Times"},{"location":"api/core/io.islandtime.measures/-int-centuries/times/#times","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun times(scalar: Int ): IntCenturies operator fun times(scalar: Long ): LongCenturies Multiply by a scalar value.","title":"times"},{"location":"api/core/io.islandtime.measures/-int-centuries/times/#exceptions","text":"ArithmeticException - if overflow occurs","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-int-centuries/to-long-centuries/","text":"core / io.islandtime.measures / IntCenturies / toLongCenturies toLongCenturies (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toLongCenturies(): LongCenturies Convert to LongCenturies .","title":"To long centuries"},{"location":"api/core/io.islandtime.measures/-int-centuries/to-long-centuries/#tolongcenturies","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toLongCenturies(): LongCenturies Convert to LongCenturies .","title":"toLongCenturies"},{"location":"api/core/io.islandtime.measures/-int-centuries/to-long/","text":"core / io.islandtime.measures / IntCenturies / toLong toLong (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toLong(): Long Convert to a unit-less Long value.","title":"To long"},{"location":"api/core/io.islandtime.measures/-int-centuries/to-long/#tolong","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toLong(): Long Convert to a unit-less Long value.","title":"toLong"},{"location":"api/core/io.islandtime.measures/-int-centuries/to-string/","text":"core / io.islandtime.measures / IntCenturies / toString toString (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toString(): String Convert to an ISO-8601 time interval representation.","title":"To string"},{"location":"api/core/io.islandtime.measures/-int-centuries/to-string/#tostring","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toString(): String Convert to an ISO-8601 time interval representation.","title":"toString"},{"location":"api/core/io.islandtime.measures/-int-centuries/unary-minus/","text":"core / io.islandtime.measures / IntCenturies / unaryMinus unaryMinus (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun unaryMinus(): IntCenturies Negate the value. Exceptions ArithmeticException - if overflow occurs","title":"Unary minus"},{"location":"api/core/io.islandtime.measures/-int-centuries/unary-minus/#unaryminus","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun unaryMinus(): IntCenturies Negate the value.","title":"unaryMinus"},{"location":"api/core/io.islandtime.measures/-int-centuries/unary-minus/#exceptions","text":"ArithmeticException - if overflow occurs","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-int-centuries/value/","text":"core / io.islandtime.measures / IntCenturies / value value (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val value: Int The underlying value.","title":"Value"},{"location":"api/core/io.islandtime.measures/-int-centuries/value/#value","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val value: Int The underlying value.","title":"value"},{"location":"api/core/io.islandtime.measures/-int-days/","text":"core / io.islandtime.measures / IntDays IntDays (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline class IntDays : Comparable < IntDays > A number of days. Constructors Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init> A number of days. <init>(value: Int ) Properties Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) absoluteValue Returns the absolute value. val absoluteValue: IntDays (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inHours Convert to hours. val inHours: IntHours (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inMicroseconds Convert to microseconds. val inMicroseconds: LongMicroseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inMilliseconds Convert to milliseconds. val inMilliseconds: LongMilliseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inMinutes Convert to minutes. val inMinutes: IntMinutes (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inNanoseconds Convert to nanoseconds. val inNanoseconds: LongNanoseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inSeconds Convert to seconds. val inSeconds: IntSeconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inWeeks Convert to whole weeks. val inWeeks: IntWeeks (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) value The underlying value. val value: Int Functions Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) compareTo fun compareTo(other: IntDays ): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) div Divide by a scalar value. operator fun div(scalar: Int ): IntDays operator fun div(scalar: Long ): LongDays (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isNegative Is this duration negative? fun isNegative(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isPositive Is this duration positive? fun isPositive(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isZero Is this duration zero? fun isZero(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) minus operator fun minus(nanoseconds: IntNanoseconds ): LongNanoseconds operator fun minus(nanoseconds: LongNanoseconds ): LongNanoseconds operator fun minus(microseconds: IntMicroseconds ): LongMicroseconds operator fun minus(microseconds: LongMicroseconds ): LongMicroseconds operator fun minus(milliseconds: IntMilliseconds ): LongMilliseconds operator fun minus(milliseconds: LongMilliseconds ): LongMilliseconds operator fun minus(seconds: IntSeconds ): IntSeconds operator fun minus(seconds: LongSeconds ): LongSeconds operator fun minus(minutes: IntMinutes ): IntMinutes operator fun minus(minutes: LongMinutes ): LongMinutes operator fun minus(hours: IntHours ): IntHours operator fun minus(hours: LongHours ): LongHours operator fun minus(days: IntDays ): IntDays operator fun minus(days: LongDays ): LongDays operator fun minus(weeks: IntWeeks ): IntDays operator fun minus(weeks: LongWeeks ): LongDays (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) plus operator fun plus(nanoseconds: IntNanoseconds ): LongNanoseconds operator fun plus(nanoseconds: LongNanoseconds ): LongNanoseconds operator fun plus(microseconds: IntMicroseconds ): LongMicroseconds operator fun plus(microseconds: LongMicroseconds ): LongMicroseconds operator fun plus(milliseconds: IntMilliseconds ): LongMilliseconds operator fun plus(milliseconds: LongMilliseconds ): LongMilliseconds operator fun plus(seconds: IntSeconds ): IntSeconds operator fun plus(seconds: LongSeconds ): LongSeconds operator fun plus(minutes: IntMinutes ): IntMinutes operator fun plus(minutes: LongMinutes ): LongMinutes operator fun plus(hours: IntHours ): IntHours operator fun plus(hours: LongHours ): LongHours operator fun plus(days: IntDays ): IntDays operator fun plus(days: LongDays ): LongDays operator fun plus(weeks: IntWeeks ): IntDays operator fun plus(weeks: LongWeeks ): LongDays (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) rem operator fun rem(scalar: Int ): IntDays operator fun rem(scalar: Long ): LongDays (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) times Multiply by a scalar value. operator fun times(scalar: Int ): IntDays operator fun times(scalar: Long ): LongDays (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toComponents fun <T> toComponents(action: (weeks: IntWeeks , days: IntDays ) -> T): T toKotlinDuration Convert to a kotlin.time.Duration .(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toKotlinDuration(): <ERROR CLASS> (jvm) fun toKotlinDuration(): Duration (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toLong Convert to a unit-less Long value. fun toLong(): Long (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toLongDays Convert to LongDays . fun toLongDays(): LongDays (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toString Convert to an ISO-8601 time interval representation. fun toString(): String (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) unaryMinus Negate the value. operator fun unaryMinus(): IntDays Companion Object Properties Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MAX The largest supported value. val MAX: IntDays (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MIN The smallest supported value. val MIN: IntDays Extension Functions Name Summary (jvm) toJavaDuration Convert to an equivalent Java Duration . fun IntDays .toJavaDuration(): Duration (jvm) toJavaPeriod Convert to an equivalent Java Period . fun IntDays .toJavaPeriod(): Period","title":"Index"},{"location":"api/core/io.islandtime.measures/-int-days/#intdays","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline class IntDays : Comparable < IntDays > A number of days.","title":"IntDays"},{"location":"api/core/io.islandtime.measures/-int-days/#constructors","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init> A number of days. <init>(value: Int )","title":"Constructors"},{"location":"api/core/io.islandtime.measures/-int-days/#properties","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) absoluteValue Returns the absolute value. val absoluteValue: IntDays (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inHours Convert to hours. val inHours: IntHours (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inMicroseconds Convert to microseconds. val inMicroseconds: LongMicroseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inMilliseconds Convert to milliseconds. val inMilliseconds: LongMilliseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inMinutes Convert to minutes. val inMinutes: IntMinutes (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inNanoseconds Convert to nanoseconds. val inNanoseconds: LongNanoseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inSeconds Convert to seconds. val inSeconds: IntSeconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inWeeks Convert to whole weeks. val inWeeks: IntWeeks (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) value The underlying value. val value: Int","title":"Properties"},{"location":"api/core/io.islandtime.measures/-int-days/#functions","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) compareTo fun compareTo(other: IntDays ): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) div Divide by a scalar value. operator fun div(scalar: Int ): IntDays operator fun div(scalar: Long ): LongDays (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isNegative Is this duration negative? fun isNegative(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isPositive Is this duration positive? fun isPositive(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isZero Is this duration zero? fun isZero(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) minus operator fun minus(nanoseconds: IntNanoseconds ): LongNanoseconds operator fun minus(nanoseconds: LongNanoseconds ): LongNanoseconds operator fun minus(microseconds: IntMicroseconds ): LongMicroseconds operator fun minus(microseconds: LongMicroseconds ): LongMicroseconds operator fun minus(milliseconds: IntMilliseconds ): LongMilliseconds operator fun minus(milliseconds: LongMilliseconds ): LongMilliseconds operator fun minus(seconds: IntSeconds ): IntSeconds operator fun minus(seconds: LongSeconds ): LongSeconds operator fun minus(minutes: IntMinutes ): IntMinutes operator fun minus(minutes: LongMinutes ): LongMinutes operator fun minus(hours: IntHours ): IntHours operator fun minus(hours: LongHours ): LongHours operator fun minus(days: IntDays ): IntDays operator fun minus(days: LongDays ): LongDays operator fun minus(weeks: IntWeeks ): IntDays operator fun minus(weeks: LongWeeks ): LongDays (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) plus operator fun plus(nanoseconds: IntNanoseconds ): LongNanoseconds operator fun plus(nanoseconds: LongNanoseconds ): LongNanoseconds operator fun plus(microseconds: IntMicroseconds ): LongMicroseconds operator fun plus(microseconds: LongMicroseconds ): LongMicroseconds operator fun plus(milliseconds: IntMilliseconds ): LongMilliseconds operator fun plus(milliseconds: LongMilliseconds ): LongMilliseconds operator fun plus(seconds: IntSeconds ): IntSeconds operator fun plus(seconds: LongSeconds ): LongSeconds operator fun plus(minutes: IntMinutes ): IntMinutes operator fun plus(minutes: LongMinutes ): LongMinutes operator fun plus(hours: IntHours ): IntHours operator fun plus(hours: LongHours ): LongHours operator fun plus(days: IntDays ): IntDays operator fun plus(days: LongDays ): LongDays operator fun plus(weeks: IntWeeks ): IntDays operator fun plus(weeks: LongWeeks ): LongDays (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) rem operator fun rem(scalar: Int ): IntDays operator fun rem(scalar: Long ): LongDays (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) times Multiply by a scalar value. operator fun times(scalar: Int ): IntDays operator fun times(scalar: Long ): LongDays (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toComponents fun <T> toComponents(action: (weeks: IntWeeks , days: IntDays ) -> T): T toKotlinDuration Convert to a kotlin.time.Duration .(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toKotlinDuration(): <ERROR CLASS> (jvm) fun toKotlinDuration(): Duration (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toLong Convert to a unit-less Long value. fun toLong(): Long (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toLongDays Convert to LongDays . fun toLongDays(): LongDays (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toString Convert to an ISO-8601 time interval representation. fun toString(): String (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) unaryMinus Negate the value. operator fun unaryMinus(): IntDays","title":"Functions"},{"location":"api/core/io.islandtime.measures/-int-days/#companion-object-properties","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MAX The largest supported value. val MAX: IntDays (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MIN The smallest supported value. val MIN: IntDays","title":"Companion Object Properties"},{"location":"api/core/io.islandtime.measures/-int-days/#extension-functions","text":"Name Summary (jvm) toJavaDuration Convert to an equivalent Java Duration . fun IntDays .toJavaDuration(): Duration (jvm) toJavaPeriod Convert to an equivalent Java Period . fun IntDays .toJavaPeriod(): Period","title":"Extension Functions"},{"location":"api/core/io.islandtime.measures/-int-days/-init-/","text":"core / io.islandtime.measures / IntDays / <init> <init> (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init>(value: Int ) A number of days.","title":" init "},{"location":"api/core/io.islandtime.measures/-int-days/-init-/#init","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init>(value: Int ) A number of days.","title":"&lt;init&gt;"},{"location":"api/core/io.islandtime.measures/-int-days/-m-a-x/","text":"core / io.islandtime.measures / IntDays / MAX MAX (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val MAX: IntDays The largest supported value.","title":" m a x"},{"location":"api/core/io.islandtime.measures/-int-days/-m-a-x/#max","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val MAX: IntDays The largest supported value.","title":"MAX"},{"location":"api/core/io.islandtime.measures/-int-days/-m-i-n/","text":"core / io.islandtime.measures / IntDays / MIN MIN (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val MIN: IntDays The smallest supported value.","title":" m i n"},{"location":"api/core/io.islandtime.measures/-int-days/-m-i-n/#min","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val MIN: IntDays The smallest supported value.","title":"MIN"},{"location":"api/core/io.islandtime.measures/-int-days/absolute-value/","text":"core / io.islandtime.measures / IntDays / absoluteValue absoluteValue (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val absoluteValue: IntDays Returns the absolute value. Exceptions ArithmeticException - if overflow occurs","title":"Absolute value"},{"location":"api/core/io.islandtime.measures/-int-days/absolute-value/#absolutevalue","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val absoluteValue: IntDays Returns the absolute value.","title":"absoluteValue"},{"location":"api/core/io.islandtime.measures/-int-days/absolute-value/#exceptions","text":"ArithmeticException - if overflow occurs","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-int-days/compare-to/","text":"core / io.islandtime.measures / IntDays / compareTo compareTo (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun compareTo(other: IntDays ): Int","title":"Compare to"},{"location":"api/core/io.islandtime.measures/-int-days/compare-to/#compareto","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun compareTo(other: IntDays ): Int","title":"compareTo"},{"location":"api/core/io.islandtime.measures/-int-days/div/","text":"core / io.islandtime.measures / IntDays / div div (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun div(scalar: Int ): IntDays Divide by a scalar value. Exceptions ArithmeticException - if overflow occurs or the scalar is zero(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun div(scalar: Long ): LongDays Divide by a scalar value. Exceptions ArithmeticException - if the scalar is zero","title":"Div"},{"location":"api/core/io.islandtime.measures/-int-days/div/#div","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun div(scalar: Int ): IntDays Divide by a scalar value.","title":"div"},{"location":"api/core/io.islandtime.measures/-int-days/div/#exceptions","text":"ArithmeticException - if overflow occurs or the scalar is zero(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun div(scalar: Long ): LongDays Divide by a scalar value.","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-int-days/div/#exceptions_1","text":"ArithmeticException - if the scalar is zero","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-int-days/in-hours/","text":"core / io.islandtime.measures / IntDays / inHours inHours (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inHours: IntHours Convert to hours. Exceptions ArithmeticException - if overflow occurs","title":"In hours"},{"location":"api/core/io.islandtime.measures/-int-days/in-hours/#inhours","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inHours: IntHours Convert to hours.","title":"inHours"},{"location":"api/core/io.islandtime.measures/-int-days/in-hours/#exceptions","text":"ArithmeticException - if overflow occurs","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-int-days/in-microseconds/","text":"core / io.islandtime.measures / IntDays / inMicroseconds inMicroseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inMicroseconds: LongMicroseconds Convert to microseconds. Exceptions ArithmeticException - if overflow occurs","title":"In microseconds"},{"location":"api/core/io.islandtime.measures/-int-days/in-microseconds/#inmicroseconds","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inMicroseconds: LongMicroseconds Convert to microseconds.","title":"inMicroseconds"},{"location":"api/core/io.islandtime.measures/-int-days/in-microseconds/#exceptions","text":"ArithmeticException - if overflow occurs","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-int-days/in-milliseconds/","text":"core / io.islandtime.measures / IntDays / inMilliseconds inMilliseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inMilliseconds: LongMilliseconds Convert to milliseconds.","title":"In milliseconds"},{"location":"api/core/io.islandtime.measures/-int-days/in-milliseconds/#inmilliseconds","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inMilliseconds: LongMilliseconds Convert to milliseconds.","title":"inMilliseconds"},{"location":"api/core/io.islandtime.measures/-int-days/in-minutes/","text":"core / io.islandtime.measures / IntDays / inMinutes inMinutes (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inMinutes: IntMinutes Convert to minutes. Exceptions ArithmeticException - if overflow occurs","title":"In minutes"},{"location":"api/core/io.islandtime.measures/-int-days/in-minutes/#inminutes","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inMinutes: IntMinutes Convert to minutes.","title":"inMinutes"},{"location":"api/core/io.islandtime.measures/-int-days/in-minutes/#exceptions","text":"ArithmeticException - if overflow occurs","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-int-days/in-nanoseconds/","text":"core / io.islandtime.measures / IntDays / inNanoseconds inNanoseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inNanoseconds: LongNanoseconds Convert to nanoseconds. Exceptions ArithmeticException - if overflow occurs","title":"In nanoseconds"},{"location":"api/core/io.islandtime.measures/-int-days/in-nanoseconds/#innanoseconds","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inNanoseconds: LongNanoseconds Convert to nanoseconds.","title":"inNanoseconds"},{"location":"api/core/io.islandtime.measures/-int-days/in-nanoseconds/#exceptions","text":"ArithmeticException - if overflow occurs","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-int-days/in-seconds/","text":"core / io.islandtime.measures / IntDays / inSeconds inSeconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inSeconds: IntSeconds Convert to seconds. Exceptions ArithmeticException - if overflow occurs","title":"In seconds"},{"location":"api/core/io.islandtime.measures/-int-days/in-seconds/#inseconds","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inSeconds: IntSeconds Convert to seconds.","title":"inSeconds"},{"location":"api/core/io.islandtime.measures/-int-days/in-seconds/#exceptions","text":"ArithmeticException - if overflow occurs","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-int-days/in-weeks/","text":"core / io.islandtime.measures / IntDays / inWeeks inWeeks (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inWeeks: IntWeeks Convert to whole weeks.","title":"In weeks"},{"location":"api/core/io.islandtime.measures/-int-days/in-weeks/#inweeks","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inWeeks: IntWeeks Convert to whole weeks.","title":"inWeeks"},{"location":"api/core/io.islandtime.measures/-int-days/is-negative/","text":"core / io.islandtime.measures / IntDays / isNegative isNegative (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isNegative(): Boolean Is this duration negative?","title":"Is negative"},{"location":"api/core/io.islandtime.measures/-int-days/is-negative/#isnegative","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isNegative(): Boolean Is this duration negative?","title":"isNegative"},{"location":"api/core/io.islandtime.measures/-int-days/is-positive/","text":"core / io.islandtime.measures / IntDays / isPositive isPositive (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isPositive(): Boolean Is this duration positive?","title":"Is positive"},{"location":"api/core/io.islandtime.measures/-int-days/is-positive/#ispositive","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isPositive(): Boolean Is this duration positive?","title":"isPositive"},{"location":"api/core/io.islandtime.measures/-int-days/is-zero/","text":"core / io.islandtime.measures / IntDays / isZero isZero (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isZero(): Boolean Is this duration zero?","title":"Is zero"},{"location":"api/core/io.islandtime.measures/-int-days/is-zero/#iszero","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isZero(): Boolean Is this duration zero?","title":"isZero"},{"location":"api/core/io.islandtime.measures/-int-days/minus/","text":"core / io.islandtime.measures / IntDays / minus minus (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun minus(nanoseconds: IntNanoseconds ): LongNanoseconds operator fun minus(nanoseconds: LongNanoseconds ): LongNanoseconds operator fun minus(microseconds: IntMicroseconds ): LongMicroseconds operator fun minus(microseconds: LongMicroseconds ): LongMicroseconds operator fun minus(milliseconds: IntMilliseconds ): LongMilliseconds operator fun minus(milliseconds: LongMilliseconds ): LongMilliseconds operator fun minus(seconds: IntSeconds ): IntSeconds operator fun minus(seconds: LongSeconds ): LongSeconds operator fun minus(minutes: IntMinutes ): IntMinutes operator fun minus(minutes: LongMinutes ): LongMinutes operator fun minus(hours: IntHours ): IntHours operator fun minus(hours: LongHours ): LongHours operator fun minus(days: IntDays ): IntDays operator fun minus(days: LongDays ): LongDays operator fun minus(weeks: IntWeeks ): IntDays operator fun minus(weeks: LongWeeks ): LongDays","title":"Minus"},{"location":"api/core/io.islandtime.measures/-int-days/minus/#minus","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun minus(nanoseconds: IntNanoseconds ): LongNanoseconds operator fun minus(nanoseconds: LongNanoseconds ): LongNanoseconds operator fun minus(microseconds: IntMicroseconds ): LongMicroseconds operator fun minus(microseconds: LongMicroseconds ): LongMicroseconds operator fun minus(milliseconds: IntMilliseconds ): LongMilliseconds operator fun minus(milliseconds: LongMilliseconds ): LongMilliseconds operator fun minus(seconds: IntSeconds ): IntSeconds operator fun minus(seconds: LongSeconds ): LongSeconds operator fun minus(minutes: IntMinutes ): IntMinutes operator fun minus(minutes: LongMinutes ): LongMinutes operator fun minus(hours: IntHours ): IntHours operator fun minus(hours: LongHours ): LongHours operator fun minus(days: IntDays ): IntDays operator fun minus(days: LongDays ): LongDays operator fun minus(weeks: IntWeeks ): IntDays operator fun minus(weeks: LongWeeks ): LongDays","title":"minus"},{"location":"api/core/io.islandtime.measures/-int-days/plus/","text":"core / io.islandtime.measures / IntDays / plus plus (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun plus(nanoseconds: IntNanoseconds ): LongNanoseconds operator fun plus(nanoseconds: LongNanoseconds ): LongNanoseconds operator fun plus(microseconds: IntMicroseconds ): LongMicroseconds operator fun plus(microseconds: LongMicroseconds ): LongMicroseconds operator fun plus(milliseconds: IntMilliseconds ): LongMilliseconds operator fun plus(milliseconds: LongMilliseconds ): LongMilliseconds operator fun plus(seconds: IntSeconds ): IntSeconds operator fun plus(seconds: LongSeconds ): LongSeconds operator fun plus(minutes: IntMinutes ): IntMinutes operator fun plus(minutes: LongMinutes ): LongMinutes operator fun plus(hours: IntHours ): IntHours operator fun plus(hours: LongHours ): LongHours operator fun plus(days: IntDays ): IntDays operator fun plus(days: LongDays ): LongDays operator fun plus(weeks: IntWeeks ): IntDays operator fun plus(weeks: LongWeeks ): LongDays","title":"Plus"},{"location":"api/core/io.islandtime.measures/-int-days/plus/#plus","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun plus(nanoseconds: IntNanoseconds ): LongNanoseconds operator fun plus(nanoseconds: LongNanoseconds ): LongNanoseconds operator fun plus(microseconds: IntMicroseconds ): LongMicroseconds operator fun plus(microseconds: LongMicroseconds ): LongMicroseconds operator fun plus(milliseconds: IntMilliseconds ): LongMilliseconds operator fun plus(milliseconds: LongMilliseconds ): LongMilliseconds operator fun plus(seconds: IntSeconds ): IntSeconds operator fun plus(seconds: LongSeconds ): LongSeconds operator fun plus(minutes: IntMinutes ): IntMinutes operator fun plus(minutes: LongMinutes ): LongMinutes operator fun plus(hours: IntHours ): IntHours operator fun plus(hours: LongHours ): LongHours operator fun plus(days: IntDays ): IntDays operator fun plus(days: LongDays ): LongDays operator fun plus(weeks: IntWeeks ): IntDays operator fun plus(weeks: LongWeeks ): LongDays","title":"plus"},{"location":"api/core/io.islandtime.measures/-int-days/rem/","text":"core / io.islandtime.measures / IntDays / rem rem (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun rem(scalar: Int ): IntDays operator fun rem(scalar: Long ): LongDays","title":"Rem"},{"location":"api/core/io.islandtime.measures/-int-days/rem/#rem","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun rem(scalar: Int ): IntDays operator fun rem(scalar: Long ): LongDays","title":"rem"},{"location":"api/core/io.islandtime.measures/-int-days/times/","text":"core / io.islandtime.measures / IntDays / times times (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun times(scalar: Int ): IntDays operator fun times(scalar: Long ): LongDays Multiply by a scalar value. Exceptions ArithmeticException - if overflow occurs","title":"Times"},{"location":"api/core/io.islandtime.measures/-int-days/times/#times","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun times(scalar: Int ): IntDays operator fun times(scalar: Long ): LongDays Multiply by a scalar value.","title":"times"},{"location":"api/core/io.islandtime.measures/-int-days/times/#exceptions","text":"ArithmeticException - if overflow occurs","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-int-days/to-components/","text":"core / io.islandtime.measures / IntDays / toComponents toComponents (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline fun <T> toComponents(action: (weeks: IntWeeks , days: IntDays ) -> T): T","title":"To components"},{"location":"api/core/io.islandtime.measures/-int-days/to-components/#tocomponents","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline fun <T> toComponents(action: (weeks: IntWeeks , days: IntDays ) -> T): T","title":"toComponents"},{"location":"api/core/io.islandtime.measures/-int-days/to-kotlin-duration/","text":"core / io.islandtime.measures / IntDays / toKotlinDuration toKotlinDuration (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toKotlinDuration(): <ERROR CLASS> (jvm) @ExperimentalTime fun toKotlinDuration(): Duration (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) Convert to a kotlin.time.Duration . (jvm) Convert to a kotlin.time.Duration .","title":"To kotlin duration"},{"location":"api/core/io.islandtime.measures/-int-days/to-kotlin-duration/#tokotlinduration","text":"(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toKotlinDuration(): <ERROR CLASS> (jvm) @ExperimentalTime fun toKotlinDuration(): Duration (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) Convert to a kotlin.time.Duration . (jvm) Convert to a kotlin.time.Duration .","title":"toKotlinDuration"},{"location":"api/core/io.islandtime.measures/-int-days/to-long-days/","text":"core / io.islandtime.measures / IntDays / toLongDays toLongDays (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toLongDays(): LongDays Convert to LongDays .","title":"To long days"},{"location":"api/core/io.islandtime.measures/-int-days/to-long-days/#tolongdays","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toLongDays(): LongDays Convert to LongDays .","title":"toLongDays"},{"location":"api/core/io.islandtime.measures/-int-days/to-long/","text":"core / io.islandtime.measures / IntDays / toLong toLong (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toLong(): Long Convert to a unit-less Long value.","title":"To long"},{"location":"api/core/io.islandtime.measures/-int-days/to-long/#tolong","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toLong(): Long Convert to a unit-less Long value.","title":"toLong"},{"location":"api/core/io.islandtime.measures/-int-days/to-string/","text":"core / io.islandtime.measures / IntDays / toString toString (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toString(): String Convert to an ISO-8601 time interval representation.","title":"To string"},{"location":"api/core/io.islandtime.measures/-int-days/to-string/#tostring","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toString(): String Convert to an ISO-8601 time interval representation.","title":"toString"},{"location":"api/core/io.islandtime.measures/-int-days/unary-minus/","text":"core / io.islandtime.measures / IntDays / unaryMinus unaryMinus (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun unaryMinus(): IntDays Negate the value. Exceptions ArithmeticException - if overflow occurs","title":"Unary minus"},{"location":"api/core/io.islandtime.measures/-int-days/unary-minus/#unaryminus","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun unaryMinus(): IntDays Negate the value.","title":"unaryMinus"},{"location":"api/core/io.islandtime.measures/-int-days/unary-minus/#exceptions","text":"ArithmeticException - if overflow occurs","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-int-days/value/","text":"core / io.islandtime.measures / IntDays / value value (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val value: Int The underlying value.","title":"Value"},{"location":"api/core/io.islandtime.measures/-int-days/value/#value","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val value: Int The underlying value.","title":"value"},{"location":"api/core/io.islandtime.measures/-int-decades/","text":"core / io.islandtime.measures / IntDecades IntDecades (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline class IntDecades : Comparable < IntDecades > A number of decades. Constructors Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init> A number of decades. <init>(value: Int ) Properties Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) absoluteValue Returns the absolute value. val absoluteValue: IntDecades (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inCenturies Convert to whole centuries. val inCenturies: IntCenturies (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inMonths Convert to months. val inMonths: IntMonths (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inYears Convert to years. val inYears: IntYears (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) value The underlying value. val value: Int Functions Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) compareTo fun compareTo(other: IntDecades ): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) div Divide by a scalar value. operator fun div(scalar: Int ): IntDecades operator fun div(scalar: Long ): LongDecades (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isNegative Is this duration negative? fun isNegative(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isPositive Is this duration positive? fun isPositive(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isZero Is this duration zero? fun isZero(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) minus operator fun minus(months: IntMonths ): IntMonths operator fun minus(months: LongMonths ): LongMonths operator fun minus(years: IntYears ): IntYears operator fun minus(years: LongYears ): LongYears operator fun minus(decades: IntDecades ): IntDecades operator fun minus(decades: LongDecades ): LongDecades operator fun minus(centuries: IntCenturies ): IntDecades operator fun minus(centuries: LongCenturies ): LongDecades (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) plus operator fun plus(months: IntMonths ): IntMonths operator fun plus(months: LongMonths ): LongMonths operator fun plus(years: IntYears ): IntYears operator fun plus(years: LongYears ): LongYears operator fun plus(decades: IntDecades ): IntDecades operator fun plus(decades: LongDecades ): LongDecades operator fun plus(centuries: IntCenturies ): IntDecades operator fun plus(centuries: LongCenturies ): LongDecades (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) rem operator fun rem(scalar: Int ): IntDecades operator fun rem(scalar: Long ): LongDecades (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) times Multiply by a scalar value. operator fun times(scalar: Int ): IntDecades operator fun times(scalar: Long ): LongDecades (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toComponents fun <T> toComponents(action: (centuries: IntCenturies , decades: IntDecades ) -> T): T (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toLong Convert to a unit-less Long value. fun toLong(): Long (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toLongDecades Convert to LongDecades . fun toLongDecades(): LongDecades (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toString Convert to an ISO-8601 time interval representation. fun toString(): String (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) unaryMinus Negate the value. operator fun unaryMinus(): IntDecades Companion Object Properties Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MAX The largest supported value. val MAX: IntDecades (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MIN The smallest supported value. val MIN: IntDecades Extension Functions Name Summary (jvm) toJavaPeriod Convert to an equivalent Java Period . fun IntDecades .toJavaPeriod(): Period","title":"Index"},{"location":"api/core/io.islandtime.measures/-int-decades/#intdecades","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline class IntDecades : Comparable < IntDecades > A number of decades.","title":"IntDecades"},{"location":"api/core/io.islandtime.measures/-int-decades/#constructors","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init> A number of decades. <init>(value: Int )","title":"Constructors"},{"location":"api/core/io.islandtime.measures/-int-decades/#properties","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) absoluteValue Returns the absolute value. val absoluteValue: IntDecades (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inCenturies Convert to whole centuries. val inCenturies: IntCenturies (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inMonths Convert to months. val inMonths: IntMonths (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inYears Convert to years. val inYears: IntYears (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) value The underlying value. val value: Int","title":"Properties"},{"location":"api/core/io.islandtime.measures/-int-decades/#functions","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) compareTo fun compareTo(other: IntDecades ): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) div Divide by a scalar value. operator fun div(scalar: Int ): IntDecades operator fun div(scalar: Long ): LongDecades (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isNegative Is this duration negative? fun isNegative(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isPositive Is this duration positive? fun isPositive(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isZero Is this duration zero? fun isZero(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) minus operator fun minus(months: IntMonths ): IntMonths operator fun minus(months: LongMonths ): LongMonths operator fun minus(years: IntYears ): IntYears operator fun minus(years: LongYears ): LongYears operator fun minus(decades: IntDecades ): IntDecades operator fun minus(decades: LongDecades ): LongDecades operator fun minus(centuries: IntCenturies ): IntDecades operator fun minus(centuries: LongCenturies ): LongDecades (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) plus operator fun plus(months: IntMonths ): IntMonths operator fun plus(months: LongMonths ): LongMonths operator fun plus(years: IntYears ): IntYears operator fun plus(years: LongYears ): LongYears operator fun plus(decades: IntDecades ): IntDecades operator fun plus(decades: LongDecades ): LongDecades operator fun plus(centuries: IntCenturies ): IntDecades operator fun plus(centuries: LongCenturies ): LongDecades (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) rem operator fun rem(scalar: Int ): IntDecades operator fun rem(scalar: Long ): LongDecades (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) times Multiply by a scalar value. operator fun times(scalar: Int ): IntDecades operator fun times(scalar: Long ): LongDecades (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toComponents fun <T> toComponents(action: (centuries: IntCenturies , decades: IntDecades ) -> T): T (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toLong Convert to a unit-less Long value. fun toLong(): Long (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toLongDecades Convert to LongDecades . fun toLongDecades(): LongDecades (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toString Convert to an ISO-8601 time interval representation. fun toString(): String (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) unaryMinus Negate the value. operator fun unaryMinus(): IntDecades","title":"Functions"},{"location":"api/core/io.islandtime.measures/-int-decades/#companion-object-properties","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MAX The largest supported value. val MAX: IntDecades (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MIN The smallest supported value. val MIN: IntDecades","title":"Companion Object Properties"},{"location":"api/core/io.islandtime.measures/-int-decades/#extension-functions","text":"Name Summary (jvm) toJavaPeriod Convert to an equivalent Java Period . fun IntDecades .toJavaPeriod(): Period","title":"Extension Functions"},{"location":"api/core/io.islandtime.measures/-int-decades/-init-/","text":"core / io.islandtime.measures / IntDecades / <init> <init> (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init>(value: Int ) A number of decades.","title":" init "},{"location":"api/core/io.islandtime.measures/-int-decades/-init-/#init","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init>(value: Int ) A number of decades.","title":"&lt;init&gt;"},{"location":"api/core/io.islandtime.measures/-int-decades/-m-a-x/","text":"core / io.islandtime.measures / IntDecades / MAX MAX (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val MAX: IntDecades The largest supported value.","title":" m a x"},{"location":"api/core/io.islandtime.measures/-int-decades/-m-a-x/#max","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val MAX: IntDecades The largest supported value.","title":"MAX"},{"location":"api/core/io.islandtime.measures/-int-decades/-m-i-n/","text":"core / io.islandtime.measures / IntDecades / MIN MIN (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val MIN: IntDecades The smallest supported value.","title":" m i n"},{"location":"api/core/io.islandtime.measures/-int-decades/-m-i-n/#min","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val MIN: IntDecades The smallest supported value.","title":"MIN"},{"location":"api/core/io.islandtime.measures/-int-decades/absolute-value/","text":"core / io.islandtime.measures / IntDecades / absoluteValue absoluteValue (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val absoluteValue: IntDecades Returns the absolute value. Exceptions ArithmeticException - if overflow occurs","title":"Absolute value"},{"location":"api/core/io.islandtime.measures/-int-decades/absolute-value/#absolutevalue","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val absoluteValue: IntDecades Returns the absolute value.","title":"absoluteValue"},{"location":"api/core/io.islandtime.measures/-int-decades/absolute-value/#exceptions","text":"ArithmeticException - if overflow occurs","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-int-decades/compare-to/","text":"core / io.islandtime.measures / IntDecades / compareTo compareTo (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun compareTo(other: IntDecades ): Int","title":"Compare to"},{"location":"api/core/io.islandtime.measures/-int-decades/compare-to/#compareto","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun compareTo(other: IntDecades ): Int","title":"compareTo"},{"location":"api/core/io.islandtime.measures/-int-decades/div/","text":"core / io.islandtime.measures / IntDecades / div div (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun div(scalar: Int ): IntDecades Divide by a scalar value. Exceptions ArithmeticException - if overflow occurs or the scalar is zero(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun div(scalar: Long ): LongDecades Divide by a scalar value. Exceptions ArithmeticException - if the scalar is zero","title":"Div"},{"location":"api/core/io.islandtime.measures/-int-decades/div/#div","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun div(scalar: Int ): IntDecades Divide by a scalar value.","title":"div"},{"location":"api/core/io.islandtime.measures/-int-decades/div/#exceptions","text":"ArithmeticException - if overflow occurs or the scalar is zero(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun div(scalar: Long ): LongDecades Divide by a scalar value.","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-int-decades/div/#exceptions_1","text":"ArithmeticException - if the scalar is zero","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-int-decades/in-centuries/","text":"core / io.islandtime.measures / IntDecades / inCenturies inCenturies (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inCenturies: IntCenturies Convert to whole centuries.","title":"In centuries"},{"location":"api/core/io.islandtime.measures/-int-decades/in-centuries/#incenturies","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inCenturies: IntCenturies Convert to whole centuries.","title":"inCenturies"},{"location":"api/core/io.islandtime.measures/-int-decades/in-months/","text":"core / io.islandtime.measures / IntDecades / inMonths inMonths (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inMonths: IntMonths Convert to months. Exceptions ArithmeticException - if overflow occurs","title":"In months"},{"location":"api/core/io.islandtime.measures/-int-decades/in-months/#inmonths","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inMonths: IntMonths Convert to months.","title":"inMonths"},{"location":"api/core/io.islandtime.measures/-int-decades/in-months/#exceptions","text":"ArithmeticException - if overflow occurs","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-int-decades/in-years/","text":"core / io.islandtime.measures / IntDecades / inYears inYears (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inYears: IntYears Convert to years. Exceptions ArithmeticException - if overflow occurs","title":"In years"},{"location":"api/core/io.islandtime.measures/-int-decades/in-years/#inyears","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inYears: IntYears Convert to years.","title":"inYears"},{"location":"api/core/io.islandtime.measures/-int-decades/in-years/#exceptions","text":"ArithmeticException - if overflow occurs","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-int-decades/is-negative/","text":"core / io.islandtime.measures / IntDecades / isNegative isNegative (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isNegative(): Boolean Is this duration negative?","title":"Is negative"},{"location":"api/core/io.islandtime.measures/-int-decades/is-negative/#isnegative","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isNegative(): Boolean Is this duration negative?","title":"isNegative"},{"location":"api/core/io.islandtime.measures/-int-decades/is-positive/","text":"core / io.islandtime.measures / IntDecades / isPositive isPositive (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isPositive(): Boolean Is this duration positive?","title":"Is positive"},{"location":"api/core/io.islandtime.measures/-int-decades/is-positive/#ispositive","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isPositive(): Boolean Is this duration positive?","title":"isPositive"},{"location":"api/core/io.islandtime.measures/-int-decades/is-zero/","text":"core / io.islandtime.measures / IntDecades / isZero isZero (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isZero(): Boolean Is this duration zero?","title":"Is zero"},{"location":"api/core/io.islandtime.measures/-int-decades/is-zero/#iszero","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isZero(): Boolean Is this duration zero?","title":"isZero"},{"location":"api/core/io.islandtime.measures/-int-decades/minus/","text":"core / io.islandtime.measures / IntDecades / minus minus (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun minus(months: IntMonths ): IntMonths operator fun minus(months: LongMonths ): LongMonths operator fun minus(years: IntYears ): IntYears operator fun minus(years: LongYears ): LongYears operator fun minus(decades: IntDecades ): IntDecades operator fun minus(decades: LongDecades ): LongDecades operator fun minus(centuries: IntCenturies ): IntDecades operator fun minus(centuries: LongCenturies ): LongDecades","title":"Minus"},{"location":"api/core/io.islandtime.measures/-int-decades/minus/#minus","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun minus(months: IntMonths ): IntMonths operator fun minus(months: LongMonths ): LongMonths operator fun minus(years: IntYears ): IntYears operator fun minus(years: LongYears ): LongYears operator fun minus(decades: IntDecades ): IntDecades operator fun minus(decades: LongDecades ): LongDecades operator fun minus(centuries: IntCenturies ): IntDecades operator fun minus(centuries: LongCenturies ): LongDecades","title":"minus"},{"location":"api/core/io.islandtime.measures/-int-decades/plus/","text":"core / io.islandtime.measures / IntDecades / plus plus (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun plus(months: IntMonths ): IntMonths operator fun plus(months: LongMonths ): LongMonths operator fun plus(years: IntYears ): IntYears operator fun plus(years: LongYears ): LongYears operator fun plus(decades: IntDecades ): IntDecades operator fun plus(decades: LongDecades ): LongDecades operator fun plus(centuries: IntCenturies ): IntDecades operator fun plus(centuries: LongCenturies ): LongDecades","title":"Plus"},{"location":"api/core/io.islandtime.measures/-int-decades/plus/#plus","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun plus(months: IntMonths ): IntMonths operator fun plus(months: LongMonths ): LongMonths operator fun plus(years: IntYears ): IntYears operator fun plus(years: LongYears ): LongYears operator fun plus(decades: IntDecades ): IntDecades operator fun plus(decades: LongDecades ): LongDecades operator fun plus(centuries: IntCenturies ): IntDecades operator fun plus(centuries: LongCenturies ): LongDecades","title":"plus"},{"location":"api/core/io.islandtime.measures/-int-decades/rem/","text":"core / io.islandtime.measures / IntDecades / rem rem (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun rem(scalar: Int ): IntDecades operator fun rem(scalar: Long ): LongDecades","title":"Rem"},{"location":"api/core/io.islandtime.measures/-int-decades/rem/#rem","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun rem(scalar: Int ): IntDecades operator fun rem(scalar: Long ): LongDecades","title":"rem"},{"location":"api/core/io.islandtime.measures/-int-decades/times/","text":"core / io.islandtime.measures / IntDecades / times times (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun times(scalar: Int ): IntDecades operator fun times(scalar: Long ): LongDecades Multiply by a scalar value. Exceptions ArithmeticException - if overflow occurs","title":"Times"},{"location":"api/core/io.islandtime.measures/-int-decades/times/#times","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun times(scalar: Int ): IntDecades operator fun times(scalar: Long ): LongDecades Multiply by a scalar value.","title":"times"},{"location":"api/core/io.islandtime.measures/-int-decades/times/#exceptions","text":"ArithmeticException - if overflow occurs","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-int-decades/to-components/","text":"core / io.islandtime.measures / IntDecades / toComponents toComponents (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline fun <T> toComponents(action: (centuries: IntCenturies , decades: IntDecades ) -> T): T","title":"To components"},{"location":"api/core/io.islandtime.measures/-int-decades/to-components/#tocomponents","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline fun <T> toComponents(action: (centuries: IntCenturies , decades: IntDecades ) -> T): T","title":"toComponents"},{"location":"api/core/io.islandtime.measures/-int-decades/to-long-decades/","text":"core / io.islandtime.measures / IntDecades / toLongDecades toLongDecades (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toLongDecades(): LongDecades Convert to LongDecades .","title":"To long decades"},{"location":"api/core/io.islandtime.measures/-int-decades/to-long-decades/#tolongdecades","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toLongDecades(): LongDecades Convert to LongDecades .","title":"toLongDecades"},{"location":"api/core/io.islandtime.measures/-int-decades/to-long/","text":"core / io.islandtime.measures / IntDecades / toLong toLong (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toLong(): Long Convert to a unit-less Long value.","title":"To long"},{"location":"api/core/io.islandtime.measures/-int-decades/to-long/#tolong","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toLong(): Long Convert to a unit-less Long value.","title":"toLong"},{"location":"api/core/io.islandtime.measures/-int-decades/to-string/","text":"core / io.islandtime.measures / IntDecades / toString toString (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toString(): String Convert to an ISO-8601 time interval representation.","title":"To string"},{"location":"api/core/io.islandtime.measures/-int-decades/to-string/#tostring","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toString(): String Convert to an ISO-8601 time interval representation.","title":"toString"},{"location":"api/core/io.islandtime.measures/-int-decades/unary-minus/","text":"core / io.islandtime.measures / IntDecades / unaryMinus unaryMinus (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun unaryMinus(): IntDecades Negate the value. Exceptions ArithmeticException - if overflow occurs","title":"Unary minus"},{"location":"api/core/io.islandtime.measures/-int-decades/unary-minus/#unaryminus","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun unaryMinus(): IntDecades Negate the value.","title":"unaryMinus"},{"location":"api/core/io.islandtime.measures/-int-decades/unary-minus/#exceptions","text":"ArithmeticException - if overflow occurs","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-int-decades/value/","text":"core / io.islandtime.measures / IntDecades / value value (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val value: Int The underlying value.","title":"Value"},{"location":"api/core/io.islandtime.measures/-int-decades/value/#value","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val value: Int The underlying value.","title":"value"},{"location":"api/core/io.islandtime.measures/-int-hours/","text":"core / io.islandtime.measures / IntHours IntHours (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline class IntHours : Comparable < IntHours > A number of hours. Constructors Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init> A number of hours. <init>(value: Int ) Properties Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) absoluteValue Returns the absolute value. val absoluteValue: IntHours (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inDays Convert to whole days. val inDays: IntDays (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inMicroseconds Convert to microseconds. val inMicroseconds: LongMicroseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inMilliseconds Convert to milliseconds. val inMilliseconds: LongMilliseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inMinutes Convert to minutes. val inMinutes: IntMinutes (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inNanoseconds Convert to nanoseconds. val inNanoseconds: LongNanoseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inSeconds Convert to seconds. val inSeconds: IntSeconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) value The underlying value. val value: Int Functions Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) compareTo fun compareTo(other: IntHours ): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) div Divide by a scalar value. operator fun div(scalar: Int ): IntHours operator fun div(scalar: Long ): LongHours (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isNegative Is this duration negative? fun isNegative(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isPositive Is this duration positive? fun isPositive(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isZero Is this duration zero? fun isZero(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) minus operator fun minus(nanoseconds: IntNanoseconds ): LongNanoseconds operator fun minus(nanoseconds: LongNanoseconds ): LongNanoseconds operator fun minus(microseconds: IntMicroseconds ): LongMicroseconds operator fun minus(microseconds: LongMicroseconds ): LongMicroseconds operator fun minus(milliseconds: IntMilliseconds ): LongMilliseconds operator fun minus(milliseconds: LongMilliseconds ): LongMilliseconds operator fun minus(seconds: IntSeconds ): IntSeconds operator fun minus(seconds: LongSeconds ): LongSeconds operator fun minus(minutes: IntMinutes ): IntMinutes operator fun minus(minutes: LongMinutes ): LongMinutes operator fun minus(hours: IntHours ): IntHours operator fun minus(hours: LongHours ): LongHours operator fun minus(days: IntDays ): IntHours operator fun minus(days: LongDays ): LongHours (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) plus operator fun plus(nanoseconds: IntNanoseconds ): LongNanoseconds operator fun plus(nanoseconds: LongNanoseconds ): LongNanoseconds operator fun plus(microseconds: IntMicroseconds ): LongMicroseconds operator fun plus(microseconds: LongMicroseconds ): LongMicroseconds operator fun plus(milliseconds: IntMilliseconds ): LongMilliseconds operator fun plus(milliseconds: LongMilliseconds ): LongMilliseconds operator fun plus(seconds: IntSeconds ): IntSeconds operator fun plus(seconds: LongSeconds ): LongSeconds operator fun plus(minutes: IntMinutes ): IntMinutes operator fun plus(minutes: LongMinutes ): LongMinutes operator fun plus(hours: IntHours ): IntHours operator fun plus(hours: LongHours ): LongHours operator fun plus(days: IntDays ): IntHours operator fun plus(days: LongDays ): LongHours (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) rem operator fun rem(scalar: Int ): IntHours operator fun rem(scalar: Long ): LongHours (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) times Multiply by a scalar value. operator fun times(scalar: Int ): IntHours operator fun times(scalar: Long ): LongHours (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toComponents fun <T> toComponents(action: (days: IntDays , hours: IntHours ) -> T): T toKotlinDuration Convert to a kotlin.time.Duration .(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toKotlinDuration(): <ERROR CLASS> (jvm) fun toKotlinDuration(): Duration (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toLong Convert to a unit-less Long value. fun toLong(): Long (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toLongHours Convert to LongHours . fun toLongHours(): LongHours (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toString Convert to an ISO-8601 time interval representation. fun toString(): String (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) unaryMinus Negate the value. operator fun unaryMinus(): IntHours Companion Object Properties Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MAX The largest supported value. val MAX: IntHours (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MIN The smallest supported value. val MIN: IntHours Extension Functions Name Summary (jvm) toJavaDuration Convert to an equivalent Java Duration . fun IntHours .toJavaDuration(): Duration","title":"Index"},{"location":"api/core/io.islandtime.measures/-int-hours/#inthours","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline class IntHours : Comparable < IntHours > A number of hours.","title":"IntHours"},{"location":"api/core/io.islandtime.measures/-int-hours/#constructors","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init> A number of hours. <init>(value: Int )","title":"Constructors"},{"location":"api/core/io.islandtime.measures/-int-hours/#properties","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) absoluteValue Returns the absolute value. val absoluteValue: IntHours (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inDays Convert to whole days. val inDays: IntDays (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inMicroseconds Convert to microseconds. val inMicroseconds: LongMicroseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inMilliseconds Convert to milliseconds. val inMilliseconds: LongMilliseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inMinutes Convert to minutes. val inMinutes: IntMinutes (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inNanoseconds Convert to nanoseconds. val inNanoseconds: LongNanoseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inSeconds Convert to seconds. val inSeconds: IntSeconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) value The underlying value. val value: Int","title":"Properties"},{"location":"api/core/io.islandtime.measures/-int-hours/#functions","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) compareTo fun compareTo(other: IntHours ): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) div Divide by a scalar value. operator fun div(scalar: Int ): IntHours operator fun div(scalar: Long ): LongHours (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isNegative Is this duration negative? fun isNegative(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isPositive Is this duration positive? fun isPositive(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isZero Is this duration zero? fun isZero(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) minus operator fun minus(nanoseconds: IntNanoseconds ): LongNanoseconds operator fun minus(nanoseconds: LongNanoseconds ): LongNanoseconds operator fun minus(microseconds: IntMicroseconds ): LongMicroseconds operator fun minus(microseconds: LongMicroseconds ): LongMicroseconds operator fun minus(milliseconds: IntMilliseconds ): LongMilliseconds operator fun minus(milliseconds: LongMilliseconds ): LongMilliseconds operator fun minus(seconds: IntSeconds ): IntSeconds operator fun minus(seconds: LongSeconds ): LongSeconds operator fun minus(minutes: IntMinutes ): IntMinutes operator fun minus(minutes: LongMinutes ): LongMinutes operator fun minus(hours: IntHours ): IntHours operator fun minus(hours: LongHours ): LongHours operator fun minus(days: IntDays ): IntHours operator fun minus(days: LongDays ): LongHours (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) plus operator fun plus(nanoseconds: IntNanoseconds ): LongNanoseconds operator fun plus(nanoseconds: LongNanoseconds ): LongNanoseconds operator fun plus(microseconds: IntMicroseconds ): LongMicroseconds operator fun plus(microseconds: LongMicroseconds ): LongMicroseconds operator fun plus(milliseconds: IntMilliseconds ): LongMilliseconds operator fun plus(milliseconds: LongMilliseconds ): LongMilliseconds operator fun plus(seconds: IntSeconds ): IntSeconds operator fun plus(seconds: LongSeconds ): LongSeconds operator fun plus(minutes: IntMinutes ): IntMinutes operator fun plus(minutes: LongMinutes ): LongMinutes operator fun plus(hours: IntHours ): IntHours operator fun plus(hours: LongHours ): LongHours operator fun plus(days: IntDays ): IntHours operator fun plus(days: LongDays ): LongHours (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) rem operator fun rem(scalar: Int ): IntHours operator fun rem(scalar: Long ): LongHours (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) times Multiply by a scalar value. operator fun times(scalar: Int ): IntHours operator fun times(scalar: Long ): LongHours (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toComponents fun <T> toComponents(action: (days: IntDays , hours: IntHours ) -> T): T toKotlinDuration Convert to a kotlin.time.Duration .(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toKotlinDuration(): <ERROR CLASS> (jvm) fun toKotlinDuration(): Duration (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toLong Convert to a unit-less Long value. fun toLong(): Long (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toLongHours Convert to LongHours . fun toLongHours(): LongHours (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toString Convert to an ISO-8601 time interval representation. fun toString(): String (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) unaryMinus Negate the value. operator fun unaryMinus(): IntHours","title":"Functions"},{"location":"api/core/io.islandtime.measures/-int-hours/#companion-object-properties","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MAX The largest supported value. val MAX: IntHours (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MIN The smallest supported value. val MIN: IntHours","title":"Companion Object Properties"},{"location":"api/core/io.islandtime.measures/-int-hours/#extension-functions","text":"Name Summary (jvm) toJavaDuration Convert to an equivalent Java Duration . fun IntHours .toJavaDuration(): Duration","title":"Extension Functions"},{"location":"api/core/io.islandtime.measures/-int-hours/-init-/","text":"core / io.islandtime.measures / IntHours / <init> <init> (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init>(value: Int ) A number of hours.","title":" init "},{"location":"api/core/io.islandtime.measures/-int-hours/-init-/#init","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init>(value: Int ) A number of hours.","title":"&lt;init&gt;"},{"location":"api/core/io.islandtime.measures/-int-hours/-m-a-x/","text":"core / io.islandtime.measures / IntHours / MAX MAX (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val MAX: IntHours The largest supported value.","title":" m a x"},{"location":"api/core/io.islandtime.measures/-int-hours/-m-a-x/#max","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val MAX: IntHours The largest supported value.","title":"MAX"},{"location":"api/core/io.islandtime.measures/-int-hours/-m-i-n/","text":"core / io.islandtime.measures / IntHours / MIN MIN (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val MIN: IntHours The smallest supported value.","title":" m i n"},{"location":"api/core/io.islandtime.measures/-int-hours/-m-i-n/#min","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val MIN: IntHours The smallest supported value.","title":"MIN"},{"location":"api/core/io.islandtime.measures/-int-hours/absolute-value/","text":"core / io.islandtime.measures / IntHours / absoluteValue absoluteValue (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val absoluteValue: IntHours Returns the absolute value. Exceptions ArithmeticException - if overflow occurs","title":"Absolute value"},{"location":"api/core/io.islandtime.measures/-int-hours/absolute-value/#absolutevalue","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val absoluteValue: IntHours Returns the absolute value.","title":"absoluteValue"},{"location":"api/core/io.islandtime.measures/-int-hours/absolute-value/#exceptions","text":"ArithmeticException - if overflow occurs","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-int-hours/compare-to/","text":"core / io.islandtime.measures / IntHours / compareTo compareTo (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun compareTo(other: IntHours ): Int","title":"Compare to"},{"location":"api/core/io.islandtime.measures/-int-hours/compare-to/#compareto","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun compareTo(other: IntHours ): Int","title":"compareTo"},{"location":"api/core/io.islandtime.measures/-int-hours/div/","text":"core / io.islandtime.measures / IntHours / div div (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun div(scalar: Int ): IntHours Divide by a scalar value. Exceptions ArithmeticException - if overflow occurs or the scalar is zero(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun div(scalar: Long ): LongHours Divide by a scalar value. Exceptions ArithmeticException - if the scalar is zero","title":"Div"},{"location":"api/core/io.islandtime.measures/-int-hours/div/#div","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun div(scalar: Int ): IntHours Divide by a scalar value.","title":"div"},{"location":"api/core/io.islandtime.measures/-int-hours/div/#exceptions","text":"ArithmeticException - if overflow occurs or the scalar is zero(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun div(scalar: Long ): LongHours Divide by a scalar value.","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-int-hours/div/#exceptions_1","text":"ArithmeticException - if the scalar is zero","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-int-hours/in-days/","text":"core / io.islandtime.measures / IntHours / inDays inDays (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inDays: IntDays Convert to whole days.","title":"In days"},{"location":"api/core/io.islandtime.measures/-int-hours/in-days/#indays","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inDays: IntDays Convert to whole days.","title":"inDays"},{"location":"api/core/io.islandtime.measures/-int-hours/in-microseconds/","text":"core / io.islandtime.measures / IntHours / inMicroseconds inMicroseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inMicroseconds: LongMicroseconds Convert to microseconds.","title":"In microseconds"},{"location":"api/core/io.islandtime.measures/-int-hours/in-microseconds/#inmicroseconds","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inMicroseconds: LongMicroseconds Convert to microseconds.","title":"inMicroseconds"},{"location":"api/core/io.islandtime.measures/-int-hours/in-milliseconds/","text":"core / io.islandtime.measures / IntHours / inMilliseconds inMilliseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inMilliseconds: LongMilliseconds Convert to milliseconds.","title":"In milliseconds"},{"location":"api/core/io.islandtime.measures/-int-hours/in-milliseconds/#inmilliseconds","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inMilliseconds: LongMilliseconds Convert to milliseconds.","title":"inMilliseconds"},{"location":"api/core/io.islandtime.measures/-int-hours/in-minutes/","text":"core / io.islandtime.measures / IntHours / inMinutes inMinutes (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inMinutes: IntMinutes Convert to minutes. Exceptions ArithmeticException - if overflow occurs","title":"In minutes"},{"location":"api/core/io.islandtime.measures/-int-hours/in-minutes/#inminutes","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inMinutes: IntMinutes Convert to minutes.","title":"inMinutes"},{"location":"api/core/io.islandtime.measures/-int-hours/in-minutes/#exceptions","text":"ArithmeticException - if overflow occurs","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-int-hours/in-nanoseconds/","text":"core / io.islandtime.measures / IntHours / inNanoseconds inNanoseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inNanoseconds: LongNanoseconds Convert to nanoseconds. Exceptions ArithmeticException - if overflow occurs","title":"In nanoseconds"},{"location":"api/core/io.islandtime.measures/-int-hours/in-nanoseconds/#innanoseconds","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inNanoseconds: LongNanoseconds Convert to nanoseconds.","title":"inNanoseconds"},{"location":"api/core/io.islandtime.measures/-int-hours/in-nanoseconds/#exceptions","text":"ArithmeticException - if overflow occurs","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-int-hours/in-seconds/","text":"core / io.islandtime.measures / IntHours / inSeconds inSeconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inSeconds: IntSeconds Convert to seconds. Exceptions ArithmeticException - if overflow occurs","title":"In seconds"},{"location":"api/core/io.islandtime.measures/-int-hours/in-seconds/#inseconds","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inSeconds: IntSeconds Convert to seconds.","title":"inSeconds"},{"location":"api/core/io.islandtime.measures/-int-hours/in-seconds/#exceptions","text":"ArithmeticException - if overflow occurs","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-int-hours/is-negative/","text":"core / io.islandtime.measures / IntHours / isNegative isNegative (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isNegative(): Boolean Is this duration negative?","title":"Is negative"},{"location":"api/core/io.islandtime.measures/-int-hours/is-negative/#isnegative","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isNegative(): Boolean Is this duration negative?","title":"isNegative"},{"location":"api/core/io.islandtime.measures/-int-hours/is-positive/","text":"core / io.islandtime.measures / IntHours / isPositive isPositive (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isPositive(): Boolean Is this duration positive?","title":"Is positive"},{"location":"api/core/io.islandtime.measures/-int-hours/is-positive/#ispositive","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isPositive(): Boolean Is this duration positive?","title":"isPositive"},{"location":"api/core/io.islandtime.measures/-int-hours/is-zero/","text":"core / io.islandtime.measures / IntHours / isZero isZero (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isZero(): Boolean Is this duration zero?","title":"Is zero"},{"location":"api/core/io.islandtime.measures/-int-hours/is-zero/#iszero","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isZero(): Boolean Is this duration zero?","title":"isZero"},{"location":"api/core/io.islandtime.measures/-int-hours/minus/","text":"core / io.islandtime.measures / IntHours / minus minus (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun minus(nanoseconds: IntNanoseconds ): LongNanoseconds operator fun minus(nanoseconds: LongNanoseconds ): LongNanoseconds operator fun minus(microseconds: IntMicroseconds ): LongMicroseconds operator fun minus(microseconds: LongMicroseconds ): LongMicroseconds operator fun minus(milliseconds: IntMilliseconds ): LongMilliseconds operator fun minus(milliseconds: LongMilliseconds ): LongMilliseconds operator fun minus(seconds: IntSeconds ): IntSeconds operator fun minus(seconds: LongSeconds ): LongSeconds operator fun minus(minutes: IntMinutes ): IntMinutes operator fun minus(minutes: LongMinutes ): LongMinutes operator fun minus(hours: IntHours ): IntHours operator fun minus(hours: LongHours ): LongHours operator fun minus(days: IntDays ): IntHours operator fun minus(days: LongDays ): LongHours","title":"Minus"},{"location":"api/core/io.islandtime.measures/-int-hours/minus/#minus","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun minus(nanoseconds: IntNanoseconds ): LongNanoseconds operator fun minus(nanoseconds: LongNanoseconds ): LongNanoseconds operator fun minus(microseconds: IntMicroseconds ): LongMicroseconds operator fun minus(microseconds: LongMicroseconds ): LongMicroseconds operator fun minus(milliseconds: IntMilliseconds ): LongMilliseconds operator fun minus(milliseconds: LongMilliseconds ): LongMilliseconds operator fun minus(seconds: IntSeconds ): IntSeconds operator fun minus(seconds: LongSeconds ): LongSeconds operator fun minus(minutes: IntMinutes ): IntMinutes operator fun minus(minutes: LongMinutes ): LongMinutes operator fun minus(hours: IntHours ): IntHours operator fun minus(hours: LongHours ): LongHours operator fun minus(days: IntDays ): IntHours operator fun minus(days: LongDays ): LongHours","title":"minus"},{"location":"api/core/io.islandtime.measures/-int-hours/plus/","text":"core / io.islandtime.measures / IntHours / plus plus (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun plus(nanoseconds: IntNanoseconds ): LongNanoseconds operator fun plus(nanoseconds: LongNanoseconds ): LongNanoseconds operator fun plus(microseconds: IntMicroseconds ): LongMicroseconds operator fun plus(microseconds: LongMicroseconds ): LongMicroseconds operator fun plus(milliseconds: IntMilliseconds ): LongMilliseconds operator fun plus(milliseconds: LongMilliseconds ): LongMilliseconds operator fun plus(seconds: IntSeconds ): IntSeconds operator fun plus(seconds: LongSeconds ): LongSeconds operator fun plus(minutes: IntMinutes ): IntMinutes operator fun plus(minutes: LongMinutes ): LongMinutes operator fun plus(hours: IntHours ): IntHours operator fun plus(hours: LongHours ): LongHours operator fun plus(days: IntDays ): IntHours operator fun plus(days: LongDays ): LongHours","title":"Plus"},{"location":"api/core/io.islandtime.measures/-int-hours/plus/#plus","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun plus(nanoseconds: IntNanoseconds ): LongNanoseconds operator fun plus(nanoseconds: LongNanoseconds ): LongNanoseconds operator fun plus(microseconds: IntMicroseconds ): LongMicroseconds operator fun plus(microseconds: LongMicroseconds ): LongMicroseconds operator fun plus(milliseconds: IntMilliseconds ): LongMilliseconds operator fun plus(milliseconds: LongMilliseconds ): LongMilliseconds operator fun plus(seconds: IntSeconds ): IntSeconds operator fun plus(seconds: LongSeconds ): LongSeconds operator fun plus(minutes: IntMinutes ): IntMinutes operator fun plus(minutes: LongMinutes ): LongMinutes operator fun plus(hours: IntHours ): IntHours operator fun plus(hours: LongHours ): LongHours operator fun plus(days: IntDays ): IntHours operator fun plus(days: LongDays ): LongHours","title":"plus"},{"location":"api/core/io.islandtime.measures/-int-hours/rem/","text":"core / io.islandtime.measures / IntHours / rem rem (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun rem(scalar: Int ): IntHours operator fun rem(scalar: Long ): LongHours","title":"Rem"},{"location":"api/core/io.islandtime.measures/-int-hours/rem/#rem","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun rem(scalar: Int ): IntHours operator fun rem(scalar: Long ): LongHours","title":"rem"},{"location":"api/core/io.islandtime.measures/-int-hours/times/","text":"core / io.islandtime.measures / IntHours / times times (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun times(scalar: Int ): IntHours operator fun times(scalar: Long ): LongHours Multiply by a scalar value. Exceptions ArithmeticException - if overflow occurs","title":"Times"},{"location":"api/core/io.islandtime.measures/-int-hours/times/#times","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun times(scalar: Int ): IntHours operator fun times(scalar: Long ): LongHours Multiply by a scalar value.","title":"times"},{"location":"api/core/io.islandtime.measures/-int-hours/times/#exceptions","text":"ArithmeticException - if overflow occurs","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-int-hours/to-components/","text":"core / io.islandtime.measures / IntHours / toComponents toComponents (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline fun <T> toComponents(action: (days: IntDays , hours: IntHours ) -> T): T","title":"To components"},{"location":"api/core/io.islandtime.measures/-int-hours/to-components/#tocomponents","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline fun <T> toComponents(action: (days: IntDays , hours: IntHours ) -> T): T","title":"toComponents"},{"location":"api/core/io.islandtime.measures/-int-hours/to-kotlin-duration/","text":"core / io.islandtime.measures / IntHours / toKotlinDuration toKotlinDuration (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toKotlinDuration(): <ERROR CLASS> (jvm) @ExperimentalTime fun toKotlinDuration(): Duration (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) Convert to a kotlin.time.Duration . (jvm) Convert to a kotlin.time.Duration .","title":"To kotlin duration"},{"location":"api/core/io.islandtime.measures/-int-hours/to-kotlin-duration/#tokotlinduration","text":"(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toKotlinDuration(): <ERROR CLASS> (jvm) @ExperimentalTime fun toKotlinDuration(): Duration (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) Convert to a kotlin.time.Duration . (jvm) Convert to a kotlin.time.Duration .","title":"toKotlinDuration"},{"location":"api/core/io.islandtime.measures/-int-hours/to-long-hours/","text":"core / io.islandtime.measures / IntHours / toLongHours toLongHours (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toLongHours(): LongHours Convert to LongHours .","title":"To long hours"},{"location":"api/core/io.islandtime.measures/-int-hours/to-long-hours/#tolonghours","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toLongHours(): LongHours Convert to LongHours .","title":"toLongHours"},{"location":"api/core/io.islandtime.measures/-int-hours/to-long/","text":"core / io.islandtime.measures / IntHours / toLong toLong (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toLong(): Long Convert to a unit-less Long value.","title":"To long"},{"location":"api/core/io.islandtime.measures/-int-hours/to-long/#tolong","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toLong(): Long Convert to a unit-less Long value.","title":"toLong"},{"location":"api/core/io.islandtime.measures/-int-hours/to-string/","text":"core / io.islandtime.measures / IntHours / toString toString (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toString(): String Convert to an ISO-8601 time interval representation.","title":"To string"},{"location":"api/core/io.islandtime.measures/-int-hours/to-string/#tostring","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toString(): String Convert to an ISO-8601 time interval representation.","title":"toString"},{"location":"api/core/io.islandtime.measures/-int-hours/unary-minus/","text":"core / io.islandtime.measures / IntHours / unaryMinus unaryMinus (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun unaryMinus(): IntHours Negate the value. Exceptions ArithmeticException - if overflow occurs","title":"Unary minus"},{"location":"api/core/io.islandtime.measures/-int-hours/unary-minus/#unaryminus","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun unaryMinus(): IntHours Negate the value.","title":"unaryMinus"},{"location":"api/core/io.islandtime.measures/-int-hours/unary-minus/#exceptions","text":"ArithmeticException - if overflow occurs","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-int-hours/value/","text":"core / io.islandtime.measures / IntHours / value value (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val value: Int The underlying value.","title":"Value"},{"location":"api/core/io.islandtime.measures/-int-hours/value/#value","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val value: Int The underlying value.","title":"value"},{"location":"api/core/io.islandtime.measures/-int-microseconds/","text":"core / io.islandtime.measures / IntMicroseconds IntMicroseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline class IntMicroseconds : Comparable < IntMicroseconds > A number of microseconds. Constructors Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init> A number of microseconds. <init>(value: Int ) Properties Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) absoluteValue Returns the absolute value. val absoluteValue: IntMicroseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inDays Convert to whole days. val inDays: IntDays (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inHours Convert to whole hours. val inHours: IntHours (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inMilliseconds Convert to whole milliseconds. val inMilliseconds: IntMilliseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inMinutes Convert to whole minutes. val inMinutes: IntMinutes (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inNanoseconds Convert to nanoseconds. val inNanoseconds: LongNanoseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inSeconds Convert to whole seconds. val inSeconds: IntSeconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) value The underlying value. val value: Int Functions Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) compareTo fun compareTo(other: IntMicroseconds ): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) div Divide by a scalar value. operator fun div(scalar: Int ): IntMicroseconds operator fun div(scalar: Long ): LongMicroseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isNegative Is this duration negative? fun isNegative(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isPositive Is this duration positive? fun isPositive(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isZero Is this duration zero? fun isZero(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) minus operator fun minus(nanoseconds: IntNanoseconds ): LongNanoseconds operator fun minus(nanoseconds: LongNanoseconds ): LongNanoseconds operator fun minus(microseconds: IntMicroseconds ): LongMicroseconds operator fun minus(microseconds: LongMicroseconds ): LongMicroseconds operator fun minus(milliseconds: IntMilliseconds ): LongMicroseconds operator fun minus(milliseconds: LongMilliseconds ): LongMicroseconds operator fun minus(seconds: IntSeconds ): LongMicroseconds operator fun minus(seconds: LongSeconds ): LongMicroseconds operator fun minus(minutes: IntMinutes ): LongMicroseconds operator fun minus(minutes: LongMinutes ): LongMicroseconds operator fun minus(hours: IntHours ): LongMicroseconds operator fun minus(hours: LongHours ): LongMicroseconds operator fun minus(days: IntDays ): LongMicroseconds operator fun minus(days: LongDays ): LongMicroseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) plus operator fun plus(nanoseconds: IntNanoseconds ): LongNanoseconds operator fun plus(nanoseconds: LongNanoseconds ): LongNanoseconds operator fun plus(microseconds: IntMicroseconds ): LongMicroseconds operator fun plus(microseconds: LongMicroseconds ): LongMicroseconds operator fun plus(milliseconds: IntMilliseconds ): LongMicroseconds operator fun plus(milliseconds: LongMilliseconds ): LongMicroseconds operator fun plus(seconds: IntSeconds ): LongMicroseconds operator fun plus(seconds: LongSeconds ): LongMicroseconds operator fun plus(minutes: IntMinutes ): LongMicroseconds operator fun plus(minutes: LongMinutes ): LongMicroseconds operator fun plus(hours: IntHours ): LongMicroseconds operator fun plus(hours: LongHours ): LongMicroseconds operator fun plus(days: IntDays ): LongMicroseconds operator fun plus(days: LongDays ): LongMicroseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) rem operator fun rem(scalar: Int ): IntMicroseconds operator fun rem(scalar: Long ): LongMicroseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) times Multiply by a scalar value. operator fun times(scalar: Int ): LongMicroseconds operator fun times(scalar: Long ): LongMicroseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toComponents fun <T> toComponents(action: (milliseconds: IntMilliseconds , microseconds: IntMicroseconds ) -> T): T fun <T> toComponents(action: (seconds: IntSeconds , milliseconds: IntMilliseconds , microseconds: IntMicroseconds ) -> T): T fun <T> toComponents(action: (minutes: IntMinutes , seconds: IntSeconds , milliseconds: IntMilliseconds , microseconds: IntMicroseconds ) -> T): T fun <T> toComponents(action: (hours: IntHours , minutes: IntMinutes , seconds: IntSeconds , milliseconds: IntMilliseconds , microseconds: IntMicroseconds ) -> T): T fun <T> toComponents(action: (days: IntDays , hours: IntHours , minutes: IntMinutes , seconds: IntSeconds , milliseconds: IntMilliseconds , microseconds: IntMicroseconds ) -> T): T toKotlinDuration Convert to a kotlin.time.Duration .(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toKotlinDuration(): <ERROR CLASS> (jvm) fun toKotlinDuration(): Duration (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toLong Convert to a unit-less Long value. fun toLong(): Long (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toLongMicroseconds Convert to LongMicroseconds . fun toLongMicroseconds(): LongMicroseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toString Convert to an ISO-8601 time interval representation. fun toString(): String (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) unaryMinus Negate the value. operator fun unaryMinus(): IntMicroseconds Companion Object Properties Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MAX The largest supported value. val MAX: IntMicroseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MIN The smallest supported value. val MIN: IntMicroseconds Extension Functions Name Summary (jvm) toJavaDuration Convert to an equivalent Java Duration . fun IntMicroseconds .toJavaDuration(): Duration","title":"Index"},{"location":"api/core/io.islandtime.measures/-int-microseconds/#intmicroseconds","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline class IntMicroseconds : Comparable < IntMicroseconds > A number of microseconds.","title":"IntMicroseconds"},{"location":"api/core/io.islandtime.measures/-int-microseconds/#constructors","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init> A number of microseconds. <init>(value: Int )","title":"Constructors"},{"location":"api/core/io.islandtime.measures/-int-microseconds/#properties","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) absoluteValue Returns the absolute value. val absoluteValue: IntMicroseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inDays Convert to whole days. val inDays: IntDays (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inHours Convert to whole hours. val inHours: IntHours (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inMilliseconds Convert to whole milliseconds. val inMilliseconds: IntMilliseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inMinutes Convert to whole minutes. val inMinutes: IntMinutes (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inNanoseconds Convert to nanoseconds. val inNanoseconds: LongNanoseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inSeconds Convert to whole seconds. val inSeconds: IntSeconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) value The underlying value. val value: Int","title":"Properties"},{"location":"api/core/io.islandtime.measures/-int-microseconds/#functions","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) compareTo fun compareTo(other: IntMicroseconds ): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) div Divide by a scalar value. operator fun div(scalar: Int ): IntMicroseconds operator fun div(scalar: Long ): LongMicroseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isNegative Is this duration negative? fun isNegative(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isPositive Is this duration positive? fun isPositive(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isZero Is this duration zero? fun isZero(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) minus operator fun minus(nanoseconds: IntNanoseconds ): LongNanoseconds operator fun minus(nanoseconds: LongNanoseconds ): LongNanoseconds operator fun minus(microseconds: IntMicroseconds ): LongMicroseconds operator fun minus(microseconds: LongMicroseconds ): LongMicroseconds operator fun minus(milliseconds: IntMilliseconds ): LongMicroseconds operator fun minus(milliseconds: LongMilliseconds ): LongMicroseconds operator fun minus(seconds: IntSeconds ): LongMicroseconds operator fun minus(seconds: LongSeconds ): LongMicroseconds operator fun minus(minutes: IntMinutes ): LongMicroseconds operator fun minus(minutes: LongMinutes ): LongMicroseconds operator fun minus(hours: IntHours ): LongMicroseconds operator fun minus(hours: LongHours ): LongMicroseconds operator fun minus(days: IntDays ): LongMicroseconds operator fun minus(days: LongDays ): LongMicroseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) plus operator fun plus(nanoseconds: IntNanoseconds ): LongNanoseconds operator fun plus(nanoseconds: LongNanoseconds ): LongNanoseconds operator fun plus(microseconds: IntMicroseconds ): LongMicroseconds operator fun plus(microseconds: LongMicroseconds ): LongMicroseconds operator fun plus(milliseconds: IntMilliseconds ): LongMicroseconds operator fun plus(milliseconds: LongMilliseconds ): LongMicroseconds operator fun plus(seconds: IntSeconds ): LongMicroseconds operator fun plus(seconds: LongSeconds ): LongMicroseconds operator fun plus(minutes: IntMinutes ): LongMicroseconds operator fun plus(minutes: LongMinutes ): LongMicroseconds operator fun plus(hours: IntHours ): LongMicroseconds operator fun plus(hours: LongHours ): LongMicroseconds operator fun plus(days: IntDays ): LongMicroseconds operator fun plus(days: LongDays ): LongMicroseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) rem operator fun rem(scalar: Int ): IntMicroseconds operator fun rem(scalar: Long ): LongMicroseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) times Multiply by a scalar value. operator fun times(scalar: Int ): LongMicroseconds operator fun times(scalar: Long ): LongMicroseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toComponents fun <T> toComponents(action: (milliseconds: IntMilliseconds , microseconds: IntMicroseconds ) -> T): T fun <T> toComponents(action: (seconds: IntSeconds , milliseconds: IntMilliseconds , microseconds: IntMicroseconds ) -> T): T fun <T> toComponents(action: (minutes: IntMinutes , seconds: IntSeconds , milliseconds: IntMilliseconds , microseconds: IntMicroseconds ) -> T): T fun <T> toComponents(action: (hours: IntHours , minutes: IntMinutes , seconds: IntSeconds , milliseconds: IntMilliseconds , microseconds: IntMicroseconds ) -> T): T fun <T> toComponents(action: (days: IntDays , hours: IntHours , minutes: IntMinutes , seconds: IntSeconds , milliseconds: IntMilliseconds , microseconds: IntMicroseconds ) -> T): T toKotlinDuration Convert to a kotlin.time.Duration .(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toKotlinDuration(): <ERROR CLASS> (jvm) fun toKotlinDuration(): Duration (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toLong Convert to a unit-less Long value. fun toLong(): Long (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toLongMicroseconds Convert to LongMicroseconds . fun toLongMicroseconds(): LongMicroseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toString Convert to an ISO-8601 time interval representation. fun toString(): String (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) unaryMinus Negate the value. operator fun unaryMinus(): IntMicroseconds","title":"Functions"},{"location":"api/core/io.islandtime.measures/-int-microseconds/#companion-object-properties","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MAX The largest supported value. val MAX: IntMicroseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MIN The smallest supported value. val MIN: IntMicroseconds","title":"Companion Object Properties"},{"location":"api/core/io.islandtime.measures/-int-microseconds/#extension-functions","text":"Name Summary (jvm) toJavaDuration Convert to an equivalent Java Duration . fun IntMicroseconds .toJavaDuration(): Duration","title":"Extension Functions"},{"location":"api/core/io.islandtime.measures/-int-microseconds/-init-/","text":"core / io.islandtime.measures / IntMicroseconds / <init> <init> (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init>(value: Int ) A number of microseconds.","title":" init "},{"location":"api/core/io.islandtime.measures/-int-microseconds/-init-/#init","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init>(value: Int ) A number of microseconds.","title":"&lt;init&gt;"},{"location":"api/core/io.islandtime.measures/-int-microseconds/-m-a-x/","text":"core / io.islandtime.measures / IntMicroseconds / MAX MAX (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val MAX: IntMicroseconds The largest supported value.","title":" m a x"},{"location":"api/core/io.islandtime.measures/-int-microseconds/-m-a-x/#max","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val MAX: IntMicroseconds The largest supported value.","title":"MAX"},{"location":"api/core/io.islandtime.measures/-int-microseconds/-m-i-n/","text":"core / io.islandtime.measures / IntMicroseconds / MIN MIN (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val MIN: IntMicroseconds The smallest supported value.","title":" m i n"},{"location":"api/core/io.islandtime.measures/-int-microseconds/-m-i-n/#min","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val MIN: IntMicroseconds The smallest supported value.","title":"MIN"},{"location":"api/core/io.islandtime.measures/-int-microseconds/absolute-value/","text":"core / io.islandtime.measures / IntMicroseconds / absoluteValue absoluteValue (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val absoluteValue: IntMicroseconds Returns the absolute value. Exceptions ArithmeticException - if overflow occurs","title":"Absolute value"},{"location":"api/core/io.islandtime.measures/-int-microseconds/absolute-value/#absolutevalue","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val absoluteValue: IntMicroseconds Returns the absolute value.","title":"absoluteValue"},{"location":"api/core/io.islandtime.measures/-int-microseconds/absolute-value/#exceptions","text":"ArithmeticException - if overflow occurs","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-int-microseconds/compare-to/","text":"core / io.islandtime.measures / IntMicroseconds / compareTo compareTo (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun compareTo(other: IntMicroseconds ): Int","title":"Compare to"},{"location":"api/core/io.islandtime.measures/-int-microseconds/compare-to/#compareto","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun compareTo(other: IntMicroseconds ): Int","title":"compareTo"},{"location":"api/core/io.islandtime.measures/-int-microseconds/div/","text":"core / io.islandtime.measures / IntMicroseconds / div div (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun div(scalar: Int ): IntMicroseconds Divide by a scalar value. Exceptions ArithmeticException - if overflow occurs or the scalar is zero(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun div(scalar: Long ): LongMicroseconds Divide by a scalar value. Exceptions ArithmeticException - if the scalar is zero","title":"Div"},{"location":"api/core/io.islandtime.measures/-int-microseconds/div/#div","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun div(scalar: Int ): IntMicroseconds Divide by a scalar value.","title":"div"},{"location":"api/core/io.islandtime.measures/-int-microseconds/div/#exceptions","text":"ArithmeticException - if overflow occurs or the scalar is zero(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun div(scalar: Long ): LongMicroseconds Divide by a scalar value.","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-int-microseconds/div/#exceptions_1","text":"ArithmeticException - if the scalar is zero","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-int-microseconds/in-days/","text":"core / io.islandtime.measures / IntMicroseconds / inDays inDays (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inDays: IntDays Convert to whole days.","title":"In days"},{"location":"api/core/io.islandtime.measures/-int-microseconds/in-days/#indays","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inDays: IntDays Convert to whole days.","title":"inDays"},{"location":"api/core/io.islandtime.measures/-int-microseconds/in-hours/","text":"core / io.islandtime.measures / IntMicroseconds / inHours inHours (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inHours: IntHours Convert to whole hours.","title":"In hours"},{"location":"api/core/io.islandtime.measures/-int-microseconds/in-hours/#inhours","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inHours: IntHours Convert to whole hours.","title":"inHours"},{"location":"api/core/io.islandtime.measures/-int-microseconds/in-milliseconds/","text":"core / io.islandtime.measures / IntMicroseconds / inMilliseconds inMilliseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inMilliseconds: IntMilliseconds Convert to whole milliseconds.","title":"In milliseconds"},{"location":"api/core/io.islandtime.measures/-int-microseconds/in-milliseconds/#inmilliseconds","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inMilliseconds: IntMilliseconds Convert to whole milliseconds.","title":"inMilliseconds"},{"location":"api/core/io.islandtime.measures/-int-microseconds/in-minutes/","text":"core / io.islandtime.measures / IntMicroseconds / inMinutes inMinutes (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inMinutes: IntMinutes Convert to whole minutes.","title":"In minutes"},{"location":"api/core/io.islandtime.measures/-int-microseconds/in-minutes/#inminutes","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inMinutes: IntMinutes Convert to whole minutes.","title":"inMinutes"},{"location":"api/core/io.islandtime.measures/-int-microseconds/in-nanoseconds/","text":"core / io.islandtime.measures / IntMicroseconds / inNanoseconds inNanoseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inNanoseconds: LongNanoseconds Convert to nanoseconds.","title":"In nanoseconds"},{"location":"api/core/io.islandtime.measures/-int-microseconds/in-nanoseconds/#innanoseconds","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inNanoseconds: LongNanoseconds Convert to nanoseconds.","title":"inNanoseconds"},{"location":"api/core/io.islandtime.measures/-int-microseconds/in-seconds/","text":"core / io.islandtime.measures / IntMicroseconds / inSeconds inSeconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inSeconds: IntSeconds Convert to whole seconds.","title":"In seconds"},{"location":"api/core/io.islandtime.measures/-int-microseconds/in-seconds/#inseconds","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inSeconds: IntSeconds Convert to whole seconds.","title":"inSeconds"},{"location":"api/core/io.islandtime.measures/-int-microseconds/is-negative/","text":"core / io.islandtime.measures / IntMicroseconds / isNegative isNegative (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isNegative(): Boolean Is this duration negative?","title":"Is negative"},{"location":"api/core/io.islandtime.measures/-int-microseconds/is-negative/#isnegative","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isNegative(): Boolean Is this duration negative?","title":"isNegative"},{"location":"api/core/io.islandtime.measures/-int-microseconds/is-positive/","text":"core / io.islandtime.measures / IntMicroseconds / isPositive isPositive (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isPositive(): Boolean Is this duration positive?","title":"Is positive"},{"location":"api/core/io.islandtime.measures/-int-microseconds/is-positive/#ispositive","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isPositive(): Boolean Is this duration positive?","title":"isPositive"},{"location":"api/core/io.islandtime.measures/-int-microseconds/is-zero/","text":"core / io.islandtime.measures / IntMicroseconds / isZero isZero (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isZero(): Boolean Is this duration zero?","title":"Is zero"},{"location":"api/core/io.islandtime.measures/-int-microseconds/is-zero/#iszero","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isZero(): Boolean Is this duration zero?","title":"isZero"},{"location":"api/core/io.islandtime.measures/-int-microseconds/minus/","text":"core / io.islandtime.measures / IntMicroseconds / minus minus (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun minus(nanoseconds: IntNanoseconds ): LongNanoseconds operator fun minus(nanoseconds: LongNanoseconds ): LongNanoseconds operator fun minus(microseconds: IntMicroseconds ): LongMicroseconds operator fun minus(microseconds: LongMicroseconds ): LongMicroseconds operator fun minus(milliseconds: IntMilliseconds ): LongMicroseconds operator fun minus(milliseconds: LongMilliseconds ): LongMicroseconds operator fun minus(seconds: IntSeconds ): LongMicroseconds operator fun minus(seconds: LongSeconds ): LongMicroseconds operator fun minus(minutes: IntMinutes ): LongMicroseconds operator fun minus(minutes: LongMinutes ): LongMicroseconds operator fun minus(hours: IntHours ): LongMicroseconds operator fun minus(hours: LongHours ): LongMicroseconds operator fun minus(days: IntDays ): LongMicroseconds operator fun minus(days: LongDays ): LongMicroseconds","title":"Minus"},{"location":"api/core/io.islandtime.measures/-int-microseconds/minus/#minus","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun minus(nanoseconds: IntNanoseconds ): LongNanoseconds operator fun minus(nanoseconds: LongNanoseconds ): LongNanoseconds operator fun minus(microseconds: IntMicroseconds ): LongMicroseconds operator fun minus(microseconds: LongMicroseconds ): LongMicroseconds operator fun minus(milliseconds: IntMilliseconds ): LongMicroseconds operator fun minus(milliseconds: LongMilliseconds ): LongMicroseconds operator fun minus(seconds: IntSeconds ): LongMicroseconds operator fun minus(seconds: LongSeconds ): LongMicroseconds operator fun minus(minutes: IntMinutes ): LongMicroseconds operator fun minus(minutes: LongMinutes ): LongMicroseconds operator fun minus(hours: IntHours ): LongMicroseconds operator fun minus(hours: LongHours ): LongMicroseconds operator fun minus(days: IntDays ): LongMicroseconds operator fun minus(days: LongDays ): LongMicroseconds","title":"minus"},{"location":"api/core/io.islandtime.measures/-int-microseconds/plus/","text":"core / io.islandtime.measures / IntMicroseconds / plus plus (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun plus(nanoseconds: IntNanoseconds ): LongNanoseconds operator fun plus(nanoseconds: LongNanoseconds ): LongNanoseconds operator fun plus(microseconds: IntMicroseconds ): LongMicroseconds operator fun plus(microseconds: LongMicroseconds ): LongMicroseconds operator fun plus(milliseconds: IntMilliseconds ): LongMicroseconds operator fun plus(milliseconds: LongMilliseconds ): LongMicroseconds operator fun plus(seconds: IntSeconds ): LongMicroseconds operator fun plus(seconds: LongSeconds ): LongMicroseconds operator fun plus(minutes: IntMinutes ): LongMicroseconds operator fun plus(minutes: LongMinutes ): LongMicroseconds operator fun plus(hours: IntHours ): LongMicroseconds operator fun plus(hours: LongHours ): LongMicroseconds operator fun plus(days: IntDays ): LongMicroseconds operator fun plus(days: LongDays ): LongMicroseconds","title":"Plus"},{"location":"api/core/io.islandtime.measures/-int-microseconds/plus/#plus","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun plus(nanoseconds: IntNanoseconds ): LongNanoseconds operator fun plus(nanoseconds: LongNanoseconds ): LongNanoseconds operator fun plus(microseconds: IntMicroseconds ): LongMicroseconds operator fun plus(microseconds: LongMicroseconds ): LongMicroseconds operator fun plus(milliseconds: IntMilliseconds ): LongMicroseconds operator fun plus(milliseconds: LongMilliseconds ): LongMicroseconds operator fun plus(seconds: IntSeconds ): LongMicroseconds operator fun plus(seconds: LongSeconds ): LongMicroseconds operator fun plus(minutes: IntMinutes ): LongMicroseconds operator fun plus(minutes: LongMinutes ): LongMicroseconds operator fun plus(hours: IntHours ): LongMicroseconds operator fun plus(hours: LongHours ): LongMicroseconds operator fun plus(days: IntDays ): LongMicroseconds operator fun plus(days: LongDays ): LongMicroseconds","title":"plus"},{"location":"api/core/io.islandtime.measures/-int-microseconds/rem/","text":"core / io.islandtime.measures / IntMicroseconds / rem rem (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun rem(scalar: Int ): IntMicroseconds operator fun rem(scalar: Long ): LongMicroseconds","title":"Rem"},{"location":"api/core/io.islandtime.measures/-int-microseconds/rem/#rem","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun rem(scalar: Int ): IntMicroseconds operator fun rem(scalar: Long ): LongMicroseconds","title":"rem"},{"location":"api/core/io.islandtime.measures/-int-microseconds/times/","text":"core / io.islandtime.measures / IntMicroseconds / times times (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun times(scalar: Int ): LongMicroseconds operator fun times(scalar: Long ): LongMicroseconds Multiply by a scalar value. Exceptions ArithmeticException - if overflow occurs","title":"Times"},{"location":"api/core/io.islandtime.measures/-int-microseconds/times/#times","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun times(scalar: Int ): LongMicroseconds operator fun times(scalar: Long ): LongMicroseconds Multiply by a scalar value.","title":"times"},{"location":"api/core/io.islandtime.measures/-int-microseconds/times/#exceptions","text":"ArithmeticException - if overflow occurs","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-int-microseconds/to-components/","text":"core / io.islandtime.measures / IntMicroseconds / toComponents toComponents (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline fun <T> toComponents(action: (milliseconds: IntMilliseconds , microseconds: IntMicroseconds ) -> T): T inline fun <T> toComponents(action: (seconds: IntSeconds , milliseconds: IntMilliseconds , microseconds: IntMicroseconds ) -> T): T inline fun <T> toComponents(action: (minutes: IntMinutes , seconds: IntSeconds , milliseconds: IntMilliseconds , microseconds: IntMicroseconds ) -> T): T inline fun <T> toComponents(action: (hours: IntHours , minutes: IntMinutes , seconds: IntSeconds , milliseconds: IntMilliseconds , microseconds: IntMicroseconds ) -> T): T inline fun <T> toComponents(action: (days: IntDays , hours: IntHours , minutes: IntMinutes , seconds: IntSeconds , milliseconds: IntMilliseconds , microseconds: IntMicroseconds ) -> T): T","title":"To components"},{"location":"api/core/io.islandtime.measures/-int-microseconds/to-components/#tocomponents","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline fun <T> toComponents(action: (milliseconds: IntMilliseconds , microseconds: IntMicroseconds ) -> T): T inline fun <T> toComponents(action: (seconds: IntSeconds , milliseconds: IntMilliseconds , microseconds: IntMicroseconds ) -> T): T inline fun <T> toComponents(action: (minutes: IntMinutes , seconds: IntSeconds , milliseconds: IntMilliseconds , microseconds: IntMicroseconds ) -> T): T inline fun <T> toComponents(action: (hours: IntHours , minutes: IntMinutes , seconds: IntSeconds , milliseconds: IntMilliseconds , microseconds: IntMicroseconds ) -> T): T inline fun <T> toComponents(action: (days: IntDays , hours: IntHours , minutes: IntMinutes , seconds: IntSeconds , milliseconds: IntMilliseconds , microseconds: IntMicroseconds ) -> T): T","title":"toComponents"},{"location":"api/core/io.islandtime.measures/-int-microseconds/to-kotlin-duration/","text":"core / io.islandtime.measures / IntMicroseconds / toKotlinDuration toKotlinDuration (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toKotlinDuration(): <ERROR CLASS> (jvm) @ExperimentalTime fun toKotlinDuration(): Duration (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) Convert to a kotlin.time.Duration . (jvm) Convert to a kotlin.time.Duration .","title":"To kotlin duration"},{"location":"api/core/io.islandtime.measures/-int-microseconds/to-kotlin-duration/#tokotlinduration","text":"(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toKotlinDuration(): <ERROR CLASS> (jvm) @ExperimentalTime fun toKotlinDuration(): Duration (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) Convert to a kotlin.time.Duration . (jvm) Convert to a kotlin.time.Duration .","title":"toKotlinDuration"},{"location":"api/core/io.islandtime.measures/-int-microseconds/to-long-microseconds/","text":"core / io.islandtime.measures / IntMicroseconds / toLongMicroseconds toLongMicroseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toLongMicroseconds(): LongMicroseconds Convert to LongMicroseconds .","title":"To long microseconds"},{"location":"api/core/io.islandtime.measures/-int-microseconds/to-long-microseconds/#tolongmicroseconds","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toLongMicroseconds(): LongMicroseconds Convert to LongMicroseconds .","title":"toLongMicroseconds"},{"location":"api/core/io.islandtime.measures/-int-microseconds/to-long/","text":"core / io.islandtime.measures / IntMicroseconds / toLong toLong (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toLong(): Long Convert to a unit-less Long value.","title":"To long"},{"location":"api/core/io.islandtime.measures/-int-microseconds/to-long/#tolong","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toLong(): Long Convert to a unit-less Long value.","title":"toLong"},{"location":"api/core/io.islandtime.measures/-int-microseconds/to-string/","text":"core / io.islandtime.measures / IntMicroseconds / toString toString (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toString(): String Convert to an ISO-8601 time interval representation.","title":"To string"},{"location":"api/core/io.islandtime.measures/-int-microseconds/to-string/#tostring","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toString(): String Convert to an ISO-8601 time interval representation.","title":"toString"},{"location":"api/core/io.islandtime.measures/-int-microseconds/unary-minus/","text":"core / io.islandtime.measures / IntMicroseconds / unaryMinus unaryMinus (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun unaryMinus(): IntMicroseconds Negate the value. Exceptions ArithmeticException - if overflow occurs","title":"Unary minus"},{"location":"api/core/io.islandtime.measures/-int-microseconds/unary-minus/#unaryminus","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun unaryMinus(): IntMicroseconds Negate the value.","title":"unaryMinus"},{"location":"api/core/io.islandtime.measures/-int-microseconds/unary-minus/#exceptions","text":"ArithmeticException - if overflow occurs","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-int-microseconds/value/","text":"core / io.islandtime.measures / IntMicroseconds / value value (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val value: Int The underlying value.","title":"Value"},{"location":"api/core/io.islandtime.measures/-int-microseconds/value/#value","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val value: Int The underlying value.","title":"value"},{"location":"api/core/io.islandtime.measures/-int-milliseconds/","text":"core / io.islandtime.measures / IntMilliseconds IntMilliseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline class IntMilliseconds : Comparable < IntMilliseconds > A number of milliseconds. Constructors Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init> A number of milliseconds. <init>(value: Int ) Properties Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) absoluteValue Returns the absolute value. val absoluteValue: IntMilliseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inDays Convert to whole days. val inDays: IntDays (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inHours Convert to whole hours. val inHours: IntHours (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inMicroseconds Convert to microseconds. val inMicroseconds: LongMicroseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inMinutes Convert to whole minutes. val inMinutes: IntMinutes (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inNanoseconds Convert to nanoseconds. val inNanoseconds: LongNanoseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inSeconds Convert to whole seconds. val inSeconds: IntSeconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) value The underlying value. val value: Int Functions Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) compareTo fun compareTo(other: IntMilliseconds ): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) div Divide by a scalar value. operator fun div(scalar: Int ): IntMilliseconds operator fun div(scalar: Long ): LongMilliseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isNegative Is this duration negative? fun isNegative(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isPositive Is this duration positive? fun isPositive(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isZero Is this duration zero? fun isZero(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) minus operator fun minus(nanoseconds: IntNanoseconds ): LongNanoseconds operator fun minus(nanoseconds: LongNanoseconds ): LongNanoseconds operator fun minus(microseconds: IntMicroseconds ): LongMicroseconds operator fun minus(microseconds: LongMicroseconds ): LongMicroseconds operator fun minus(milliseconds: IntMilliseconds ): LongMilliseconds operator fun minus(milliseconds: LongMilliseconds ): LongMilliseconds operator fun minus(seconds: IntSeconds ): LongMilliseconds operator fun minus(seconds: LongSeconds ): LongMilliseconds operator fun minus(minutes: IntMinutes ): LongMilliseconds operator fun minus(minutes: LongMinutes ): LongMilliseconds operator fun minus(hours: IntHours ): LongMilliseconds operator fun minus(hours: LongHours ): LongMilliseconds operator fun minus(days: IntDays ): LongMilliseconds operator fun minus(days: LongDays ): LongMilliseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) plus operator fun plus(nanoseconds: IntNanoseconds ): LongNanoseconds operator fun plus(nanoseconds: LongNanoseconds ): LongNanoseconds operator fun plus(microseconds: IntMicroseconds ): LongMicroseconds operator fun plus(microseconds: LongMicroseconds ): LongMicroseconds operator fun plus(milliseconds: IntMilliseconds ): LongMilliseconds operator fun plus(milliseconds: LongMilliseconds ): LongMilliseconds operator fun plus(seconds: IntSeconds ): LongMilliseconds operator fun plus(seconds: LongSeconds ): LongMilliseconds operator fun plus(minutes: IntMinutes ): LongMilliseconds operator fun plus(minutes: LongMinutes ): LongMilliseconds operator fun plus(hours: IntHours ): LongMilliseconds operator fun plus(hours: LongHours ): LongMilliseconds operator fun plus(days: IntDays ): LongMilliseconds operator fun plus(days: LongDays ): LongMilliseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) rem operator fun rem(scalar: Int ): IntMilliseconds operator fun rem(scalar: Long ): LongMilliseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) times Multiply by a scalar value. operator fun times(scalar: Int ): LongMilliseconds operator fun times(scalar: Long ): LongMilliseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toComponents fun <T> toComponents(action: (seconds: IntSeconds , milliseconds: IntMilliseconds ) -> T): T fun <T> toComponents(action: (minutes: IntMinutes , seconds: IntSeconds , milliseconds: IntMilliseconds ) -> T): T fun <T> toComponents(action: (hours: IntHours , minutes: IntMinutes , seconds: IntSeconds , milliseconds: IntMilliseconds ) -> T): T fun <T> toComponents(action: (days: IntDays , hours: IntHours , minutes: IntMinutes , seconds: IntSeconds , milliseconds: IntMilliseconds ) -> T): T toKotlinDuration Convert to a kotlin.time.Duration .(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toKotlinDuration(): <ERROR CLASS> (jvm) fun toKotlinDuration(): Duration (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toLong Convert to a unit-less Long value. fun toLong(): Long (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toLongMilliseconds Convert to LongMilliseconds . fun toLongMilliseconds(): LongMilliseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toString Convert to an ISO-8601 time interval representation. fun toString(): String (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) unaryMinus Negate the value. operator fun unaryMinus(): IntMilliseconds Companion Object Properties Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MAX The largest supported value. val MAX: IntMilliseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MIN The smallest supported value. val MIN: IntMilliseconds Extension Functions Name Summary (jvm) toJavaDuration Convert to an equivalent Java Duration . fun IntMilliseconds .toJavaDuration(): Duration","title":"Index"},{"location":"api/core/io.islandtime.measures/-int-milliseconds/#intmilliseconds","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline class IntMilliseconds : Comparable < IntMilliseconds > A number of milliseconds.","title":"IntMilliseconds"},{"location":"api/core/io.islandtime.measures/-int-milliseconds/#constructors","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init> A number of milliseconds. <init>(value: Int )","title":"Constructors"},{"location":"api/core/io.islandtime.measures/-int-milliseconds/#properties","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) absoluteValue Returns the absolute value. val absoluteValue: IntMilliseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inDays Convert to whole days. val inDays: IntDays (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inHours Convert to whole hours. val inHours: IntHours (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inMicroseconds Convert to microseconds. val inMicroseconds: LongMicroseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inMinutes Convert to whole minutes. val inMinutes: IntMinutes (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inNanoseconds Convert to nanoseconds. val inNanoseconds: LongNanoseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inSeconds Convert to whole seconds. val inSeconds: IntSeconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) value The underlying value. val value: Int","title":"Properties"},{"location":"api/core/io.islandtime.measures/-int-milliseconds/#functions","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) compareTo fun compareTo(other: IntMilliseconds ): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) div Divide by a scalar value. operator fun div(scalar: Int ): IntMilliseconds operator fun div(scalar: Long ): LongMilliseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isNegative Is this duration negative? fun isNegative(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isPositive Is this duration positive? fun isPositive(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isZero Is this duration zero? fun isZero(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) minus operator fun minus(nanoseconds: IntNanoseconds ): LongNanoseconds operator fun minus(nanoseconds: LongNanoseconds ): LongNanoseconds operator fun minus(microseconds: IntMicroseconds ): LongMicroseconds operator fun minus(microseconds: LongMicroseconds ): LongMicroseconds operator fun minus(milliseconds: IntMilliseconds ): LongMilliseconds operator fun minus(milliseconds: LongMilliseconds ): LongMilliseconds operator fun minus(seconds: IntSeconds ): LongMilliseconds operator fun minus(seconds: LongSeconds ): LongMilliseconds operator fun minus(minutes: IntMinutes ): LongMilliseconds operator fun minus(minutes: LongMinutes ): LongMilliseconds operator fun minus(hours: IntHours ): LongMilliseconds operator fun minus(hours: LongHours ): LongMilliseconds operator fun minus(days: IntDays ): LongMilliseconds operator fun minus(days: LongDays ): LongMilliseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) plus operator fun plus(nanoseconds: IntNanoseconds ): LongNanoseconds operator fun plus(nanoseconds: LongNanoseconds ): LongNanoseconds operator fun plus(microseconds: IntMicroseconds ): LongMicroseconds operator fun plus(microseconds: LongMicroseconds ): LongMicroseconds operator fun plus(milliseconds: IntMilliseconds ): LongMilliseconds operator fun plus(milliseconds: LongMilliseconds ): LongMilliseconds operator fun plus(seconds: IntSeconds ): LongMilliseconds operator fun plus(seconds: LongSeconds ): LongMilliseconds operator fun plus(minutes: IntMinutes ): LongMilliseconds operator fun plus(minutes: LongMinutes ): LongMilliseconds operator fun plus(hours: IntHours ): LongMilliseconds operator fun plus(hours: LongHours ): LongMilliseconds operator fun plus(days: IntDays ): LongMilliseconds operator fun plus(days: LongDays ): LongMilliseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) rem operator fun rem(scalar: Int ): IntMilliseconds operator fun rem(scalar: Long ): LongMilliseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) times Multiply by a scalar value. operator fun times(scalar: Int ): LongMilliseconds operator fun times(scalar: Long ): LongMilliseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toComponents fun <T> toComponents(action: (seconds: IntSeconds , milliseconds: IntMilliseconds ) -> T): T fun <T> toComponents(action: (minutes: IntMinutes , seconds: IntSeconds , milliseconds: IntMilliseconds ) -> T): T fun <T> toComponents(action: (hours: IntHours , minutes: IntMinutes , seconds: IntSeconds , milliseconds: IntMilliseconds ) -> T): T fun <T> toComponents(action: (days: IntDays , hours: IntHours , minutes: IntMinutes , seconds: IntSeconds , milliseconds: IntMilliseconds ) -> T): T toKotlinDuration Convert to a kotlin.time.Duration .(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toKotlinDuration(): <ERROR CLASS> (jvm) fun toKotlinDuration(): Duration (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toLong Convert to a unit-less Long value. fun toLong(): Long (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toLongMilliseconds Convert to LongMilliseconds . fun toLongMilliseconds(): LongMilliseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toString Convert to an ISO-8601 time interval representation. fun toString(): String (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) unaryMinus Negate the value. operator fun unaryMinus(): IntMilliseconds","title":"Functions"},{"location":"api/core/io.islandtime.measures/-int-milliseconds/#companion-object-properties","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MAX The largest supported value. val MAX: IntMilliseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MIN The smallest supported value. val MIN: IntMilliseconds","title":"Companion Object Properties"},{"location":"api/core/io.islandtime.measures/-int-milliseconds/#extension-functions","text":"Name Summary (jvm) toJavaDuration Convert to an equivalent Java Duration . fun IntMilliseconds .toJavaDuration(): Duration","title":"Extension Functions"},{"location":"api/core/io.islandtime.measures/-int-milliseconds/-init-/","text":"core / io.islandtime.measures / IntMilliseconds / <init> <init> (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init>(value: Int ) A number of milliseconds.","title":" init "},{"location":"api/core/io.islandtime.measures/-int-milliseconds/-init-/#init","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init>(value: Int ) A number of milliseconds.","title":"&lt;init&gt;"},{"location":"api/core/io.islandtime.measures/-int-milliseconds/-m-a-x/","text":"core / io.islandtime.measures / IntMilliseconds / MAX MAX (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val MAX: IntMilliseconds The largest supported value.","title":" m a x"},{"location":"api/core/io.islandtime.measures/-int-milliseconds/-m-a-x/#max","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val MAX: IntMilliseconds The largest supported value.","title":"MAX"},{"location":"api/core/io.islandtime.measures/-int-milliseconds/-m-i-n/","text":"core / io.islandtime.measures / IntMilliseconds / MIN MIN (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val MIN: IntMilliseconds The smallest supported value.","title":" m i n"},{"location":"api/core/io.islandtime.measures/-int-milliseconds/-m-i-n/#min","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val MIN: IntMilliseconds The smallest supported value.","title":"MIN"},{"location":"api/core/io.islandtime.measures/-int-milliseconds/absolute-value/","text":"core / io.islandtime.measures / IntMilliseconds / absoluteValue absoluteValue (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val absoluteValue: IntMilliseconds Returns the absolute value. Exceptions ArithmeticException - if overflow occurs","title":"Absolute value"},{"location":"api/core/io.islandtime.measures/-int-milliseconds/absolute-value/#absolutevalue","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val absoluteValue: IntMilliseconds Returns the absolute value.","title":"absoluteValue"},{"location":"api/core/io.islandtime.measures/-int-milliseconds/absolute-value/#exceptions","text":"ArithmeticException - if overflow occurs","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-int-milliseconds/compare-to/","text":"core / io.islandtime.measures / IntMilliseconds / compareTo compareTo (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun compareTo(other: IntMilliseconds ): Int","title":"Compare to"},{"location":"api/core/io.islandtime.measures/-int-milliseconds/compare-to/#compareto","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun compareTo(other: IntMilliseconds ): Int","title":"compareTo"},{"location":"api/core/io.islandtime.measures/-int-milliseconds/div/","text":"core / io.islandtime.measures / IntMilliseconds / div div (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun div(scalar: Int ): IntMilliseconds Divide by a scalar value. Exceptions ArithmeticException - if overflow occurs or the scalar is zero(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun div(scalar: Long ): LongMilliseconds Divide by a scalar value. Exceptions ArithmeticException - if the scalar is zero","title":"Div"},{"location":"api/core/io.islandtime.measures/-int-milliseconds/div/#div","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun div(scalar: Int ): IntMilliseconds Divide by a scalar value.","title":"div"},{"location":"api/core/io.islandtime.measures/-int-milliseconds/div/#exceptions","text":"ArithmeticException - if overflow occurs or the scalar is zero(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun div(scalar: Long ): LongMilliseconds Divide by a scalar value.","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-int-milliseconds/div/#exceptions_1","text":"ArithmeticException - if the scalar is zero","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-int-milliseconds/in-days/","text":"core / io.islandtime.measures / IntMilliseconds / inDays inDays (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inDays: IntDays Convert to whole days.","title":"In days"},{"location":"api/core/io.islandtime.measures/-int-milliseconds/in-days/#indays","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inDays: IntDays Convert to whole days.","title":"inDays"},{"location":"api/core/io.islandtime.measures/-int-milliseconds/in-hours/","text":"core / io.islandtime.measures / IntMilliseconds / inHours inHours (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inHours: IntHours Convert to whole hours.","title":"In hours"},{"location":"api/core/io.islandtime.measures/-int-milliseconds/in-hours/#inhours","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inHours: IntHours Convert to whole hours.","title":"inHours"},{"location":"api/core/io.islandtime.measures/-int-milliseconds/in-microseconds/","text":"core / io.islandtime.measures / IntMilliseconds / inMicroseconds inMicroseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inMicroseconds: LongMicroseconds Convert to microseconds.","title":"In microseconds"},{"location":"api/core/io.islandtime.measures/-int-milliseconds/in-microseconds/#inmicroseconds","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inMicroseconds: LongMicroseconds Convert to microseconds.","title":"inMicroseconds"},{"location":"api/core/io.islandtime.measures/-int-milliseconds/in-minutes/","text":"core / io.islandtime.measures / IntMilliseconds / inMinutes inMinutes (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inMinutes: IntMinutes Convert to whole minutes.","title":"In minutes"},{"location":"api/core/io.islandtime.measures/-int-milliseconds/in-minutes/#inminutes","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inMinutes: IntMinutes Convert to whole minutes.","title":"inMinutes"},{"location":"api/core/io.islandtime.measures/-int-milliseconds/in-nanoseconds/","text":"core / io.islandtime.measures / IntMilliseconds / inNanoseconds inNanoseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inNanoseconds: LongNanoseconds Convert to nanoseconds.","title":"In nanoseconds"},{"location":"api/core/io.islandtime.measures/-int-milliseconds/in-nanoseconds/#innanoseconds","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inNanoseconds: LongNanoseconds Convert to nanoseconds.","title":"inNanoseconds"},{"location":"api/core/io.islandtime.measures/-int-milliseconds/in-seconds/","text":"core / io.islandtime.measures / IntMilliseconds / inSeconds inSeconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inSeconds: IntSeconds Convert to whole seconds.","title":"In seconds"},{"location":"api/core/io.islandtime.measures/-int-milliseconds/in-seconds/#inseconds","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inSeconds: IntSeconds Convert to whole seconds.","title":"inSeconds"},{"location":"api/core/io.islandtime.measures/-int-milliseconds/is-negative/","text":"core / io.islandtime.measures / IntMilliseconds / isNegative isNegative (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isNegative(): Boolean Is this duration negative?","title":"Is negative"},{"location":"api/core/io.islandtime.measures/-int-milliseconds/is-negative/#isnegative","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isNegative(): Boolean Is this duration negative?","title":"isNegative"},{"location":"api/core/io.islandtime.measures/-int-milliseconds/is-positive/","text":"core / io.islandtime.measures / IntMilliseconds / isPositive isPositive (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isPositive(): Boolean Is this duration positive?","title":"Is positive"},{"location":"api/core/io.islandtime.measures/-int-milliseconds/is-positive/#ispositive","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isPositive(): Boolean Is this duration positive?","title":"isPositive"},{"location":"api/core/io.islandtime.measures/-int-milliseconds/is-zero/","text":"core / io.islandtime.measures / IntMilliseconds / isZero isZero (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isZero(): Boolean Is this duration zero?","title":"Is zero"},{"location":"api/core/io.islandtime.measures/-int-milliseconds/is-zero/#iszero","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isZero(): Boolean Is this duration zero?","title":"isZero"},{"location":"api/core/io.islandtime.measures/-int-milliseconds/minus/","text":"core / io.islandtime.measures / IntMilliseconds / minus minus (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun minus(nanoseconds: IntNanoseconds ): LongNanoseconds operator fun minus(nanoseconds: LongNanoseconds ): LongNanoseconds operator fun minus(microseconds: IntMicroseconds ): LongMicroseconds operator fun minus(microseconds: LongMicroseconds ): LongMicroseconds operator fun minus(milliseconds: IntMilliseconds ): LongMilliseconds operator fun minus(milliseconds: LongMilliseconds ): LongMilliseconds operator fun minus(seconds: IntSeconds ): LongMilliseconds operator fun minus(seconds: LongSeconds ): LongMilliseconds operator fun minus(minutes: IntMinutes ): LongMilliseconds operator fun minus(minutes: LongMinutes ): LongMilliseconds operator fun minus(hours: IntHours ): LongMilliseconds operator fun minus(hours: LongHours ): LongMilliseconds operator fun minus(days: IntDays ): LongMilliseconds operator fun minus(days: LongDays ): LongMilliseconds","title":"Minus"},{"location":"api/core/io.islandtime.measures/-int-milliseconds/minus/#minus","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun minus(nanoseconds: IntNanoseconds ): LongNanoseconds operator fun minus(nanoseconds: LongNanoseconds ): LongNanoseconds operator fun minus(microseconds: IntMicroseconds ): LongMicroseconds operator fun minus(microseconds: LongMicroseconds ): LongMicroseconds operator fun minus(milliseconds: IntMilliseconds ): LongMilliseconds operator fun minus(milliseconds: LongMilliseconds ): LongMilliseconds operator fun minus(seconds: IntSeconds ): LongMilliseconds operator fun minus(seconds: LongSeconds ): LongMilliseconds operator fun minus(minutes: IntMinutes ): LongMilliseconds operator fun minus(minutes: LongMinutes ): LongMilliseconds operator fun minus(hours: IntHours ): LongMilliseconds operator fun minus(hours: LongHours ): LongMilliseconds operator fun minus(days: IntDays ): LongMilliseconds operator fun minus(days: LongDays ): LongMilliseconds","title":"minus"},{"location":"api/core/io.islandtime.measures/-int-milliseconds/plus/","text":"core / io.islandtime.measures / IntMilliseconds / plus plus (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun plus(nanoseconds: IntNanoseconds ): LongNanoseconds operator fun plus(nanoseconds: LongNanoseconds ): LongNanoseconds operator fun plus(microseconds: IntMicroseconds ): LongMicroseconds operator fun plus(microseconds: LongMicroseconds ): LongMicroseconds operator fun plus(milliseconds: IntMilliseconds ): LongMilliseconds operator fun plus(milliseconds: LongMilliseconds ): LongMilliseconds operator fun plus(seconds: IntSeconds ): LongMilliseconds operator fun plus(seconds: LongSeconds ): LongMilliseconds operator fun plus(minutes: IntMinutes ): LongMilliseconds operator fun plus(minutes: LongMinutes ): LongMilliseconds operator fun plus(hours: IntHours ): LongMilliseconds operator fun plus(hours: LongHours ): LongMilliseconds operator fun plus(days: IntDays ): LongMilliseconds operator fun plus(days: LongDays ): LongMilliseconds","title":"Plus"},{"location":"api/core/io.islandtime.measures/-int-milliseconds/plus/#plus","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun plus(nanoseconds: IntNanoseconds ): LongNanoseconds operator fun plus(nanoseconds: LongNanoseconds ): LongNanoseconds operator fun plus(microseconds: IntMicroseconds ): LongMicroseconds operator fun plus(microseconds: LongMicroseconds ): LongMicroseconds operator fun plus(milliseconds: IntMilliseconds ): LongMilliseconds operator fun plus(milliseconds: LongMilliseconds ): LongMilliseconds operator fun plus(seconds: IntSeconds ): LongMilliseconds operator fun plus(seconds: LongSeconds ): LongMilliseconds operator fun plus(minutes: IntMinutes ): LongMilliseconds operator fun plus(minutes: LongMinutes ): LongMilliseconds operator fun plus(hours: IntHours ): LongMilliseconds operator fun plus(hours: LongHours ): LongMilliseconds operator fun plus(days: IntDays ): LongMilliseconds operator fun plus(days: LongDays ): LongMilliseconds","title":"plus"},{"location":"api/core/io.islandtime.measures/-int-milliseconds/rem/","text":"core / io.islandtime.measures / IntMilliseconds / rem rem (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun rem(scalar: Int ): IntMilliseconds operator fun rem(scalar: Long ): LongMilliseconds","title":"Rem"},{"location":"api/core/io.islandtime.measures/-int-milliseconds/rem/#rem","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun rem(scalar: Int ): IntMilliseconds operator fun rem(scalar: Long ): LongMilliseconds","title":"rem"},{"location":"api/core/io.islandtime.measures/-int-milliseconds/times/","text":"core / io.islandtime.measures / IntMilliseconds / times times (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun times(scalar: Int ): LongMilliseconds operator fun times(scalar: Long ): LongMilliseconds Multiply by a scalar value. Exceptions ArithmeticException - if overflow occurs","title":"Times"},{"location":"api/core/io.islandtime.measures/-int-milliseconds/times/#times","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun times(scalar: Int ): LongMilliseconds operator fun times(scalar: Long ): LongMilliseconds Multiply by a scalar value.","title":"times"},{"location":"api/core/io.islandtime.measures/-int-milliseconds/times/#exceptions","text":"ArithmeticException - if overflow occurs","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-int-milliseconds/to-components/","text":"core / io.islandtime.measures / IntMilliseconds / toComponents toComponents (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline fun <T> toComponents(action: (seconds: IntSeconds , milliseconds: IntMilliseconds ) -> T): T inline fun <T> toComponents(action: (minutes: IntMinutes , seconds: IntSeconds , milliseconds: IntMilliseconds ) -> T): T inline fun <T> toComponents(action: (hours: IntHours , minutes: IntMinutes , seconds: IntSeconds , milliseconds: IntMilliseconds ) -> T): T inline fun <T> toComponents(action: (days: IntDays , hours: IntHours , minutes: IntMinutes , seconds: IntSeconds , milliseconds: IntMilliseconds ) -> T): T","title":"To components"},{"location":"api/core/io.islandtime.measures/-int-milliseconds/to-components/#tocomponents","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline fun <T> toComponents(action: (seconds: IntSeconds , milliseconds: IntMilliseconds ) -> T): T inline fun <T> toComponents(action: (minutes: IntMinutes , seconds: IntSeconds , milliseconds: IntMilliseconds ) -> T): T inline fun <T> toComponents(action: (hours: IntHours , minutes: IntMinutes , seconds: IntSeconds , milliseconds: IntMilliseconds ) -> T): T inline fun <T> toComponents(action: (days: IntDays , hours: IntHours , minutes: IntMinutes , seconds: IntSeconds , milliseconds: IntMilliseconds ) -> T): T","title":"toComponents"},{"location":"api/core/io.islandtime.measures/-int-milliseconds/to-kotlin-duration/","text":"core / io.islandtime.measures / IntMilliseconds / toKotlinDuration toKotlinDuration (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toKotlinDuration(): <ERROR CLASS> (jvm) @ExperimentalTime fun toKotlinDuration(): Duration (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) Convert to a kotlin.time.Duration . (jvm) Convert to a kotlin.time.Duration .","title":"To kotlin duration"},{"location":"api/core/io.islandtime.measures/-int-milliseconds/to-kotlin-duration/#tokotlinduration","text":"(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toKotlinDuration(): <ERROR CLASS> (jvm) @ExperimentalTime fun toKotlinDuration(): Duration (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) Convert to a kotlin.time.Duration . (jvm) Convert to a kotlin.time.Duration .","title":"toKotlinDuration"},{"location":"api/core/io.islandtime.measures/-int-milliseconds/to-long-milliseconds/","text":"core / io.islandtime.measures / IntMilliseconds / toLongMilliseconds toLongMilliseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toLongMilliseconds(): LongMilliseconds Convert to LongMilliseconds .","title":"To long milliseconds"},{"location":"api/core/io.islandtime.measures/-int-milliseconds/to-long-milliseconds/#tolongmilliseconds","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toLongMilliseconds(): LongMilliseconds Convert to LongMilliseconds .","title":"toLongMilliseconds"},{"location":"api/core/io.islandtime.measures/-int-milliseconds/to-long/","text":"core / io.islandtime.measures / IntMilliseconds / toLong toLong (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toLong(): Long Convert to a unit-less Long value.","title":"To long"},{"location":"api/core/io.islandtime.measures/-int-milliseconds/to-long/#tolong","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toLong(): Long Convert to a unit-less Long value.","title":"toLong"},{"location":"api/core/io.islandtime.measures/-int-milliseconds/to-string/","text":"core / io.islandtime.measures / IntMilliseconds / toString toString (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toString(): String Convert to an ISO-8601 time interval representation.","title":"To string"},{"location":"api/core/io.islandtime.measures/-int-milliseconds/to-string/#tostring","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toString(): String Convert to an ISO-8601 time interval representation.","title":"toString"},{"location":"api/core/io.islandtime.measures/-int-milliseconds/unary-minus/","text":"core / io.islandtime.measures / IntMilliseconds / unaryMinus unaryMinus (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun unaryMinus(): IntMilliseconds Negate the value. Exceptions ArithmeticException - if overflow occurs","title":"Unary minus"},{"location":"api/core/io.islandtime.measures/-int-milliseconds/unary-minus/#unaryminus","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun unaryMinus(): IntMilliseconds Negate the value.","title":"unaryMinus"},{"location":"api/core/io.islandtime.measures/-int-milliseconds/unary-minus/#exceptions","text":"ArithmeticException - if overflow occurs","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-int-milliseconds/value/","text":"core / io.islandtime.measures / IntMilliseconds / value value (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val value: Int The underlying value.","title":"Value"},{"location":"api/core/io.islandtime.measures/-int-milliseconds/value/#value","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val value: Int The underlying value.","title":"value"},{"location":"api/core/io.islandtime.measures/-int-minutes/","text":"core / io.islandtime.measures / IntMinutes IntMinutes (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline class IntMinutes : Comparable < IntMinutes > A number of minutes. Constructors Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init> A number of minutes. <init>(value: Int ) Properties Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) absoluteValue Returns the absolute value. val absoluteValue: IntMinutes (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inDays Convert to whole days. val inDays: IntDays (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inHours Convert to whole hours. val inHours: IntHours (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inMicroseconds Convert to microseconds. val inMicroseconds: LongMicroseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inMilliseconds Convert to milliseconds. val inMilliseconds: LongMilliseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inNanoseconds Convert to nanoseconds. val inNanoseconds: LongNanoseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inSeconds Convert to seconds. val inSeconds: IntSeconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) value The underlying value. val value: Int Functions Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) compareTo fun compareTo(other: IntMinutes ): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) div Divide by a scalar value. operator fun div(scalar: Int ): IntMinutes operator fun div(scalar: Long ): LongMinutes (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isNegative Is this duration negative? fun isNegative(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isPositive Is this duration positive? fun isPositive(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isZero Is this duration zero? fun isZero(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) minus operator fun minus(nanoseconds: IntNanoseconds ): LongNanoseconds operator fun minus(nanoseconds: LongNanoseconds ): LongNanoseconds operator fun minus(microseconds: IntMicroseconds ): LongMicroseconds operator fun minus(microseconds: LongMicroseconds ): LongMicroseconds operator fun minus(milliseconds: IntMilliseconds ): LongMilliseconds operator fun minus(milliseconds: LongMilliseconds ): LongMilliseconds operator fun minus(seconds: IntSeconds ): IntSeconds operator fun minus(seconds: LongSeconds ): LongSeconds operator fun minus(minutes: IntMinutes ): IntMinutes operator fun minus(minutes: LongMinutes ): LongMinutes operator fun minus(hours: IntHours ): IntMinutes operator fun minus(hours: LongHours ): LongMinutes operator fun minus(days: IntDays ): IntMinutes operator fun minus(days: LongDays ): LongMinutes (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) plus operator fun plus(nanoseconds: IntNanoseconds ): LongNanoseconds operator fun plus(nanoseconds: LongNanoseconds ): LongNanoseconds operator fun plus(microseconds: IntMicroseconds ): LongMicroseconds operator fun plus(microseconds: LongMicroseconds ): LongMicroseconds operator fun plus(milliseconds: IntMilliseconds ): LongMilliseconds operator fun plus(milliseconds: LongMilliseconds ): LongMilliseconds operator fun plus(seconds: IntSeconds ): IntSeconds operator fun plus(seconds: LongSeconds ): LongSeconds operator fun plus(minutes: IntMinutes ): IntMinutes operator fun plus(minutes: LongMinutes ): LongMinutes operator fun plus(hours: IntHours ): IntMinutes operator fun plus(hours: LongHours ): LongMinutes operator fun plus(days: IntDays ): IntMinutes operator fun plus(days: LongDays ): LongMinutes (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) rem operator fun rem(scalar: Int ): IntMinutes operator fun rem(scalar: Long ): LongMinutes (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) times Multiply by a scalar value. operator fun times(scalar: Int ): IntMinutes operator fun times(scalar: Long ): LongMinutes (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toComponents fun <T> toComponents(action: (hours: IntHours , minutes: IntMinutes ) -> T): T fun <T> toComponents(action: (days: IntDays , hours: IntHours , minutes: IntMinutes ) -> T): T toKotlinDuration Convert to a kotlin.time.Duration .(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toKotlinDuration(): <ERROR CLASS> (jvm) fun toKotlinDuration(): Duration (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toLong Convert to a unit-less Long value. fun toLong(): Long (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toLongMinutes Convert to LongMinutes . fun toLongMinutes(): LongMinutes (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toString Convert to an ISO-8601 time interval representation. fun toString(): String (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) unaryMinus Negate the value. operator fun unaryMinus(): IntMinutes Companion Object Properties Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MAX The largest supported value. val MAX: IntMinutes (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MIN The smallest supported value. val MIN: IntMinutes Extension Functions Name Summary (jvm) toJavaDuration Convert to an equivalent Java Duration . fun IntMinutes .toJavaDuration(): Duration","title":"Index"},{"location":"api/core/io.islandtime.measures/-int-minutes/#intminutes","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline class IntMinutes : Comparable < IntMinutes > A number of minutes.","title":"IntMinutes"},{"location":"api/core/io.islandtime.measures/-int-minutes/#constructors","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init> A number of minutes. <init>(value: Int )","title":"Constructors"},{"location":"api/core/io.islandtime.measures/-int-minutes/#properties","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) absoluteValue Returns the absolute value. val absoluteValue: IntMinutes (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inDays Convert to whole days. val inDays: IntDays (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inHours Convert to whole hours. val inHours: IntHours (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inMicroseconds Convert to microseconds. val inMicroseconds: LongMicroseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inMilliseconds Convert to milliseconds. val inMilliseconds: LongMilliseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inNanoseconds Convert to nanoseconds. val inNanoseconds: LongNanoseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inSeconds Convert to seconds. val inSeconds: IntSeconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) value The underlying value. val value: Int","title":"Properties"},{"location":"api/core/io.islandtime.measures/-int-minutes/#functions","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) compareTo fun compareTo(other: IntMinutes ): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) div Divide by a scalar value. operator fun div(scalar: Int ): IntMinutes operator fun div(scalar: Long ): LongMinutes (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isNegative Is this duration negative? fun isNegative(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isPositive Is this duration positive? fun isPositive(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isZero Is this duration zero? fun isZero(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) minus operator fun minus(nanoseconds: IntNanoseconds ): LongNanoseconds operator fun minus(nanoseconds: LongNanoseconds ): LongNanoseconds operator fun minus(microseconds: IntMicroseconds ): LongMicroseconds operator fun minus(microseconds: LongMicroseconds ): LongMicroseconds operator fun minus(milliseconds: IntMilliseconds ): LongMilliseconds operator fun minus(milliseconds: LongMilliseconds ): LongMilliseconds operator fun minus(seconds: IntSeconds ): IntSeconds operator fun minus(seconds: LongSeconds ): LongSeconds operator fun minus(minutes: IntMinutes ): IntMinutes operator fun minus(minutes: LongMinutes ): LongMinutes operator fun minus(hours: IntHours ): IntMinutes operator fun minus(hours: LongHours ): LongMinutes operator fun minus(days: IntDays ): IntMinutes operator fun minus(days: LongDays ): LongMinutes (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) plus operator fun plus(nanoseconds: IntNanoseconds ): LongNanoseconds operator fun plus(nanoseconds: LongNanoseconds ): LongNanoseconds operator fun plus(microseconds: IntMicroseconds ): LongMicroseconds operator fun plus(microseconds: LongMicroseconds ): LongMicroseconds operator fun plus(milliseconds: IntMilliseconds ): LongMilliseconds operator fun plus(milliseconds: LongMilliseconds ): LongMilliseconds operator fun plus(seconds: IntSeconds ): IntSeconds operator fun plus(seconds: LongSeconds ): LongSeconds operator fun plus(minutes: IntMinutes ): IntMinutes operator fun plus(minutes: LongMinutes ): LongMinutes operator fun plus(hours: IntHours ): IntMinutes operator fun plus(hours: LongHours ): LongMinutes operator fun plus(days: IntDays ): IntMinutes operator fun plus(days: LongDays ): LongMinutes (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) rem operator fun rem(scalar: Int ): IntMinutes operator fun rem(scalar: Long ): LongMinutes (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) times Multiply by a scalar value. operator fun times(scalar: Int ): IntMinutes operator fun times(scalar: Long ): LongMinutes (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toComponents fun <T> toComponents(action: (hours: IntHours , minutes: IntMinutes ) -> T): T fun <T> toComponents(action: (days: IntDays , hours: IntHours , minutes: IntMinutes ) -> T): T toKotlinDuration Convert to a kotlin.time.Duration .(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toKotlinDuration(): <ERROR CLASS> (jvm) fun toKotlinDuration(): Duration (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toLong Convert to a unit-less Long value. fun toLong(): Long (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toLongMinutes Convert to LongMinutes . fun toLongMinutes(): LongMinutes (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toString Convert to an ISO-8601 time interval representation. fun toString(): String (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) unaryMinus Negate the value. operator fun unaryMinus(): IntMinutes","title":"Functions"},{"location":"api/core/io.islandtime.measures/-int-minutes/#companion-object-properties","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MAX The largest supported value. val MAX: IntMinutes (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MIN The smallest supported value. val MIN: IntMinutes","title":"Companion Object Properties"},{"location":"api/core/io.islandtime.measures/-int-minutes/#extension-functions","text":"Name Summary (jvm) toJavaDuration Convert to an equivalent Java Duration . fun IntMinutes .toJavaDuration(): Duration","title":"Extension Functions"},{"location":"api/core/io.islandtime.measures/-int-minutes/-init-/","text":"core / io.islandtime.measures / IntMinutes / <init> <init> (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init>(value: Int ) A number of minutes.","title":" init "},{"location":"api/core/io.islandtime.measures/-int-minutes/-init-/#init","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init>(value: Int ) A number of minutes.","title":"&lt;init&gt;"},{"location":"api/core/io.islandtime.measures/-int-minutes/-m-a-x/","text":"core / io.islandtime.measures / IntMinutes / MAX MAX (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val MAX: IntMinutes The largest supported value.","title":" m a x"},{"location":"api/core/io.islandtime.measures/-int-minutes/-m-a-x/#max","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val MAX: IntMinutes The largest supported value.","title":"MAX"},{"location":"api/core/io.islandtime.measures/-int-minutes/-m-i-n/","text":"core / io.islandtime.measures / IntMinutes / MIN MIN (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val MIN: IntMinutes The smallest supported value.","title":" m i n"},{"location":"api/core/io.islandtime.measures/-int-minutes/-m-i-n/#min","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val MIN: IntMinutes The smallest supported value.","title":"MIN"},{"location":"api/core/io.islandtime.measures/-int-minutes/absolute-value/","text":"core / io.islandtime.measures / IntMinutes / absoluteValue absoluteValue (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val absoluteValue: IntMinutes Returns the absolute value. Exceptions ArithmeticException - if overflow occurs","title":"Absolute value"},{"location":"api/core/io.islandtime.measures/-int-minutes/absolute-value/#absolutevalue","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val absoluteValue: IntMinutes Returns the absolute value.","title":"absoluteValue"},{"location":"api/core/io.islandtime.measures/-int-minutes/absolute-value/#exceptions","text":"ArithmeticException - if overflow occurs","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-int-minutes/compare-to/","text":"core / io.islandtime.measures / IntMinutes / compareTo compareTo (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun compareTo(other: IntMinutes ): Int","title":"Compare to"},{"location":"api/core/io.islandtime.measures/-int-minutes/compare-to/#compareto","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun compareTo(other: IntMinutes ): Int","title":"compareTo"},{"location":"api/core/io.islandtime.measures/-int-minutes/div/","text":"core / io.islandtime.measures / IntMinutes / div div (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun div(scalar: Int ): IntMinutes Divide by a scalar value. Exceptions ArithmeticException - if overflow occurs or the scalar is zero(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun div(scalar: Long ): LongMinutes Divide by a scalar value. Exceptions ArithmeticException - if the scalar is zero","title":"Div"},{"location":"api/core/io.islandtime.measures/-int-minutes/div/#div","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun div(scalar: Int ): IntMinutes Divide by a scalar value.","title":"div"},{"location":"api/core/io.islandtime.measures/-int-minutes/div/#exceptions","text":"ArithmeticException - if overflow occurs or the scalar is zero(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun div(scalar: Long ): LongMinutes Divide by a scalar value.","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-int-minutes/div/#exceptions_1","text":"ArithmeticException - if the scalar is zero","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-int-minutes/in-days/","text":"core / io.islandtime.measures / IntMinutes / inDays inDays (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inDays: IntDays Convert to whole days.","title":"In days"},{"location":"api/core/io.islandtime.measures/-int-minutes/in-days/#indays","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inDays: IntDays Convert to whole days.","title":"inDays"},{"location":"api/core/io.islandtime.measures/-int-minutes/in-hours/","text":"core / io.islandtime.measures / IntMinutes / inHours inHours (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inHours: IntHours Convert to whole hours.","title":"In hours"},{"location":"api/core/io.islandtime.measures/-int-minutes/in-hours/#inhours","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inHours: IntHours Convert to whole hours.","title":"inHours"},{"location":"api/core/io.islandtime.measures/-int-minutes/in-microseconds/","text":"core / io.islandtime.measures / IntMinutes / inMicroseconds inMicroseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inMicroseconds: LongMicroseconds Convert to microseconds.","title":"In microseconds"},{"location":"api/core/io.islandtime.measures/-int-minutes/in-microseconds/#inmicroseconds","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inMicroseconds: LongMicroseconds Convert to microseconds.","title":"inMicroseconds"},{"location":"api/core/io.islandtime.measures/-int-minutes/in-milliseconds/","text":"core / io.islandtime.measures / IntMinutes / inMilliseconds inMilliseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inMilliseconds: LongMilliseconds Convert to milliseconds.","title":"In milliseconds"},{"location":"api/core/io.islandtime.measures/-int-minutes/in-milliseconds/#inmilliseconds","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inMilliseconds: LongMilliseconds Convert to milliseconds.","title":"inMilliseconds"},{"location":"api/core/io.islandtime.measures/-int-minutes/in-nanoseconds/","text":"core / io.islandtime.measures / IntMinutes / inNanoseconds inNanoseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inNanoseconds: LongNanoseconds Convert to nanoseconds. Exceptions ArithmeticException - if overflow occurs","title":"In nanoseconds"},{"location":"api/core/io.islandtime.measures/-int-minutes/in-nanoseconds/#innanoseconds","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inNanoseconds: LongNanoseconds Convert to nanoseconds.","title":"inNanoseconds"},{"location":"api/core/io.islandtime.measures/-int-minutes/in-nanoseconds/#exceptions","text":"ArithmeticException - if overflow occurs","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-int-minutes/in-seconds/","text":"core / io.islandtime.measures / IntMinutes / inSeconds inSeconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inSeconds: IntSeconds Convert to seconds. Exceptions ArithmeticException - if overflow occurs","title":"In seconds"},{"location":"api/core/io.islandtime.measures/-int-minutes/in-seconds/#inseconds","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inSeconds: IntSeconds Convert to seconds.","title":"inSeconds"},{"location":"api/core/io.islandtime.measures/-int-minutes/in-seconds/#exceptions","text":"ArithmeticException - if overflow occurs","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-int-minutes/is-negative/","text":"core / io.islandtime.measures / IntMinutes / isNegative isNegative (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isNegative(): Boolean Is this duration negative?","title":"Is negative"},{"location":"api/core/io.islandtime.measures/-int-minutes/is-negative/#isnegative","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isNegative(): Boolean Is this duration negative?","title":"isNegative"},{"location":"api/core/io.islandtime.measures/-int-minutes/is-positive/","text":"core / io.islandtime.measures / IntMinutes / isPositive isPositive (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isPositive(): Boolean Is this duration positive?","title":"Is positive"},{"location":"api/core/io.islandtime.measures/-int-minutes/is-positive/#ispositive","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isPositive(): Boolean Is this duration positive?","title":"isPositive"},{"location":"api/core/io.islandtime.measures/-int-minutes/is-zero/","text":"core / io.islandtime.measures / IntMinutes / isZero isZero (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isZero(): Boolean Is this duration zero?","title":"Is zero"},{"location":"api/core/io.islandtime.measures/-int-minutes/is-zero/#iszero","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isZero(): Boolean Is this duration zero?","title":"isZero"},{"location":"api/core/io.islandtime.measures/-int-minutes/minus/","text":"core / io.islandtime.measures / IntMinutes / minus minus (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun minus(nanoseconds: IntNanoseconds ): LongNanoseconds operator fun minus(nanoseconds: LongNanoseconds ): LongNanoseconds operator fun minus(microseconds: IntMicroseconds ): LongMicroseconds operator fun minus(microseconds: LongMicroseconds ): LongMicroseconds operator fun minus(milliseconds: IntMilliseconds ): LongMilliseconds operator fun minus(milliseconds: LongMilliseconds ): LongMilliseconds operator fun minus(seconds: IntSeconds ): IntSeconds operator fun minus(seconds: LongSeconds ): LongSeconds operator fun minus(minutes: IntMinutes ): IntMinutes operator fun minus(minutes: LongMinutes ): LongMinutes operator fun minus(hours: IntHours ): IntMinutes operator fun minus(hours: LongHours ): LongMinutes operator fun minus(days: IntDays ): IntMinutes operator fun minus(days: LongDays ): LongMinutes","title":"Minus"},{"location":"api/core/io.islandtime.measures/-int-minutes/minus/#minus","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun minus(nanoseconds: IntNanoseconds ): LongNanoseconds operator fun minus(nanoseconds: LongNanoseconds ): LongNanoseconds operator fun minus(microseconds: IntMicroseconds ): LongMicroseconds operator fun minus(microseconds: LongMicroseconds ): LongMicroseconds operator fun minus(milliseconds: IntMilliseconds ): LongMilliseconds operator fun minus(milliseconds: LongMilliseconds ): LongMilliseconds operator fun minus(seconds: IntSeconds ): IntSeconds operator fun minus(seconds: LongSeconds ): LongSeconds operator fun minus(minutes: IntMinutes ): IntMinutes operator fun minus(minutes: LongMinutes ): LongMinutes operator fun minus(hours: IntHours ): IntMinutes operator fun minus(hours: LongHours ): LongMinutes operator fun minus(days: IntDays ): IntMinutes operator fun minus(days: LongDays ): LongMinutes","title":"minus"},{"location":"api/core/io.islandtime.measures/-int-minutes/plus/","text":"core / io.islandtime.measures / IntMinutes / plus plus (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun plus(nanoseconds: IntNanoseconds ): LongNanoseconds operator fun plus(nanoseconds: LongNanoseconds ): LongNanoseconds operator fun plus(microseconds: IntMicroseconds ): LongMicroseconds operator fun plus(microseconds: LongMicroseconds ): LongMicroseconds operator fun plus(milliseconds: IntMilliseconds ): LongMilliseconds operator fun plus(milliseconds: LongMilliseconds ): LongMilliseconds operator fun plus(seconds: IntSeconds ): IntSeconds operator fun plus(seconds: LongSeconds ): LongSeconds operator fun plus(minutes: IntMinutes ): IntMinutes operator fun plus(minutes: LongMinutes ): LongMinutes operator fun plus(hours: IntHours ): IntMinutes operator fun plus(hours: LongHours ): LongMinutes operator fun plus(days: IntDays ): IntMinutes operator fun plus(days: LongDays ): LongMinutes","title":"Plus"},{"location":"api/core/io.islandtime.measures/-int-minutes/plus/#plus","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun plus(nanoseconds: IntNanoseconds ): LongNanoseconds operator fun plus(nanoseconds: LongNanoseconds ): LongNanoseconds operator fun plus(microseconds: IntMicroseconds ): LongMicroseconds operator fun plus(microseconds: LongMicroseconds ): LongMicroseconds operator fun plus(milliseconds: IntMilliseconds ): LongMilliseconds operator fun plus(milliseconds: LongMilliseconds ): LongMilliseconds operator fun plus(seconds: IntSeconds ): IntSeconds operator fun plus(seconds: LongSeconds ): LongSeconds operator fun plus(minutes: IntMinutes ): IntMinutes operator fun plus(minutes: LongMinutes ): LongMinutes operator fun plus(hours: IntHours ): IntMinutes operator fun plus(hours: LongHours ): LongMinutes operator fun plus(days: IntDays ): IntMinutes operator fun plus(days: LongDays ): LongMinutes","title":"plus"},{"location":"api/core/io.islandtime.measures/-int-minutes/rem/","text":"core / io.islandtime.measures / IntMinutes / rem rem (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun rem(scalar: Int ): IntMinutes operator fun rem(scalar: Long ): LongMinutes","title":"Rem"},{"location":"api/core/io.islandtime.measures/-int-minutes/rem/#rem","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun rem(scalar: Int ): IntMinutes operator fun rem(scalar: Long ): LongMinutes","title":"rem"},{"location":"api/core/io.islandtime.measures/-int-minutes/times/","text":"core / io.islandtime.measures / IntMinutes / times times (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun times(scalar: Int ): IntMinutes operator fun times(scalar: Long ): LongMinutes Multiply by a scalar value. Exceptions ArithmeticException - if overflow occurs","title":"Times"},{"location":"api/core/io.islandtime.measures/-int-minutes/times/#times","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun times(scalar: Int ): IntMinutes operator fun times(scalar: Long ): LongMinutes Multiply by a scalar value.","title":"times"},{"location":"api/core/io.islandtime.measures/-int-minutes/times/#exceptions","text":"ArithmeticException - if overflow occurs","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-int-minutes/to-components/","text":"core / io.islandtime.measures / IntMinutes / toComponents toComponents (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline fun <T> toComponents(action: (hours: IntHours , minutes: IntMinutes ) -> T): T inline fun <T> toComponents(action: (days: IntDays , hours: IntHours , minutes: IntMinutes ) -> T): T","title":"To components"},{"location":"api/core/io.islandtime.measures/-int-minutes/to-components/#tocomponents","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline fun <T> toComponents(action: (hours: IntHours , minutes: IntMinutes ) -> T): T inline fun <T> toComponents(action: (days: IntDays , hours: IntHours , minutes: IntMinutes ) -> T): T","title":"toComponents"},{"location":"api/core/io.islandtime.measures/-int-minutes/to-kotlin-duration/","text":"core / io.islandtime.measures / IntMinutes / toKotlinDuration toKotlinDuration (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toKotlinDuration(): <ERROR CLASS> (jvm) @ExperimentalTime fun toKotlinDuration(): Duration (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) Convert to a kotlin.time.Duration . (jvm) Convert to a kotlin.time.Duration .","title":"To kotlin duration"},{"location":"api/core/io.islandtime.measures/-int-minutes/to-kotlin-duration/#tokotlinduration","text":"(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toKotlinDuration(): <ERROR CLASS> (jvm) @ExperimentalTime fun toKotlinDuration(): Duration (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) Convert to a kotlin.time.Duration . (jvm) Convert to a kotlin.time.Duration .","title":"toKotlinDuration"},{"location":"api/core/io.islandtime.measures/-int-minutes/to-long-minutes/","text":"core / io.islandtime.measures / IntMinutes / toLongMinutes toLongMinutes (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toLongMinutes(): LongMinutes Convert to LongMinutes .","title":"To long minutes"},{"location":"api/core/io.islandtime.measures/-int-minutes/to-long-minutes/#tolongminutes","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toLongMinutes(): LongMinutes Convert to LongMinutes .","title":"toLongMinutes"},{"location":"api/core/io.islandtime.measures/-int-minutes/to-long/","text":"core / io.islandtime.measures / IntMinutes / toLong toLong (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toLong(): Long Convert to a unit-less Long value.","title":"To long"},{"location":"api/core/io.islandtime.measures/-int-minutes/to-long/#tolong","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toLong(): Long Convert to a unit-less Long value.","title":"toLong"},{"location":"api/core/io.islandtime.measures/-int-minutes/to-string/","text":"core / io.islandtime.measures / IntMinutes / toString toString (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toString(): String Convert to an ISO-8601 time interval representation.","title":"To string"},{"location":"api/core/io.islandtime.measures/-int-minutes/to-string/#tostring","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toString(): String Convert to an ISO-8601 time interval representation.","title":"toString"},{"location":"api/core/io.islandtime.measures/-int-minutes/unary-minus/","text":"core / io.islandtime.measures / IntMinutes / unaryMinus unaryMinus (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun unaryMinus(): IntMinutes Negate the value. Exceptions ArithmeticException - if overflow occurs","title":"Unary minus"},{"location":"api/core/io.islandtime.measures/-int-minutes/unary-minus/#unaryminus","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun unaryMinus(): IntMinutes Negate the value.","title":"unaryMinus"},{"location":"api/core/io.islandtime.measures/-int-minutes/unary-minus/#exceptions","text":"ArithmeticException - if overflow occurs","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-int-minutes/value/","text":"core / io.islandtime.measures / IntMinutes / value value (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val value: Int The underlying value.","title":"Value"},{"location":"api/core/io.islandtime.measures/-int-minutes/value/#value","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val value: Int The underlying value.","title":"value"},{"location":"api/core/io.islandtime.measures/-int-months/","text":"core / io.islandtime.measures / IntMonths IntMonths (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline class IntMonths : Comparable < IntMonths > A number of months. Constructors Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init> A number of months. <init>(value: Int ) Properties Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) absoluteValue Returns the absolute value. val absoluteValue: IntMonths (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inCenturies Convert to whole centuries. val inCenturies: IntCenturies (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inDecades Convert to whole decades. val inDecades: IntDecades (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inYears Convert to whole years. val inYears: IntYears (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) value The underlying value. val value: Int Functions Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) compareTo fun compareTo(other: IntMonths ): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) div Divide by a scalar value. operator fun div(scalar: Int ): IntMonths operator fun div(scalar: Long ): LongMonths (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isNegative Is this duration negative? fun isNegative(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isPositive Is this duration positive? fun isPositive(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isZero Is this duration zero? fun isZero(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) minus operator fun minus(months: IntMonths ): IntMonths operator fun minus(months: LongMonths ): LongMonths operator fun minus(years: IntYears ): IntMonths operator fun minus(years: LongYears ): LongMonths operator fun minus(decades: IntDecades ): IntMonths operator fun minus(decades: LongDecades ): LongMonths operator fun minus(centuries: IntCenturies ): IntMonths operator fun minus(centuries: LongCenturies ): LongMonths (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) plus operator fun plus(months: IntMonths ): IntMonths operator fun plus(months: LongMonths ): LongMonths operator fun plus(years: IntYears ): IntMonths operator fun plus(years: LongYears ): LongMonths operator fun plus(decades: IntDecades ): IntMonths operator fun plus(decades: LongDecades ): LongMonths operator fun plus(centuries: IntCenturies ): IntMonths operator fun plus(centuries: LongCenturies ): LongMonths (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) rem operator fun rem(scalar: Int ): IntMonths operator fun rem(scalar: Long ): LongMonths (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) times Multiply by a scalar value. operator fun times(scalar: Int ): IntMonths operator fun times(scalar: Long ): LongMonths (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toComponents fun <T> toComponents(action: (years: IntYears , months: IntMonths ) -> T): T fun <T> toComponents(action: (decades: IntDecades , years: IntYears , months: IntMonths ) -> T): T fun <T> toComponents(action: (centuries: IntCenturies , decades: IntDecades , years: IntYears , months: IntMonths ) -> T): T (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toLong Convert to a unit-less Long value. fun toLong(): Long (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toLongMonths Convert to LongMonths . fun toLongMonths(): LongMonths (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toString Convert to an ISO-8601 time interval representation. fun toString(): String (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) unaryMinus Negate the value. operator fun unaryMinus(): IntMonths Companion Object Properties Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MAX The largest supported value. val MAX: IntMonths (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MIN The smallest supported value. val MIN: IntMonths Extension Functions Name Summary (jvm) toJavaPeriod Convert to an equivalent Java Period . fun IntMonths .toJavaPeriod(): Period","title":"Index"},{"location":"api/core/io.islandtime.measures/-int-months/#intmonths","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline class IntMonths : Comparable < IntMonths > A number of months.","title":"IntMonths"},{"location":"api/core/io.islandtime.measures/-int-months/#constructors","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init> A number of months. <init>(value: Int )","title":"Constructors"},{"location":"api/core/io.islandtime.measures/-int-months/#properties","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) absoluteValue Returns the absolute value. val absoluteValue: IntMonths (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inCenturies Convert to whole centuries. val inCenturies: IntCenturies (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inDecades Convert to whole decades. val inDecades: IntDecades (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inYears Convert to whole years. val inYears: IntYears (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) value The underlying value. val value: Int","title":"Properties"},{"location":"api/core/io.islandtime.measures/-int-months/#functions","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) compareTo fun compareTo(other: IntMonths ): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) div Divide by a scalar value. operator fun div(scalar: Int ): IntMonths operator fun div(scalar: Long ): LongMonths (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isNegative Is this duration negative? fun isNegative(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isPositive Is this duration positive? fun isPositive(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isZero Is this duration zero? fun isZero(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) minus operator fun minus(months: IntMonths ): IntMonths operator fun minus(months: LongMonths ): LongMonths operator fun minus(years: IntYears ): IntMonths operator fun minus(years: LongYears ): LongMonths operator fun minus(decades: IntDecades ): IntMonths operator fun minus(decades: LongDecades ): LongMonths operator fun minus(centuries: IntCenturies ): IntMonths operator fun minus(centuries: LongCenturies ): LongMonths (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) plus operator fun plus(months: IntMonths ): IntMonths operator fun plus(months: LongMonths ): LongMonths operator fun plus(years: IntYears ): IntMonths operator fun plus(years: LongYears ): LongMonths operator fun plus(decades: IntDecades ): IntMonths operator fun plus(decades: LongDecades ): LongMonths operator fun plus(centuries: IntCenturies ): IntMonths operator fun plus(centuries: LongCenturies ): LongMonths (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) rem operator fun rem(scalar: Int ): IntMonths operator fun rem(scalar: Long ): LongMonths (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) times Multiply by a scalar value. operator fun times(scalar: Int ): IntMonths operator fun times(scalar: Long ): LongMonths (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toComponents fun <T> toComponents(action: (years: IntYears , months: IntMonths ) -> T): T fun <T> toComponents(action: (decades: IntDecades , years: IntYears , months: IntMonths ) -> T): T fun <T> toComponents(action: (centuries: IntCenturies , decades: IntDecades , years: IntYears , months: IntMonths ) -> T): T (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toLong Convert to a unit-less Long value. fun toLong(): Long (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toLongMonths Convert to LongMonths . fun toLongMonths(): LongMonths (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toString Convert to an ISO-8601 time interval representation. fun toString(): String (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) unaryMinus Negate the value. operator fun unaryMinus(): IntMonths","title":"Functions"},{"location":"api/core/io.islandtime.measures/-int-months/#companion-object-properties","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MAX The largest supported value. val MAX: IntMonths (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MIN The smallest supported value. val MIN: IntMonths","title":"Companion Object Properties"},{"location":"api/core/io.islandtime.measures/-int-months/#extension-functions","text":"Name Summary (jvm) toJavaPeriod Convert to an equivalent Java Period . fun IntMonths .toJavaPeriod(): Period","title":"Extension Functions"},{"location":"api/core/io.islandtime.measures/-int-months/-init-/","text":"core / io.islandtime.measures / IntMonths / <init> <init> (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init>(value: Int ) A number of months.","title":" init "},{"location":"api/core/io.islandtime.measures/-int-months/-init-/#init","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init>(value: Int ) A number of months.","title":"&lt;init&gt;"},{"location":"api/core/io.islandtime.measures/-int-months/-m-a-x/","text":"core / io.islandtime.measures / IntMonths / MAX MAX (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val MAX: IntMonths The largest supported value.","title":" m a x"},{"location":"api/core/io.islandtime.measures/-int-months/-m-a-x/#max","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val MAX: IntMonths The largest supported value.","title":"MAX"},{"location":"api/core/io.islandtime.measures/-int-months/-m-i-n/","text":"core / io.islandtime.measures / IntMonths / MIN MIN (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val MIN: IntMonths The smallest supported value.","title":" m i n"},{"location":"api/core/io.islandtime.measures/-int-months/-m-i-n/#min","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val MIN: IntMonths The smallest supported value.","title":"MIN"},{"location":"api/core/io.islandtime.measures/-int-months/absolute-value/","text":"core / io.islandtime.measures / IntMonths / absoluteValue absoluteValue (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val absoluteValue: IntMonths Returns the absolute value. Exceptions ArithmeticException - if overflow occurs","title":"Absolute value"},{"location":"api/core/io.islandtime.measures/-int-months/absolute-value/#absolutevalue","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val absoluteValue: IntMonths Returns the absolute value.","title":"absoluteValue"},{"location":"api/core/io.islandtime.measures/-int-months/absolute-value/#exceptions","text":"ArithmeticException - if overflow occurs","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-int-months/compare-to/","text":"core / io.islandtime.measures / IntMonths / compareTo compareTo (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun compareTo(other: IntMonths ): Int","title":"Compare to"},{"location":"api/core/io.islandtime.measures/-int-months/compare-to/#compareto","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun compareTo(other: IntMonths ): Int","title":"compareTo"},{"location":"api/core/io.islandtime.measures/-int-months/div/","text":"core / io.islandtime.measures / IntMonths / div div (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun div(scalar: Int ): IntMonths Divide by a scalar value. Exceptions ArithmeticException - if overflow occurs or the scalar is zero(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun div(scalar: Long ): LongMonths Divide by a scalar value. Exceptions ArithmeticException - if the scalar is zero","title":"Div"},{"location":"api/core/io.islandtime.measures/-int-months/div/#div","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun div(scalar: Int ): IntMonths Divide by a scalar value.","title":"div"},{"location":"api/core/io.islandtime.measures/-int-months/div/#exceptions","text":"ArithmeticException - if overflow occurs or the scalar is zero(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun div(scalar: Long ): LongMonths Divide by a scalar value.","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-int-months/div/#exceptions_1","text":"ArithmeticException - if the scalar is zero","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-int-months/in-centuries/","text":"core / io.islandtime.measures / IntMonths / inCenturies inCenturies (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inCenturies: IntCenturies Convert to whole centuries.","title":"In centuries"},{"location":"api/core/io.islandtime.measures/-int-months/in-centuries/#incenturies","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inCenturies: IntCenturies Convert to whole centuries.","title":"inCenturies"},{"location":"api/core/io.islandtime.measures/-int-months/in-decades/","text":"core / io.islandtime.measures / IntMonths / inDecades inDecades (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inDecades: IntDecades Convert to whole decades.","title":"In decades"},{"location":"api/core/io.islandtime.measures/-int-months/in-decades/#indecades","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inDecades: IntDecades Convert to whole decades.","title":"inDecades"},{"location":"api/core/io.islandtime.measures/-int-months/in-years/","text":"core / io.islandtime.measures / IntMonths / inYears inYears (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inYears: IntYears Convert to whole years.","title":"In years"},{"location":"api/core/io.islandtime.measures/-int-months/in-years/#inyears","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inYears: IntYears Convert to whole years.","title":"inYears"},{"location":"api/core/io.islandtime.measures/-int-months/is-negative/","text":"core / io.islandtime.measures / IntMonths / isNegative isNegative (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isNegative(): Boolean Is this duration negative?","title":"Is negative"},{"location":"api/core/io.islandtime.measures/-int-months/is-negative/#isnegative","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isNegative(): Boolean Is this duration negative?","title":"isNegative"},{"location":"api/core/io.islandtime.measures/-int-months/is-positive/","text":"core / io.islandtime.measures / IntMonths / isPositive isPositive (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isPositive(): Boolean Is this duration positive?","title":"Is positive"},{"location":"api/core/io.islandtime.measures/-int-months/is-positive/#ispositive","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isPositive(): Boolean Is this duration positive?","title":"isPositive"},{"location":"api/core/io.islandtime.measures/-int-months/is-zero/","text":"core / io.islandtime.measures / IntMonths / isZero isZero (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isZero(): Boolean Is this duration zero?","title":"Is zero"},{"location":"api/core/io.islandtime.measures/-int-months/is-zero/#iszero","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isZero(): Boolean Is this duration zero?","title":"isZero"},{"location":"api/core/io.islandtime.measures/-int-months/minus/","text":"core / io.islandtime.measures / IntMonths / minus minus (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun minus(months: IntMonths ): IntMonths operator fun minus(months: LongMonths ): LongMonths operator fun minus(years: IntYears ): IntMonths operator fun minus(years: LongYears ): LongMonths operator fun minus(decades: IntDecades ): IntMonths operator fun minus(decades: LongDecades ): LongMonths operator fun minus(centuries: IntCenturies ): IntMonths operator fun minus(centuries: LongCenturies ): LongMonths","title":"Minus"},{"location":"api/core/io.islandtime.measures/-int-months/minus/#minus","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun minus(months: IntMonths ): IntMonths operator fun minus(months: LongMonths ): LongMonths operator fun minus(years: IntYears ): IntMonths operator fun minus(years: LongYears ): LongMonths operator fun minus(decades: IntDecades ): IntMonths operator fun minus(decades: LongDecades ): LongMonths operator fun minus(centuries: IntCenturies ): IntMonths operator fun minus(centuries: LongCenturies ): LongMonths","title":"minus"},{"location":"api/core/io.islandtime.measures/-int-months/plus/","text":"core / io.islandtime.measures / IntMonths / plus plus (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun plus(months: IntMonths ): IntMonths operator fun plus(months: LongMonths ): LongMonths operator fun plus(years: IntYears ): IntMonths operator fun plus(years: LongYears ): LongMonths operator fun plus(decades: IntDecades ): IntMonths operator fun plus(decades: LongDecades ): LongMonths operator fun plus(centuries: IntCenturies ): IntMonths operator fun plus(centuries: LongCenturies ): LongMonths","title":"Plus"},{"location":"api/core/io.islandtime.measures/-int-months/plus/#plus","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun plus(months: IntMonths ): IntMonths operator fun plus(months: LongMonths ): LongMonths operator fun plus(years: IntYears ): IntMonths operator fun plus(years: LongYears ): LongMonths operator fun plus(decades: IntDecades ): IntMonths operator fun plus(decades: LongDecades ): LongMonths operator fun plus(centuries: IntCenturies ): IntMonths operator fun plus(centuries: LongCenturies ): LongMonths","title":"plus"},{"location":"api/core/io.islandtime.measures/-int-months/rem/","text":"core / io.islandtime.measures / IntMonths / rem rem (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun rem(scalar: Int ): IntMonths operator fun rem(scalar: Long ): LongMonths","title":"Rem"},{"location":"api/core/io.islandtime.measures/-int-months/rem/#rem","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun rem(scalar: Int ): IntMonths operator fun rem(scalar: Long ): LongMonths","title":"rem"},{"location":"api/core/io.islandtime.measures/-int-months/times/","text":"core / io.islandtime.measures / IntMonths / times times (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun times(scalar: Int ): IntMonths operator fun times(scalar: Long ): LongMonths Multiply by a scalar value. Exceptions ArithmeticException - if overflow occurs","title":"Times"},{"location":"api/core/io.islandtime.measures/-int-months/times/#times","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun times(scalar: Int ): IntMonths operator fun times(scalar: Long ): LongMonths Multiply by a scalar value.","title":"times"},{"location":"api/core/io.islandtime.measures/-int-months/times/#exceptions","text":"ArithmeticException - if overflow occurs","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-int-months/to-components/","text":"core / io.islandtime.measures / IntMonths / toComponents toComponents (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline fun <T> toComponents(action: (years: IntYears , months: IntMonths ) -> T): T inline fun <T> toComponents(action: (decades: IntDecades , years: IntYears , months: IntMonths ) -> T): T inline fun <T> toComponents(action: (centuries: IntCenturies , decades: IntDecades , years: IntYears , months: IntMonths ) -> T): T","title":"To components"},{"location":"api/core/io.islandtime.measures/-int-months/to-components/#tocomponents","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline fun <T> toComponents(action: (years: IntYears , months: IntMonths ) -> T): T inline fun <T> toComponents(action: (decades: IntDecades , years: IntYears , months: IntMonths ) -> T): T inline fun <T> toComponents(action: (centuries: IntCenturies , decades: IntDecades , years: IntYears , months: IntMonths ) -> T): T","title":"toComponents"},{"location":"api/core/io.islandtime.measures/-int-months/to-long-months/","text":"core / io.islandtime.measures / IntMonths / toLongMonths toLongMonths (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toLongMonths(): LongMonths Convert to LongMonths .","title":"To long months"},{"location":"api/core/io.islandtime.measures/-int-months/to-long-months/#tolongmonths","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toLongMonths(): LongMonths Convert to LongMonths .","title":"toLongMonths"},{"location":"api/core/io.islandtime.measures/-int-months/to-long/","text":"core / io.islandtime.measures / IntMonths / toLong toLong (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toLong(): Long Convert to a unit-less Long value.","title":"To long"},{"location":"api/core/io.islandtime.measures/-int-months/to-long/#tolong","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toLong(): Long Convert to a unit-less Long value.","title":"toLong"},{"location":"api/core/io.islandtime.measures/-int-months/to-string/","text":"core / io.islandtime.measures / IntMonths / toString toString (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toString(): String Convert to an ISO-8601 time interval representation.","title":"To string"},{"location":"api/core/io.islandtime.measures/-int-months/to-string/#tostring","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toString(): String Convert to an ISO-8601 time interval representation.","title":"toString"},{"location":"api/core/io.islandtime.measures/-int-months/unary-minus/","text":"core / io.islandtime.measures / IntMonths / unaryMinus unaryMinus (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun unaryMinus(): IntMonths Negate the value. Exceptions ArithmeticException - if overflow occurs","title":"Unary minus"},{"location":"api/core/io.islandtime.measures/-int-months/unary-minus/#unaryminus","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun unaryMinus(): IntMonths Negate the value.","title":"unaryMinus"},{"location":"api/core/io.islandtime.measures/-int-months/unary-minus/#exceptions","text":"ArithmeticException - if overflow occurs","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-int-months/value/","text":"core / io.islandtime.measures / IntMonths / value value (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val value: Int The underlying value.","title":"Value"},{"location":"api/core/io.islandtime.measures/-int-months/value/#value","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val value: Int The underlying value.","title":"value"},{"location":"api/core/io.islandtime.measures/-int-nanoseconds/","text":"core / io.islandtime.measures / IntNanoseconds IntNanoseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline class IntNanoseconds : Comparable < IntNanoseconds > A number of nanoseconds. Constructors Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init> A number of nanoseconds. <init>(value: Int ) Properties Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) absoluteValue Returns the absolute value. val absoluteValue: IntNanoseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inDays Convert to whole days. val inDays: IntDays (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inHours Convert to whole hours. val inHours: IntHours (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inMicroseconds Convert to whole microseconds. val inMicroseconds: IntMicroseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inMilliseconds Convert to whole milliseconds. val inMilliseconds: IntMilliseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inMinutes Convert to whole minutes. val inMinutes: IntMinutes (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inSeconds Convert to whole seconds. val inSeconds: IntSeconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) value The underlying value. val value: Int Functions Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) compareTo fun compareTo(other: IntNanoseconds ): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) div Divide by a scalar value. operator fun div(scalar: Int ): IntNanoseconds operator fun div(scalar: Long ): LongNanoseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isNegative Is this duration negative? fun isNegative(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isPositive Is this duration positive? fun isPositive(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isZero Is this duration zero? fun isZero(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) minus operator fun minus(nanoseconds: IntNanoseconds ): LongNanoseconds operator fun minus(nanoseconds: LongNanoseconds ): LongNanoseconds operator fun minus(microseconds: IntMicroseconds ): LongNanoseconds operator fun minus(microseconds: LongMicroseconds ): LongNanoseconds operator fun minus(milliseconds: IntMilliseconds ): LongNanoseconds operator fun minus(milliseconds: LongMilliseconds ): LongNanoseconds operator fun minus(seconds: IntSeconds ): LongNanoseconds operator fun minus(seconds: LongSeconds ): LongNanoseconds operator fun minus(minutes: IntMinutes ): LongNanoseconds operator fun minus(minutes: LongMinutes ): LongNanoseconds operator fun minus(hours: IntHours ): LongNanoseconds operator fun minus(hours: LongHours ): LongNanoseconds operator fun minus(days: IntDays ): LongNanoseconds operator fun minus(days: LongDays ): LongNanoseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) plus operator fun plus(nanoseconds: IntNanoseconds ): LongNanoseconds operator fun plus(nanoseconds: LongNanoseconds ): LongNanoseconds operator fun plus(microseconds: IntMicroseconds ): LongNanoseconds operator fun plus(microseconds: LongMicroseconds ): LongNanoseconds operator fun plus(milliseconds: IntMilliseconds ): LongNanoseconds operator fun plus(milliseconds: LongMilliseconds ): LongNanoseconds operator fun plus(seconds: IntSeconds ): LongNanoseconds operator fun plus(seconds: LongSeconds ): LongNanoseconds operator fun plus(minutes: IntMinutes ): LongNanoseconds operator fun plus(minutes: LongMinutes ): LongNanoseconds operator fun plus(hours: IntHours ): LongNanoseconds operator fun plus(hours: LongHours ): LongNanoseconds operator fun plus(days: IntDays ): LongNanoseconds operator fun plus(days: LongDays ): LongNanoseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) rem operator fun rem(scalar: Int ): IntNanoseconds operator fun rem(scalar: Long ): LongNanoseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) times Multiply by a scalar value. operator fun times(scalar: Int ): LongNanoseconds operator fun times(scalar: Long ): LongNanoseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toComponents fun <T> toComponents(action: (microseconds: IntMicroseconds , nanoseconds: IntNanoseconds ) -> T): T fun <T> toComponents(action: (milliseconds: IntMilliseconds , microseconds: IntMicroseconds , nanoseconds: IntNanoseconds ) -> T): T fun <T> toComponents(action: (seconds: IntSeconds , milliseconds: IntMilliseconds , microseconds: IntMicroseconds , nanoseconds: IntNanoseconds ) -> T): T fun <T> toComponents(action: (minutes: IntMinutes , seconds: IntSeconds , milliseconds: IntMilliseconds , microseconds: IntMicroseconds , nanoseconds: IntNanoseconds ) -> T): T fun <T> toComponents(action: (hours: IntHours , minutes: IntMinutes , seconds: IntSeconds , milliseconds: IntMilliseconds , microseconds: IntMicroseconds , nanoseconds: IntNanoseconds ) -> T): T fun <T> toComponents(action: (days: IntDays , hours: IntHours , minutes: IntMinutes , seconds: IntSeconds , milliseconds: IntMilliseconds , microseconds: IntMicroseconds , nanoseconds: IntNanoseconds ) -> T): T toKotlinDuration Convert to a kotlin.time.Duration .(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toKotlinDuration(): <ERROR CLASS> (jvm) fun toKotlinDuration(): Duration (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toLong Convert to a unit-less Long value. fun toLong(): Long (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toLongNanoseconds Convert to LongNanoseconds . fun toLongNanoseconds(): LongNanoseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toString Convert to an ISO-8601 time interval representation. fun toString(): String (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) unaryMinus Negate the value. operator fun unaryMinus(): IntNanoseconds Companion Object Properties Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MAX The largest supported value. val MAX: IntNanoseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MIN The smallest supported value. val MIN: IntNanoseconds Extension Functions Name Summary (jvm) toJavaDuration Convert to an equivalent Java Duration . fun IntNanoseconds .toJavaDuration(): Duration","title":"Index"},{"location":"api/core/io.islandtime.measures/-int-nanoseconds/#intnanoseconds","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline class IntNanoseconds : Comparable < IntNanoseconds > A number of nanoseconds.","title":"IntNanoseconds"},{"location":"api/core/io.islandtime.measures/-int-nanoseconds/#constructors","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init> A number of nanoseconds. <init>(value: Int )","title":"Constructors"},{"location":"api/core/io.islandtime.measures/-int-nanoseconds/#properties","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) absoluteValue Returns the absolute value. val absoluteValue: IntNanoseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inDays Convert to whole days. val inDays: IntDays (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inHours Convert to whole hours. val inHours: IntHours (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inMicroseconds Convert to whole microseconds. val inMicroseconds: IntMicroseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inMilliseconds Convert to whole milliseconds. val inMilliseconds: IntMilliseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inMinutes Convert to whole minutes. val inMinutes: IntMinutes (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inSeconds Convert to whole seconds. val inSeconds: IntSeconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) value The underlying value. val value: Int","title":"Properties"},{"location":"api/core/io.islandtime.measures/-int-nanoseconds/#functions","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) compareTo fun compareTo(other: IntNanoseconds ): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) div Divide by a scalar value. operator fun div(scalar: Int ): IntNanoseconds operator fun div(scalar: Long ): LongNanoseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isNegative Is this duration negative? fun isNegative(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isPositive Is this duration positive? fun isPositive(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isZero Is this duration zero? fun isZero(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) minus operator fun minus(nanoseconds: IntNanoseconds ): LongNanoseconds operator fun minus(nanoseconds: LongNanoseconds ): LongNanoseconds operator fun minus(microseconds: IntMicroseconds ): LongNanoseconds operator fun minus(microseconds: LongMicroseconds ): LongNanoseconds operator fun minus(milliseconds: IntMilliseconds ): LongNanoseconds operator fun minus(milliseconds: LongMilliseconds ): LongNanoseconds operator fun minus(seconds: IntSeconds ): LongNanoseconds operator fun minus(seconds: LongSeconds ): LongNanoseconds operator fun minus(minutes: IntMinutes ): LongNanoseconds operator fun minus(minutes: LongMinutes ): LongNanoseconds operator fun minus(hours: IntHours ): LongNanoseconds operator fun minus(hours: LongHours ): LongNanoseconds operator fun minus(days: IntDays ): LongNanoseconds operator fun minus(days: LongDays ): LongNanoseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) plus operator fun plus(nanoseconds: IntNanoseconds ): LongNanoseconds operator fun plus(nanoseconds: LongNanoseconds ): LongNanoseconds operator fun plus(microseconds: IntMicroseconds ): LongNanoseconds operator fun plus(microseconds: LongMicroseconds ): LongNanoseconds operator fun plus(milliseconds: IntMilliseconds ): LongNanoseconds operator fun plus(milliseconds: LongMilliseconds ): LongNanoseconds operator fun plus(seconds: IntSeconds ): LongNanoseconds operator fun plus(seconds: LongSeconds ): LongNanoseconds operator fun plus(minutes: IntMinutes ): LongNanoseconds operator fun plus(minutes: LongMinutes ): LongNanoseconds operator fun plus(hours: IntHours ): LongNanoseconds operator fun plus(hours: LongHours ): LongNanoseconds operator fun plus(days: IntDays ): LongNanoseconds operator fun plus(days: LongDays ): LongNanoseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) rem operator fun rem(scalar: Int ): IntNanoseconds operator fun rem(scalar: Long ): LongNanoseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) times Multiply by a scalar value. operator fun times(scalar: Int ): LongNanoseconds operator fun times(scalar: Long ): LongNanoseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toComponents fun <T> toComponents(action: (microseconds: IntMicroseconds , nanoseconds: IntNanoseconds ) -> T): T fun <T> toComponents(action: (milliseconds: IntMilliseconds , microseconds: IntMicroseconds , nanoseconds: IntNanoseconds ) -> T): T fun <T> toComponents(action: (seconds: IntSeconds , milliseconds: IntMilliseconds , microseconds: IntMicroseconds , nanoseconds: IntNanoseconds ) -> T): T fun <T> toComponents(action: (minutes: IntMinutes , seconds: IntSeconds , milliseconds: IntMilliseconds , microseconds: IntMicroseconds , nanoseconds: IntNanoseconds ) -> T): T fun <T> toComponents(action: (hours: IntHours , minutes: IntMinutes , seconds: IntSeconds , milliseconds: IntMilliseconds , microseconds: IntMicroseconds , nanoseconds: IntNanoseconds ) -> T): T fun <T> toComponents(action: (days: IntDays , hours: IntHours , minutes: IntMinutes , seconds: IntSeconds , milliseconds: IntMilliseconds , microseconds: IntMicroseconds , nanoseconds: IntNanoseconds ) -> T): T toKotlinDuration Convert to a kotlin.time.Duration .(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toKotlinDuration(): <ERROR CLASS> (jvm) fun toKotlinDuration(): Duration (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toLong Convert to a unit-less Long value. fun toLong(): Long (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toLongNanoseconds Convert to LongNanoseconds . fun toLongNanoseconds(): LongNanoseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toString Convert to an ISO-8601 time interval representation. fun toString(): String (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) unaryMinus Negate the value. operator fun unaryMinus(): IntNanoseconds","title":"Functions"},{"location":"api/core/io.islandtime.measures/-int-nanoseconds/#companion-object-properties","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MAX The largest supported value. val MAX: IntNanoseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MIN The smallest supported value. val MIN: IntNanoseconds","title":"Companion Object Properties"},{"location":"api/core/io.islandtime.measures/-int-nanoseconds/#extension-functions","text":"Name Summary (jvm) toJavaDuration Convert to an equivalent Java Duration . fun IntNanoseconds .toJavaDuration(): Duration","title":"Extension Functions"},{"location":"api/core/io.islandtime.measures/-int-nanoseconds/-init-/","text":"core / io.islandtime.measures / IntNanoseconds / <init> <init> (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init>(value: Int ) A number of nanoseconds.","title":" init "},{"location":"api/core/io.islandtime.measures/-int-nanoseconds/-init-/#init","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init>(value: Int ) A number of nanoseconds.","title":"&lt;init&gt;"},{"location":"api/core/io.islandtime.measures/-int-nanoseconds/-m-a-x/","text":"core / io.islandtime.measures / IntNanoseconds / MAX MAX (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val MAX: IntNanoseconds The largest supported value.","title":" m a x"},{"location":"api/core/io.islandtime.measures/-int-nanoseconds/-m-a-x/#max","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val MAX: IntNanoseconds The largest supported value.","title":"MAX"},{"location":"api/core/io.islandtime.measures/-int-nanoseconds/-m-i-n/","text":"core / io.islandtime.measures / IntNanoseconds / MIN MIN (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val MIN: IntNanoseconds The smallest supported value.","title":" m i n"},{"location":"api/core/io.islandtime.measures/-int-nanoseconds/-m-i-n/#min","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val MIN: IntNanoseconds The smallest supported value.","title":"MIN"},{"location":"api/core/io.islandtime.measures/-int-nanoseconds/absolute-value/","text":"core / io.islandtime.measures / IntNanoseconds / absoluteValue absoluteValue (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val absoluteValue: IntNanoseconds Returns the absolute value. Exceptions ArithmeticException - if overflow occurs","title":"Absolute value"},{"location":"api/core/io.islandtime.measures/-int-nanoseconds/absolute-value/#absolutevalue","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val absoluteValue: IntNanoseconds Returns the absolute value.","title":"absoluteValue"},{"location":"api/core/io.islandtime.measures/-int-nanoseconds/absolute-value/#exceptions","text":"ArithmeticException - if overflow occurs","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-int-nanoseconds/compare-to/","text":"core / io.islandtime.measures / IntNanoseconds / compareTo compareTo (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun compareTo(other: IntNanoseconds ): Int","title":"Compare to"},{"location":"api/core/io.islandtime.measures/-int-nanoseconds/compare-to/#compareto","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun compareTo(other: IntNanoseconds ): Int","title":"compareTo"},{"location":"api/core/io.islandtime.measures/-int-nanoseconds/div/","text":"core / io.islandtime.measures / IntNanoseconds / div div (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun div(scalar: Int ): IntNanoseconds Divide by a scalar value. Exceptions ArithmeticException - if overflow occurs or the scalar is zero(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun div(scalar: Long ): LongNanoseconds Divide by a scalar value. Exceptions ArithmeticException - if the scalar is zero","title":"Div"},{"location":"api/core/io.islandtime.measures/-int-nanoseconds/div/#div","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun div(scalar: Int ): IntNanoseconds Divide by a scalar value.","title":"div"},{"location":"api/core/io.islandtime.measures/-int-nanoseconds/div/#exceptions","text":"ArithmeticException - if overflow occurs or the scalar is zero(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun div(scalar: Long ): LongNanoseconds Divide by a scalar value.","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-int-nanoseconds/div/#exceptions_1","text":"ArithmeticException - if the scalar is zero","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-int-nanoseconds/in-days/","text":"core / io.islandtime.measures / IntNanoseconds / inDays inDays (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inDays: IntDays Convert to whole days.","title":"In days"},{"location":"api/core/io.islandtime.measures/-int-nanoseconds/in-days/#indays","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inDays: IntDays Convert to whole days.","title":"inDays"},{"location":"api/core/io.islandtime.measures/-int-nanoseconds/in-hours/","text":"core / io.islandtime.measures / IntNanoseconds / inHours inHours (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inHours: IntHours Convert to whole hours.","title":"In hours"},{"location":"api/core/io.islandtime.measures/-int-nanoseconds/in-hours/#inhours","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inHours: IntHours Convert to whole hours.","title":"inHours"},{"location":"api/core/io.islandtime.measures/-int-nanoseconds/in-microseconds/","text":"core / io.islandtime.measures / IntNanoseconds / inMicroseconds inMicroseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inMicroseconds: IntMicroseconds Convert to whole microseconds.","title":"In microseconds"},{"location":"api/core/io.islandtime.measures/-int-nanoseconds/in-microseconds/#inmicroseconds","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inMicroseconds: IntMicroseconds Convert to whole microseconds.","title":"inMicroseconds"},{"location":"api/core/io.islandtime.measures/-int-nanoseconds/in-milliseconds/","text":"core / io.islandtime.measures / IntNanoseconds / inMilliseconds inMilliseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inMilliseconds: IntMilliseconds Convert to whole milliseconds.","title":"In milliseconds"},{"location":"api/core/io.islandtime.measures/-int-nanoseconds/in-milliseconds/#inmilliseconds","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inMilliseconds: IntMilliseconds Convert to whole milliseconds.","title":"inMilliseconds"},{"location":"api/core/io.islandtime.measures/-int-nanoseconds/in-minutes/","text":"core / io.islandtime.measures / IntNanoseconds / inMinutes inMinutes (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inMinutes: IntMinutes Convert to whole minutes.","title":"In minutes"},{"location":"api/core/io.islandtime.measures/-int-nanoseconds/in-minutes/#inminutes","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inMinutes: IntMinutes Convert to whole minutes.","title":"inMinutes"},{"location":"api/core/io.islandtime.measures/-int-nanoseconds/in-seconds/","text":"core / io.islandtime.measures / IntNanoseconds / inSeconds inSeconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inSeconds: IntSeconds Convert to whole seconds.","title":"In seconds"},{"location":"api/core/io.islandtime.measures/-int-nanoseconds/in-seconds/#inseconds","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inSeconds: IntSeconds Convert to whole seconds.","title":"inSeconds"},{"location":"api/core/io.islandtime.measures/-int-nanoseconds/is-negative/","text":"core / io.islandtime.measures / IntNanoseconds / isNegative isNegative (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isNegative(): Boolean Is this duration negative?","title":"Is negative"},{"location":"api/core/io.islandtime.measures/-int-nanoseconds/is-negative/#isnegative","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isNegative(): Boolean Is this duration negative?","title":"isNegative"},{"location":"api/core/io.islandtime.measures/-int-nanoseconds/is-positive/","text":"core / io.islandtime.measures / IntNanoseconds / isPositive isPositive (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isPositive(): Boolean Is this duration positive?","title":"Is positive"},{"location":"api/core/io.islandtime.measures/-int-nanoseconds/is-positive/#ispositive","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isPositive(): Boolean Is this duration positive?","title":"isPositive"},{"location":"api/core/io.islandtime.measures/-int-nanoseconds/is-zero/","text":"core / io.islandtime.measures / IntNanoseconds / isZero isZero (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isZero(): Boolean Is this duration zero?","title":"Is zero"},{"location":"api/core/io.islandtime.measures/-int-nanoseconds/is-zero/#iszero","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isZero(): Boolean Is this duration zero?","title":"isZero"},{"location":"api/core/io.islandtime.measures/-int-nanoseconds/minus/","text":"core / io.islandtime.measures / IntNanoseconds / minus minus (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun minus(nanoseconds: IntNanoseconds ): LongNanoseconds operator fun minus(nanoseconds: LongNanoseconds ): LongNanoseconds operator fun minus(microseconds: IntMicroseconds ): LongNanoseconds operator fun minus(microseconds: LongMicroseconds ): LongNanoseconds operator fun minus(milliseconds: IntMilliseconds ): LongNanoseconds operator fun minus(milliseconds: LongMilliseconds ): LongNanoseconds operator fun minus(seconds: IntSeconds ): LongNanoseconds operator fun minus(seconds: LongSeconds ): LongNanoseconds operator fun minus(minutes: IntMinutes ): LongNanoseconds operator fun minus(minutes: LongMinutes ): LongNanoseconds operator fun minus(hours: IntHours ): LongNanoseconds operator fun minus(hours: LongHours ): LongNanoseconds operator fun minus(days: IntDays ): LongNanoseconds operator fun minus(days: LongDays ): LongNanoseconds","title":"Minus"},{"location":"api/core/io.islandtime.measures/-int-nanoseconds/minus/#minus","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun minus(nanoseconds: IntNanoseconds ): LongNanoseconds operator fun minus(nanoseconds: LongNanoseconds ): LongNanoseconds operator fun minus(microseconds: IntMicroseconds ): LongNanoseconds operator fun minus(microseconds: LongMicroseconds ): LongNanoseconds operator fun minus(milliseconds: IntMilliseconds ): LongNanoseconds operator fun minus(milliseconds: LongMilliseconds ): LongNanoseconds operator fun minus(seconds: IntSeconds ): LongNanoseconds operator fun minus(seconds: LongSeconds ): LongNanoseconds operator fun minus(minutes: IntMinutes ): LongNanoseconds operator fun minus(minutes: LongMinutes ): LongNanoseconds operator fun minus(hours: IntHours ): LongNanoseconds operator fun minus(hours: LongHours ): LongNanoseconds operator fun minus(days: IntDays ): LongNanoseconds operator fun minus(days: LongDays ): LongNanoseconds","title":"minus"},{"location":"api/core/io.islandtime.measures/-int-nanoseconds/plus/","text":"core / io.islandtime.measures / IntNanoseconds / plus plus (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun plus(nanoseconds: IntNanoseconds ): LongNanoseconds operator fun plus(nanoseconds: LongNanoseconds ): LongNanoseconds operator fun plus(microseconds: IntMicroseconds ): LongNanoseconds operator fun plus(microseconds: LongMicroseconds ): LongNanoseconds operator fun plus(milliseconds: IntMilliseconds ): LongNanoseconds operator fun plus(milliseconds: LongMilliseconds ): LongNanoseconds operator fun plus(seconds: IntSeconds ): LongNanoseconds operator fun plus(seconds: LongSeconds ): LongNanoseconds operator fun plus(minutes: IntMinutes ): LongNanoseconds operator fun plus(minutes: LongMinutes ): LongNanoseconds operator fun plus(hours: IntHours ): LongNanoseconds operator fun plus(hours: LongHours ): LongNanoseconds operator fun plus(days: IntDays ): LongNanoseconds operator fun plus(days: LongDays ): LongNanoseconds","title":"Plus"},{"location":"api/core/io.islandtime.measures/-int-nanoseconds/plus/#plus","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun plus(nanoseconds: IntNanoseconds ): LongNanoseconds operator fun plus(nanoseconds: LongNanoseconds ): LongNanoseconds operator fun plus(microseconds: IntMicroseconds ): LongNanoseconds operator fun plus(microseconds: LongMicroseconds ): LongNanoseconds operator fun plus(milliseconds: IntMilliseconds ): LongNanoseconds operator fun plus(milliseconds: LongMilliseconds ): LongNanoseconds operator fun plus(seconds: IntSeconds ): LongNanoseconds operator fun plus(seconds: LongSeconds ): LongNanoseconds operator fun plus(minutes: IntMinutes ): LongNanoseconds operator fun plus(minutes: LongMinutes ): LongNanoseconds operator fun plus(hours: IntHours ): LongNanoseconds operator fun plus(hours: LongHours ): LongNanoseconds operator fun plus(days: IntDays ): LongNanoseconds operator fun plus(days: LongDays ): LongNanoseconds","title":"plus"},{"location":"api/core/io.islandtime.measures/-int-nanoseconds/rem/","text":"core / io.islandtime.measures / IntNanoseconds / rem rem (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun rem(scalar: Int ): IntNanoseconds operator fun rem(scalar: Long ): LongNanoseconds","title":"Rem"},{"location":"api/core/io.islandtime.measures/-int-nanoseconds/rem/#rem","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun rem(scalar: Int ): IntNanoseconds operator fun rem(scalar: Long ): LongNanoseconds","title":"rem"},{"location":"api/core/io.islandtime.measures/-int-nanoseconds/times/","text":"core / io.islandtime.measures / IntNanoseconds / times times (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun times(scalar: Int ): LongNanoseconds operator fun times(scalar: Long ): LongNanoseconds Multiply by a scalar value. Exceptions ArithmeticException - if overflow occurs","title":"Times"},{"location":"api/core/io.islandtime.measures/-int-nanoseconds/times/#times","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun times(scalar: Int ): LongNanoseconds operator fun times(scalar: Long ): LongNanoseconds Multiply by a scalar value.","title":"times"},{"location":"api/core/io.islandtime.measures/-int-nanoseconds/times/#exceptions","text":"ArithmeticException - if overflow occurs","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-int-nanoseconds/to-components/","text":"core / io.islandtime.measures / IntNanoseconds / toComponents toComponents (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline fun <T> toComponents(action: (microseconds: IntMicroseconds , nanoseconds: IntNanoseconds ) -> T): T inline fun <T> toComponents(action: (milliseconds: IntMilliseconds , microseconds: IntMicroseconds , nanoseconds: IntNanoseconds ) -> T): T inline fun <T> toComponents(action: (seconds: IntSeconds , milliseconds: IntMilliseconds , microseconds: IntMicroseconds , nanoseconds: IntNanoseconds ) -> T): T inline fun <T> toComponents(action: (minutes: IntMinutes , seconds: IntSeconds , milliseconds: IntMilliseconds , microseconds: IntMicroseconds , nanoseconds: IntNanoseconds ) -> T): T inline fun <T> toComponents(action: (hours: IntHours , minutes: IntMinutes , seconds: IntSeconds , milliseconds: IntMilliseconds , microseconds: IntMicroseconds , nanoseconds: IntNanoseconds ) -> T): T inline fun <T> toComponents(action: (days: IntDays , hours: IntHours , minutes: IntMinutes , seconds: IntSeconds , milliseconds: IntMilliseconds , microseconds: IntMicroseconds , nanoseconds: IntNanoseconds ) -> T): T","title":"To components"},{"location":"api/core/io.islandtime.measures/-int-nanoseconds/to-components/#tocomponents","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline fun <T> toComponents(action: (microseconds: IntMicroseconds , nanoseconds: IntNanoseconds ) -> T): T inline fun <T> toComponents(action: (milliseconds: IntMilliseconds , microseconds: IntMicroseconds , nanoseconds: IntNanoseconds ) -> T): T inline fun <T> toComponents(action: (seconds: IntSeconds , milliseconds: IntMilliseconds , microseconds: IntMicroseconds , nanoseconds: IntNanoseconds ) -> T): T inline fun <T> toComponents(action: (minutes: IntMinutes , seconds: IntSeconds , milliseconds: IntMilliseconds , microseconds: IntMicroseconds , nanoseconds: IntNanoseconds ) -> T): T inline fun <T> toComponents(action: (hours: IntHours , minutes: IntMinutes , seconds: IntSeconds , milliseconds: IntMilliseconds , microseconds: IntMicroseconds , nanoseconds: IntNanoseconds ) -> T): T inline fun <T> toComponents(action: (days: IntDays , hours: IntHours , minutes: IntMinutes , seconds: IntSeconds , milliseconds: IntMilliseconds , microseconds: IntMicroseconds , nanoseconds: IntNanoseconds ) -> T): T","title":"toComponents"},{"location":"api/core/io.islandtime.measures/-int-nanoseconds/to-kotlin-duration/","text":"core / io.islandtime.measures / IntNanoseconds / toKotlinDuration toKotlinDuration (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toKotlinDuration(): <ERROR CLASS> (jvm) @ExperimentalTime fun toKotlinDuration(): Duration (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) Convert to a kotlin.time.Duration . (jvm) Convert to a kotlin.time.Duration .","title":"To kotlin duration"},{"location":"api/core/io.islandtime.measures/-int-nanoseconds/to-kotlin-duration/#tokotlinduration","text":"(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toKotlinDuration(): <ERROR CLASS> (jvm) @ExperimentalTime fun toKotlinDuration(): Duration (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) Convert to a kotlin.time.Duration . (jvm) Convert to a kotlin.time.Duration .","title":"toKotlinDuration"},{"location":"api/core/io.islandtime.measures/-int-nanoseconds/to-long-nanoseconds/","text":"core / io.islandtime.measures / IntNanoseconds / toLongNanoseconds toLongNanoseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toLongNanoseconds(): LongNanoseconds Convert to LongNanoseconds .","title":"To long nanoseconds"},{"location":"api/core/io.islandtime.measures/-int-nanoseconds/to-long-nanoseconds/#tolongnanoseconds","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toLongNanoseconds(): LongNanoseconds Convert to LongNanoseconds .","title":"toLongNanoseconds"},{"location":"api/core/io.islandtime.measures/-int-nanoseconds/to-long/","text":"core / io.islandtime.measures / IntNanoseconds / toLong toLong (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toLong(): Long Convert to a unit-less Long value.","title":"To long"},{"location":"api/core/io.islandtime.measures/-int-nanoseconds/to-long/#tolong","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toLong(): Long Convert to a unit-less Long value.","title":"toLong"},{"location":"api/core/io.islandtime.measures/-int-nanoseconds/to-string/","text":"core / io.islandtime.measures / IntNanoseconds / toString toString (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toString(): String Convert to an ISO-8601 time interval representation.","title":"To string"},{"location":"api/core/io.islandtime.measures/-int-nanoseconds/to-string/#tostring","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toString(): String Convert to an ISO-8601 time interval representation.","title":"toString"},{"location":"api/core/io.islandtime.measures/-int-nanoseconds/unary-minus/","text":"core / io.islandtime.measures / IntNanoseconds / unaryMinus unaryMinus (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun unaryMinus(): IntNanoseconds Negate the value. Exceptions ArithmeticException - if overflow occurs","title":"Unary minus"},{"location":"api/core/io.islandtime.measures/-int-nanoseconds/unary-minus/#unaryminus","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun unaryMinus(): IntNanoseconds Negate the value.","title":"unaryMinus"},{"location":"api/core/io.islandtime.measures/-int-nanoseconds/unary-minus/#exceptions","text":"ArithmeticException - if overflow occurs","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-int-nanoseconds/value/","text":"core / io.islandtime.measures / IntNanoseconds / value value (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val value: Int The underlying value.","title":"Value"},{"location":"api/core/io.islandtime.measures/-int-nanoseconds/value/#value","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val value: Int The underlying value.","title":"value"},{"location":"api/core/io.islandtime.measures/-int-seconds/","text":"core / io.islandtime.measures / IntSeconds IntSeconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline class IntSeconds : Comparable < IntSeconds > A number of seconds. Constructors Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init> A number of seconds. <init>(value: Int ) Properties Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) absoluteValue Returns the absolute value. val absoluteValue: IntSeconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inDays Convert to whole days. val inDays: IntDays (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inHours Convert to whole hours. val inHours: IntHours (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inMicroseconds Convert to microseconds. val inMicroseconds: LongMicroseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inMilliseconds Convert to milliseconds. val inMilliseconds: LongMilliseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inMinutes Convert to whole minutes. val inMinutes: IntMinutes (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inNanoseconds Convert to nanoseconds. val inNanoseconds: LongNanoseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) value The underlying value. val value: Int Functions Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) compareTo fun compareTo(other: IntSeconds ): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) div Divide by a scalar value. operator fun div(scalar: Int ): IntSeconds operator fun div(scalar: Long ): LongSeconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isNegative Is this duration negative? fun isNegative(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isPositive Is this duration positive? fun isPositive(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isZero Is this duration zero? fun isZero(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) minus operator fun minus(nanoseconds: IntNanoseconds ): LongNanoseconds operator fun minus(nanoseconds: LongNanoseconds ): LongNanoseconds operator fun minus(microseconds: IntMicroseconds ): LongMicroseconds operator fun minus(microseconds: LongMicroseconds ): LongMicroseconds operator fun minus(milliseconds: IntMilliseconds ): LongMilliseconds operator fun minus(milliseconds: LongMilliseconds ): LongMilliseconds operator fun minus(seconds: IntSeconds ): IntSeconds operator fun minus(seconds: LongSeconds ): LongSeconds operator fun minus(minutes: IntMinutes ): IntSeconds operator fun minus(minutes: LongMinutes ): LongSeconds operator fun minus(hours: IntHours ): IntSeconds operator fun minus(hours: LongHours ): LongSeconds operator fun minus(days: IntDays ): IntSeconds operator fun minus(days: LongDays ): LongSeconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) plus operator fun plus(nanoseconds: IntNanoseconds ): LongNanoseconds operator fun plus(nanoseconds: LongNanoseconds ): LongNanoseconds operator fun plus(microseconds: IntMicroseconds ): LongMicroseconds operator fun plus(microseconds: LongMicroseconds ): LongMicroseconds operator fun plus(milliseconds: IntMilliseconds ): LongMilliseconds operator fun plus(milliseconds: LongMilliseconds ): LongMilliseconds operator fun plus(seconds: IntSeconds ): IntSeconds operator fun plus(seconds: LongSeconds ): LongSeconds operator fun plus(minutes: IntMinutes ): IntSeconds operator fun plus(minutes: LongMinutes ): LongSeconds operator fun plus(hours: IntHours ): IntSeconds operator fun plus(hours: LongHours ): LongSeconds operator fun plus(days: IntDays ): IntSeconds operator fun plus(days: LongDays ): LongSeconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) rem operator fun rem(scalar: Int ): IntSeconds operator fun rem(scalar: Long ): LongSeconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) times Multiply by a scalar value. operator fun times(scalar: Int ): IntSeconds operator fun times(scalar: Long ): LongSeconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toComponents fun <T> toComponents(action: (minutes: IntMinutes , seconds: IntSeconds ) -> T): T fun <T> toComponents(action: (hours: IntHours , minutes: IntMinutes , seconds: IntSeconds ) -> T): T fun <T> toComponents(action: (days: IntDays , hours: IntHours , minutes: IntMinutes , seconds: IntSeconds ) -> T): T toKotlinDuration Convert to a kotlin.time.Duration .(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toKotlinDuration(): <ERROR CLASS> (jvm) fun toKotlinDuration(): Duration (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toLong Convert to a unit-less Long value. fun toLong(): Long (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toLongSeconds Convert to LongSeconds . fun toLongSeconds(): LongSeconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toString Convert to an ISO-8601 time interval representation. fun toString(): String (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) unaryMinus Negate the value. operator fun unaryMinus(): IntSeconds Companion Object Properties Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MAX The largest supported value. val MAX: IntSeconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MIN The smallest supported value. val MIN: IntSeconds Extension Functions Name Summary (jvm) toJavaDuration Convert to an equivalent Java Duration . fun IntSeconds .toJavaDuration(): Duration","title":"Index"},{"location":"api/core/io.islandtime.measures/-int-seconds/#intseconds","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline class IntSeconds : Comparable < IntSeconds > A number of seconds.","title":"IntSeconds"},{"location":"api/core/io.islandtime.measures/-int-seconds/#constructors","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init> A number of seconds. <init>(value: Int )","title":"Constructors"},{"location":"api/core/io.islandtime.measures/-int-seconds/#properties","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) absoluteValue Returns the absolute value. val absoluteValue: IntSeconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inDays Convert to whole days. val inDays: IntDays (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inHours Convert to whole hours. val inHours: IntHours (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inMicroseconds Convert to microseconds. val inMicroseconds: LongMicroseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inMilliseconds Convert to milliseconds. val inMilliseconds: LongMilliseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inMinutes Convert to whole minutes. val inMinutes: IntMinutes (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inNanoseconds Convert to nanoseconds. val inNanoseconds: LongNanoseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) value The underlying value. val value: Int","title":"Properties"},{"location":"api/core/io.islandtime.measures/-int-seconds/#functions","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) compareTo fun compareTo(other: IntSeconds ): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) div Divide by a scalar value. operator fun div(scalar: Int ): IntSeconds operator fun div(scalar: Long ): LongSeconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isNegative Is this duration negative? fun isNegative(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isPositive Is this duration positive? fun isPositive(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isZero Is this duration zero? fun isZero(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) minus operator fun minus(nanoseconds: IntNanoseconds ): LongNanoseconds operator fun minus(nanoseconds: LongNanoseconds ): LongNanoseconds operator fun minus(microseconds: IntMicroseconds ): LongMicroseconds operator fun minus(microseconds: LongMicroseconds ): LongMicroseconds operator fun minus(milliseconds: IntMilliseconds ): LongMilliseconds operator fun minus(milliseconds: LongMilliseconds ): LongMilliseconds operator fun minus(seconds: IntSeconds ): IntSeconds operator fun minus(seconds: LongSeconds ): LongSeconds operator fun minus(minutes: IntMinutes ): IntSeconds operator fun minus(minutes: LongMinutes ): LongSeconds operator fun minus(hours: IntHours ): IntSeconds operator fun minus(hours: LongHours ): LongSeconds operator fun minus(days: IntDays ): IntSeconds operator fun minus(days: LongDays ): LongSeconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) plus operator fun plus(nanoseconds: IntNanoseconds ): LongNanoseconds operator fun plus(nanoseconds: LongNanoseconds ): LongNanoseconds operator fun plus(microseconds: IntMicroseconds ): LongMicroseconds operator fun plus(microseconds: LongMicroseconds ): LongMicroseconds operator fun plus(milliseconds: IntMilliseconds ): LongMilliseconds operator fun plus(milliseconds: LongMilliseconds ): LongMilliseconds operator fun plus(seconds: IntSeconds ): IntSeconds operator fun plus(seconds: LongSeconds ): LongSeconds operator fun plus(minutes: IntMinutes ): IntSeconds operator fun plus(minutes: LongMinutes ): LongSeconds operator fun plus(hours: IntHours ): IntSeconds operator fun plus(hours: LongHours ): LongSeconds operator fun plus(days: IntDays ): IntSeconds operator fun plus(days: LongDays ): LongSeconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) rem operator fun rem(scalar: Int ): IntSeconds operator fun rem(scalar: Long ): LongSeconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) times Multiply by a scalar value. operator fun times(scalar: Int ): IntSeconds operator fun times(scalar: Long ): LongSeconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toComponents fun <T> toComponents(action: (minutes: IntMinutes , seconds: IntSeconds ) -> T): T fun <T> toComponents(action: (hours: IntHours , minutes: IntMinutes , seconds: IntSeconds ) -> T): T fun <T> toComponents(action: (days: IntDays , hours: IntHours , minutes: IntMinutes , seconds: IntSeconds ) -> T): T toKotlinDuration Convert to a kotlin.time.Duration .(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toKotlinDuration(): <ERROR CLASS> (jvm) fun toKotlinDuration(): Duration (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toLong Convert to a unit-less Long value. fun toLong(): Long (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toLongSeconds Convert to LongSeconds . fun toLongSeconds(): LongSeconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toString Convert to an ISO-8601 time interval representation. fun toString(): String (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) unaryMinus Negate the value. operator fun unaryMinus(): IntSeconds","title":"Functions"},{"location":"api/core/io.islandtime.measures/-int-seconds/#companion-object-properties","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MAX The largest supported value. val MAX: IntSeconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MIN The smallest supported value. val MIN: IntSeconds","title":"Companion Object Properties"},{"location":"api/core/io.islandtime.measures/-int-seconds/#extension-functions","text":"Name Summary (jvm) toJavaDuration Convert to an equivalent Java Duration . fun IntSeconds .toJavaDuration(): Duration","title":"Extension Functions"},{"location":"api/core/io.islandtime.measures/-int-seconds/-init-/","text":"core / io.islandtime.measures / IntSeconds / <init> <init> (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init>(value: Int ) A number of seconds.","title":" init "},{"location":"api/core/io.islandtime.measures/-int-seconds/-init-/#init","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init>(value: Int ) A number of seconds.","title":"&lt;init&gt;"},{"location":"api/core/io.islandtime.measures/-int-seconds/-m-a-x/","text":"core / io.islandtime.measures / IntSeconds / MAX MAX (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val MAX: IntSeconds The largest supported value.","title":" m a x"},{"location":"api/core/io.islandtime.measures/-int-seconds/-m-a-x/#max","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val MAX: IntSeconds The largest supported value.","title":"MAX"},{"location":"api/core/io.islandtime.measures/-int-seconds/-m-i-n/","text":"core / io.islandtime.measures / IntSeconds / MIN MIN (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val MIN: IntSeconds The smallest supported value.","title":" m i n"},{"location":"api/core/io.islandtime.measures/-int-seconds/-m-i-n/#min","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val MIN: IntSeconds The smallest supported value.","title":"MIN"},{"location":"api/core/io.islandtime.measures/-int-seconds/absolute-value/","text":"core / io.islandtime.measures / IntSeconds / absoluteValue absoluteValue (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val absoluteValue: IntSeconds Returns the absolute value. Exceptions ArithmeticException - if overflow occurs","title":"Absolute value"},{"location":"api/core/io.islandtime.measures/-int-seconds/absolute-value/#absolutevalue","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val absoluteValue: IntSeconds Returns the absolute value.","title":"absoluteValue"},{"location":"api/core/io.islandtime.measures/-int-seconds/absolute-value/#exceptions","text":"ArithmeticException - if overflow occurs","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-int-seconds/compare-to/","text":"core / io.islandtime.measures / IntSeconds / compareTo compareTo (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun compareTo(other: IntSeconds ): Int","title":"Compare to"},{"location":"api/core/io.islandtime.measures/-int-seconds/compare-to/#compareto","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun compareTo(other: IntSeconds ): Int","title":"compareTo"},{"location":"api/core/io.islandtime.measures/-int-seconds/div/","text":"core / io.islandtime.measures / IntSeconds / div div (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun div(scalar: Int ): IntSeconds Divide by a scalar value. Exceptions ArithmeticException - if overflow occurs or the scalar is zero(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun div(scalar: Long ): LongSeconds Divide by a scalar value. Exceptions ArithmeticException - if the scalar is zero","title":"Div"},{"location":"api/core/io.islandtime.measures/-int-seconds/div/#div","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun div(scalar: Int ): IntSeconds Divide by a scalar value.","title":"div"},{"location":"api/core/io.islandtime.measures/-int-seconds/div/#exceptions","text":"ArithmeticException - if overflow occurs or the scalar is zero(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun div(scalar: Long ): LongSeconds Divide by a scalar value.","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-int-seconds/div/#exceptions_1","text":"ArithmeticException - if the scalar is zero","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-int-seconds/in-days/","text":"core / io.islandtime.measures / IntSeconds / inDays inDays (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inDays: IntDays Convert to whole days.","title":"In days"},{"location":"api/core/io.islandtime.measures/-int-seconds/in-days/#indays","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inDays: IntDays Convert to whole days.","title":"inDays"},{"location":"api/core/io.islandtime.measures/-int-seconds/in-hours/","text":"core / io.islandtime.measures / IntSeconds / inHours inHours (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inHours: IntHours Convert to whole hours.","title":"In hours"},{"location":"api/core/io.islandtime.measures/-int-seconds/in-hours/#inhours","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inHours: IntHours Convert to whole hours.","title":"inHours"},{"location":"api/core/io.islandtime.measures/-int-seconds/in-microseconds/","text":"core / io.islandtime.measures / IntSeconds / inMicroseconds inMicroseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inMicroseconds: LongMicroseconds Convert to microseconds.","title":"In microseconds"},{"location":"api/core/io.islandtime.measures/-int-seconds/in-microseconds/#inmicroseconds","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inMicroseconds: LongMicroseconds Convert to microseconds.","title":"inMicroseconds"},{"location":"api/core/io.islandtime.measures/-int-seconds/in-milliseconds/","text":"core / io.islandtime.measures / IntSeconds / inMilliseconds inMilliseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inMilliseconds: LongMilliseconds Convert to milliseconds.","title":"In milliseconds"},{"location":"api/core/io.islandtime.measures/-int-seconds/in-milliseconds/#inmilliseconds","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inMilliseconds: LongMilliseconds Convert to milliseconds.","title":"inMilliseconds"},{"location":"api/core/io.islandtime.measures/-int-seconds/in-minutes/","text":"core / io.islandtime.measures / IntSeconds / inMinutes inMinutes (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inMinutes: IntMinutes Convert to whole minutes.","title":"In minutes"},{"location":"api/core/io.islandtime.measures/-int-seconds/in-minutes/#inminutes","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inMinutes: IntMinutes Convert to whole minutes.","title":"inMinutes"},{"location":"api/core/io.islandtime.measures/-int-seconds/in-nanoseconds/","text":"core / io.islandtime.measures / IntSeconds / inNanoseconds inNanoseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inNanoseconds: LongNanoseconds Convert to nanoseconds.","title":"In nanoseconds"},{"location":"api/core/io.islandtime.measures/-int-seconds/in-nanoseconds/#innanoseconds","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inNanoseconds: LongNanoseconds Convert to nanoseconds.","title":"inNanoseconds"},{"location":"api/core/io.islandtime.measures/-int-seconds/is-negative/","text":"core / io.islandtime.measures / IntSeconds / isNegative isNegative (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isNegative(): Boolean Is this duration negative?","title":"Is negative"},{"location":"api/core/io.islandtime.measures/-int-seconds/is-negative/#isnegative","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isNegative(): Boolean Is this duration negative?","title":"isNegative"},{"location":"api/core/io.islandtime.measures/-int-seconds/is-positive/","text":"core / io.islandtime.measures / IntSeconds / isPositive isPositive (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isPositive(): Boolean Is this duration positive?","title":"Is positive"},{"location":"api/core/io.islandtime.measures/-int-seconds/is-positive/#ispositive","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isPositive(): Boolean Is this duration positive?","title":"isPositive"},{"location":"api/core/io.islandtime.measures/-int-seconds/is-zero/","text":"core / io.islandtime.measures / IntSeconds / isZero isZero (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isZero(): Boolean Is this duration zero?","title":"Is zero"},{"location":"api/core/io.islandtime.measures/-int-seconds/is-zero/#iszero","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isZero(): Boolean Is this duration zero?","title":"isZero"},{"location":"api/core/io.islandtime.measures/-int-seconds/minus/","text":"core / io.islandtime.measures / IntSeconds / minus minus (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun minus(nanoseconds: IntNanoseconds ): LongNanoseconds operator fun minus(nanoseconds: LongNanoseconds ): LongNanoseconds operator fun minus(microseconds: IntMicroseconds ): LongMicroseconds operator fun minus(microseconds: LongMicroseconds ): LongMicroseconds operator fun minus(milliseconds: IntMilliseconds ): LongMilliseconds operator fun minus(milliseconds: LongMilliseconds ): LongMilliseconds operator fun minus(seconds: IntSeconds ): IntSeconds operator fun minus(seconds: LongSeconds ): LongSeconds operator fun minus(minutes: IntMinutes ): IntSeconds operator fun minus(minutes: LongMinutes ): LongSeconds operator fun minus(hours: IntHours ): IntSeconds operator fun minus(hours: LongHours ): LongSeconds operator fun minus(days: IntDays ): IntSeconds operator fun minus(days: LongDays ): LongSeconds","title":"Minus"},{"location":"api/core/io.islandtime.measures/-int-seconds/minus/#minus","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun minus(nanoseconds: IntNanoseconds ): LongNanoseconds operator fun minus(nanoseconds: LongNanoseconds ): LongNanoseconds operator fun minus(microseconds: IntMicroseconds ): LongMicroseconds operator fun minus(microseconds: LongMicroseconds ): LongMicroseconds operator fun minus(milliseconds: IntMilliseconds ): LongMilliseconds operator fun minus(milliseconds: LongMilliseconds ): LongMilliseconds operator fun minus(seconds: IntSeconds ): IntSeconds operator fun minus(seconds: LongSeconds ): LongSeconds operator fun minus(minutes: IntMinutes ): IntSeconds operator fun minus(minutes: LongMinutes ): LongSeconds operator fun minus(hours: IntHours ): IntSeconds operator fun minus(hours: LongHours ): LongSeconds operator fun minus(days: IntDays ): IntSeconds operator fun minus(days: LongDays ): LongSeconds","title":"minus"},{"location":"api/core/io.islandtime.measures/-int-seconds/plus/","text":"core / io.islandtime.measures / IntSeconds / plus plus (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun plus(nanoseconds: IntNanoseconds ): LongNanoseconds operator fun plus(nanoseconds: LongNanoseconds ): LongNanoseconds operator fun plus(microseconds: IntMicroseconds ): LongMicroseconds operator fun plus(microseconds: LongMicroseconds ): LongMicroseconds operator fun plus(milliseconds: IntMilliseconds ): LongMilliseconds operator fun plus(milliseconds: LongMilliseconds ): LongMilliseconds operator fun plus(seconds: IntSeconds ): IntSeconds operator fun plus(seconds: LongSeconds ): LongSeconds operator fun plus(minutes: IntMinutes ): IntSeconds operator fun plus(minutes: LongMinutes ): LongSeconds operator fun plus(hours: IntHours ): IntSeconds operator fun plus(hours: LongHours ): LongSeconds operator fun plus(days: IntDays ): IntSeconds operator fun plus(days: LongDays ): LongSeconds","title":"Plus"},{"location":"api/core/io.islandtime.measures/-int-seconds/plus/#plus","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun plus(nanoseconds: IntNanoseconds ): LongNanoseconds operator fun plus(nanoseconds: LongNanoseconds ): LongNanoseconds operator fun plus(microseconds: IntMicroseconds ): LongMicroseconds operator fun plus(microseconds: LongMicroseconds ): LongMicroseconds operator fun plus(milliseconds: IntMilliseconds ): LongMilliseconds operator fun plus(milliseconds: LongMilliseconds ): LongMilliseconds operator fun plus(seconds: IntSeconds ): IntSeconds operator fun plus(seconds: LongSeconds ): LongSeconds operator fun plus(minutes: IntMinutes ): IntSeconds operator fun plus(minutes: LongMinutes ): LongSeconds operator fun plus(hours: IntHours ): IntSeconds operator fun plus(hours: LongHours ): LongSeconds operator fun plus(days: IntDays ): IntSeconds operator fun plus(days: LongDays ): LongSeconds","title":"plus"},{"location":"api/core/io.islandtime.measures/-int-seconds/rem/","text":"core / io.islandtime.measures / IntSeconds / rem rem (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun rem(scalar: Int ): IntSeconds operator fun rem(scalar: Long ): LongSeconds","title":"Rem"},{"location":"api/core/io.islandtime.measures/-int-seconds/rem/#rem","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun rem(scalar: Int ): IntSeconds operator fun rem(scalar: Long ): LongSeconds","title":"rem"},{"location":"api/core/io.islandtime.measures/-int-seconds/times/","text":"core / io.islandtime.measures / IntSeconds / times times (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun times(scalar: Int ): IntSeconds operator fun times(scalar: Long ): LongSeconds Multiply by a scalar value. Exceptions ArithmeticException - if overflow occurs","title":"Times"},{"location":"api/core/io.islandtime.measures/-int-seconds/times/#times","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun times(scalar: Int ): IntSeconds operator fun times(scalar: Long ): LongSeconds Multiply by a scalar value.","title":"times"},{"location":"api/core/io.islandtime.measures/-int-seconds/times/#exceptions","text":"ArithmeticException - if overflow occurs","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-int-seconds/to-components/","text":"core / io.islandtime.measures / IntSeconds / toComponents toComponents (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline fun <T> toComponents(action: (minutes: IntMinutes , seconds: IntSeconds ) -> T): T inline fun <T> toComponents(action: (hours: IntHours , minutes: IntMinutes , seconds: IntSeconds ) -> T): T inline fun <T> toComponents(action: (days: IntDays , hours: IntHours , minutes: IntMinutes , seconds: IntSeconds ) -> T): T","title":"To components"},{"location":"api/core/io.islandtime.measures/-int-seconds/to-components/#tocomponents","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline fun <T> toComponents(action: (minutes: IntMinutes , seconds: IntSeconds ) -> T): T inline fun <T> toComponents(action: (hours: IntHours , minutes: IntMinutes , seconds: IntSeconds ) -> T): T inline fun <T> toComponents(action: (days: IntDays , hours: IntHours , minutes: IntMinutes , seconds: IntSeconds ) -> T): T","title":"toComponents"},{"location":"api/core/io.islandtime.measures/-int-seconds/to-kotlin-duration/","text":"core / io.islandtime.measures / IntSeconds / toKotlinDuration toKotlinDuration (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toKotlinDuration(): <ERROR CLASS> (jvm) @ExperimentalTime fun toKotlinDuration(): Duration (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) Convert to a kotlin.time.Duration . (jvm) Convert to a kotlin.time.Duration .","title":"To kotlin duration"},{"location":"api/core/io.islandtime.measures/-int-seconds/to-kotlin-duration/#tokotlinduration","text":"(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toKotlinDuration(): <ERROR CLASS> (jvm) @ExperimentalTime fun toKotlinDuration(): Duration (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) Convert to a kotlin.time.Duration . (jvm) Convert to a kotlin.time.Duration .","title":"toKotlinDuration"},{"location":"api/core/io.islandtime.measures/-int-seconds/to-long-seconds/","text":"core / io.islandtime.measures / IntSeconds / toLongSeconds toLongSeconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toLongSeconds(): LongSeconds Convert to LongSeconds .","title":"To long seconds"},{"location":"api/core/io.islandtime.measures/-int-seconds/to-long-seconds/#tolongseconds","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toLongSeconds(): LongSeconds Convert to LongSeconds .","title":"toLongSeconds"},{"location":"api/core/io.islandtime.measures/-int-seconds/to-long/","text":"core / io.islandtime.measures / IntSeconds / toLong toLong (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toLong(): Long Convert to a unit-less Long value.","title":"To long"},{"location":"api/core/io.islandtime.measures/-int-seconds/to-long/#tolong","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toLong(): Long Convert to a unit-less Long value.","title":"toLong"},{"location":"api/core/io.islandtime.measures/-int-seconds/to-string/","text":"core / io.islandtime.measures / IntSeconds / toString toString (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toString(): String Convert to an ISO-8601 time interval representation.","title":"To string"},{"location":"api/core/io.islandtime.measures/-int-seconds/to-string/#tostring","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toString(): String Convert to an ISO-8601 time interval representation.","title":"toString"},{"location":"api/core/io.islandtime.measures/-int-seconds/unary-minus/","text":"core / io.islandtime.measures / IntSeconds / unaryMinus unaryMinus (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun unaryMinus(): IntSeconds Negate the value. Exceptions ArithmeticException - if overflow occurs","title":"Unary minus"},{"location":"api/core/io.islandtime.measures/-int-seconds/unary-minus/#unaryminus","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun unaryMinus(): IntSeconds Negate the value.","title":"unaryMinus"},{"location":"api/core/io.islandtime.measures/-int-seconds/unary-minus/#exceptions","text":"ArithmeticException - if overflow occurs","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-int-seconds/value/","text":"core / io.islandtime.measures / IntSeconds / value value (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val value: Int The underlying value.","title":"Value"},{"location":"api/core/io.islandtime.measures/-int-seconds/value/#value","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val value: Int The underlying value.","title":"value"},{"location":"api/core/io.islandtime.measures/-int-weeks/","text":"core / io.islandtime.measures / IntWeeks IntWeeks (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline class IntWeeks : Comparable < IntWeeks > A number of weeks. Constructors Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init> A number of weeks. <init>(value: Int ) Properties Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) absoluteValue Returns the absolute value. val absoluteValue: IntWeeks (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inDays Convert to days. val inDays: IntDays (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) value The underlying value. val value: Int Functions Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) compareTo fun compareTo(other: IntWeeks ): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) div Divide by a scalar value. operator fun div(scalar: Int ): IntWeeks operator fun div(scalar: Long ): LongWeeks (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isNegative Is this duration negative? fun isNegative(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isPositive Is this duration positive? fun isPositive(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isZero Is this duration zero? fun isZero(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) minus operator fun minus(days: IntDays ): IntDays operator fun minus(days: LongDays ): LongDays operator fun minus(weeks: IntWeeks ): IntWeeks operator fun minus(weeks: LongWeeks ): LongWeeks (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) plus operator fun plus(days: IntDays ): IntDays operator fun plus(days: LongDays ): LongDays operator fun plus(weeks: IntWeeks ): IntWeeks operator fun plus(weeks: LongWeeks ): LongWeeks (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) rem operator fun rem(scalar: Int ): IntWeeks operator fun rem(scalar: Long ): LongWeeks (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) times Multiply by a scalar value. operator fun times(scalar: Int ): IntWeeks operator fun times(scalar: Long ): LongWeeks (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toLong Convert to a unit-less Long value. fun toLong(): Long (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toLongWeeks Convert to LongWeeks . fun toLongWeeks(): LongWeeks (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toString Convert to an ISO-8601 time interval representation. fun toString(): String (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) unaryMinus Negate the value. operator fun unaryMinus(): IntWeeks Companion Object Properties Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MAX The largest supported value. val MAX: IntWeeks (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MIN The smallest supported value. val MIN: IntWeeks Extension Functions Name Summary (jvm) toJavaPeriod Convert to an equivalent Java Period . fun IntWeeks .toJavaPeriod(): Period","title":"Index"},{"location":"api/core/io.islandtime.measures/-int-weeks/#intweeks","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline class IntWeeks : Comparable < IntWeeks > A number of weeks.","title":"IntWeeks"},{"location":"api/core/io.islandtime.measures/-int-weeks/#constructors","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init> A number of weeks. <init>(value: Int )","title":"Constructors"},{"location":"api/core/io.islandtime.measures/-int-weeks/#properties","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) absoluteValue Returns the absolute value. val absoluteValue: IntWeeks (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inDays Convert to days. val inDays: IntDays (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) value The underlying value. val value: Int","title":"Properties"},{"location":"api/core/io.islandtime.measures/-int-weeks/#functions","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) compareTo fun compareTo(other: IntWeeks ): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) div Divide by a scalar value. operator fun div(scalar: Int ): IntWeeks operator fun div(scalar: Long ): LongWeeks (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isNegative Is this duration negative? fun isNegative(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isPositive Is this duration positive? fun isPositive(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isZero Is this duration zero? fun isZero(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) minus operator fun minus(days: IntDays ): IntDays operator fun minus(days: LongDays ): LongDays operator fun minus(weeks: IntWeeks ): IntWeeks operator fun minus(weeks: LongWeeks ): LongWeeks (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) plus operator fun plus(days: IntDays ): IntDays operator fun plus(days: LongDays ): LongDays operator fun plus(weeks: IntWeeks ): IntWeeks operator fun plus(weeks: LongWeeks ): LongWeeks (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) rem operator fun rem(scalar: Int ): IntWeeks operator fun rem(scalar: Long ): LongWeeks (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) times Multiply by a scalar value. operator fun times(scalar: Int ): IntWeeks operator fun times(scalar: Long ): LongWeeks (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toLong Convert to a unit-less Long value. fun toLong(): Long (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toLongWeeks Convert to LongWeeks . fun toLongWeeks(): LongWeeks (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toString Convert to an ISO-8601 time interval representation. fun toString(): String (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) unaryMinus Negate the value. operator fun unaryMinus(): IntWeeks","title":"Functions"},{"location":"api/core/io.islandtime.measures/-int-weeks/#companion-object-properties","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MAX The largest supported value. val MAX: IntWeeks (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MIN The smallest supported value. val MIN: IntWeeks","title":"Companion Object Properties"},{"location":"api/core/io.islandtime.measures/-int-weeks/#extension-functions","text":"Name Summary (jvm) toJavaPeriod Convert to an equivalent Java Period . fun IntWeeks .toJavaPeriod(): Period","title":"Extension Functions"},{"location":"api/core/io.islandtime.measures/-int-weeks/-init-/","text":"core / io.islandtime.measures / IntWeeks / <init> <init> (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init>(value: Int ) A number of weeks.","title":" init "},{"location":"api/core/io.islandtime.measures/-int-weeks/-init-/#init","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init>(value: Int ) A number of weeks.","title":"&lt;init&gt;"},{"location":"api/core/io.islandtime.measures/-int-weeks/-m-a-x/","text":"core / io.islandtime.measures / IntWeeks / MAX MAX (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val MAX: IntWeeks The largest supported value.","title":" m a x"},{"location":"api/core/io.islandtime.measures/-int-weeks/-m-a-x/#max","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val MAX: IntWeeks The largest supported value.","title":"MAX"},{"location":"api/core/io.islandtime.measures/-int-weeks/-m-i-n/","text":"core / io.islandtime.measures / IntWeeks / MIN MIN (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val MIN: IntWeeks The smallest supported value.","title":" m i n"},{"location":"api/core/io.islandtime.measures/-int-weeks/-m-i-n/#min","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val MIN: IntWeeks The smallest supported value.","title":"MIN"},{"location":"api/core/io.islandtime.measures/-int-weeks/absolute-value/","text":"core / io.islandtime.measures / IntWeeks / absoluteValue absoluteValue (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val absoluteValue: IntWeeks Returns the absolute value. Exceptions ArithmeticException - if overflow occurs","title":"Absolute value"},{"location":"api/core/io.islandtime.measures/-int-weeks/absolute-value/#absolutevalue","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val absoluteValue: IntWeeks Returns the absolute value.","title":"absoluteValue"},{"location":"api/core/io.islandtime.measures/-int-weeks/absolute-value/#exceptions","text":"ArithmeticException - if overflow occurs","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-int-weeks/compare-to/","text":"core / io.islandtime.measures / IntWeeks / compareTo compareTo (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun compareTo(other: IntWeeks ): Int","title":"Compare to"},{"location":"api/core/io.islandtime.measures/-int-weeks/compare-to/#compareto","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun compareTo(other: IntWeeks ): Int","title":"compareTo"},{"location":"api/core/io.islandtime.measures/-int-weeks/div/","text":"core / io.islandtime.measures / IntWeeks / div div (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun div(scalar: Int ): IntWeeks Divide by a scalar value. Exceptions ArithmeticException - if overflow occurs or the scalar is zero(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun div(scalar: Long ): LongWeeks Divide by a scalar value. Exceptions ArithmeticException - if the scalar is zero","title":"Div"},{"location":"api/core/io.islandtime.measures/-int-weeks/div/#div","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun div(scalar: Int ): IntWeeks Divide by a scalar value.","title":"div"},{"location":"api/core/io.islandtime.measures/-int-weeks/div/#exceptions","text":"ArithmeticException - if overflow occurs or the scalar is zero(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun div(scalar: Long ): LongWeeks Divide by a scalar value.","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-int-weeks/div/#exceptions_1","text":"ArithmeticException - if the scalar is zero","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-int-weeks/in-days/","text":"core / io.islandtime.measures / IntWeeks / inDays inDays (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inDays: IntDays Convert to days. Exceptions ArithmeticException - if overflow occurs","title":"In days"},{"location":"api/core/io.islandtime.measures/-int-weeks/in-days/#indays","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inDays: IntDays Convert to days.","title":"inDays"},{"location":"api/core/io.islandtime.measures/-int-weeks/in-days/#exceptions","text":"ArithmeticException - if overflow occurs","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-int-weeks/is-negative/","text":"core / io.islandtime.measures / IntWeeks / isNegative isNegative (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isNegative(): Boolean Is this duration negative?","title":"Is negative"},{"location":"api/core/io.islandtime.measures/-int-weeks/is-negative/#isnegative","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isNegative(): Boolean Is this duration negative?","title":"isNegative"},{"location":"api/core/io.islandtime.measures/-int-weeks/is-positive/","text":"core / io.islandtime.measures / IntWeeks / isPositive isPositive (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isPositive(): Boolean Is this duration positive?","title":"Is positive"},{"location":"api/core/io.islandtime.measures/-int-weeks/is-positive/#ispositive","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isPositive(): Boolean Is this duration positive?","title":"isPositive"},{"location":"api/core/io.islandtime.measures/-int-weeks/is-zero/","text":"core / io.islandtime.measures / IntWeeks / isZero isZero (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isZero(): Boolean Is this duration zero?","title":"Is zero"},{"location":"api/core/io.islandtime.measures/-int-weeks/is-zero/#iszero","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isZero(): Boolean Is this duration zero?","title":"isZero"},{"location":"api/core/io.islandtime.measures/-int-weeks/minus/","text":"core / io.islandtime.measures / IntWeeks / minus minus (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun minus(days: IntDays ): IntDays operator fun minus(days: LongDays ): LongDays operator fun minus(weeks: IntWeeks ): IntWeeks operator fun minus(weeks: LongWeeks ): LongWeeks","title":"Minus"},{"location":"api/core/io.islandtime.measures/-int-weeks/minus/#minus","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun minus(days: IntDays ): IntDays operator fun minus(days: LongDays ): LongDays operator fun minus(weeks: IntWeeks ): IntWeeks operator fun minus(weeks: LongWeeks ): LongWeeks","title":"minus"},{"location":"api/core/io.islandtime.measures/-int-weeks/plus/","text":"core / io.islandtime.measures / IntWeeks / plus plus (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun plus(days: IntDays ): IntDays operator fun plus(days: LongDays ): LongDays operator fun plus(weeks: IntWeeks ): IntWeeks operator fun plus(weeks: LongWeeks ): LongWeeks","title":"Plus"},{"location":"api/core/io.islandtime.measures/-int-weeks/plus/#plus","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun plus(days: IntDays ): IntDays operator fun plus(days: LongDays ): LongDays operator fun plus(weeks: IntWeeks ): IntWeeks operator fun plus(weeks: LongWeeks ): LongWeeks","title":"plus"},{"location":"api/core/io.islandtime.measures/-int-weeks/rem/","text":"core / io.islandtime.measures / IntWeeks / rem rem (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun rem(scalar: Int ): IntWeeks operator fun rem(scalar: Long ): LongWeeks","title":"Rem"},{"location":"api/core/io.islandtime.measures/-int-weeks/rem/#rem","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun rem(scalar: Int ): IntWeeks operator fun rem(scalar: Long ): LongWeeks","title":"rem"},{"location":"api/core/io.islandtime.measures/-int-weeks/times/","text":"core / io.islandtime.measures / IntWeeks / times times (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun times(scalar: Int ): IntWeeks operator fun times(scalar: Long ): LongWeeks Multiply by a scalar value. Exceptions ArithmeticException - if overflow occurs","title":"Times"},{"location":"api/core/io.islandtime.measures/-int-weeks/times/#times","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun times(scalar: Int ): IntWeeks operator fun times(scalar: Long ): LongWeeks Multiply by a scalar value.","title":"times"},{"location":"api/core/io.islandtime.measures/-int-weeks/times/#exceptions","text":"ArithmeticException - if overflow occurs","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-int-weeks/to-long-weeks/","text":"core / io.islandtime.measures / IntWeeks / toLongWeeks toLongWeeks (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toLongWeeks(): LongWeeks Convert to LongWeeks .","title":"To long weeks"},{"location":"api/core/io.islandtime.measures/-int-weeks/to-long-weeks/#tolongweeks","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toLongWeeks(): LongWeeks Convert to LongWeeks .","title":"toLongWeeks"},{"location":"api/core/io.islandtime.measures/-int-weeks/to-long/","text":"core / io.islandtime.measures / IntWeeks / toLong toLong (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toLong(): Long Convert to a unit-less Long value.","title":"To long"},{"location":"api/core/io.islandtime.measures/-int-weeks/to-long/#tolong","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toLong(): Long Convert to a unit-less Long value.","title":"toLong"},{"location":"api/core/io.islandtime.measures/-int-weeks/to-string/","text":"core / io.islandtime.measures / IntWeeks / toString toString (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toString(): String Convert to an ISO-8601 time interval representation.","title":"To string"},{"location":"api/core/io.islandtime.measures/-int-weeks/to-string/#tostring","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toString(): String Convert to an ISO-8601 time interval representation.","title":"toString"},{"location":"api/core/io.islandtime.measures/-int-weeks/unary-minus/","text":"core / io.islandtime.measures / IntWeeks / unaryMinus unaryMinus (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun unaryMinus(): IntWeeks Negate the value. Exceptions ArithmeticException - if overflow occurs","title":"Unary minus"},{"location":"api/core/io.islandtime.measures/-int-weeks/unary-minus/#unaryminus","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun unaryMinus(): IntWeeks Negate the value.","title":"unaryMinus"},{"location":"api/core/io.islandtime.measures/-int-weeks/unary-minus/#exceptions","text":"ArithmeticException - if overflow occurs","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-int-weeks/value/","text":"core / io.islandtime.measures / IntWeeks / value value (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val value: Int The underlying value.","title":"Value"},{"location":"api/core/io.islandtime.measures/-int-weeks/value/#value","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val value: Int The underlying value.","title":"value"},{"location":"api/core/io.islandtime.measures/-int-years/","text":"core / io.islandtime.measures / IntYears IntYears (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline class IntYears : Comparable < IntYears > A number of years. Constructors Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init> A number of years. <init>(value: Int ) Properties Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) absoluteValue Returns the absolute value. val absoluteValue: IntYears (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inCenturies Convert to whole centuries. val inCenturies: IntCenturies (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inDecades Convert to whole decades. val inDecades: IntDecades (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inMonths Convert to months. val inMonths: IntMonths (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) value The underlying value. val value: Int Functions Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) compareTo fun compareTo(other: IntYears ): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) div Divide by a scalar value. operator fun div(scalar: Int ): IntYears operator fun div(scalar: Long ): LongYears (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isNegative Is this duration negative? fun isNegative(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isPositive Is this duration positive? fun isPositive(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isZero Is this duration zero? fun isZero(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) minus operator fun minus(months: IntMonths ): IntMonths operator fun minus(months: LongMonths ): LongMonths operator fun minus(years: IntYears ): IntYears operator fun minus(years: LongYears ): LongYears operator fun minus(decades: IntDecades ): IntYears operator fun minus(decades: LongDecades ): LongYears operator fun minus(centuries: IntCenturies ): IntYears operator fun minus(centuries: LongCenturies ): LongYears (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) plus operator fun plus(months: IntMonths ): IntMonths operator fun plus(months: LongMonths ): LongMonths operator fun plus(years: IntYears ): IntYears operator fun plus(years: LongYears ): LongYears operator fun plus(decades: IntDecades ): IntYears operator fun plus(decades: LongDecades ): LongYears operator fun plus(centuries: IntCenturies ): IntYears operator fun plus(centuries: LongCenturies ): LongYears (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) rem operator fun rem(scalar: Int ): IntYears operator fun rem(scalar: Long ): LongYears (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) times Multiply by a scalar value. operator fun times(scalar: Int ): IntYears operator fun times(scalar: Long ): LongYears (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toComponents fun <T> toComponents(action: (decades: IntDecades , years: IntYears ) -> T): T fun <T> toComponents(action: (centuries: IntCenturies , decades: IntDecades , years: IntYears ) -> T): T (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toLong Convert to a unit-less Long value. fun toLong(): Long (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toLongYears Convert to LongYears . fun toLongYears(): LongYears (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toString Convert to an ISO-8601 time interval representation. fun toString(): String (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) unaryMinus Negate the value. operator fun unaryMinus(): IntYears Companion Object Properties Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MAX The largest supported value. val MAX: IntYears (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MIN The smallest supported value. val MIN: IntYears Extension Functions Name Summary (jvm) toJavaPeriod Convert to an equivalent Java Period . fun IntYears .toJavaPeriod(): Period","title":"Index"},{"location":"api/core/io.islandtime.measures/-int-years/#intyears","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline class IntYears : Comparable < IntYears > A number of years.","title":"IntYears"},{"location":"api/core/io.islandtime.measures/-int-years/#constructors","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init> A number of years. <init>(value: Int )","title":"Constructors"},{"location":"api/core/io.islandtime.measures/-int-years/#properties","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) absoluteValue Returns the absolute value. val absoluteValue: IntYears (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inCenturies Convert to whole centuries. val inCenturies: IntCenturies (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inDecades Convert to whole decades. val inDecades: IntDecades (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inMonths Convert to months. val inMonths: IntMonths (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) value The underlying value. val value: Int","title":"Properties"},{"location":"api/core/io.islandtime.measures/-int-years/#functions","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) compareTo fun compareTo(other: IntYears ): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) div Divide by a scalar value. operator fun div(scalar: Int ): IntYears operator fun div(scalar: Long ): LongYears (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isNegative Is this duration negative? fun isNegative(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isPositive Is this duration positive? fun isPositive(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isZero Is this duration zero? fun isZero(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) minus operator fun minus(months: IntMonths ): IntMonths operator fun minus(months: LongMonths ): LongMonths operator fun minus(years: IntYears ): IntYears operator fun minus(years: LongYears ): LongYears operator fun minus(decades: IntDecades ): IntYears operator fun minus(decades: LongDecades ): LongYears operator fun minus(centuries: IntCenturies ): IntYears operator fun minus(centuries: LongCenturies ): LongYears (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) plus operator fun plus(months: IntMonths ): IntMonths operator fun plus(months: LongMonths ): LongMonths operator fun plus(years: IntYears ): IntYears operator fun plus(years: LongYears ): LongYears operator fun plus(decades: IntDecades ): IntYears operator fun plus(decades: LongDecades ): LongYears operator fun plus(centuries: IntCenturies ): IntYears operator fun plus(centuries: LongCenturies ): LongYears (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) rem operator fun rem(scalar: Int ): IntYears operator fun rem(scalar: Long ): LongYears (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) times Multiply by a scalar value. operator fun times(scalar: Int ): IntYears operator fun times(scalar: Long ): LongYears (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toComponents fun <T> toComponents(action: (decades: IntDecades , years: IntYears ) -> T): T fun <T> toComponents(action: (centuries: IntCenturies , decades: IntDecades , years: IntYears ) -> T): T (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toLong Convert to a unit-less Long value. fun toLong(): Long (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toLongYears Convert to LongYears . fun toLongYears(): LongYears (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toString Convert to an ISO-8601 time interval representation. fun toString(): String (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) unaryMinus Negate the value. operator fun unaryMinus(): IntYears","title":"Functions"},{"location":"api/core/io.islandtime.measures/-int-years/#companion-object-properties","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MAX The largest supported value. val MAX: IntYears (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MIN The smallest supported value. val MIN: IntYears","title":"Companion Object Properties"},{"location":"api/core/io.islandtime.measures/-int-years/#extension-functions","text":"Name Summary (jvm) toJavaPeriod Convert to an equivalent Java Period . fun IntYears .toJavaPeriod(): Period","title":"Extension Functions"},{"location":"api/core/io.islandtime.measures/-int-years/-init-/","text":"core / io.islandtime.measures / IntYears / <init> <init> (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init>(value: Int ) A number of years.","title":" init "},{"location":"api/core/io.islandtime.measures/-int-years/-init-/#init","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init>(value: Int ) A number of years.","title":"&lt;init&gt;"},{"location":"api/core/io.islandtime.measures/-int-years/-m-a-x/","text":"core / io.islandtime.measures / IntYears / MAX MAX (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val MAX: IntYears The largest supported value.","title":" m a x"},{"location":"api/core/io.islandtime.measures/-int-years/-m-a-x/#max","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val MAX: IntYears The largest supported value.","title":"MAX"},{"location":"api/core/io.islandtime.measures/-int-years/-m-i-n/","text":"core / io.islandtime.measures / IntYears / MIN MIN (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val MIN: IntYears The smallest supported value.","title":" m i n"},{"location":"api/core/io.islandtime.measures/-int-years/-m-i-n/#min","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val MIN: IntYears The smallest supported value.","title":"MIN"},{"location":"api/core/io.islandtime.measures/-int-years/absolute-value/","text":"core / io.islandtime.measures / IntYears / absoluteValue absoluteValue (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val absoluteValue: IntYears Returns the absolute value. Exceptions ArithmeticException - if overflow occurs","title":"Absolute value"},{"location":"api/core/io.islandtime.measures/-int-years/absolute-value/#absolutevalue","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val absoluteValue: IntYears Returns the absolute value.","title":"absoluteValue"},{"location":"api/core/io.islandtime.measures/-int-years/absolute-value/#exceptions","text":"ArithmeticException - if overflow occurs","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-int-years/compare-to/","text":"core / io.islandtime.measures / IntYears / compareTo compareTo (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun compareTo(other: IntYears ): Int","title":"Compare to"},{"location":"api/core/io.islandtime.measures/-int-years/compare-to/#compareto","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun compareTo(other: IntYears ): Int","title":"compareTo"},{"location":"api/core/io.islandtime.measures/-int-years/div/","text":"core / io.islandtime.measures / IntYears / div div (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun div(scalar: Int ): IntYears Divide by a scalar value. Exceptions ArithmeticException - if overflow occurs or the scalar is zero(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun div(scalar: Long ): LongYears Divide by a scalar value. Exceptions ArithmeticException - if the scalar is zero","title":"Div"},{"location":"api/core/io.islandtime.measures/-int-years/div/#div","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun div(scalar: Int ): IntYears Divide by a scalar value.","title":"div"},{"location":"api/core/io.islandtime.measures/-int-years/div/#exceptions","text":"ArithmeticException - if overflow occurs or the scalar is zero(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun div(scalar: Long ): LongYears Divide by a scalar value.","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-int-years/div/#exceptions_1","text":"ArithmeticException - if the scalar is zero","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-int-years/in-centuries/","text":"core / io.islandtime.measures / IntYears / inCenturies inCenturies (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inCenturies: IntCenturies Convert to whole centuries.","title":"In centuries"},{"location":"api/core/io.islandtime.measures/-int-years/in-centuries/#incenturies","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inCenturies: IntCenturies Convert to whole centuries.","title":"inCenturies"},{"location":"api/core/io.islandtime.measures/-int-years/in-decades/","text":"core / io.islandtime.measures / IntYears / inDecades inDecades (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inDecades: IntDecades Convert to whole decades.","title":"In decades"},{"location":"api/core/io.islandtime.measures/-int-years/in-decades/#indecades","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inDecades: IntDecades Convert to whole decades.","title":"inDecades"},{"location":"api/core/io.islandtime.measures/-int-years/in-months/","text":"core / io.islandtime.measures / IntYears / inMonths inMonths (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inMonths: IntMonths Convert to months. Exceptions ArithmeticException - if overflow occurs","title":"In months"},{"location":"api/core/io.islandtime.measures/-int-years/in-months/#inmonths","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inMonths: IntMonths Convert to months.","title":"inMonths"},{"location":"api/core/io.islandtime.measures/-int-years/in-months/#exceptions","text":"ArithmeticException - if overflow occurs","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-int-years/is-negative/","text":"core / io.islandtime.measures / IntYears / isNegative isNegative (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isNegative(): Boolean Is this duration negative?","title":"Is negative"},{"location":"api/core/io.islandtime.measures/-int-years/is-negative/#isnegative","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isNegative(): Boolean Is this duration negative?","title":"isNegative"},{"location":"api/core/io.islandtime.measures/-int-years/is-positive/","text":"core / io.islandtime.measures / IntYears / isPositive isPositive (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isPositive(): Boolean Is this duration positive?","title":"Is positive"},{"location":"api/core/io.islandtime.measures/-int-years/is-positive/#ispositive","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isPositive(): Boolean Is this duration positive?","title":"isPositive"},{"location":"api/core/io.islandtime.measures/-int-years/is-zero/","text":"core / io.islandtime.measures / IntYears / isZero isZero (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isZero(): Boolean Is this duration zero?","title":"Is zero"},{"location":"api/core/io.islandtime.measures/-int-years/is-zero/#iszero","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isZero(): Boolean Is this duration zero?","title":"isZero"},{"location":"api/core/io.islandtime.measures/-int-years/minus/","text":"core / io.islandtime.measures / IntYears / minus minus (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun minus(months: IntMonths ): IntMonths operator fun minus(months: LongMonths ): LongMonths operator fun minus(years: IntYears ): IntYears operator fun minus(years: LongYears ): LongYears operator fun minus(decades: IntDecades ): IntYears operator fun minus(decades: LongDecades ): LongYears operator fun minus(centuries: IntCenturies ): IntYears operator fun minus(centuries: LongCenturies ): LongYears","title":"Minus"},{"location":"api/core/io.islandtime.measures/-int-years/minus/#minus","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun minus(months: IntMonths ): IntMonths operator fun minus(months: LongMonths ): LongMonths operator fun minus(years: IntYears ): IntYears operator fun minus(years: LongYears ): LongYears operator fun minus(decades: IntDecades ): IntYears operator fun minus(decades: LongDecades ): LongYears operator fun minus(centuries: IntCenturies ): IntYears operator fun minus(centuries: LongCenturies ): LongYears","title":"minus"},{"location":"api/core/io.islandtime.measures/-int-years/plus/","text":"core / io.islandtime.measures / IntYears / plus plus (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun plus(months: IntMonths ): IntMonths operator fun plus(months: LongMonths ): LongMonths operator fun plus(years: IntYears ): IntYears operator fun plus(years: LongYears ): LongYears operator fun plus(decades: IntDecades ): IntYears operator fun plus(decades: LongDecades ): LongYears operator fun plus(centuries: IntCenturies ): IntYears operator fun plus(centuries: LongCenturies ): LongYears","title":"Plus"},{"location":"api/core/io.islandtime.measures/-int-years/plus/#plus","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun plus(months: IntMonths ): IntMonths operator fun plus(months: LongMonths ): LongMonths operator fun plus(years: IntYears ): IntYears operator fun plus(years: LongYears ): LongYears operator fun plus(decades: IntDecades ): IntYears operator fun plus(decades: LongDecades ): LongYears operator fun plus(centuries: IntCenturies ): IntYears operator fun plus(centuries: LongCenturies ): LongYears","title":"plus"},{"location":"api/core/io.islandtime.measures/-int-years/rem/","text":"core / io.islandtime.measures / IntYears / rem rem (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun rem(scalar: Int ): IntYears operator fun rem(scalar: Long ): LongYears","title":"Rem"},{"location":"api/core/io.islandtime.measures/-int-years/rem/#rem","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun rem(scalar: Int ): IntYears operator fun rem(scalar: Long ): LongYears","title":"rem"},{"location":"api/core/io.islandtime.measures/-int-years/times/","text":"core / io.islandtime.measures / IntYears / times times (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun times(scalar: Int ): IntYears operator fun times(scalar: Long ): LongYears Multiply by a scalar value. Exceptions ArithmeticException - if overflow occurs","title":"Times"},{"location":"api/core/io.islandtime.measures/-int-years/times/#times","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun times(scalar: Int ): IntYears operator fun times(scalar: Long ): LongYears Multiply by a scalar value.","title":"times"},{"location":"api/core/io.islandtime.measures/-int-years/times/#exceptions","text":"ArithmeticException - if overflow occurs","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-int-years/to-components/","text":"core / io.islandtime.measures / IntYears / toComponents toComponents (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline fun <T> toComponents(action: (decades: IntDecades , years: IntYears ) -> T): T inline fun <T> toComponents(action: (centuries: IntCenturies , decades: IntDecades , years: IntYears ) -> T): T","title":"To components"},{"location":"api/core/io.islandtime.measures/-int-years/to-components/#tocomponents","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline fun <T> toComponents(action: (decades: IntDecades , years: IntYears ) -> T): T inline fun <T> toComponents(action: (centuries: IntCenturies , decades: IntDecades , years: IntYears ) -> T): T","title":"toComponents"},{"location":"api/core/io.islandtime.measures/-int-years/to-long-years/","text":"core / io.islandtime.measures / IntYears / toLongYears toLongYears (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toLongYears(): LongYears Convert to LongYears .","title":"To long years"},{"location":"api/core/io.islandtime.measures/-int-years/to-long-years/#tolongyears","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toLongYears(): LongYears Convert to LongYears .","title":"toLongYears"},{"location":"api/core/io.islandtime.measures/-int-years/to-long/","text":"core / io.islandtime.measures / IntYears / toLong toLong (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toLong(): Long Convert to a unit-less Long value.","title":"To long"},{"location":"api/core/io.islandtime.measures/-int-years/to-long/#tolong","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toLong(): Long Convert to a unit-less Long value.","title":"toLong"},{"location":"api/core/io.islandtime.measures/-int-years/to-string/","text":"core / io.islandtime.measures / IntYears / toString toString (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toString(): String Convert to an ISO-8601 time interval representation.","title":"To string"},{"location":"api/core/io.islandtime.measures/-int-years/to-string/#tostring","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toString(): String Convert to an ISO-8601 time interval representation.","title":"toString"},{"location":"api/core/io.islandtime.measures/-int-years/unary-minus/","text":"core / io.islandtime.measures / IntYears / unaryMinus unaryMinus (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun unaryMinus(): IntYears Negate the value. Exceptions ArithmeticException - if overflow occurs","title":"Unary minus"},{"location":"api/core/io.islandtime.measures/-int-years/unary-minus/#unaryminus","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun unaryMinus(): IntYears Negate the value.","title":"unaryMinus"},{"location":"api/core/io.islandtime.measures/-int-years/unary-minus/#exceptions","text":"ArithmeticException - if overflow occurs","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-int-years/value/","text":"core / io.islandtime.measures / IntYears / value value (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val value: Int The underlying value.","title":"Value"},{"location":"api/core/io.islandtime.measures/-int-years/value/#value","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val value: Int The underlying value.","title":"value"},{"location":"api/core/io.islandtime.measures/-long-centuries/","text":"core / io.islandtime.measures / LongCenturies LongCenturies (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline class LongCenturies : Comparable < LongCenturies > A number of centuries. Constructors Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init> A number of centuries. <init>(value: Long ) Properties Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) absoluteValue Returns the absolute value. val absoluteValue: LongCenturies (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inDecades Convert to decades. val inDecades: LongDecades (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inMonths Convert to months. val inMonths: LongMonths (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inYears Convert to years. val inYears: LongYears (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) value The underlying value. val value: Long Functions Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) compareTo fun compareTo(other: LongCenturies ): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) div Divide by a scalar value. operator fun div(scalar: Int ): LongCenturies operator fun div(scalar: Long ): LongCenturies (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isNegative Is this duration negative? fun isNegative(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isPositive Is this duration positive? fun isPositive(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isZero Is this duration zero? fun isZero(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) minus operator fun minus(months: IntMonths ): LongMonths operator fun minus(months: LongMonths ): LongMonths operator fun minus(years: IntYears ): LongYears operator fun minus(years: LongYears ): LongYears operator fun minus(decades: IntDecades ): LongDecades operator fun minus(decades: LongDecades ): LongDecades operator fun minus(centuries: IntCenturies ): LongCenturies operator fun minus(centuries: LongCenturies ): LongCenturies (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) plus operator fun plus(months: IntMonths ): LongMonths operator fun plus(months: LongMonths ): LongMonths operator fun plus(years: IntYears ): LongYears operator fun plus(years: LongYears ): LongYears operator fun plus(decades: IntDecades ): LongDecades operator fun plus(decades: LongDecades ): LongDecades operator fun plus(centuries: IntCenturies ): LongCenturies operator fun plus(centuries: LongCenturies ): LongCenturies (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) rem operator fun rem(scalar: Int ): LongCenturies operator fun rem(scalar: Long ): LongCenturies (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) times Multiply by a scalar value. operator fun times(scalar: Int ): LongCenturies operator fun times(scalar: Long ): LongCenturies (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toInt Convert to a unit-less Int value. fun toInt(): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toIntCenturies Convert to IntCenturies . fun toIntCenturies(): IntCenturies (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toString Convert to an ISO-8601 time interval representation. fun toString(): String (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) unaryMinus Negate the value. operator fun unaryMinus(): LongCenturies Companion Object Properties Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MAX The largest supported value. val MAX: LongCenturies (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MIN The smallest supported value. val MIN: LongCenturies Extension Functions Name Summary (jvm) toJavaPeriod Convert to an equivalent Java Period . fun LongCenturies .toJavaPeriod(): Period","title":"Index"},{"location":"api/core/io.islandtime.measures/-long-centuries/#longcenturies","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline class LongCenturies : Comparable < LongCenturies > A number of centuries.","title":"LongCenturies"},{"location":"api/core/io.islandtime.measures/-long-centuries/#constructors","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init> A number of centuries. <init>(value: Long )","title":"Constructors"},{"location":"api/core/io.islandtime.measures/-long-centuries/#properties","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) absoluteValue Returns the absolute value. val absoluteValue: LongCenturies (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inDecades Convert to decades. val inDecades: LongDecades (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inMonths Convert to months. val inMonths: LongMonths (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inYears Convert to years. val inYears: LongYears (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) value The underlying value. val value: Long","title":"Properties"},{"location":"api/core/io.islandtime.measures/-long-centuries/#functions","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) compareTo fun compareTo(other: LongCenturies ): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) div Divide by a scalar value. operator fun div(scalar: Int ): LongCenturies operator fun div(scalar: Long ): LongCenturies (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isNegative Is this duration negative? fun isNegative(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isPositive Is this duration positive? fun isPositive(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isZero Is this duration zero? fun isZero(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) minus operator fun minus(months: IntMonths ): LongMonths operator fun minus(months: LongMonths ): LongMonths operator fun minus(years: IntYears ): LongYears operator fun minus(years: LongYears ): LongYears operator fun minus(decades: IntDecades ): LongDecades operator fun minus(decades: LongDecades ): LongDecades operator fun minus(centuries: IntCenturies ): LongCenturies operator fun minus(centuries: LongCenturies ): LongCenturies (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) plus operator fun plus(months: IntMonths ): LongMonths operator fun plus(months: LongMonths ): LongMonths operator fun plus(years: IntYears ): LongYears operator fun plus(years: LongYears ): LongYears operator fun plus(decades: IntDecades ): LongDecades operator fun plus(decades: LongDecades ): LongDecades operator fun plus(centuries: IntCenturies ): LongCenturies operator fun plus(centuries: LongCenturies ): LongCenturies (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) rem operator fun rem(scalar: Int ): LongCenturies operator fun rem(scalar: Long ): LongCenturies (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) times Multiply by a scalar value. operator fun times(scalar: Int ): LongCenturies operator fun times(scalar: Long ): LongCenturies (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toInt Convert to a unit-less Int value. fun toInt(): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toIntCenturies Convert to IntCenturies . fun toIntCenturies(): IntCenturies (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toString Convert to an ISO-8601 time interval representation. fun toString(): String (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) unaryMinus Negate the value. operator fun unaryMinus(): LongCenturies","title":"Functions"},{"location":"api/core/io.islandtime.measures/-long-centuries/#companion-object-properties","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MAX The largest supported value. val MAX: LongCenturies (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MIN The smallest supported value. val MIN: LongCenturies","title":"Companion Object Properties"},{"location":"api/core/io.islandtime.measures/-long-centuries/#extension-functions","text":"Name Summary (jvm) toJavaPeriod Convert to an equivalent Java Period . fun LongCenturies .toJavaPeriod(): Period","title":"Extension Functions"},{"location":"api/core/io.islandtime.measures/-long-centuries/-init-/","text":"core / io.islandtime.measures / LongCenturies / <init> <init> (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init>(value: Long ) A number of centuries.","title":" init "},{"location":"api/core/io.islandtime.measures/-long-centuries/-init-/#init","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init>(value: Long ) A number of centuries.","title":"&lt;init&gt;"},{"location":"api/core/io.islandtime.measures/-long-centuries/-m-a-x/","text":"core / io.islandtime.measures / LongCenturies / MAX MAX (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val MAX: LongCenturies The largest supported value.","title":" m a x"},{"location":"api/core/io.islandtime.measures/-long-centuries/-m-a-x/#max","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val MAX: LongCenturies The largest supported value.","title":"MAX"},{"location":"api/core/io.islandtime.measures/-long-centuries/-m-i-n/","text":"core / io.islandtime.measures / LongCenturies / MIN MIN (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val MIN: LongCenturies The smallest supported value.","title":" m i n"},{"location":"api/core/io.islandtime.measures/-long-centuries/-m-i-n/#min","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val MIN: LongCenturies The smallest supported value.","title":"MIN"},{"location":"api/core/io.islandtime.measures/-long-centuries/absolute-value/","text":"core / io.islandtime.measures / LongCenturies / absoluteValue absoluteValue (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val absoluteValue: LongCenturies Returns the absolute value. Exceptions ArithmeticException - if overflow occurs","title":"Absolute value"},{"location":"api/core/io.islandtime.measures/-long-centuries/absolute-value/#absolutevalue","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val absoluteValue: LongCenturies Returns the absolute value.","title":"absoluteValue"},{"location":"api/core/io.islandtime.measures/-long-centuries/absolute-value/#exceptions","text":"ArithmeticException - if overflow occurs","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-long-centuries/compare-to/","text":"core / io.islandtime.measures / LongCenturies / compareTo compareTo (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun compareTo(other: LongCenturies ): Int","title":"Compare to"},{"location":"api/core/io.islandtime.measures/-long-centuries/compare-to/#compareto","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun compareTo(other: LongCenturies ): Int","title":"compareTo"},{"location":"api/core/io.islandtime.measures/-long-centuries/div/","text":"core / io.islandtime.measures / LongCenturies / div div (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun div(scalar: Int ): LongCenturies operator fun div(scalar: Long ): LongCenturies Divide by a scalar value. Exceptions ArithmeticException - if overflow occurs or the scalar is zero","title":"Div"},{"location":"api/core/io.islandtime.measures/-long-centuries/div/#div","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun div(scalar: Int ): LongCenturies operator fun div(scalar: Long ): LongCenturies Divide by a scalar value.","title":"div"},{"location":"api/core/io.islandtime.measures/-long-centuries/div/#exceptions","text":"ArithmeticException - if overflow occurs or the scalar is zero","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-long-centuries/in-decades/","text":"core / io.islandtime.measures / LongCenturies / inDecades inDecades (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inDecades: LongDecades Convert to decades. Exceptions ArithmeticException - if overflow occurs","title":"In decades"},{"location":"api/core/io.islandtime.measures/-long-centuries/in-decades/#indecades","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inDecades: LongDecades Convert to decades.","title":"inDecades"},{"location":"api/core/io.islandtime.measures/-long-centuries/in-decades/#exceptions","text":"ArithmeticException - if overflow occurs","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-long-centuries/in-months/","text":"core / io.islandtime.measures / LongCenturies / inMonths inMonths (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inMonths: LongMonths Convert to months. Exceptions ArithmeticException - if overflow occurs","title":"In months"},{"location":"api/core/io.islandtime.measures/-long-centuries/in-months/#inmonths","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inMonths: LongMonths Convert to months.","title":"inMonths"},{"location":"api/core/io.islandtime.measures/-long-centuries/in-months/#exceptions","text":"ArithmeticException - if overflow occurs","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-long-centuries/in-years/","text":"core / io.islandtime.measures / LongCenturies / inYears inYears (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inYears: LongYears Convert to years. Exceptions ArithmeticException - if overflow occurs","title":"In years"},{"location":"api/core/io.islandtime.measures/-long-centuries/in-years/#inyears","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inYears: LongYears Convert to years.","title":"inYears"},{"location":"api/core/io.islandtime.measures/-long-centuries/in-years/#exceptions","text":"ArithmeticException - if overflow occurs","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-long-centuries/is-negative/","text":"core / io.islandtime.measures / LongCenturies / isNegative isNegative (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isNegative(): Boolean Is this duration negative?","title":"Is negative"},{"location":"api/core/io.islandtime.measures/-long-centuries/is-negative/#isnegative","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isNegative(): Boolean Is this duration negative?","title":"isNegative"},{"location":"api/core/io.islandtime.measures/-long-centuries/is-positive/","text":"core / io.islandtime.measures / LongCenturies / isPositive isPositive (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isPositive(): Boolean Is this duration positive?","title":"Is positive"},{"location":"api/core/io.islandtime.measures/-long-centuries/is-positive/#ispositive","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isPositive(): Boolean Is this duration positive?","title":"isPositive"},{"location":"api/core/io.islandtime.measures/-long-centuries/is-zero/","text":"core / io.islandtime.measures / LongCenturies / isZero isZero (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isZero(): Boolean Is this duration zero?","title":"Is zero"},{"location":"api/core/io.islandtime.measures/-long-centuries/is-zero/#iszero","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isZero(): Boolean Is this duration zero?","title":"isZero"},{"location":"api/core/io.islandtime.measures/-long-centuries/minus/","text":"core / io.islandtime.measures / LongCenturies / minus minus (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun minus(months: IntMonths ): LongMonths operator fun minus(months: LongMonths ): LongMonths operator fun minus(years: IntYears ): LongYears operator fun minus(years: LongYears ): LongYears operator fun minus(decades: IntDecades ): LongDecades operator fun minus(decades: LongDecades ): LongDecades operator fun minus(centuries: IntCenturies ): LongCenturies operator fun minus(centuries: LongCenturies ): LongCenturies","title":"Minus"},{"location":"api/core/io.islandtime.measures/-long-centuries/minus/#minus","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun minus(months: IntMonths ): LongMonths operator fun minus(months: LongMonths ): LongMonths operator fun minus(years: IntYears ): LongYears operator fun minus(years: LongYears ): LongYears operator fun minus(decades: IntDecades ): LongDecades operator fun minus(decades: LongDecades ): LongDecades operator fun minus(centuries: IntCenturies ): LongCenturies operator fun minus(centuries: LongCenturies ): LongCenturies","title":"minus"},{"location":"api/core/io.islandtime.measures/-long-centuries/plus/","text":"core / io.islandtime.measures / LongCenturies / plus plus (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun plus(months: IntMonths ): LongMonths operator fun plus(months: LongMonths ): LongMonths operator fun plus(years: IntYears ): LongYears operator fun plus(years: LongYears ): LongYears operator fun plus(decades: IntDecades ): LongDecades operator fun plus(decades: LongDecades ): LongDecades operator fun plus(centuries: IntCenturies ): LongCenturies operator fun plus(centuries: LongCenturies ): LongCenturies","title":"Plus"},{"location":"api/core/io.islandtime.measures/-long-centuries/plus/#plus","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun plus(months: IntMonths ): LongMonths operator fun plus(months: LongMonths ): LongMonths operator fun plus(years: IntYears ): LongYears operator fun plus(years: LongYears ): LongYears operator fun plus(decades: IntDecades ): LongDecades operator fun plus(decades: LongDecades ): LongDecades operator fun plus(centuries: IntCenturies ): LongCenturies operator fun plus(centuries: LongCenturies ): LongCenturies","title":"plus"},{"location":"api/core/io.islandtime.measures/-long-centuries/rem/","text":"core / io.islandtime.measures / LongCenturies / rem rem (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun rem(scalar: Int ): LongCenturies operator fun rem(scalar: Long ): LongCenturies","title":"Rem"},{"location":"api/core/io.islandtime.measures/-long-centuries/rem/#rem","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun rem(scalar: Int ): LongCenturies operator fun rem(scalar: Long ): LongCenturies","title":"rem"},{"location":"api/core/io.islandtime.measures/-long-centuries/times/","text":"core / io.islandtime.measures / LongCenturies / times times (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun times(scalar: Int ): LongCenturies operator fun times(scalar: Long ): LongCenturies Multiply by a scalar value. Exceptions ArithmeticException - if overflow occurs","title":"Times"},{"location":"api/core/io.islandtime.measures/-long-centuries/times/#times","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun times(scalar: Int ): LongCenturies operator fun times(scalar: Long ): LongCenturies Multiply by a scalar value.","title":"times"},{"location":"api/core/io.islandtime.measures/-long-centuries/times/#exceptions","text":"ArithmeticException - if overflow occurs","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-long-centuries/to-int-centuries/","text":"core / io.islandtime.measures / LongCenturies / toIntCenturies toIntCenturies (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toIntCenturies(): IntCenturies Convert to IntCenturies . Exceptions ArithmeticException - if overflow occurs","title":"To int centuries"},{"location":"api/core/io.islandtime.measures/-long-centuries/to-int-centuries/#tointcenturies","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toIntCenturies(): IntCenturies Convert to IntCenturies .","title":"toIntCenturies"},{"location":"api/core/io.islandtime.measures/-long-centuries/to-int-centuries/#exceptions","text":"ArithmeticException - if overflow occurs","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-long-centuries/to-int/","text":"core / io.islandtime.measures / LongCenturies / toInt toInt (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toInt(): Int Convert to a unit-less Int value. Exceptions ArithmeticException - if overflow occurs","title":"To int"},{"location":"api/core/io.islandtime.measures/-long-centuries/to-int/#toint","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toInt(): Int Convert to a unit-less Int value.","title":"toInt"},{"location":"api/core/io.islandtime.measures/-long-centuries/to-int/#exceptions","text":"ArithmeticException - if overflow occurs","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-long-centuries/to-string/","text":"core / io.islandtime.measures / LongCenturies / toString toString (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toString(): String Convert to an ISO-8601 time interval representation.","title":"To string"},{"location":"api/core/io.islandtime.measures/-long-centuries/to-string/#tostring","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toString(): String Convert to an ISO-8601 time interval representation.","title":"toString"},{"location":"api/core/io.islandtime.measures/-long-centuries/unary-minus/","text":"core / io.islandtime.measures / LongCenturies / unaryMinus unaryMinus (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun unaryMinus(): LongCenturies Negate the value. Exceptions ArithmeticException - if overflow occurs","title":"Unary minus"},{"location":"api/core/io.islandtime.measures/-long-centuries/unary-minus/#unaryminus","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun unaryMinus(): LongCenturies Negate the value.","title":"unaryMinus"},{"location":"api/core/io.islandtime.measures/-long-centuries/unary-minus/#exceptions","text":"ArithmeticException - if overflow occurs","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-long-centuries/value/","text":"core / io.islandtime.measures / LongCenturies / value value (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val value: Long The underlying value.","title":"Value"},{"location":"api/core/io.islandtime.measures/-long-centuries/value/#value","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val value: Long The underlying value.","title":"value"},{"location":"api/core/io.islandtime.measures/-long-days/","text":"core / io.islandtime.measures / LongDays LongDays (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline class LongDays : Comparable < LongDays > A number of days. Constructors Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init> A number of days. <init>(value: Long ) Properties Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) absoluteValue Returns the absolute value. val absoluteValue: LongDays (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inHours Convert to hours. val inHours: LongHours (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inMicroseconds Convert to microseconds. val inMicroseconds: LongMicroseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inMilliseconds Convert to milliseconds. val inMilliseconds: LongMilliseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inMinutes Convert to minutes. val inMinutes: LongMinutes (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inNanoseconds Convert to nanoseconds. val inNanoseconds: LongNanoseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inSeconds Convert to seconds. val inSeconds: LongSeconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inWeeks Convert to whole weeks. val inWeeks: LongWeeks (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) value The underlying value. val value: Long Functions Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) compareTo fun compareTo(other: LongDays ): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) div Divide by a scalar value. operator fun div(scalar: Int ): LongDays operator fun div(scalar: Long ): LongDays (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isNegative Is this duration negative? fun isNegative(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isPositive Is this duration positive? fun isPositive(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isZero Is this duration zero? fun isZero(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) minus operator fun minus(nanoseconds: IntNanoseconds ): LongNanoseconds operator fun minus(nanoseconds: LongNanoseconds ): LongNanoseconds operator fun minus(microseconds: IntMicroseconds ): LongMicroseconds operator fun minus(microseconds: LongMicroseconds ): LongMicroseconds operator fun minus(milliseconds: IntMilliseconds ): LongMilliseconds operator fun minus(milliseconds: LongMilliseconds ): LongMilliseconds operator fun minus(seconds: IntSeconds ): LongSeconds operator fun minus(seconds: LongSeconds ): LongSeconds operator fun minus(minutes: IntMinutes ): LongMinutes operator fun minus(minutes: LongMinutes ): LongMinutes operator fun minus(hours: IntHours ): LongHours operator fun minus(hours: LongHours ): LongHours operator fun minus(days: IntDays ): LongDays operator fun minus(days: LongDays ): LongDays operator fun minus(weeks: IntWeeks ): LongDays operator fun minus(weeks: LongWeeks ): LongDays (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) plus operator fun plus(nanoseconds: IntNanoseconds ): LongNanoseconds operator fun plus(nanoseconds: LongNanoseconds ): LongNanoseconds operator fun plus(microseconds: IntMicroseconds ): LongMicroseconds operator fun plus(microseconds: LongMicroseconds ): LongMicroseconds operator fun plus(milliseconds: IntMilliseconds ): LongMilliseconds operator fun plus(milliseconds: LongMilliseconds ): LongMilliseconds operator fun plus(seconds: IntSeconds ): LongSeconds operator fun plus(seconds: LongSeconds ): LongSeconds operator fun plus(minutes: IntMinutes ): LongMinutes operator fun plus(minutes: LongMinutes ): LongMinutes operator fun plus(hours: IntHours ): LongHours operator fun plus(hours: LongHours ): LongHours operator fun plus(days: IntDays ): LongDays operator fun plus(days: LongDays ): LongDays operator fun plus(weeks: IntWeeks ): LongDays operator fun plus(weeks: LongWeeks ): LongDays (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) rem operator fun rem(scalar: Int ): LongDays operator fun rem(scalar: Long ): LongDays (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) times Multiply by a scalar value. operator fun times(scalar: Int ): LongDays operator fun times(scalar: Long ): LongDays (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toComponents fun <T> toComponents(action: (weeks: LongWeeks , days: IntDays ) -> T): T (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toInt Convert to a unit-less Int value. fun toInt(): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toIntDays Convert to IntDays . fun toIntDays(): IntDays toKotlinDuration Convert to a kotlin.time.Duration .(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toKotlinDuration(): <ERROR CLASS> (jvm) fun toKotlinDuration(): Duration (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toString Convert to an ISO-8601 time interval representation. fun toString(): String (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) unaryMinus Negate the value. operator fun unaryMinus(): LongDays Companion Object Properties Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MAX The largest supported value. val MAX: LongDays (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MIN The smallest supported value. val MIN: LongDays Extension Functions Name Summary (jvm) toJavaDuration Convert to an equivalent Java Duration . fun LongDays .toJavaDuration(): Duration (jvm) toJavaPeriod Convert to an equivalent Java Period . fun LongDays .toJavaPeriod(): Period","title":"Index"},{"location":"api/core/io.islandtime.measures/-long-days/#longdays","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline class LongDays : Comparable < LongDays > A number of days.","title":"LongDays"},{"location":"api/core/io.islandtime.measures/-long-days/#constructors","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init> A number of days. <init>(value: Long )","title":"Constructors"},{"location":"api/core/io.islandtime.measures/-long-days/#properties","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) absoluteValue Returns the absolute value. val absoluteValue: LongDays (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inHours Convert to hours. val inHours: LongHours (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inMicroseconds Convert to microseconds. val inMicroseconds: LongMicroseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inMilliseconds Convert to milliseconds. val inMilliseconds: LongMilliseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inMinutes Convert to minutes. val inMinutes: LongMinutes (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inNanoseconds Convert to nanoseconds. val inNanoseconds: LongNanoseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inSeconds Convert to seconds. val inSeconds: LongSeconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inWeeks Convert to whole weeks. val inWeeks: LongWeeks (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) value The underlying value. val value: Long","title":"Properties"},{"location":"api/core/io.islandtime.measures/-long-days/#functions","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) compareTo fun compareTo(other: LongDays ): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) div Divide by a scalar value. operator fun div(scalar: Int ): LongDays operator fun div(scalar: Long ): LongDays (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isNegative Is this duration negative? fun isNegative(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isPositive Is this duration positive? fun isPositive(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isZero Is this duration zero? fun isZero(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) minus operator fun minus(nanoseconds: IntNanoseconds ): LongNanoseconds operator fun minus(nanoseconds: LongNanoseconds ): LongNanoseconds operator fun minus(microseconds: IntMicroseconds ): LongMicroseconds operator fun minus(microseconds: LongMicroseconds ): LongMicroseconds operator fun minus(milliseconds: IntMilliseconds ): LongMilliseconds operator fun minus(milliseconds: LongMilliseconds ): LongMilliseconds operator fun minus(seconds: IntSeconds ): LongSeconds operator fun minus(seconds: LongSeconds ): LongSeconds operator fun minus(minutes: IntMinutes ): LongMinutes operator fun minus(minutes: LongMinutes ): LongMinutes operator fun minus(hours: IntHours ): LongHours operator fun minus(hours: LongHours ): LongHours operator fun minus(days: IntDays ): LongDays operator fun minus(days: LongDays ): LongDays operator fun minus(weeks: IntWeeks ): LongDays operator fun minus(weeks: LongWeeks ): LongDays (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) plus operator fun plus(nanoseconds: IntNanoseconds ): LongNanoseconds operator fun plus(nanoseconds: LongNanoseconds ): LongNanoseconds operator fun plus(microseconds: IntMicroseconds ): LongMicroseconds operator fun plus(microseconds: LongMicroseconds ): LongMicroseconds operator fun plus(milliseconds: IntMilliseconds ): LongMilliseconds operator fun plus(milliseconds: LongMilliseconds ): LongMilliseconds operator fun plus(seconds: IntSeconds ): LongSeconds operator fun plus(seconds: LongSeconds ): LongSeconds operator fun plus(minutes: IntMinutes ): LongMinutes operator fun plus(minutes: LongMinutes ): LongMinutes operator fun plus(hours: IntHours ): LongHours operator fun plus(hours: LongHours ): LongHours operator fun plus(days: IntDays ): LongDays operator fun plus(days: LongDays ): LongDays operator fun plus(weeks: IntWeeks ): LongDays operator fun plus(weeks: LongWeeks ): LongDays (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) rem operator fun rem(scalar: Int ): LongDays operator fun rem(scalar: Long ): LongDays (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) times Multiply by a scalar value. operator fun times(scalar: Int ): LongDays operator fun times(scalar: Long ): LongDays (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toComponents fun <T> toComponents(action: (weeks: LongWeeks , days: IntDays ) -> T): T (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toInt Convert to a unit-less Int value. fun toInt(): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toIntDays Convert to IntDays . fun toIntDays(): IntDays toKotlinDuration Convert to a kotlin.time.Duration .(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toKotlinDuration(): <ERROR CLASS> (jvm) fun toKotlinDuration(): Duration (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toString Convert to an ISO-8601 time interval representation. fun toString(): String (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) unaryMinus Negate the value. operator fun unaryMinus(): LongDays","title":"Functions"},{"location":"api/core/io.islandtime.measures/-long-days/#companion-object-properties","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MAX The largest supported value. val MAX: LongDays (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MIN The smallest supported value. val MIN: LongDays","title":"Companion Object Properties"},{"location":"api/core/io.islandtime.measures/-long-days/#extension-functions","text":"Name Summary (jvm) toJavaDuration Convert to an equivalent Java Duration . fun LongDays .toJavaDuration(): Duration (jvm) toJavaPeriod Convert to an equivalent Java Period . fun LongDays .toJavaPeriod(): Period","title":"Extension Functions"},{"location":"api/core/io.islandtime.measures/-long-days/-init-/","text":"core / io.islandtime.measures / LongDays / <init> <init> (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init>(value: Long ) A number of days.","title":" init "},{"location":"api/core/io.islandtime.measures/-long-days/-init-/#init","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init>(value: Long ) A number of days.","title":"&lt;init&gt;"},{"location":"api/core/io.islandtime.measures/-long-days/-m-a-x/","text":"core / io.islandtime.measures / LongDays / MAX MAX (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val MAX: LongDays The largest supported value.","title":" m a x"},{"location":"api/core/io.islandtime.measures/-long-days/-m-a-x/#max","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val MAX: LongDays The largest supported value.","title":"MAX"},{"location":"api/core/io.islandtime.measures/-long-days/-m-i-n/","text":"core / io.islandtime.measures / LongDays / MIN MIN (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val MIN: LongDays The smallest supported value.","title":" m i n"},{"location":"api/core/io.islandtime.measures/-long-days/-m-i-n/#min","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val MIN: LongDays The smallest supported value.","title":"MIN"},{"location":"api/core/io.islandtime.measures/-long-days/absolute-value/","text":"core / io.islandtime.measures / LongDays / absoluteValue absoluteValue (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val absoluteValue: LongDays Returns the absolute value. Exceptions ArithmeticException - if overflow occurs","title":"Absolute value"},{"location":"api/core/io.islandtime.measures/-long-days/absolute-value/#absolutevalue","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val absoluteValue: LongDays Returns the absolute value.","title":"absoluteValue"},{"location":"api/core/io.islandtime.measures/-long-days/absolute-value/#exceptions","text":"ArithmeticException - if overflow occurs","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-long-days/compare-to/","text":"core / io.islandtime.measures / LongDays / compareTo compareTo (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun compareTo(other: LongDays ): Int","title":"Compare to"},{"location":"api/core/io.islandtime.measures/-long-days/compare-to/#compareto","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun compareTo(other: LongDays ): Int","title":"compareTo"},{"location":"api/core/io.islandtime.measures/-long-days/div/","text":"core / io.islandtime.measures / LongDays / div div (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun div(scalar: Int ): LongDays operator fun div(scalar: Long ): LongDays Divide by a scalar value. Exceptions ArithmeticException - if overflow occurs or the scalar is zero","title":"Div"},{"location":"api/core/io.islandtime.measures/-long-days/div/#div","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun div(scalar: Int ): LongDays operator fun div(scalar: Long ): LongDays Divide by a scalar value.","title":"div"},{"location":"api/core/io.islandtime.measures/-long-days/div/#exceptions","text":"ArithmeticException - if overflow occurs or the scalar is zero","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-long-days/in-hours/","text":"core / io.islandtime.measures / LongDays / inHours inHours (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inHours: LongHours Convert to hours. Exceptions ArithmeticException - if overflow occurs","title":"In hours"},{"location":"api/core/io.islandtime.measures/-long-days/in-hours/#inhours","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inHours: LongHours Convert to hours.","title":"inHours"},{"location":"api/core/io.islandtime.measures/-long-days/in-hours/#exceptions","text":"ArithmeticException - if overflow occurs","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-long-days/in-microseconds/","text":"core / io.islandtime.measures / LongDays / inMicroseconds inMicroseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inMicroseconds: LongMicroseconds Convert to microseconds. Exceptions ArithmeticException - if overflow occurs","title":"In microseconds"},{"location":"api/core/io.islandtime.measures/-long-days/in-microseconds/#inmicroseconds","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inMicroseconds: LongMicroseconds Convert to microseconds.","title":"inMicroseconds"},{"location":"api/core/io.islandtime.measures/-long-days/in-microseconds/#exceptions","text":"ArithmeticException - if overflow occurs","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-long-days/in-milliseconds/","text":"core / io.islandtime.measures / LongDays / inMilliseconds inMilliseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inMilliseconds: LongMilliseconds Convert to milliseconds. Exceptions ArithmeticException - if overflow occurs","title":"In milliseconds"},{"location":"api/core/io.islandtime.measures/-long-days/in-milliseconds/#inmilliseconds","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inMilliseconds: LongMilliseconds Convert to milliseconds.","title":"inMilliseconds"},{"location":"api/core/io.islandtime.measures/-long-days/in-milliseconds/#exceptions","text":"ArithmeticException - if overflow occurs","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-long-days/in-minutes/","text":"core / io.islandtime.measures / LongDays / inMinutes inMinutes (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inMinutes: LongMinutes Convert to minutes. Exceptions ArithmeticException - if overflow occurs","title":"In minutes"},{"location":"api/core/io.islandtime.measures/-long-days/in-minutes/#inminutes","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inMinutes: LongMinutes Convert to minutes.","title":"inMinutes"},{"location":"api/core/io.islandtime.measures/-long-days/in-minutes/#exceptions","text":"ArithmeticException - if overflow occurs","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-long-days/in-nanoseconds/","text":"core / io.islandtime.measures / LongDays / inNanoseconds inNanoseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inNanoseconds: LongNanoseconds Convert to nanoseconds. Exceptions ArithmeticException - if overflow occurs","title":"In nanoseconds"},{"location":"api/core/io.islandtime.measures/-long-days/in-nanoseconds/#innanoseconds","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inNanoseconds: LongNanoseconds Convert to nanoseconds.","title":"inNanoseconds"},{"location":"api/core/io.islandtime.measures/-long-days/in-nanoseconds/#exceptions","text":"ArithmeticException - if overflow occurs","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-long-days/in-seconds/","text":"core / io.islandtime.measures / LongDays / inSeconds inSeconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inSeconds: LongSeconds Convert to seconds. Exceptions ArithmeticException - if overflow occurs","title":"In seconds"},{"location":"api/core/io.islandtime.measures/-long-days/in-seconds/#inseconds","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inSeconds: LongSeconds Convert to seconds.","title":"inSeconds"},{"location":"api/core/io.islandtime.measures/-long-days/in-seconds/#exceptions","text":"ArithmeticException - if overflow occurs","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-long-days/in-weeks/","text":"core / io.islandtime.measures / LongDays / inWeeks inWeeks (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inWeeks: LongWeeks Convert to whole weeks.","title":"In weeks"},{"location":"api/core/io.islandtime.measures/-long-days/in-weeks/#inweeks","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inWeeks: LongWeeks Convert to whole weeks.","title":"inWeeks"},{"location":"api/core/io.islandtime.measures/-long-days/is-negative/","text":"core / io.islandtime.measures / LongDays / isNegative isNegative (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isNegative(): Boolean Is this duration negative?","title":"Is negative"},{"location":"api/core/io.islandtime.measures/-long-days/is-negative/#isnegative","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isNegative(): Boolean Is this duration negative?","title":"isNegative"},{"location":"api/core/io.islandtime.measures/-long-days/is-positive/","text":"core / io.islandtime.measures / LongDays / isPositive isPositive (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isPositive(): Boolean Is this duration positive?","title":"Is positive"},{"location":"api/core/io.islandtime.measures/-long-days/is-positive/#ispositive","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isPositive(): Boolean Is this duration positive?","title":"isPositive"},{"location":"api/core/io.islandtime.measures/-long-days/is-zero/","text":"core / io.islandtime.measures / LongDays / isZero isZero (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isZero(): Boolean Is this duration zero?","title":"Is zero"},{"location":"api/core/io.islandtime.measures/-long-days/is-zero/#iszero","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isZero(): Boolean Is this duration zero?","title":"isZero"},{"location":"api/core/io.islandtime.measures/-long-days/minus/","text":"core / io.islandtime.measures / LongDays / minus minus (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun minus(nanoseconds: IntNanoseconds ): LongNanoseconds operator fun minus(nanoseconds: LongNanoseconds ): LongNanoseconds operator fun minus(microseconds: IntMicroseconds ): LongMicroseconds operator fun minus(microseconds: LongMicroseconds ): LongMicroseconds operator fun minus(milliseconds: IntMilliseconds ): LongMilliseconds operator fun minus(milliseconds: LongMilliseconds ): LongMilliseconds operator fun minus(seconds: IntSeconds ): LongSeconds operator fun minus(seconds: LongSeconds ): LongSeconds operator fun minus(minutes: IntMinutes ): LongMinutes operator fun minus(minutes: LongMinutes ): LongMinutes operator fun minus(hours: IntHours ): LongHours operator fun minus(hours: LongHours ): LongHours operator fun minus(days: IntDays ): LongDays operator fun minus(days: LongDays ): LongDays operator fun minus(weeks: IntWeeks ): LongDays operator fun minus(weeks: LongWeeks ): LongDays","title":"Minus"},{"location":"api/core/io.islandtime.measures/-long-days/minus/#minus","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun minus(nanoseconds: IntNanoseconds ): LongNanoseconds operator fun minus(nanoseconds: LongNanoseconds ): LongNanoseconds operator fun minus(microseconds: IntMicroseconds ): LongMicroseconds operator fun minus(microseconds: LongMicroseconds ): LongMicroseconds operator fun minus(milliseconds: IntMilliseconds ): LongMilliseconds operator fun minus(milliseconds: LongMilliseconds ): LongMilliseconds operator fun minus(seconds: IntSeconds ): LongSeconds operator fun minus(seconds: LongSeconds ): LongSeconds operator fun minus(minutes: IntMinutes ): LongMinutes operator fun minus(minutes: LongMinutes ): LongMinutes operator fun minus(hours: IntHours ): LongHours operator fun minus(hours: LongHours ): LongHours operator fun minus(days: IntDays ): LongDays operator fun minus(days: LongDays ): LongDays operator fun minus(weeks: IntWeeks ): LongDays operator fun minus(weeks: LongWeeks ): LongDays","title":"minus"},{"location":"api/core/io.islandtime.measures/-long-days/plus/","text":"core / io.islandtime.measures / LongDays / plus plus (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun plus(nanoseconds: IntNanoseconds ): LongNanoseconds operator fun plus(nanoseconds: LongNanoseconds ): LongNanoseconds operator fun plus(microseconds: IntMicroseconds ): LongMicroseconds operator fun plus(microseconds: LongMicroseconds ): LongMicroseconds operator fun plus(milliseconds: IntMilliseconds ): LongMilliseconds operator fun plus(milliseconds: LongMilliseconds ): LongMilliseconds operator fun plus(seconds: IntSeconds ): LongSeconds operator fun plus(seconds: LongSeconds ): LongSeconds operator fun plus(minutes: IntMinutes ): LongMinutes operator fun plus(minutes: LongMinutes ): LongMinutes operator fun plus(hours: IntHours ): LongHours operator fun plus(hours: LongHours ): LongHours operator fun plus(days: IntDays ): LongDays operator fun plus(days: LongDays ): LongDays operator fun plus(weeks: IntWeeks ): LongDays operator fun plus(weeks: LongWeeks ): LongDays","title":"Plus"},{"location":"api/core/io.islandtime.measures/-long-days/plus/#plus","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun plus(nanoseconds: IntNanoseconds ): LongNanoseconds operator fun plus(nanoseconds: LongNanoseconds ): LongNanoseconds operator fun plus(microseconds: IntMicroseconds ): LongMicroseconds operator fun plus(microseconds: LongMicroseconds ): LongMicroseconds operator fun plus(milliseconds: IntMilliseconds ): LongMilliseconds operator fun plus(milliseconds: LongMilliseconds ): LongMilliseconds operator fun plus(seconds: IntSeconds ): LongSeconds operator fun plus(seconds: LongSeconds ): LongSeconds operator fun plus(minutes: IntMinutes ): LongMinutes operator fun plus(minutes: LongMinutes ): LongMinutes operator fun plus(hours: IntHours ): LongHours operator fun plus(hours: LongHours ): LongHours operator fun plus(days: IntDays ): LongDays operator fun plus(days: LongDays ): LongDays operator fun plus(weeks: IntWeeks ): LongDays operator fun plus(weeks: LongWeeks ): LongDays","title":"plus"},{"location":"api/core/io.islandtime.measures/-long-days/rem/","text":"core / io.islandtime.measures / LongDays / rem rem (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun rem(scalar: Int ): LongDays operator fun rem(scalar: Long ): LongDays","title":"Rem"},{"location":"api/core/io.islandtime.measures/-long-days/rem/#rem","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun rem(scalar: Int ): LongDays operator fun rem(scalar: Long ): LongDays","title":"rem"},{"location":"api/core/io.islandtime.measures/-long-days/times/","text":"core / io.islandtime.measures / LongDays / times times (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun times(scalar: Int ): LongDays operator fun times(scalar: Long ): LongDays Multiply by a scalar value. Exceptions ArithmeticException - if overflow occurs","title":"Times"},{"location":"api/core/io.islandtime.measures/-long-days/times/#times","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun times(scalar: Int ): LongDays operator fun times(scalar: Long ): LongDays Multiply by a scalar value.","title":"times"},{"location":"api/core/io.islandtime.measures/-long-days/times/#exceptions","text":"ArithmeticException - if overflow occurs","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-long-days/to-components/","text":"core / io.islandtime.measures / LongDays / toComponents toComponents (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline fun <T> toComponents(action: (weeks: LongWeeks , days: IntDays ) -> T): T","title":"To components"},{"location":"api/core/io.islandtime.measures/-long-days/to-components/#tocomponents","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline fun <T> toComponents(action: (weeks: LongWeeks , days: IntDays ) -> T): T","title":"toComponents"},{"location":"api/core/io.islandtime.measures/-long-days/to-int-days/","text":"core / io.islandtime.measures / LongDays / toIntDays toIntDays (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toIntDays(): IntDays Convert to IntDays . Exceptions ArithmeticException - if overflow occurs","title":"To int days"},{"location":"api/core/io.islandtime.measures/-long-days/to-int-days/#tointdays","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toIntDays(): IntDays Convert to IntDays .","title":"toIntDays"},{"location":"api/core/io.islandtime.measures/-long-days/to-int-days/#exceptions","text":"ArithmeticException - if overflow occurs","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-long-days/to-int/","text":"core / io.islandtime.measures / LongDays / toInt toInt (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toInt(): Int Convert to a unit-less Int value. Exceptions ArithmeticException - if overflow occurs","title":"To int"},{"location":"api/core/io.islandtime.measures/-long-days/to-int/#toint","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toInt(): Int Convert to a unit-less Int value.","title":"toInt"},{"location":"api/core/io.islandtime.measures/-long-days/to-int/#exceptions","text":"ArithmeticException - if overflow occurs","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-long-days/to-kotlin-duration/","text":"core / io.islandtime.measures / LongDays / toKotlinDuration toKotlinDuration (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toKotlinDuration(): <ERROR CLASS> (jvm) @ExperimentalTime fun toKotlinDuration(): Duration (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) Convert to a kotlin.time.Duration . (jvm) Convert to a kotlin.time.Duration .","title":"To kotlin duration"},{"location":"api/core/io.islandtime.measures/-long-days/to-kotlin-duration/#tokotlinduration","text":"(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toKotlinDuration(): <ERROR CLASS> (jvm) @ExperimentalTime fun toKotlinDuration(): Duration (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) Convert to a kotlin.time.Duration . (jvm) Convert to a kotlin.time.Duration .","title":"toKotlinDuration"},{"location":"api/core/io.islandtime.measures/-long-days/to-string/","text":"core / io.islandtime.measures / LongDays / toString toString (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toString(): String Convert to an ISO-8601 time interval representation.","title":"To string"},{"location":"api/core/io.islandtime.measures/-long-days/to-string/#tostring","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toString(): String Convert to an ISO-8601 time interval representation.","title":"toString"},{"location":"api/core/io.islandtime.measures/-long-days/unary-minus/","text":"core / io.islandtime.measures / LongDays / unaryMinus unaryMinus (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun unaryMinus(): LongDays Negate the value. Exceptions ArithmeticException - if overflow occurs","title":"Unary minus"},{"location":"api/core/io.islandtime.measures/-long-days/unary-minus/#unaryminus","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun unaryMinus(): LongDays Negate the value.","title":"unaryMinus"},{"location":"api/core/io.islandtime.measures/-long-days/unary-minus/#exceptions","text":"ArithmeticException - if overflow occurs","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-long-days/value/","text":"core / io.islandtime.measures / LongDays / value value (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val value: Long The underlying value.","title":"Value"},{"location":"api/core/io.islandtime.measures/-long-days/value/#value","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val value: Long The underlying value.","title":"value"},{"location":"api/core/io.islandtime.measures/-long-decades/","text":"core / io.islandtime.measures / LongDecades LongDecades (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline class LongDecades : Comparable < LongDecades > A number of decades. Constructors Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init> A number of decades. <init>(value: Long ) Properties Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) absoluteValue Returns the absolute value. val absoluteValue: LongDecades (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inCenturies Convert to whole centuries. val inCenturies: LongCenturies (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inMonths Convert to months. val inMonths: LongMonths (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inYears Convert to years. val inYears: LongYears (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) value The underlying value. val value: Long Functions Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) compareTo fun compareTo(other: LongDecades ): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) div Divide by a scalar value. operator fun div(scalar: Int ): LongDecades operator fun div(scalar: Long ): LongDecades (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isNegative Is this duration negative? fun isNegative(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isPositive Is this duration positive? fun isPositive(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isZero Is this duration zero? fun isZero(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) minus operator fun minus(months: IntMonths ): LongMonths operator fun minus(months: LongMonths ): LongMonths operator fun minus(years: IntYears ): LongYears operator fun minus(years: LongYears ): LongYears operator fun minus(decades: IntDecades ): LongDecades operator fun minus(decades: LongDecades ): LongDecades operator fun minus(centuries: IntCenturies ): LongDecades operator fun minus(centuries: LongCenturies ): LongDecades (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) plus operator fun plus(months: IntMonths ): LongMonths operator fun plus(months: LongMonths ): LongMonths operator fun plus(years: IntYears ): LongYears operator fun plus(years: LongYears ): LongYears operator fun plus(decades: IntDecades ): LongDecades operator fun plus(decades: LongDecades ): LongDecades operator fun plus(centuries: IntCenturies ): LongDecades operator fun plus(centuries: LongCenturies ): LongDecades (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) rem operator fun rem(scalar: Int ): LongDecades operator fun rem(scalar: Long ): LongDecades (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) times Multiply by a scalar value. operator fun times(scalar: Int ): LongDecades operator fun times(scalar: Long ): LongDecades (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toComponents fun <T> toComponents(action: (centuries: LongCenturies , decades: IntDecades ) -> T): T (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toInt Convert to a unit-less Int value. fun toInt(): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toIntDecades Convert to IntDecades . fun toIntDecades(): IntDecades (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toString Convert to an ISO-8601 time interval representation. fun toString(): String (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) unaryMinus Negate the value. operator fun unaryMinus(): LongDecades Companion Object Properties Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MAX The largest supported value. val MAX: LongDecades (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MIN The smallest supported value. val MIN: LongDecades Extension Functions Name Summary (jvm) toJavaPeriod Convert to an equivalent Java Period . fun LongDecades .toJavaPeriod(): Period","title":"Index"},{"location":"api/core/io.islandtime.measures/-long-decades/#longdecades","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline class LongDecades : Comparable < LongDecades > A number of decades.","title":"LongDecades"},{"location":"api/core/io.islandtime.measures/-long-decades/#constructors","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init> A number of decades. <init>(value: Long )","title":"Constructors"},{"location":"api/core/io.islandtime.measures/-long-decades/#properties","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) absoluteValue Returns the absolute value. val absoluteValue: LongDecades (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inCenturies Convert to whole centuries. val inCenturies: LongCenturies (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inMonths Convert to months. val inMonths: LongMonths (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inYears Convert to years. val inYears: LongYears (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) value The underlying value. val value: Long","title":"Properties"},{"location":"api/core/io.islandtime.measures/-long-decades/#functions","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) compareTo fun compareTo(other: LongDecades ): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) div Divide by a scalar value. operator fun div(scalar: Int ): LongDecades operator fun div(scalar: Long ): LongDecades (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isNegative Is this duration negative? fun isNegative(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isPositive Is this duration positive? fun isPositive(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isZero Is this duration zero? fun isZero(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) minus operator fun minus(months: IntMonths ): LongMonths operator fun minus(months: LongMonths ): LongMonths operator fun minus(years: IntYears ): LongYears operator fun minus(years: LongYears ): LongYears operator fun minus(decades: IntDecades ): LongDecades operator fun minus(decades: LongDecades ): LongDecades operator fun minus(centuries: IntCenturies ): LongDecades operator fun minus(centuries: LongCenturies ): LongDecades (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) plus operator fun plus(months: IntMonths ): LongMonths operator fun plus(months: LongMonths ): LongMonths operator fun plus(years: IntYears ): LongYears operator fun plus(years: LongYears ): LongYears operator fun plus(decades: IntDecades ): LongDecades operator fun plus(decades: LongDecades ): LongDecades operator fun plus(centuries: IntCenturies ): LongDecades operator fun plus(centuries: LongCenturies ): LongDecades (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) rem operator fun rem(scalar: Int ): LongDecades operator fun rem(scalar: Long ): LongDecades (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) times Multiply by a scalar value. operator fun times(scalar: Int ): LongDecades operator fun times(scalar: Long ): LongDecades (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toComponents fun <T> toComponents(action: (centuries: LongCenturies , decades: IntDecades ) -> T): T (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toInt Convert to a unit-less Int value. fun toInt(): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toIntDecades Convert to IntDecades . fun toIntDecades(): IntDecades (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toString Convert to an ISO-8601 time interval representation. fun toString(): String (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) unaryMinus Negate the value. operator fun unaryMinus(): LongDecades","title":"Functions"},{"location":"api/core/io.islandtime.measures/-long-decades/#companion-object-properties","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MAX The largest supported value. val MAX: LongDecades (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MIN The smallest supported value. val MIN: LongDecades","title":"Companion Object Properties"},{"location":"api/core/io.islandtime.measures/-long-decades/#extension-functions","text":"Name Summary (jvm) toJavaPeriod Convert to an equivalent Java Period . fun LongDecades .toJavaPeriod(): Period","title":"Extension Functions"},{"location":"api/core/io.islandtime.measures/-long-decades/-init-/","text":"core / io.islandtime.measures / LongDecades / <init> <init> (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init>(value: Long ) A number of decades.","title":" init "},{"location":"api/core/io.islandtime.measures/-long-decades/-init-/#init","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init>(value: Long ) A number of decades.","title":"&lt;init&gt;"},{"location":"api/core/io.islandtime.measures/-long-decades/-m-a-x/","text":"core / io.islandtime.measures / LongDecades / MAX MAX (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val MAX: LongDecades The largest supported value.","title":" m a x"},{"location":"api/core/io.islandtime.measures/-long-decades/-m-a-x/#max","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val MAX: LongDecades The largest supported value.","title":"MAX"},{"location":"api/core/io.islandtime.measures/-long-decades/-m-i-n/","text":"core / io.islandtime.measures / LongDecades / MIN MIN (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val MIN: LongDecades The smallest supported value.","title":" m i n"},{"location":"api/core/io.islandtime.measures/-long-decades/-m-i-n/#min","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val MIN: LongDecades The smallest supported value.","title":"MIN"},{"location":"api/core/io.islandtime.measures/-long-decades/absolute-value/","text":"core / io.islandtime.measures / LongDecades / absoluteValue absoluteValue (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val absoluteValue: LongDecades Returns the absolute value. Exceptions ArithmeticException - if overflow occurs","title":"Absolute value"},{"location":"api/core/io.islandtime.measures/-long-decades/absolute-value/#absolutevalue","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val absoluteValue: LongDecades Returns the absolute value.","title":"absoluteValue"},{"location":"api/core/io.islandtime.measures/-long-decades/absolute-value/#exceptions","text":"ArithmeticException - if overflow occurs","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-long-decades/compare-to/","text":"core / io.islandtime.measures / LongDecades / compareTo compareTo (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun compareTo(other: LongDecades ): Int","title":"Compare to"},{"location":"api/core/io.islandtime.measures/-long-decades/compare-to/#compareto","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun compareTo(other: LongDecades ): Int","title":"compareTo"},{"location":"api/core/io.islandtime.measures/-long-decades/div/","text":"core / io.islandtime.measures / LongDecades / div div (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun div(scalar: Int ): LongDecades operator fun div(scalar: Long ): LongDecades Divide by a scalar value. Exceptions ArithmeticException - if overflow occurs or the scalar is zero","title":"Div"},{"location":"api/core/io.islandtime.measures/-long-decades/div/#div","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun div(scalar: Int ): LongDecades operator fun div(scalar: Long ): LongDecades Divide by a scalar value.","title":"div"},{"location":"api/core/io.islandtime.measures/-long-decades/div/#exceptions","text":"ArithmeticException - if overflow occurs or the scalar is zero","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-long-decades/in-centuries/","text":"core / io.islandtime.measures / LongDecades / inCenturies inCenturies (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inCenturies: LongCenturies Convert to whole centuries.","title":"In centuries"},{"location":"api/core/io.islandtime.measures/-long-decades/in-centuries/#incenturies","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inCenturies: LongCenturies Convert to whole centuries.","title":"inCenturies"},{"location":"api/core/io.islandtime.measures/-long-decades/in-months/","text":"core / io.islandtime.measures / LongDecades / inMonths inMonths (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inMonths: LongMonths Convert to months. Exceptions ArithmeticException - if overflow occurs","title":"In months"},{"location":"api/core/io.islandtime.measures/-long-decades/in-months/#inmonths","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inMonths: LongMonths Convert to months.","title":"inMonths"},{"location":"api/core/io.islandtime.measures/-long-decades/in-months/#exceptions","text":"ArithmeticException - if overflow occurs","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-long-decades/in-years/","text":"core / io.islandtime.measures / LongDecades / inYears inYears (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inYears: LongYears Convert to years. Exceptions ArithmeticException - if overflow occurs","title":"In years"},{"location":"api/core/io.islandtime.measures/-long-decades/in-years/#inyears","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inYears: LongYears Convert to years.","title":"inYears"},{"location":"api/core/io.islandtime.measures/-long-decades/in-years/#exceptions","text":"ArithmeticException - if overflow occurs","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-long-decades/is-negative/","text":"core / io.islandtime.measures / LongDecades / isNegative isNegative (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isNegative(): Boolean Is this duration negative?","title":"Is negative"},{"location":"api/core/io.islandtime.measures/-long-decades/is-negative/#isnegative","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isNegative(): Boolean Is this duration negative?","title":"isNegative"},{"location":"api/core/io.islandtime.measures/-long-decades/is-positive/","text":"core / io.islandtime.measures / LongDecades / isPositive isPositive (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isPositive(): Boolean Is this duration positive?","title":"Is positive"},{"location":"api/core/io.islandtime.measures/-long-decades/is-positive/#ispositive","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isPositive(): Boolean Is this duration positive?","title":"isPositive"},{"location":"api/core/io.islandtime.measures/-long-decades/is-zero/","text":"core / io.islandtime.measures / LongDecades / isZero isZero (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isZero(): Boolean Is this duration zero?","title":"Is zero"},{"location":"api/core/io.islandtime.measures/-long-decades/is-zero/#iszero","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isZero(): Boolean Is this duration zero?","title":"isZero"},{"location":"api/core/io.islandtime.measures/-long-decades/minus/","text":"core / io.islandtime.measures / LongDecades / minus minus (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun minus(months: IntMonths ): LongMonths operator fun minus(months: LongMonths ): LongMonths operator fun minus(years: IntYears ): LongYears operator fun minus(years: LongYears ): LongYears operator fun minus(decades: IntDecades ): LongDecades operator fun minus(decades: LongDecades ): LongDecades operator fun minus(centuries: IntCenturies ): LongDecades operator fun minus(centuries: LongCenturies ): LongDecades","title":"Minus"},{"location":"api/core/io.islandtime.measures/-long-decades/minus/#minus","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun minus(months: IntMonths ): LongMonths operator fun minus(months: LongMonths ): LongMonths operator fun minus(years: IntYears ): LongYears operator fun minus(years: LongYears ): LongYears operator fun minus(decades: IntDecades ): LongDecades operator fun minus(decades: LongDecades ): LongDecades operator fun minus(centuries: IntCenturies ): LongDecades operator fun minus(centuries: LongCenturies ): LongDecades","title":"minus"},{"location":"api/core/io.islandtime.measures/-long-decades/plus/","text":"core / io.islandtime.measures / LongDecades / plus plus (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun plus(months: IntMonths ): LongMonths operator fun plus(months: LongMonths ): LongMonths operator fun plus(years: IntYears ): LongYears operator fun plus(years: LongYears ): LongYears operator fun plus(decades: IntDecades ): LongDecades operator fun plus(decades: LongDecades ): LongDecades operator fun plus(centuries: IntCenturies ): LongDecades operator fun plus(centuries: LongCenturies ): LongDecades","title":"Plus"},{"location":"api/core/io.islandtime.measures/-long-decades/plus/#plus","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun plus(months: IntMonths ): LongMonths operator fun plus(months: LongMonths ): LongMonths operator fun plus(years: IntYears ): LongYears operator fun plus(years: LongYears ): LongYears operator fun plus(decades: IntDecades ): LongDecades operator fun plus(decades: LongDecades ): LongDecades operator fun plus(centuries: IntCenturies ): LongDecades operator fun plus(centuries: LongCenturies ): LongDecades","title":"plus"},{"location":"api/core/io.islandtime.measures/-long-decades/rem/","text":"core / io.islandtime.measures / LongDecades / rem rem (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun rem(scalar: Int ): LongDecades operator fun rem(scalar: Long ): LongDecades","title":"Rem"},{"location":"api/core/io.islandtime.measures/-long-decades/rem/#rem","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun rem(scalar: Int ): LongDecades operator fun rem(scalar: Long ): LongDecades","title":"rem"},{"location":"api/core/io.islandtime.measures/-long-decades/times/","text":"core / io.islandtime.measures / LongDecades / times times (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun times(scalar: Int ): LongDecades operator fun times(scalar: Long ): LongDecades Multiply by a scalar value. Exceptions ArithmeticException - if overflow occurs","title":"Times"},{"location":"api/core/io.islandtime.measures/-long-decades/times/#times","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun times(scalar: Int ): LongDecades operator fun times(scalar: Long ): LongDecades Multiply by a scalar value.","title":"times"},{"location":"api/core/io.islandtime.measures/-long-decades/times/#exceptions","text":"ArithmeticException - if overflow occurs","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-long-decades/to-components/","text":"core / io.islandtime.measures / LongDecades / toComponents toComponents (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline fun <T> toComponents(action: (centuries: LongCenturies , decades: IntDecades ) -> T): T","title":"To components"},{"location":"api/core/io.islandtime.measures/-long-decades/to-components/#tocomponents","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline fun <T> toComponents(action: (centuries: LongCenturies , decades: IntDecades ) -> T): T","title":"toComponents"},{"location":"api/core/io.islandtime.measures/-long-decades/to-int-decades/","text":"core / io.islandtime.measures / LongDecades / toIntDecades toIntDecades (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toIntDecades(): IntDecades Convert to IntDecades . Exceptions ArithmeticException - if overflow occurs","title":"To int decades"},{"location":"api/core/io.islandtime.measures/-long-decades/to-int-decades/#tointdecades","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toIntDecades(): IntDecades Convert to IntDecades .","title":"toIntDecades"},{"location":"api/core/io.islandtime.measures/-long-decades/to-int-decades/#exceptions","text":"ArithmeticException - if overflow occurs","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-long-decades/to-int/","text":"core / io.islandtime.measures / LongDecades / toInt toInt (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toInt(): Int Convert to a unit-less Int value. Exceptions ArithmeticException - if overflow occurs","title":"To int"},{"location":"api/core/io.islandtime.measures/-long-decades/to-int/#toint","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toInt(): Int Convert to a unit-less Int value.","title":"toInt"},{"location":"api/core/io.islandtime.measures/-long-decades/to-int/#exceptions","text":"ArithmeticException - if overflow occurs","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-long-decades/to-string/","text":"core / io.islandtime.measures / LongDecades / toString toString (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toString(): String Convert to an ISO-8601 time interval representation.","title":"To string"},{"location":"api/core/io.islandtime.measures/-long-decades/to-string/#tostring","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toString(): String Convert to an ISO-8601 time interval representation.","title":"toString"},{"location":"api/core/io.islandtime.measures/-long-decades/unary-minus/","text":"core / io.islandtime.measures / LongDecades / unaryMinus unaryMinus (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun unaryMinus(): LongDecades Negate the value. Exceptions ArithmeticException - if overflow occurs","title":"Unary minus"},{"location":"api/core/io.islandtime.measures/-long-decades/unary-minus/#unaryminus","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun unaryMinus(): LongDecades Negate the value.","title":"unaryMinus"},{"location":"api/core/io.islandtime.measures/-long-decades/unary-minus/#exceptions","text":"ArithmeticException - if overflow occurs","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-long-decades/value/","text":"core / io.islandtime.measures / LongDecades / value value (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val value: Long The underlying value.","title":"Value"},{"location":"api/core/io.islandtime.measures/-long-decades/value/#value","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val value: Long The underlying value.","title":"value"},{"location":"api/core/io.islandtime.measures/-long-hours/","text":"core / io.islandtime.measures / LongHours LongHours (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline class LongHours : Comparable < LongHours > A number of hours. Constructors Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init> A number of hours. <init>(value: Long ) Properties Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) absoluteValue Returns the absolute value. val absoluteValue: LongHours (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inDays Convert to whole days. val inDays: LongDays (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inMicroseconds Convert to microseconds. val inMicroseconds: LongMicroseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inMilliseconds Convert to milliseconds. val inMilliseconds: LongMilliseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inMinutes Convert to minutes. val inMinutes: LongMinutes (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inNanoseconds Convert to nanoseconds. val inNanoseconds: LongNanoseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inSeconds Convert to seconds. val inSeconds: LongSeconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) value The underlying value. val value: Long Functions Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) compareTo fun compareTo(other: LongHours ): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) div Divide by a scalar value. operator fun div(scalar: Int ): LongHours operator fun div(scalar: Long ): LongHours (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isNegative Is this duration negative? fun isNegative(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isPositive Is this duration positive? fun isPositive(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isZero Is this duration zero? fun isZero(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) minus operator fun minus(nanoseconds: IntNanoseconds ): LongNanoseconds operator fun minus(nanoseconds: LongNanoseconds ): LongNanoseconds operator fun minus(microseconds: IntMicroseconds ): LongMicroseconds operator fun minus(microseconds: LongMicroseconds ): LongMicroseconds operator fun minus(milliseconds: IntMilliseconds ): LongMilliseconds operator fun minus(milliseconds: LongMilliseconds ): LongMilliseconds operator fun minus(seconds: IntSeconds ): LongSeconds operator fun minus(seconds: LongSeconds ): LongSeconds operator fun minus(minutes: IntMinutes ): LongMinutes operator fun minus(minutes: LongMinutes ): LongMinutes operator fun minus(hours: IntHours ): LongHours operator fun minus(hours: LongHours ): LongHours operator fun minus(days: IntDays ): LongHours operator fun minus(days: LongDays ): LongHours (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) plus operator fun plus(nanoseconds: IntNanoseconds ): LongNanoseconds operator fun plus(nanoseconds: LongNanoseconds ): LongNanoseconds operator fun plus(microseconds: IntMicroseconds ): LongMicroseconds operator fun plus(microseconds: LongMicroseconds ): LongMicroseconds operator fun plus(milliseconds: IntMilliseconds ): LongMilliseconds operator fun plus(milliseconds: LongMilliseconds ): LongMilliseconds operator fun plus(seconds: IntSeconds ): LongSeconds operator fun plus(seconds: LongSeconds ): LongSeconds operator fun plus(minutes: IntMinutes ): LongMinutes operator fun plus(minutes: LongMinutes ): LongMinutes operator fun plus(hours: IntHours ): LongHours operator fun plus(hours: LongHours ): LongHours operator fun plus(days: IntDays ): LongHours operator fun plus(days: LongDays ): LongHours (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) rem operator fun rem(scalar: Int ): LongHours operator fun rem(scalar: Long ): LongHours (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) times Multiply by a scalar value. operator fun times(scalar: Int ): LongHours operator fun times(scalar: Long ): LongHours (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toComponents fun <T> toComponents(action: (days: LongDays , hours: IntHours ) -> T): T (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toInt Convert to a unit-less Int value. fun toInt(): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toIntHours Convert to IntHours . fun toIntHours(): IntHours toKotlinDuration Convert to a kotlin.time.Duration .(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toKotlinDuration(): <ERROR CLASS> (jvm) fun toKotlinDuration(): Duration (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toString Convert to an ISO-8601 time interval representation. fun toString(): String (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) unaryMinus Negate the value. operator fun unaryMinus(): LongHours Companion Object Properties Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MAX The largest supported value. val MAX: LongHours (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MIN The smallest supported value. val MIN: LongHours Extension Functions Name Summary (jvm) toJavaDuration Convert to an equivalent Java Duration . fun LongHours .toJavaDuration(): Duration","title":"Index"},{"location":"api/core/io.islandtime.measures/-long-hours/#longhours","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline class LongHours : Comparable < LongHours > A number of hours.","title":"LongHours"},{"location":"api/core/io.islandtime.measures/-long-hours/#constructors","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init> A number of hours. <init>(value: Long )","title":"Constructors"},{"location":"api/core/io.islandtime.measures/-long-hours/#properties","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) absoluteValue Returns the absolute value. val absoluteValue: LongHours (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inDays Convert to whole days. val inDays: LongDays (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inMicroseconds Convert to microseconds. val inMicroseconds: LongMicroseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inMilliseconds Convert to milliseconds. val inMilliseconds: LongMilliseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inMinutes Convert to minutes. val inMinutes: LongMinutes (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inNanoseconds Convert to nanoseconds. val inNanoseconds: LongNanoseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inSeconds Convert to seconds. val inSeconds: LongSeconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) value The underlying value. val value: Long","title":"Properties"},{"location":"api/core/io.islandtime.measures/-long-hours/#functions","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) compareTo fun compareTo(other: LongHours ): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) div Divide by a scalar value. operator fun div(scalar: Int ): LongHours operator fun div(scalar: Long ): LongHours (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isNegative Is this duration negative? fun isNegative(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isPositive Is this duration positive? fun isPositive(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isZero Is this duration zero? fun isZero(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) minus operator fun minus(nanoseconds: IntNanoseconds ): LongNanoseconds operator fun minus(nanoseconds: LongNanoseconds ): LongNanoseconds operator fun minus(microseconds: IntMicroseconds ): LongMicroseconds operator fun minus(microseconds: LongMicroseconds ): LongMicroseconds operator fun minus(milliseconds: IntMilliseconds ): LongMilliseconds operator fun minus(milliseconds: LongMilliseconds ): LongMilliseconds operator fun minus(seconds: IntSeconds ): LongSeconds operator fun minus(seconds: LongSeconds ): LongSeconds operator fun minus(minutes: IntMinutes ): LongMinutes operator fun minus(minutes: LongMinutes ): LongMinutes operator fun minus(hours: IntHours ): LongHours operator fun minus(hours: LongHours ): LongHours operator fun minus(days: IntDays ): LongHours operator fun minus(days: LongDays ): LongHours (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) plus operator fun plus(nanoseconds: IntNanoseconds ): LongNanoseconds operator fun plus(nanoseconds: LongNanoseconds ): LongNanoseconds operator fun plus(microseconds: IntMicroseconds ): LongMicroseconds operator fun plus(microseconds: LongMicroseconds ): LongMicroseconds operator fun plus(milliseconds: IntMilliseconds ): LongMilliseconds operator fun plus(milliseconds: LongMilliseconds ): LongMilliseconds operator fun plus(seconds: IntSeconds ): LongSeconds operator fun plus(seconds: LongSeconds ): LongSeconds operator fun plus(minutes: IntMinutes ): LongMinutes operator fun plus(minutes: LongMinutes ): LongMinutes operator fun plus(hours: IntHours ): LongHours operator fun plus(hours: LongHours ): LongHours operator fun plus(days: IntDays ): LongHours operator fun plus(days: LongDays ): LongHours (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) rem operator fun rem(scalar: Int ): LongHours operator fun rem(scalar: Long ): LongHours (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) times Multiply by a scalar value. operator fun times(scalar: Int ): LongHours operator fun times(scalar: Long ): LongHours (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toComponents fun <T> toComponents(action: (days: LongDays , hours: IntHours ) -> T): T (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toInt Convert to a unit-less Int value. fun toInt(): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toIntHours Convert to IntHours . fun toIntHours(): IntHours toKotlinDuration Convert to a kotlin.time.Duration .(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toKotlinDuration(): <ERROR CLASS> (jvm) fun toKotlinDuration(): Duration (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toString Convert to an ISO-8601 time interval representation. fun toString(): String (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) unaryMinus Negate the value. operator fun unaryMinus(): LongHours","title":"Functions"},{"location":"api/core/io.islandtime.measures/-long-hours/#companion-object-properties","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MAX The largest supported value. val MAX: LongHours (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MIN The smallest supported value. val MIN: LongHours","title":"Companion Object Properties"},{"location":"api/core/io.islandtime.measures/-long-hours/#extension-functions","text":"Name Summary (jvm) toJavaDuration Convert to an equivalent Java Duration . fun LongHours .toJavaDuration(): Duration","title":"Extension Functions"},{"location":"api/core/io.islandtime.measures/-long-hours/-init-/","text":"core / io.islandtime.measures / LongHours / <init> <init> (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init>(value: Long ) A number of hours.","title":" init "},{"location":"api/core/io.islandtime.measures/-long-hours/-init-/#init","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init>(value: Long ) A number of hours.","title":"&lt;init&gt;"},{"location":"api/core/io.islandtime.measures/-long-hours/-m-a-x/","text":"core / io.islandtime.measures / LongHours / MAX MAX (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val MAX: LongHours The largest supported value.","title":" m a x"},{"location":"api/core/io.islandtime.measures/-long-hours/-m-a-x/#max","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val MAX: LongHours The largest supported value.","title":"MAX"},{"location":"api/core/io.islandtime.measures/-long-hours/-m-i-n/","text":"core / io.islandtime.measures / LongHours / MIN MIN (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val MIN: LongHours The smallest supported value.","title":" m i n"},{"location":"api/core/io.islandtime.measures/-long-hours/-m-i-n/#min","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val MIN: LongHours The smallest supported value.","title":"MIN"},{"location":"api/core/io.islandtime.measures/-long-hours/absolute-value/","text":"core / io.islandtime.measures / LongHours / absoluteValue absoluteValue (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val absoluteValue: LongHours Returns the absolute value. Exceptions ArithmeticException - if overflow occurs","title":"Absolute value"},{"location":"api/core/io.islandtime.measures/-long-hours/absolute-value/#absolutevalue","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val absoluteValue: LongHours Returns the absolute value.","title":"absoluteValue"},{"location":"api/core/io.islandtime.measures/-long-hours/absolute-value/#exceptions","text":"ArithmeticException - if overflow occurs","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-long-hours/compare-to/","text":"core / io.islandtime.measures / LongHours / compareTo compareTo (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun compareTo(other: LongHours ): Int","title":"Compare to"},{"location":"api/core/io.islandtime.measures/-long-hours/compare-to/#compareto","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun compareTo(other: LongHours ): Int","title":"compareTo"},{"location":"api/core/io.islandtime.measures/-long-hours/div/","text":"core / io.islandtime.measures / LongHours / div div (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun div(scalar: Int ): LongHours operator fun div(scalar: Long ): LongHours Divide by a scalar value. Exceptions ArithmeticException - if overflow occurs or the scalar is zero","title":"Div"},{"location":"api/core/io.islandtime.measures/-long-hours/div/#div","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun div(scalar: Int ): LongHours operator fun div(scalar: Long ): LongHours Divide by a scalar value.","title":"div"},{"location":"api/core/io.islandtime.measures/-long-hours/div/#exceptions","text":"ArithmeticException - if overflow occurs or the scalar is zero","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-long-hours/in-days/","text":"core / io.islandtime.measures / LongHours / inDays inDays (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inDays: LongDays Convert to whole days.","title":"In days"},{"location":"api/core/io.islandtime.measures/-long-hours/in-days/#indays","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inDays: LongDays Convert to whole days.","title":"inDays"},{"location":"api/core/io.islandtime.measures/-long-hours/in-microseconds/","text":"core / io.islandtime.measures / LongHours / inMicroseconds inMicroseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inMicroseconds: LongMicroseconds Convert to microseconds. Exceptions ArithmeticException - if overflow occurs","title":"In microseconds"},{"location":"api/core/io.islandtime.measures/-long-hours/in-microseconds/#inmicroseconds","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inMicroseconds: LongMicroseconds Convert to microseconds.","title":"inMicroseconds"},{"location":"api/core/io.islandtime.measures/-long-hours/in-microseconds/#exceptions","text":"ArithmeticException - if overflow occurs","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-long-hours/in-milliseconds/","text":"core / io.islandtime.measures / LongHours / inMilliseconds inMilliseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inMilliseconds: LongMilliseconds Convert to milliseconds. Exceptions ArithmeticException - if overflow occurs","title":"In milliseconds"},{"location":"api/core/io.islandtime.measures/-long-hours/in-milliseconds/#inmilliseconds","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inMilliseconds: LongMilliseconds Convert to milliseconds.","title":"inMilliseconds"},{"location":"api/core/io.islandtime.measures/-long-hours/in-milliseconds/#exceptions","text":"ArithmeticException - if overflow occurs","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-long-hours/in-minutes/","text":"core / io.islandtime.measures / LongHours / inMinutes inMinutes (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inMinutes: LongMinutes Convert to minutes. Exceptions ArithmeticException - if overflow occurs","title":"In minutes"},{"location":"api/core/io.islandtime.measures/-long-hours/in-minutes/#inminutes","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inMinutes: LongMinutes Convert to minutes.","title":"inMinutes"},{"location":"api/core/io.islandtime.measures/-long-hours/in-minutes/#exceptions","text":"ArithmeticException - if overflow occurs","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-long-hours/in-nanoseconds/","text":"core / io.islandtime.measures / LongHours / inNanoseconds inNanoseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inNanoseconds: LongNanoseconds Convert to nanoseconds. Exceptions ArithmeticException - if overflow occurs","title":"In nanoseconds"},{"location":"api/core/io.islandtime.measures/-long-hours/in-nanoseconds/#innanoseconds","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inNanoseconds: LongNanoseconds Convert to nanoseconds.","title":"inNanoseconds"},{"location":"api/core/io.islandtime.measures/-long-hours/in-nanoseconds/#exceptions","text":"ArithmeticException - if overflow occurs","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-long-hours/in-seconds/","text":"core / io.islandtime.measures / LongHours / inSeconds inSeconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inSeconds: LongSeconds Convert to seconds. Exceptions ArithmeticException - if overflow occurs","title":"In seconds"},{"location":"api/core/io.islandtime.measures/-long-hours/in-seconds/#inseconds","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inSeconds: LongSeconds Convert to seconds.","title":"inSeconds"},{"location":"api/core/io.islandtime.measures/-long-hours/in-seconds/#exceptions","text":"ArithmeticException - if overflow occurs","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-long-hours/is-negative/","text":"core / io.islandtime.measures / LongHours / isNegative isNegative (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isNegative(): Boolean Is this duration negative?","title":"Is negative"},{"location":"api/core/io.islandtime.measures/-long-hours/is-negative/#isnegative","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isNegative(): Boolean Is this duration negative?","title":"isNegative"},{"location":"api/core/io.islandtime.measures/-long-hours/is-positive/","text":"core / io.islandtime.measures / LongHours / isPositive isPositive (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isPositive(): Boolean Is this duration positive?","title":"Is positive"},{"location":"api/core/io.islandtime.measures/-long-hours/is-positive/#ispositive","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isPositive(): Boolean Is this duration positive?","title":"isPositive"},{"location":"api/core/io.islandtime.measures/-long-hours/is-zero/","text":"core / io.islandtime.measures / LongHours / isZero isZero (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isZero(): Boolean Is this duration zero?","title":"Is zero"},{"location":"api/core/io.islandtime.measures/-long-hours/is-zero/#iszero","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isZero(): Boolean Is this duration zero?","title":"isZero"},{"location":"api/core/io.islandtime.measures/-long-hours/minus/","text":"core / io.islandtime.measures / LongHours / minus minus (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun minus(nanoseconds: IntNanoseconds ): LongNanoseconds operator fun minus(nanoseconds: LongNanoseconds ): LongNanoseconds operator fun minus(microseconds: IntMicroseconds ): LongMicroseconds operator fun minus(microseconds: LongMicroseconds ): LongMicroseconds operator fun minus(milliseconds: IntMilliseconds ): LongMilliseconds operator fun minus(milliseconds: LongMilliseconds ): LongMilliseconds operator fun minus(seconds: IntSeconds ): LongSeconds operator fun minus(seconds: LongSeconds ): LongSeconds operator fun minus(minutes: IntMinutes ): LongMinutes operator fun minus(minutes: LongMinutes ): LongMinutes operator fun minus(hours: IntHours ): LongHours operator fun minus(hours: LongHours ): LongHours operator fun minus(days: IntDays ): LongHours operator fun minus(days: LongDays ): LongHours","title":"Minus"},{"location":"api/core/io.islandtime.measures/-long-hours/minus/#minus","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun minus(nanoseconds: IntNanoseconds ): LongNanoseconds operator fun minus(nanoseconds: LongNanoseconds ): LongNanoseconds operator fun minus(microseconds: IntMicroseconds ): LongMicroseconds operator fun minus(microseconds: LongMicroseconds ): LongMicroseconds operator fun minus(milliseconds: IntMilliseconds ): LongMilliseconds operator fun minus(milliseconds: LongMilliseconds ): LongMilliseconds operator fun minus(seconds: IntSeconds ): LongSeconds operator fun minus(seconds: LongSeconds ): LongSeconds operator fun minus(minutes: IntMinutes ): LongMinutes operator fun minus(minutes: LongMinutes ): LongMinutes operator fun minus(hours: IntHours ): LongHours operator fun minus(hours: LongHours ): LongHours operator fun minus(days: IntDays ): LongHours operator fun minus(days: LongDays ): LongHours","title":"minus"},{"location":"api/core/io.islandtime.measures/-long-hours/plus/","text":"core / io.islandtime.measures / LongHours / plus plus (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun plus(nanoseconds: IntNanoseconds ): LongNanoseconds operator fun plus(nanoseconds: LongNanoseconds ): LongNanoseconds operator fun plus(microseconds: IntMicroseconds ): LongMicroseconds operator fun plus(microseconds: LongMicroseconds ): LongMicroseconds operator fun plus(milliseconds: IntMilliseconds ): LongMilliseconds operator fun plus(milliseconds: LongMilliseconds ): LongMilliseconds operator fun plus(seconds: IntSeconds ): LongSeconds operator fun plus(seconds: LongSeconds ): LongSeconds operator fun plus(minutes: IntMinutes ): LongMinutes operator fun plus(minutes: LongMinutes ): LongMinutes operator fun plus(hours: IntHours ): LongHours operator fun plus(hours: LongHours ): LongHours operator fun plus(days: IntDays ): LongHours operator fun plus(days: LongDays ): LongHours","title":"Plus"},{"location":"api/core/io.islandtime.measures/-long-hours/plus/#plus","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun plus(nanoseconds: IntNanoseconds ): LongNanoseconds operator fun plus(nanoseconds: LongNanoseconds ): LongNanoseconds operator fun plus(microseconds: IntMicroseconds ): LongMicroseconds operator fun plus(microseconds: LongMicroseconds ): LongMicroseconds operator fun plus(milliseconds: IntMilliseconds ): LongMilliseconds operator fun plus(milliseconds: LongMilliseconds ): LongMilliseconds operator fun plus(seconds: IntSeconds ): LongSeconds operator fun plus(seconds: LongSeconds ): LongSeconds operator fun plus(minutes: IntMinutes ): LongMinutes operator fun plus(minutes: LongMinutes ): LongMinutes operator fun plus(hours: IntHours ): LongHours operator fun plus(hours: LongHours ): LongHours operator fun plus(days: IntDays ): LongHours operator fun plus(days: LongDays ): LongHours","title":"plus"},{"location":"api/core/io.islandtime.measures/-long-hours/rem/","text":"core / io.islandtime.measures / LongHours / rem rem (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun rem(scalar: Int ): LongHours operator fun rem(scalar: Long ): LongHours","title":"Rem"},{"location":"api/core/io.islandtime.measures/-long-hours/rem/#rem","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun rem(scalar: Int ): LongHours operator fun rem(scalar: Long ): LongHours","title":"rem"},{"location":"api/core/io.islandtime.measures/-long-hours/times/","text":"core / io.islandtime.measures / LongHours / times times (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun times(scalar: Int ): LongHours operator fun times(scalar: Long ): LongHours Multiply by a scalar value. Exceptions ArithmeticException - if overflow occurs","title":"Times"},{"location":"api/core/io.islandtime.measures/-long-hours/times/#times","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun times(scalar: Int ): LongHours operator fun times(scalar: Long ): LongHours Multiply by a scalar value.","title":"times"},{"location":"api/core/io.islandtime.measures/-long-hours/times/#exceptions","text":"ArithmeticException - if overflow occurs","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-long-hours/to-components/","text":"core / io.islandtime.measures / LongHours / toComponents toComponents (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline fun <T> toComponents(action: (days: LongDays , hours: IntHours ) -> T): T","title":"To components"},{"location":"api/core/io.islandtime.measures/-long-hours/to-components/#tocomponents","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline fun <T> toComponents(action: (days: LongDays , hours: IntHours ) -> T): T","title":"toComponents"},{"location":"api/core/io.islandtime.measures/-long-hours/to-int-hours/","text":"core / io.islandtime.measures / LongHours / toIntHours toIntHours (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toIntHours(): IntHours Convert to IntHours . Exceptions ArithmeticException - if overflow occurs","title":"To int hours"},{"location":"api/core/io.islandtime.measures/-long-hours/to-int-hours/#tointhours","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toIntHours(): IntHours Convert to IntHours .","title":"toIntHours"},{"location":"api/core/io.islandtime.measures/-long-hours/to-int-hours/#exceptions","text":"ArithmeticException - if overflow occurs","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-long-hours/to-int/","text":"core / io.islandtime.measures / LongHours / toInt toInt (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toInt(): Int Convert to a unit-less Int value. Exceptions ArithmeticException - if overflow occurs","title":"To int"},{"location":"api/core/io.islandtime.measures/-long-hours/to-int/#toint","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toInt(): Int Convert to a unit-less Int value.","title":"toInt"},{"location":"api/core/io.islandtime.measures/-long-hours/to-int/#exceptions","text":"ArithmeticException - if overflow occurs","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-long-hours/to-kotlin-duration/","text":"core / io.islandtime.measures / LongHours / toKotlinDuration toKotlinDuration (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toKotlinDuration(): <ERROR CLASS> (jvm) @ExperimentalTime fun toKotlinDuration(): Duration (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) Convert to a kotlin.time.Duration . (jvm) Convert to a kotlin.time.Duration .","title":"To kotlin duration"},{"location":"api/core/io.islandtime.measures/-long-hours/to-kotlin-duration/#tokotlinduration","text":"(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toKotlinDuration(): <ERROR CLASS> (jvm) @ExperimentalTime fun toKotlinDuration(): Duration (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) Convert to a kotlin.time.Duration . (jvm) Convert to a kotlin.time.Duration .","title":"toKotlinDuration"},{"location":"api/core/io.islandtime.measures/-long-hours/to-string/","text":"core / io.islandtime.measures / LongHours / toString toString (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toString(): String Convert to an ISO-8601 time interval representation.","title":"To string"},{"location":"api/core/io.islandtime.measures/-long-hours/to-string/#tostring","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toString(): String Convert to an ISO-8601 time interval representation.","title":"toString"},{"location":"api/core/io.islandtime.measures/-long-hours/unary-minus/","text":"core / io.islandtime.measures / LongHours / unaryMinus unaryMinus (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun unaryMinus(): LongHours Negate the value. Exceptions ArithmeticException - if overflow occurs","title":"Unary minus"},{"location":"api/core/io.islandtime.measures/-long-hours/unary-minus/#unaryminus","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun unaryMinus(): LongHours Negate the value.","title":"unaryMinus"},{"location":"api/core/io.islandtime.measures/-long-hours/unary-minus/#exceptions","text":"ArithmeticException - if overflow occurs","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-long-hours/value/","text":"core / io.islandtime.measures / LongHours / value value (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val value: Long The underlying value.","title":"Value"},{"location":"api/core/io.islandtime.measures/-long-hours/value/#value","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val value: Long The underlying value.","title":"value"},{"location":"api/core/io.islandtime.measures/-long-microseconds/","text":"core / io.islandtime.measures / LongMicroseconds LongMicroseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline class LongMicroseconds : Comparable < LongMicroseconds > A number of microseconds. Constructors Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init> A number of microseconds. <init>(value: Long ) Properties Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) absoluteValue Returns the absolute value. val absoluteValue: LongMicroseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inDays Convert to whole days. val inDays: LongDays (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inHours Convert to whole hours. val inHours: LongHours (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inMilliseconds Convert to whole milliseconds. val inMilliseconds: LongMilliseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inMinutes Convert to whole minutes. val inMinutes: LongMinutes (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inNanoseconds Convert to nanoseconds. val inNanoseconds: LongNanoseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inSeconds Convert to whole seconds. val inSeconds: LongSeconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) value The underlying value. val value: Long Functions Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) compareTo fun compareTo(other: LongMicroseconds ): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) div Divide by a scalar value. operator fun div(scalar: Int ): LongMicroseconds operator fun div(scalar: Long ): LongMicroseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isNegative Is this duration negative? fun isNegative(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isPositive Is this duration positive? fun isPositive(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isZero Is this duration zero? fun isZero(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) minus operator fun minus(nanoseconds: IntNanoseconds ): LongNanoseconds operator fun minus(nanoseconds: LongNanoseconds ): LongNanoseconds operator fun minus(microseconds: IntMicroseconds ): LongMicroseconds operator fun minus(microseconds: LongMicroseconds ): LongMicroseconds operator fun minus(milliseconds: IntMilliseconds ): LongMicroseconds operator fun minus(milliseconds: LongMilliseconds ): LongMicroseconds operator fun minus(seconds: IntSeconds ): LongMicroseconds operator fun minus(seconds: LongSeconds ): LongMicroseconds operator fun minus(minutes: IntMinutes ): LongMicroseconds operator fun minus(minutes: LongMinutes ): LongMicroseconds operator fun minus(hours: IntHours ): LongMicroseconds operator fun minus(hours: LongHours ): LongMicroseconds operator fun minus(days: IntDays ): LongMicroseconds operator fun minus(days: LongDays ): LongMicroseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) plus operator fun plus(nanoseconds: IntNanoseconds ): LongNanoseconds operator fun plus(nanoseconds: LongNanoseconds ): LongNanoseconds operator fun plus(microseconds: IntMicroseconds ): LongMicroseconds operator fun plus(microseconds: LongMicroseconds ): LongMicroseconds operator fun plus(milliseconds: IntMilliseconds ): LongMicroseconds operator fun plus(milliseconds: LongMilliseconds ): LongMicroseconds operator fun plus(seconds: IntSeconds ): LongMicroseconds operator fun plus(seconds: LongSeconds ): LongMicroseconds operator fun plus(minutes: IntMinutes ): LongMicroseconds operator fun plus(minutes: LongMinutes ): LongMicroseconds operator fun plus(hours: IntHours ): LongMicroseconds operator fun plus(hours: LongHours ): LongMicroseconds operator fun plus(days: IntDays ): LongMicroseconds operator fun plus(days: LongDays ): LongMicroseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) rem operator fun rem(scalar: Int ): LongMicroseconds operator fun rem(scalar: Long ): LongMicroseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) times Multiply by a scalar value. operator fun times(scalar: Int ): LongMicroseconds operator fun times(scalar: Long ): LongMicroseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toComponents fun <T> toComponents(action: (milliseconds: LongMilliseconds , microseconds: IntMicroseconds ) -> T): T fun <T> toComponents(action: (seconds: LongSeconds , milliseconds: IntMilliseconds , microseconds: IntMicroseconds ) -> T): T fun <T> toComponents(action: (minutes: LongMinutes , seconds: IntSeconds , milliseconds: IntMilliseconds , microseconds: IntMicroseconds ) -> T): T fun <T> toComponents(action: (hours: LongHours , minutes: IntMinutes , seconds: IntSeconds , milliseconds: IntMilliseconds , microseconds: IntMicroseconds ) -> T): T fun <T> toComponents(action: (days: LongDays , hours: IntHours , minutes: IntMinutes , seconds: IntSeconds , milliseconds: IntMilliseconds , microseconds: IntMicroseconds ) -> T): T (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toInt Convert to a unit-less Int value. fun toInt(): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toIntMicroseconds Convert to IntMicroseconds . fun toIntMicroseconds(): IntMicroseconds toKotlinDuration Convert to a kotlin.time.Duration .(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toKotlinDuration(): <ERROR CLASS> (jvm) fun toKotlinDuration(): Duration (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toString Convert to an ISO-8601 time interval representation. fun toString(): String (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) unaryMinus Negate the value. operator fun unaryMinus(): LongMicroseconds Companion Object Properties Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MAX The largest supported value. val MAX: LongMicroseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MIN The smallest supported value. val MIN: LongMicroseconds Extension Functions Name Summary (jvm) toJavaDuration Convert to an equivalent Java Duration . fun LongMicroseconds .toJavaDuration(): Duration","title":"Index"},{"location":"api/core/io.islandtime.measures/-long-microseconds/#longmicroseconds","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline class LongMicroseconds : Comparable < LongMicroseconds > A number of microseconds.","title":"LongMicroseconds"},{"location":"api/core/io.islandtime.measures/-long-microseconds/#constructors","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init> A number of microseconds. <init>(value: Long )","title":"Constructors"},{"location":"api/core/io.islandtime.measures/-long-microseconds/#properties","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) absoluteValue Returns the absolute value. val absoluteValue: LongMicroseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inDays Convert to whole days. val inDays: LongDays (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inHours Convert to whole hours. val inHours: LongHours (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inMilliseconds Convert to whole milliseconds. val inMilliseconds: LongMilliseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inMinutes Convert to whole minutes. val inMinutes: LongMinutes (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inNanoseconds Convert to nanoseconds. val inNanoseconds: LongNanoseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inSeconds Convert to whole seconds. val inSeconds: LongSeconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) value The underlying value. val value: Long","title":"Properties"},{"location":"api/core/io.islandtime.measures/-long-microseconds/#functions","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) compareTo fun compareTo(other: LongMicroseconds ): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) div Divide by a scalar value. operator fun div(scalar: Int ): LongMicroseconds operator fun div(scalar: Long ): LongMicroseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isNegative Is this duration negative? fun isNegative(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isPositive Is this duration positive? fun isPositive(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isZero Is this duration zero? fun isZero(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) minus operator fun minus(nanoseconds: IntNanoseconds ): LongNanoseconds operator fun minus(nanoseconds: LongNanoseconds ): LongNanoseconds operator fun minus(microseconds: IntMicroseconds ): LongMicroseconds operator fun minus(microseconds: LongMicroseconds ): LongMicroseconds operator fun minus(milliseconds: IntMilliseconds ): LongMicroseconds operator fun minus(milliseconds: LongMilliseconds ): LongMicroseconds operator fun minus(seconds: IntSeconds ): LongMicroseconds operator fun minus(seconds: LongSeconds ): LongMicroseconds operator fun minus(minutes: IntMinutes ): LongMicroseconds operator fun minus(minutes: LongMinutes ): LongMicroseconds operator fun minus(hours: IntHours ): LongMicroseconds operator fun minus(hours: LongHours ): LongMicroseconds operator fun minus(days: IntDays ): LongMicroseconds operator fun minus(days: LongDays ): LongMicroseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) plus operator fun plus(nanoseconds: IntNanoseconds ): LongNanoseconds operator fun plus(nanoseconds: LongNanoseconds ): LongNanoseconds operator fun plus(microseconds: IntMicroseconds ): LongMicroseconds operator fun plus(microseconds: LongMicroseconds ): LongMicroseconds operator fun plus(milliseconds: IntMilliseconds ): LongMicroseconds operator fun plus(milliseconds: LongMilliseconds ): LongMicroseconds operator fun plus(seconds: IntSeconds ): LongMicroseconds operator fun plus(seconds: LongSeconds ): LongMicroseconds operator fun plus(minutes: IntMinutes ): LongMicroseconds operator fun plus(minutes: LongMinutes ): LongMicroseconds operator fun plus(hours: IntHours ): LongMicroseconds operator fun plus(hours: LongHours ): LongMicroseconds operator fun plus(days: IntDays ): LongMicroseconds operator fun plus(days: LongDays ): LongMicroseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) rem operator fun rem(scalar: Int ): LongMicroseconds operator fun rem(scalar: Long ): LongMicroseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) times Multiply by a scalar value. operator fun times(scalar: Int ): LongMicroseconds operator fun times(scalar: Long ): LongMicroseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toComponents fun <T> toComponents(action: (milliseconds: LongMilliseconds , microseconds: IntMicroseconds ) -> T): T fun <T> toComponents(action: (seconds: LongSeconds , milliseconds: IntMilliseconds , microseconds: IntMicroseconds ) -> T): T fun <T> toComponents(action: (minutes: LongMinutes , seconds: IntSeconds , milliseconds: IntMilliseconds , microseconds: IntMicroseconds ) -> T): T fun <T> toComponents(action: (hours: LongHours , minutes: IntMinutes , seconds: IntSeconds , milliseconds: IntMilliseconds , microseconds: IntMicroseconds ) -> T): T fun <T> toComponents(action: (days: LongDays , hours: IntHours , minutes: IntMinutes , seconds: IntSeconds , milliseconds: IntMilliseconds , microseconds: IntMicroseconds ) -> T): T (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toInt Convert to a unit-less Int value. fun toInt(): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toIntMicroseconds Convert to IntMicroseconds . fun toIntMicroseconds(): IntMicroseconds toKotlinDuration Convert to a kotlin.time.Duration .(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toKotlinDuration(): <ERROR CLASS> (jvm) fun toKotlinDuration(): Duration (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toString Convert to an ISO-8601 time interval representation. fun toString(): String (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) unaryMinus Negate the value. operator fun unaryMinus(): LongMicroseconds","title":"Functions"},{"location":"api/core/io.islandtime.measures/-long-microseconds/#companion-object-properties","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MAX The largest supported value. val MAX: LongMicroseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MIN The smallest supported value. val MIN: LongMicroseconds","title":"Companion Object Properties"},{"location":"api/core/io.islandtime.measures/-long-microseconds/#extension-functions","text":"Name Summary (jvm) toJavaDuration Convert to an equivalent Java Duration . fun LongMicroseconds .toJavaDuration(): Duration","title":"Extension Functions"},{"location":"api/core/io.islandtime.measures/-long-microseconds/-init-/","text":"core / io.islandtime.measures / LongMicroseconds / <init> <init> (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init>(value: Long ) A number of microseconds.","title":" init "},{"location":"api/core/io.islandtime.measures/-long-microseconds/-init-/#init","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init>(value: Long ) A number of microseconds.","title":"&lt;init&gt;"},{"location":"api/core/io.islandtime.measures/-long-microseconds/-m-a-x/","text":"core / io.islandtime.measures / LongMicroseconds / MAX MAX (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val MAX: LongMicroseconds The largest supported value.","title":" m a x"},{"location":"api/core/io.islandtime.measures/-long-microseconds/-m-a-x/#max","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val MAX: LongMicroseconds The largest supported value.","title":"MAX"},{"location":"api/core/io.islandtime.measures/-long-microseconds/-m-i-n/","text":"core / io.islandtime.measures / LongMicroseconds / MIN MIN (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val MIN: LongMicroseconds The smallest supported value.","title":" m i n"},{"location":"api/core/io.islandtime.measures/-long-microseconds/-m-i-n/#min","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val MIN: LongMicroseconds The smallest supported value.","title":"MIN"},{"location":"api/core/io.islandtime.measures/-long-microseconds/absolute-value/","text":"core / io.islandtime.measures / LongMicroseconds / absoluteValue absoluteValue (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val absoluteValue: LongMicroseconds Returns the absolute value. Exceptions ArithmeticException - if overflow occurs","title":"Absolute value"},{"location":"api/core/io.islandtime.measures/-long-microseconds/absolute-value/#absolutevalue","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val absoluteValue: LongMicroseconds Returns the absolute value.","title":"absoluteValue"},{"location":"api/core/io.islandtime.measures/-long-microseconds/absolute-value/#exceptions","text":"ArithmeticException - if overflow occurs","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-long-microseconds/compare-to/","text":"core / io.islandtime.measures / LongMicroseconds / compareTo compareTo (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun compareTo(other: LongMicroseconds ): Int","title":"Compare to"},{"location":"api/core/io.islandtime.measures/-long-microseconds/compare-to/#compareto","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun compareTo(other: LongMicroseconds ): Int","title":"compareTo"},{"location":"api/core/io.islandtime.measures/-long-microseconds/div/","text":"core / io.islandtime.measures / LongMicroseconds / div div (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun div(scalar: Int ): LongMicroseconds operator fun div(scalar: Long ): LongMicroseconds Divide by a scalar value. Exceptions ArithmeticException - if overflow occurs or the scalar is zero","title":"Div"},{"location":"api/core/io.islandtime.measures/-long-microseconds/div/#div","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun div(scalar: Int ): LongMicroseconds operator fun div(scalar: Long ): LongMicroseconds Divide by a scalar value.","title":"div"},{"location":"api/core/io.islandtime.measures/-long-microseconds/div/#exceptions","text":"ArithmeticException - if overflow occurs or the scalar is zero","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-long-microseconds/in-days/","text":"core / io.islandtime.measures / LongMicroseconds / inDays inDays (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inDays: LongDays Convert to whole days.","title":"In days"},{"location":"api/core/io.islandtime.measures/-long-microseconds/in-days/#indays","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inDays: LongDays Convert to whole days.","title":"inDays"},{"location":"api/core/io.islandtime.measures/-long-microseconds/in-hours/","text":"core / io.islandtime.measures / LongMicroseconds / inHours inHours (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inHours: LongHours Convert to whole hours.","title":"In hours"},{"location":"api/core/io.islandtime.measures/-long-microseconds/in-hours/#inhours","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inHours: LongHours Convert to whole hours.","title":"inHours"},{"location":"api/core/io.islandtime.measures/-long-microseconds/in-milliseconds/","text":"core / io.islandtime.measures / LongMicroseconds / inMilliseconds inMilliseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inMilliseconds: LongMilliseconds Convert to whole milliseconds.","title":"In milliseconds"},{"location":"api/core/io.islandtime.measures/-long-microseconds/in-milliseconds/#inmilliseconds","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inMilliseconds: LongMilliseconds Convert to whole milliseconds.","title":"inMilliseconds"},{"location":"api/core/io.islandtime.measures/-long-microseconds/in-minutes/","text":"core / io.islandtime.measures / LongMicroseconds / inMinutes inMinutes (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inMinutes: LongMinutes Convert to whole minutes.","title":"In minutes"},{"location":"api/core/io.islandtime.measures/-long-microseconds/in-minutes/#inminutes","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inMinutes: LongMinutes Convert to whole minutes.","title":"inMinutes"},{"location":"api/core/io.islandtime.measures/-long-microseconds/in-nanoseconds/","text":"core / io.islandtime.measures / LongMicroseconds / inNanoseconds inNanoseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inNanoseconds: LongNanoseconds Convert to nanoseconds. Exceptions ArithmeticException - if overflow occurs","title":"In nanoseconds"},{"location":"api/core/io.islandtime.measures/-long-microseconds/in-nanoseconds/#innanoseconds","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inNanoseconds: LongNanoseconds Convert to nanoseconds.","title":"inNanoseconds"},{"location":"api/core/io.islandtime.measures/-long-microseconds/in-nanoseconds/#exceptions","text":"ArithmeticException - if overflow occurs","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-long-microseconds/in-seconds/","text":"core / io.islandtime.measures / LongMicroseconds / inSeconds inSeconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inSeconds: LongSeconds Convert to whole seconds.","title":"In seconds"},{"location":"api/core/io.islandtime.measures/-long-microseconds/in-seconds/#inseconds","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inSeconds: LongSeconds Convert to whole seconds.","title":"inSeconds"},{"location":"api/core/io.islandtime.measures/-long-microseconds/is-negative/","text":"core / io.islandtime.measures / LongMicroseconds / isNegative isNegative (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isNegative(): Boolean Is this duration negative?","title":"Is negative"},{"location":"api/core/io.islandtime.measures/-long-microseconds/is-negative/#isnegative","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isNegative(): Boolean Is this duration negative?","title":"isNegative"},{"location":"api/core/io.islandtime.measures/-long-microseconds/is-positive/","text":"core / io.islandtime.measures / LongMicroseconds / isPositive isPositive (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isPositive(): Boolean Is this duration positive?","title":"Is positive"},{"location":"api/core/io.islandtime.measures/-long-microseconds/is-positive/#ispositive","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isPositive(): Boolean Is this duration positive?","title":"isPositive"},{"location":"api/core/io.islandtime.measures/-long-microseconds/is-zero/","text":"core / io.islandtime.measures / LongMicroseconds / isZero isZero (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isZero(): Boolean Is this duration zero?","title":"Is zero"},{"location":"api/core/io.islandtime.measures/-long-microseconds/is-zero/#iszero","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isZero(): Boolean Is this duration zero?","title":"isZero"},{"location":"api/core/io.islandtime.measures/-long-microseconds/minus/","text":"core / io.islandtime.measures / LongMicroseconds / minus minus (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun minus(nanoseconds: IntNanoseconds ): LongNanoseconds operator fun minus(nanoseconds: LongNanoseconds ): LongNanoseconds operator fun minus(microseconds: IntMicroseconds ): LongMicroseconds operator fun minus(microseconds: LongMicroseconds ): LongMicroseconds operator fun minus(milliseconds: IntMilliseconds ): LongMicroseconds operator fun minus(milliseconds: LongMilliseconds ): LongMicroseconds operator fun minus(seconds: IntSeconds ): LongMicroseconds operator fun minus(seconds: LongSeconds ): LongMicroseconds operator fun minus(minutes: IntMinutes ): LongMicroseconds operator fun minus(minutes: LongMinutes ): LongMicroseconds operator fun minus(hours: IntHours ): LongMicroseconds operator fun minus(hours: LongHours ): LongMicroseconds operator fun minus(days: IntDays ): LongMicroseconds operator fun minus(days: LongDays ): LongMicroseconds","title":"Minus"},{"location":"api/core/io.islandtime.measures/-long-microseconds/minus/#minus","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun minus(nanoseconds: IntNanoseconds ): LongNanoseconds operator fun minus(nanoseconds: LongNanoseconds ): LongNanoseconds operator fun minus(microseconds: IntMicroseconds ): LongMicroseconds operator fun minus(microseconds: LongMicroseconds ): LongMicroseconds operator fun minus(milliseconds: IntMilliseconds ): LongMicroseconds operator fun minus(milliseconds: LongMilliseconds ): LongMicroseconds operator fun minus(seconds: IntSeconds ): LongMicroseconds operator fun minus(seconds: LongSeconds ): LongMicroseconds operator fun minus(minutes: IntMinutes ): LongMicroseconds operator fun minus(minutes: LongMinutes ): LongMicroseconds operator fun minus(hours: IntHours ): LongMicroseconds operator fun minus(hours: LongHours ): LongMicroseconds operator fun minus(days: IntDays ): LongMicroseconds operator fun minus(days: LongDays ): LongMicroseconds","title":"minus"},{"location":"api/core/io.islandtime.measures/-long-microseconds/plus/","text":"core / io.islandtime.measures / LongMicroseconds / plus plus (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun plus(nanoseconds: IntNanoseconds ): LongNanoseconds operator fun plus(nanoseconds: LongNanoseconds ): LongNanoseconds operator fun plus(microseconds: IntMicroseconds ): LongMicroseconds operator fun plus(microseconds: LongMicroseconds ): LongMicroseconds operator fun plus(milliseconds: IntMilliseconds ): LongMicroseconds operator fun plus(milliseconds: LongMilliseconds ): LongMicroseconds operator fun plus(seconds: IntSeconds ): LongMicroseconds operator fun plus(seconds: LongSeconds ): LongMicroseconds operator fun plus(minutes: IntMinutes ): LongMicroseconds operator fun plus(minutes: LongMinutes ): LongMicroseconds operator fun plus(hours: IntHours ): LongMicroseconds operator fun plus(hours: LongHours ): LongMicroseconds operator fun plus(days: IntDays ): LongMicroseconds operator fun plus(days: LongDays ): LongMicroseconds","title":"Plus"},{"location":"api/core/io.islandtime.measures/-long-microseconds/plus/#plus","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun plus(nanoseconds: IntNanoseconds ): LongNanoseconds operator fun plus(nanoseconds: LongNanoseconds ): LongNanoseconds operator fun plus(microseconds: IntMicroseconds ): LongMicroseconds operator fun plus(microseconds: LongMicroseconds ): LongMicroseconds operator fun plus(milliseconds: IntMilliseconds ): LongMicroseconds operator fun plus(milliseconds: LongMilliseconds ): LongMicroseconds operator fun plus(seconds: IntSeconds ): LongMicroseconds operator fun plus(seconds: LongSeconds ): LongMicroseconds operator fun plus(minutes: IntMinutes ): LongMicroseconds operator fun plus(minutes: LongMinutes ): LongMicroseconds operator fun plus(hours: IntHours ): LongMicroseconds operator fun plus(hours: LongHours ): LongMicroseconds operator fun plus(days: IntDays ): LongMicroseconds operator fun plus(days: LongDays ): LongMicroseconds","title":"plus"},{"location":"api/core/io.islandtime.measures/-long-microseconds/rem/","text":"core / io.islandtime.measures / LongMicroseconds / rem rem (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun rem(scalar: Int ): LongMicroseconds operator fun rem(scalar: Long ): LongMicroseconds","title":"Rem"},{"location":"api/core/io.islandtime.measures/-long-microseconds/rem/#rem","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun rem(scalar: Int ): LongMicroseconds operator fun rem(scalar: Long ): LongMicroseconds","title":"rem"},{"location":"api/core/io.islandtime.measures/-long-microseconds/times/","text":"core / io.islandtime.measures / LongMicroseconds / times times (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun times(scalar: Int ): LongMicroseconds operator fun times(scalar: Long ): LongMicroseconds Multiply by a scalar value. Exceptions ArithmeticException - if overflow occurs","title":"Times"},{"location":"api/core/io.islandtime.measures/-long-microseconds/times/#times","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun times(scalar: Int ): LongMicroseconds operator fun times(scalar: Long ): LongMicroseconds Multiply by a scalar value.","title":"times"},{"location":"api/core/io.islandtime.measures/-long-microseconds/times/#exceptions","text":"ArithmeticException - if overflow occurs","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-long-microseconds/to-components/","text":"core / io.islandtime.measures / LongMicroseconds / toComponents toComponents (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline fun <T> toComponents(action: (milliseconds: LongMilliseconds , microseconds: IntMicroseconds ) -> T): T inline fun <T> toComponents(action: (seconds: LongSeconds , milliseconds: IntMilliseconds , microseconds: IntMicroseconds ) -> T): T inline fun <T> toComponents(action: (minutes: LongMinutes , seconds: IntSeconds , milliseconds: IntMilliseconds , microseconds: IntMicroseconds ) -> T): T inline fun <T> toComponents(action: (hours: LongHours , minutes: IntMinutes , seconds: IntSeconds , milliseconds: IntMilliseconds , microseconds: IntMicroseconds ) -> T): T inline fun <T> toComponents(action: (days: LongDays , hours: IntHours , minutes: IntMinutes , seconds: IntSeconds , milliseconds: IntMilliseconds , microseconds: IntMicroseconds ) -> T): T","title":"To components"},{"location":"api/core/io.islandtime.measures/-long-microseconds/to-components/#tocomponents","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline fun <T> toComponents(action: (milliseconds: LongMilliseconds , microseconds: IntMicroseconds ) -> T): T inline fun <T> toComponents(action: (seconds: LongSeconds , milliseconds: IntMilliseconds , microseconds: IntMicroseconds ) -> T): T inline fun <T> toComponents(action: (minutes: LongMinutes , seconds: IntSeconds , milliseconds: IntMilliseconds , microseconds: IntMicroseconds ) -> T): T inline fun <T> toComponents(action: (hours: LongHours , minutes: IntMinutes , seconds: IntSeconds , milliseconds: IntMilliseconds , microseconds: IntMicroseconds ) -> T): T inline fun <T> toComponents(action: (days: LongDays , hours: IntHours , minutes: IntMinutes , seconds: IntSeconds , milliseconds: IntMilliseconds , microseconds: IntMicroseconds ) -> T): T","title":"toComponents"},{"location":"api/core/io.islandtime.measures/-long-microseconds/to-int-microseconds/","text":"core / io.islandtime.measures / LongMicroseconds / toIntMicroseconds toIntMicroseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toIntMicroseconds(): IntMicroseconds Convert to IntMicroseconds . Exceptions ArithmeticException - if overflow occurs","title":"To int microseconds"},{"location":"api/core/io.islandtime.measures/-long-microseconds/to-int-microseconds/#tointmicroseconds","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toIntMicroseconds(): IntMicroseconds Convert to IntMicroseconds .","title":"toIntMicroseconds"},{"location":"api/core/io.islandtime.measures/-long-microseconds/to-int-microseconds/#exceptions","text":"ArithmeticException - if overflow occurs","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-long-microseconds/to-int/","text":"core / io.islandtime.measures / LongMicroseconds / toInt toInt (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toInt(): Int Convert to a unit-less Int value. Exceptions ArithmeticException - if overflow occurs","title":"To int"},{"location":"api/core/io.islandtime.measures/-long-microseconds/to-int/#toint","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toInt(): Int Convert to a unit-less Int value.","title":"toInt"},{"location":"api/core/io.islandtime.measures/-long-microseconds/to-int/#exceptions","text":"ArithmeticException - if overflow occurs","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-long-microseconds/to-kotlin-duration/","text":"core / io.islandtime.measures / LongMicroseconds / toKotlinDuration toKotlinDuration (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toKotlinDuration(): <ERROR CLASS> (jvm) @ExperimentalTime fun toKotlinDuration(): Duration (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) Convert to a kotlin.time.Duration . (jvm) Convert to a kotlin.time.Duration .","title":"To kotlin duration"},{"location":"api/core/io.islandtime.measures/-long-microseconds/to-kotlin-duration/#tokotlinduration","text":"(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toKotlinDuration(): <ERROR CLASS> (jvm) @ExperimentalTime fun toKotlinDuration(): Duration (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) Convert to a kotlin.time.Duration . (jvm) Convert to a kotlin.time.Duration .","title":"toKotlinDuration"},{"location":"api/core/io.islandtime.measures/-long-microseconds/to-string/","text":"core / io.islandtime.measures / LongMicroseconds / toString toString (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toString(): String Convert to an ISO-8601 time interval representation.","title":"To string"},{"location":"api/core/io.islandtime.measures/-long-microseconds/to-string/#tostring","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toString(): String Convert to an ISO-8601 time interval representation.","title":"toString"},{"location":"api/core/io.islandtime.measures/-long-microseconds/unary-minus/","text":"core / io.islandtime.measures / LongMicroseconds / unaryMinus unaryMinus (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun unaryMinus(): LongMicroseconds Negate the value. Exceptions ArithmeticException - if overflow occurs","title":"Unary minus"},{"location":"api/core/io.islandtime.measures/-long-microseconds/unary-minus/#unaryminus","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun unaryMinus(): LongMicroseconds Negate the value.","title":"unaryMinus"},{"location":"api/core/io.islandtime.measures/-long-microseconds/unary-minus/#exceptions","text":"ArithmeticException - if overflow occurs","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-long-microseconds/value/","text":"core / io.islandtime.measures / LongMicroseconds / value value (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val value: Long The underlying value.","title":"Value"},{"location":"api/core/io.islandtime.measures/-long-microseconds/value/#value","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val value: Long The underlying value.","title":"value"},{"location":"api/core/io.islandtime.measures/-long-milliseconds/","text":"core / io.islandtime.measures / LongMilliseconds LongMilliseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline class LongMilliseconds : Comparable < LongMilliseconds > A number of milliseconds. Constructors Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init> A number of milliseconds. <init>(value: Long ) Properties Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) absoluteValue Returns the absolute value. val absoluteValue: LongMilliseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inDays Convert to whole days. val inDays: LongDays (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inHours Convert to whole hours. val inHours: LongHours (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inMicroseconds Convert to microseconds. val inMicroseconds: LongMicroseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inMinutes Convert to whole minutes. val inMinutes: LongMinutes (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inNanoseconds Convert to nanoseconds. val inNanoseconds: LongNanoseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inSeconds Convert to whole seconds. val inSeconds: LongSeconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) value The underlying value. val value: Long Functions Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) compareTo fun compareTo(other: LongMilliseconds ): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) div Divide by a scalar value. operator fun div(scalar: Int ): LongMilliseconds operator fun div(scalar: Long ): LongMilliseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isNegative Is this duration negative? fun isNegative(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isPositive Is this duration positive? fun isPositive(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isZero Is this duration zero? fun isZero(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) minus operator fun minus(nanoseconds: IntNanoseconds ): LongNanoseconds operator fun minus(nanoseconds: LongNanoseconds ): LongNanoseconds operator fun minus(microseconds: IntMicroseconds ): LongMicroseconds operator fun minus(microseconds: LongMicroseconds ): LongMicroseconds operator fun minus(milliseconds: IntMilliseconds ): LongMilliseconds operator fun minus(milliseconds: LongMilliseconds ): LongMilliseconds operator fun minus(seconds: IntSeconds ): LongMilliseconds operator fun minus(seconds: LongSeconds ): LongMilliseconds operator fun minus(minutes: IntMinutes ): LongMilliseconds operator fun minus(minutes: LongMinutes ): LongMilliseconds operator fun minus(hours: IntHours ): LongMilliseconds operator fun minus(hours: LongHours ): LongMilliseconds operator fun minus(days: IntDays ): LongMilliseconds operator fun minus(days: LongDays ): LongMilliseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) plus operator fun plus(nanoseconds: IntNanoseconds ): LongNanoseconds operator fun plus(nanoseconds: LongNanoseconds ): LongNanoseconds operator fun plus(microseconds: IntMicroseconds ): LongMicroseconds operator fun plus(microseconds: LongMicroseconds ): LongMicroseconds operator fun plus(milliseconds: IntMilliseconds ): LongMilliseconds operator fun plus(milliseconds: LongMilliseconds ): LongMilliseconds operator fun plus(seconds: IntSeconds ): LongMilliseconds operator fun plus(seconds: LongSeconds ): LongMilliseconds operator fun plus(minutes: IntMinutes ): LongMilliseconds operator fun plus(minutes: LongMinutes ): LongMilliseconds operator fun plus(hours: IntHours ): LongMilliseconds operator fun plus(hours: LongHours ): LongMilliseconds operator fun plus(days: IntDays ): LongMilliseconds operator fun plus(days: LongDays ): LongMilliseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) rem operator fun rem(scalar: Int ): LongMilliseconds operator fun rem(scalar: Long ): LongMilliseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) times Multiply by a scalar value. operator fun times(scalar: Int ): LongMilliseconds operator fun times(scalar: Long ): LongMilliseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toComponents fun <T> toComponents(action: (seconds: LongSeconds , milliseconds: IntMilliseconds ) -> T): T fun <T> toComponents(action: (minutes: LongMinutes , seconds: IntSeconds , milliseconds: IntMilliseconds ) -> T): T fun <T> toComponents(action: (hours: LongHours , minutes: IntMinutes , seconds: IntSeconds , milliseconds: IntMilliseconds ) -> T): T fun <T> toComponents(action: (days: LongDays , hours: IntHours , minutes: IntMinutes , seconds: IntSeconds , milliseconds: IntMilliseconds ) -> T): T (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toInt Convert to a unit-less Int value. fun toInt(): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toIntMilliseconds Convert to IntMilliseconds . fun toIntMilliseconds(): IntMilliseconds toKotlinDuration Convert to a kotlin.time.Duration .(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toKotlinDuration(): <ERROR CLASS> (jvm) fun toKotlinDuration(): Duration (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toString Convert to an ISO-8601 time interval representation. fun toString(): String (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) unaryMinus Negate the value. operator fun unaryMinus(): LongMilliseconds Companion Object Properties Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MAX The largest supported value. val MAX: LongMilliseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MIN The smallest supported value. val MIN: LongMilliseconds Extension Functions Name Summary (jvm) toJavaDuration Convert to an equivalent Java Duration . fun LongMilliseconds .toJavaDuration(): Duration","title":"Index"},{"location":"api/core/io.islandtime.measures/-long-milliseconds/#longmilliseconds","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline class LongMilliseconds : Comparable < LongMilliseconds > A number of milliseconds.","title":"LongMilliseconds"},{"location":"api/core/io.islandtime.measures/-long-milliseconds/#constructors","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init> A number of milliseconds. <init>(value: Long )","title":"Constructors"},{"location":"api/core/io.islandtime.measures/-long-milliseconds/#properties","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) absoluteValue Returns the absolute value. val absoluteValue: LongMilliseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inDays Convert to whole days. val inDays: LongDays (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inHours Convert to whole hours. val inHours: LongHours (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inMicroseconds Convert to microseconds. val inMicroseconds: LongMicroseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inMinutes Convert to whole minutes. val inMinutes: LongMinutes (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inNanoseconds Convert to nanoseconds. val inNanoseconds: LongNanoseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inSeconds Convert to whole seconds. val inSeconds: LongSeconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) value The underlying value. val value: Long","title":"Properties"},{"location":"api/core/io.islandtime.measures/-long-milliseconds/#functions","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) compareTo fun compareTo(other: LongMilliseconds ): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) div Divide by a scalar value. operator fun div(scalar: Int ): LongMilliseconds operator fun div(scalar: Long ): LongMilliseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isNegative Is this duration negative? fun isNegative(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isPositive Is this duration positive? fun isPositive(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isZero Is this duration zero? fun isZero(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) minus operator fun minus(nanoseconds: IntNanoseconds ): LongNanoseconds operator fun minus(nanoseconds: LongNanoseconds ): LongNanoseconds operator fun minus(microseconds: IntMicroseconds ): LongMicroseconds operator fun minus(microseconds: LongMicroseconds ): LongMicroseconds operator fun minus(milliseconds: IntMilliseconds ): LongMilliseconds operator fun minus(milliseconds: LongMilliseconds ): LongMilliseconds operator fun minus(seconds: IntSeconds ): LongMilliseconds operator fun minus(seconds: LongSeconds ): LongMilliseconds operator fun minus(minutes: IntMinutes ): LongMilliseconds operator fun minus(minutes: LongMinutes ): LongMilliseconds operator fun minus(hours: IntHours ): LongMilliseconds operator fun minus(hours: LongHours ): LongMilliseconds operator fun minus(days: IntDays ): LongMilliseconds operator fun minus(days: LongDays ): LongMilliseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) plus operator fun plus(nanoseconds: IntNanoseconds ): LongNanoseconds operator fun plus(nanoseconds: LongNanoseconds ): LongNanoseconds operator fun plus(microseconds: IntMicroseconds ): LongMicroseconds operator fun plus(microseconds: LongMicroseconds ): LongMicroseconds operator fun plus(milliseconds: IntMilliseconds ): LongMilliseconds operator fun plus(milliseconds: LongMilliseconds ): LongMilliseconds operator fun plus(seconds: IntSeconds ): LongMilliseconds operator fun plus(seconds: LongSeconds ): LongMilliseconds operator fun plus(minutes: IntMinutes ): LongMilliseconds operator fun plus(minutes: LongMinutes ): LongMilliseconds operator fun plus(hours: IntHours ): LongMilliseconds operator fun plus(hours: LongHours ): LongMilliseconds operator fun plus(days: IntDays ): LongMilliseconds operator fun plus(days: LongDays ): LongMilliseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) rem operator fun rem(scalar: Int ): LongMilliseconds operator fun rem(scalar: Long ): LongMilliseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) times Multiply by a scalar value. operator fun times(scalar: Int ): LongMilliseconds operator fun times(scalar: Long ): LongMilliseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toComponents fun <T> toComponents(action: (seconds: LongSeconds , milliseconds: IntMilliseconds ) -> T): T fun <T> toComponents(action: (minutes: LongMinutes , seconds: IntSeconds , milliseconds: IntMilliseconds ) -> T): T fun <T> toComponents(action: (hours: LongHours , minutes: IntMinutes , seconds: IntSeconds , milliseconds: IntMilliseconds ) -> T): T fun <T> toComponents(action: (days: LongDays , hours: IntHours , minutes: IntMinutes , seconds: IntSeconds , milliseconds: IntMilliseconds ) -> T): T (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toInt Convert to a unit-less Int value. fun toInt(): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toIntMilliseconds Convert to IntMilliseconds . fun toIntMilliseconds(): IntMilliseconds toKotlinDuration Convert to a kotlin.time.Duration .(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toKotlinDuration(): <ERROR CLASS> (jvm) fun toKotlinDuration(): Duration (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toString Convert to an ISO-8601 time interval representation. fun toString(): String (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) unaryMinus Negate the value. operator fun unaryMinus(): LongMilliseconds","title":"Functions"},{"location":"api/core/io.islandtime.measures/-long-milliseconds/#companion-object-properties","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MAX The largest supported value. val MAX: LongMilliseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MIN The smallest supported value. val MIN: LongMilliseconds","title":"Companion Object Properties"},{"location":"api/core/io.islandtime.measures/-long-milliseconds/#extension-functions","text":"Name Summary (jvm) toJavaDuration Convert to an equivalent Java Duration . fun LongMilliseconds .toJavaDuration(): Duration","title":"Extension Functions"},{"location":"api/core/io.islandtime.measures/-long-milliseconds/-init-/","text":"core / io.islandtime.measures / LongMilliseconds / <init> <init> (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init>(value: Long ) A number of milliseconds.","title":" init "},{"location":"api/core/io.islandtime.measures/-long-milliseconds/-init-/#init","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init>(value: Long ) A number of milliseconds.","title":"&lt;init&gt;"},{"location":"api/core/io.islandtime.measures/-long-milliseconds/-m-a-x/","text":"core / io.islandtime.measures / LongMilliseconds / MAX MAX (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val MAX: LongMilliseconds The largest supported value.","title":" m a x"},{"location":"api/core/io.islandtime.measures/-long-milliseconds/-m-a-x/#max","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val MAX: LongMilliseconds The largest supported value.","title":"MAX"},{"location":"api/core/io.islandtime.measures/-long-milliseconds/-m-i-n/","text":"core / io.islandtime.measures / LongMilliseconds / MIN MIN (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val MIN: LongMilliseconds The smallest supported value.","title":" m i n"},{"location":"api/core/io.islandtime.measures/-long-milliseconds/-m-i-n/#min","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val MIN: LongMilliseconds The smallest supported value.","title":"MIN"},{"location":"api/core/io.islandtime.measures/-long-milliseconds/absolute-value/","text":"core / io.islandtime.measures / LongMilliseconds / absoluteValue absoluteValue (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val absoluteValue: LongMilliseconds Returns the absolute value. Exceptions ArithmeticException - if overflow occurs","title":"Absolute value"},{"location":"api/core/io.islandtime.measures/-long-milliseconds/absolute-value/#absolutevalue","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val absoluteValue: LongMilliseconds Returns the absolute value.","title":"absoluteValue"},{"location":"api/core/io.islandtime.measures/-long-milliseconds/absolute-value/#exceptions","text":"ArithmeticException - if overflow occurs","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-long-milliseconds/compare-to/","text":"core / io.islandtime.measures / LongMilliseconds / compareTo compareTo (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun compareTo(other: LongMilliseconds ): Int","title":"Compare to"},{"location":"api/core/io.islandtime.measures/-long-milliseconds/compare-to/#compareto","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun compareTo(other: LongMilliseconds ): Int","title":"compareTo"},{"location":"api/core/io.islandtime.measures/-long-milliseconds/div/","text":"core / io.islandtime.measures / LongMilliseconds / div div (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun div(scalar: Int ): LongMilliseconds operator fun div(scalar: Long ): LongMilliseconds Divide by a scalar value. Exceptions ArithmeticException - if overflow occurs or the scalar is zero","title":"Div"},{"location":"api/core/io.islandtime.measures/-long-milliseconds/div/#div","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun div(scalar: Int ): LongMilliseconds operator fun div(scalar: Long ): LongMilliseconds Divide by a scalar value.","title":"div"},{"location":"api/core/io.islandtime.measures/-long-milliseconds/div/#exceptions","text":"ArithmeticException - if overflow occurs or the scalar is zero","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-long-milliseconds/in-days/","text":"core / io.islandtime.measures / LongMilliseconds / inDays inDays (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inDays: LongDays Convert to whole days.","title":"In days"},{"location":"api/core/io.islandtime.measures/-long-milliseconds/in-days/#indays","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inDays: LongDays Convert to whole days.","title":"inDays"},{"location":"api/core/io.islandtime.measures/-long-milliseconds/in-hours/","text":"core / io.islandtime.measures / LongMilliseconds / inHours inHours (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inHours: LongHours Convert to whole hours.","title":"In hours"},{"location":"api/core/io.islandtime.measures/-long-milliseconds/in-hours/#inhours","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inHours: LongHours Convert to whole hours.","title":"inHours"},{"location":"api/core/io.islandtime.measures/-long-milliseconds/in-microseconds/","text":"core / io.islandtime.measures / LongMilliseconds / inMicroseconds inMicroseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inMicroseconds: LongMicroseconds Convert to microseconds. Exceptions ArithmeticException - if overflow occurs","title":"In microseconds"},{"location":"api/core/io.islandtime.measures/-long-milliseconds/in-microseconds/#inmicroseconds","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inMicroseconds: LongMicroseconds Convert to microseconds.","title":"inMicroseconds"},{"location":"api/core/io.islandtime.measures/-long-milliseconds/in-microseconds/#exceptions","text":"ArithmeticException - if overflow occurs","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-long-milliseconds/in-minutes/","text":"core / io.islandtime.measures / LongMilliseconds / inMinutes inMinutes (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inMinutes: LongMinutes Convert to whole minutes.","title":"In minutes"},{"location":"api/core/io.islandtime.measures/-long-milliseconds/in-minutes/#inminutes","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inMinutes: LongMinutes Convert to whole minutes.","title":"inMinutes"},{"location":"api/core/io.islandtime.measures/-long-milliseconds/in-nanoseconds/","text":"core / io.islandtime.measures / LongMilliseconds / inNanoseconds inNanoseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inNanoseconds: LongNanoseconds Convert to nanoseconds. Exceptions ArithmeticException - if overflow occurs","title":"In nanoseconds"},{"location":"api/core/io.islandtime.measures/-long-milliseconds/in-nanoseconds/#innanoseconds","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inNanoseconds: LongNanoseconds Convert to nanoseconds.","title":"inNanoseconds"},{"location":"api/core/io.islandtime.measures/-long-milliseconds/in-nanoseconds/#exceptions","text":"ArithmeticException - if overflow occurs","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-long-milliseconds/in-seconds/","text":"core / io.islandtime.measures / LongMilliseconds / inSeconds inSeconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inSeconds: LongSeconds Convert to whole seconds.","title":"In seconds"},{"location":"api/core/io.islandtime.measures/-long-milliseconds/in-seconds/#inseconds","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inSeconds: LongSeconds Convert to whole seconds.","title":"inSeconds"},{"location":"api/core/io.islandtime.measures/-long-milliseconds/is-negative/","text":"core / io.islandtime.measures / LongMilliseconds / isNegative isNegative (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isNegative(): Boolean Is this duration negative?","title":"Is negative"},{"location":"api/core/io.islandtime.measures/-long-milliseconds/is-negative/#isnegative","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isNegative(): Boolean Is this duration negative?","title":"isNegative"},{"location":"api/core/io.islandtime.measures/-long-milliseconds/is-positive/","text":"core / io.islandtime.measures / LongMilliseconds / isPositive isPositive (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isPositive(): Boolean Is this duration positive?","title":"Is positive"},{"location":"api/core/io.islandtime.measures/-long-milliseconds/is-positive/#ispositive","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isPositive(): Boolean Is this duration positive?","title":"isPositive"},{"location":"api/core/io.islandtime.measures/-long-milliseconds/is-zero/","text":"core / io.islandtime.measures / LongMilliseconds / isZero isZero (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isZero(): Boolean Is this duration zero?","title":"Is zero"},{"location":"api/core/io.islandtime.measures/-long-milliseconds/is-zero/#iszero","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isZero(): Boolean Is this duration zero?","title":"isZero"},{"location":"api/core/io.islandtime.measures/-long-milliseconds/minus/","text":"core / io.islandtime.measures / LongMilliseconds / minus minus (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun minus(nanoseconds: IntNanoseconds ): LongNanoseconds operator fun minus(nanoseconds: LongNanoseconds ): LongNanoseconds operator fun minus(microseconds: IntMicroseconds ): LongMicroseconds operator fun minus(microseconds: LongMicroseconds ): LongMicroseconds operator fun minus(milliseconds: IntMilliseconds ): LongMilliseconds operator fun minus(milliseconds: LongMilliseconds ): LongMilliseconds operator fun minus(seconds: IntSeconds ): LongMilliseconds operator fun minus(seconds: LongSeconds ): LongMilliseconds operator fun minus(minutes: IntMinutes ): LongMilliseconds operator fun minus(minutes: LongMinutes ): LongMilliseconds operator fun minus(hours: IntHours ): LongMilliseconds operator fun minus(hours: LongHours ): LongMilliseconds operator fun minus(days: IntDays ): LongMilliseconds operator fun minus(days: LongDays ): LongMilliseconds","title":"Minus"},{"location":"api/core/io.islandtime.measures/-long-milliseconds/minus/#minus","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun minus(nanoseconds: IntNanoseconds ): LongNanoseconds operator fun minus(nanoseconds: LongNanoseconds ): LongNanoseconds operator fun minus(microseconds: IntMicroseconds ): LongMicroseconds operator fun minus(microseconds: LongMicroseconds ): LongMicroseconds operator fun minus(milliseconds: IntMilliseconds ): LongMilliseconds operator fun minus(milliseconds: LongMilliseconds ): LongMilliseconds operator fun minus(seconds: IntSeconds ): LongMilliseconds operator fun minus(seconds: LongSeconds ): LongMilliseconds operator fun minus(minutes: IntMinutes ): LongMilliseconds operator fun minus(minutes: LongMinutes ): LongMilliseconds operator fun minus(hours: IntHours ): LongMilliseconds operator fun minus(hours: LongHours ): LongMilliseconds operator fun minus(days: IntDays ): LongMilliseconds operator fun minus(days: LongDays ): LongMilliseconds","title":"minus"},{"location":"api/core/io.islandtime.measures/-long-milliseconds/plus/","text":"core / io.islandtime.measures / LongMilliseconds / plus plus (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun plus(nanoseconds: IntNanoseconds ): LongNanoseconds operator fun plus(nanoseconds: LongNanoseconds ): LongNanoseconds operator fun plus(microseconds: IntMicroseconds ): LongMicroseconds operator fun plus(microseconds: LongMicroseconds ): LongMicroseconds operator fun plus(milliseconds: IntMilliseconds ): LongMilliseconds operator fun plus(milliseconds: LongMilliseconds ): LongMilliseconds operator fun plus(seconds: IntSeconds ): LongMilliseconds operator fun plus(seconds: LongSeconds ): LongMilliseconds operator fun plus(minutes: IntMinutes ): LongMilliseconds operator fun plus(minutes: LongMinutes ): LongMilliseconds operator fun plus(hours: IntHours ): LongMilliseconds operator fun plus(hours: LongHours ): LongMilliseconds operator fun plus(days: IntDays ): LongMilliseconds operator fun plus(days: LongDays ): LongMilliseconds","title":"Plus"},{"location":"api/core/io.islandtime.measures/-long-milliseconds/plus/#plus","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun plus(nanoseconds: IntNanoseconds ): LongNanoseconds operator fun plus(nanoseconds: LongNanoseconds ): LongNanoseconds operator fun plus(microseconds: IntMicroseconds ): LongMicroseconds operator fun plus(microseconds: LongMicroseconds ): LongMicroseconds operator fun plus(milliseconds: IntMilliseconds ): LongMilliseconds operator fun plus(milliseconds: LongMilliseconds ): LongMilliseconds operator fun plus(seconds: IntSeconds ): LongMilliseconds operator fun plus(seconds: LongSeconds ): LongMilliseconds operator fun plus(minutes: IntMinutes ): LongMilliseconds operator fun plus(minutes: LongMinutes ): LongMilliseconds operator fun plus(hours: IntHours ): LongMilliseconds operator fun plus(hours: LongHours ): LongMilliseconds operator fun plus(days: IntDays ): LongMilliseconds operator fun plus(days: LongDays ): LongMilliseconds","title":"plus"},{"location":"api/core/io.islandtime.measures/-long-milliseconds/rem/","text":"core / io.islandtime.measures / LongMilliseconds / rem rem (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun rem(scalar: Int ): LongMilliseconds operator fun rem(scalar: Long ): LongMilliseconds","title":"Rem"},{"location":"api/core/io.islandtime.measures/-long-milliseconds/rem/#rem","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun rem(scalar: Int ): LongMilliseconds operator fun rem(scalar: Long ): LongMilliseconds","title":"rem"},{"location":"api/core/io.islandtime.measures/-long-milliseconds/times/","text":"core / io.islandtime.measures / LongMilliseconds / times times (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun times(scalar: Int ): LongMilliseconds operator fun times(scalar: Long ): LongMilliseconds Multiply by a scalar value. Exceptions ArithmeticException - if overflow occurs","title":"Times"},{"location":"api/core/io.islandtime.measures/-long-milliseconds/times/#times","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun times(scalar: Int ): LongMilliseconds operator fun times(scalar: Long ): LongMilliseconds Multiply by a scalar value.","title":"times"},{"location":"api/core/io.islandtime.measures/-long-milliseconds/times/#exceptions","text":"ArithmeticException - if overflow occurs","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-long-milliseconds/to-components/","text":"core / io.islandtime.measures / LongMilliseconds / toComponents toComponents (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline fun <T> toComponents(action: (seconds: LongSeconds , milliseconds: IntMilliseconds ) -> T): T inline fun <T> toComponents(action: (minutes: LongMinutes , seconds: IntSeconds , milliseconds: IntMilliseconds ) -> T): T inline fun <T> toComponents(action: (hours: LongHours , minutes: IntMinutes , seconds: IntSeconds , milliseconds: IntMilliseconds ) -> T): T inline fun <T> toComponents(action: (days: LongDays , hours: IntHours , minutes: IntMinutes , seconds: IntSeconds , milliseconds: IntMilliseconds ) -> T): T","title":"To components"},{"location":"api/core/io.islandtime.measures/-long-milliseconds/to-components/#tocomponents","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline fun <T> toComponents(action: (seconds: LongSeconds , milliseconds: IntMilliseconds ) -> T): T inline fun <T> toComponents(action: (minutes: LongMinutes , seconds: IntSeconds , milliseconds: IntMilliseconds ) -> T): T inline fun <T> toComponents(action: (hours: LongHours , minutes: IntMinutes , seconds: IntSeconds , milliseconds: IntMilliseconds ) -> T): T inline fun <T> toComponents(action: (days: LongDays , hours: IntHours , minutes: IntMinutes , seconds: IntSeconds , milliseconds: IntMilliseconds ) -> T): T","title":"toComponents"},{"location":"api/core/io.islandtime.measures/-long-milliseconds/to-int-milliseconds/","text":"core / io.islandtime.measures / LongMilliseconds / toIntMilliseconds toIntMilliseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toIntMilliseconds(): IntMilliseconds Convert to IntMilliseconds . Exceptions ArithmeticException - if overflow occurs","title":"To int milliseconds"},{"location":"api/core/io.islandtime.measures/-long-milliseconds/to-int-milliseconds/#tointmilliseconds","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toIntMilliseconds(): IntMilliseconds Convert to IntMilliseconds .","title":"toIntMilliseconds"},{"location":"api/core/io.islandtime.measures/-long-milliseconds/to-int-milliseconds/#exceptions","text":"ArithmeticException - if overflow occurs","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-long-milliseconds/to-int/","text":"core / io.islandtime.measures / LongMilliseconds / toInt toInt (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toInt(): Int Convert to a unit-less Int value. Exceptions ArithmeticException - if overflow occurs","title":"To int"},{"location":"api/core/io.islandtime.measures/-long-milliseconds/to-int/#toint","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toInt(): Int Convert to a unit-less Int value.","title":"toInt"},{"location":"api/core/io.islandtime.measures/-long-milliseconds/to-int/#exceptions","text":"ArithmeticException - if overflow occurs","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-long-milliseconds/to-kotlin-duration/","text":"core / io.islandtime.measures / LongMilliseconds / toKotlinDuration toKotlinDuration (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toKotlinDuration(): <ERROR CLASS> (jvm) @ExperimentalTime fun toKotlinDuration(): Duration (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) Convert to a kotlin.time.Duration . (jvm) Convert to a kotlin.time.Duration .","title":"To kotlin duration"},{"location":"api/core/io.islandtime.measures/-long-milliseconds/to-kotlin-duration/#tokotlinduration","text":"(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toKotlinDuration(): <ERROR CLASS> (jvm) @ExperimentalTime fun toKotlinDuration(): Duration (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) Convert to a kotlin.time.Duration . (jvm) Convert to a kotlin.time.Duration .","title":"toKotlinDuration"},{"location":"api/core/io.islandtime.measures/-long-milliseconds/to-string/","text":"core / io.islandtime.measures / LongMilliseconds / toString toString (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toString(): String Convert to an ISO-8601 time interval representation.","title":"To string"},{"location":"api/core/io.islandtime.measures/-long-milliseconds/to-string/#tostring","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toString(): String Convert to an ISO-8601 time interval representation.","title":"toString"},{"location":"api/core/io.islandtime.measures/-long-milliseconds/unary-minus/","text":"core / io.islandtime.measures / LongMilliseconds / unaryMinus unaryMinus (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun unaryMinus(): LongMilliseconds Negate the value. Exceptions ArithmeticException - if overflow occurs","title":"Unary minus"},{"location":"api/core/io.islandtime.measures/-long-milliseconds/unary-minus/#unaryminus","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun unaryMinus(): LongMilliseconds Negate the value.","title":"unaryMinus"},{"location":"api/core/io.islandtime.measures/-long-milliseconds/unary-minus/#exceptions","text":"ArithmeticException - if overflow occurs","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-long-milliseconds/value/","text":"core / io.islandtime.measures / LongMilliseconds / value value (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val value: Long The underlying value.","title":"Value"},{"location":"api/core/io.islandtime.measures/-long-milliseconds/value/#value","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val value: Long The underlying value.","title":"value"},{"location":"api/core/io.islandtime.measures/-long-minutes/","text":"core / io.islandtime.measures / LongMinutes LongMinutes (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline class LongMinutes : Comparable < LongMinutes > A number of minutes. Constructors Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init> A number of minutes. <init>(value: Long ) Properties Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) absoluteValue Returns the absolute value. val absoluteValue: LongMinutes (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inDays Convert to whole days. val inDays: LongDays (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inHours Convert to whole hours. val inHours: LongHours (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inMicroseconds Convert to microseconds. val inMicroseconds: LongMicroseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inMilliseconds Convert to milliseconds. val inMilliseconds: LongMilliseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inNanoseconds Convert to nanoseconds. val inNanoseconds: LongNanoseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inSeconds Convert to seconds. val inSeconds: LongSeconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) value The underlying value. val value: Long Functions Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) compareTo fun compareTo(other: LongMinutes ): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) div Divide by a scalar value. operator fun div(scalar: Int ): LongMinutes operator fun div(scalar: Long ): LongMinutes (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isNegative Is this duration negative? fun isNegative(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isPositive Is this duration positive? fun isPositive(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isZero Is this duration zero? fun isZero(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) minus operator fun minus(nanoseconds: IntNanoseconds ): LongNanoseconds operator fun minus(nanoseconds: LongNanoseconds ): LongNanoseconds operator fun minus(microseconds: IntMicroseconds ): LongMicroseconds operator fun minus(microseconds: LongMicroseconds ): LongMicroseconds operator fun minus(milliseconds: IntMilliseconds ): LongMilliseconds operator fun minus(milliseconds: LongMilliseconds ): LongMilliseconds operator fun minus(seconds: IntSeconds ): LongSeconds operator fun minus(seconds: LongSeconds ): LongSeconds operator fun minus(minutes: IntMinutes ): LongMinutes operator fun minus(minutes: LongMinutes ): LongMinutes operator fun minus(hours: IntHours ): LongMinutes operator fun minus(hours: LongHours ): LongMinutes operator fun minus(days: IntDays ): LongMinutes operator fun minus(days: LongDays ): LongMinutes (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) plus operator fun plus(nanoseconds: IntNanoseconds ): LongNanoseconds operator fun plus(nanoseconds: LongNanoseconds ): LongNanoseconds operator fun plus(microseconds: IntMicroseconds ): LongMicroseconds operator fun plus(microseconds: LongMicroseconds ): LongMicroseconds operator fun plus(milliseconds: IntMilliseconds ): LongMilliseconds operator fun plus(milliseconds: LongMilliseconds ): LongMilliseconds operator fun plus(seconds: IntSeconds ): LongSeconds operator fun plus(seconds: LongSeconds ): LongSeconds operator fun plus(minutes: IntMinutes ): LongMinutes operator fun plus(minutes: LongMinutes ): LongMinutes operator fun plus(hours: IntHours ): LongMinutes operator fun plus(hours: LongHours ): LongMinutes operator fun plus(days: IntDays ): LongMinutes operator fun plus(days: LongDays ): LongMinutes (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) rem operator fun rem(scalar: Int ): LongMinutes operator fun rem(scalar: Long ): LongMinutes (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) times Multiply by a scalar value. operator fun times(scalar: Int ): LongMinutes operator fun times(scalar: Long ): LongMinutes (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toComponents fun <T> toComponents(action: (hours: LongHours , minutes: IntMinutes ) -> T): T fun <T> toComponents(action: (days: LongDays , hours: IntHours , minutes: IntMinutes ) -> T): T (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toInt Convert to a unit-less Int value. fun toInt(): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toIntMinutes Convert to IntMinutes . fun toIntMinutes(): IntMinutes toKotlinDuration Convert to a kotlin.time.Duration .(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toKotlinDuration(): <ERROR CLASS> (jvm) fun toKotlinDuration(): Duration (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toString Convert to an ISO-8601 time interval representation. fun toString(): String (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) unaryMinus Negate the value. operator fun unaryMinus(): LongMinutes Companion Object Properties Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MAX The largest supported value. val MAX: LongMinutes (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MIN The smallest supported value. val MIN: LongMinutes Extension Functions Name Summary (jvm) toJavaDuration Convert to an equivalent Java Duration . fun LongMinutes .toJavaDuration(): Duration","title":"Index"},{"location":"api/core/io.islandtime.measures/-long-minutes/#longminutes","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline class LongMinutes : Comparable < LongMinutes > A number of minutes.","title":"LongMinutes"},{"location":"api/core/io.islandtime.measures/-long-minutes/#constructors","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init> A number of minutes. <init>(value: Long )","title":"Constructors"},{"location":"api/core/io.islandtime.measures/-long-minutes/#properties","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) absoluteValue Returns the absolute value. val absoluteValue: LongMinutes (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inDays Convert to whole days. val inDays: LongDays (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inHours Convert to whole hours. val inHours: LongHours (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inMicroseconds Convert to microseconds. val inMicroseconds: LongMicroseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inMilliseconds Convert to milliseconds. val inMilliseconds: LongMilliseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inNanoseconds Convert to nanoseconds. val inNanoseconds: LongNanoseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inSeconds Convert to seconds. val inSeconds: LongSeconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) value The underlying value. val value: Long","title":"Properties"},{"location":"api/core/io.islandtime.measures/-long-minutes/#functions","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) compareTo fun compareTo(other: LongMinutes ): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) div Divide by a scalar value. operator fun div(scalar: Int ): LongMinutes operator fun div(scalar: Long ): LongMinutes (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isNegative Is this duration negative? fun isNegative(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isPositive Is this duration positive? fun isPositive(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isZero Is this duration zero? fun isZero(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) minus operator fun minus(nanoseconds: IntNanoseconds ): LongNanoseconds operator fun minus(nanoseconds: LongNanoseconds ): LongNanoseconds operator fun minus(microseconds: IntMicroseconds ): LongMicroseconds operator fun minus(microseconds: LongMicroseconds ): LongMicroseconds operator fun minus(milliseconds: IntMilliseconds ): LongMilliseconds operator fun minus(milliseconds: LongMilliseconds ): LongMilliseconds operator fun minus(seconds: IntSeconds ): LongSeconds operator fun minus(seconds: LongSeconds ): LongSeconds operator fun minus(minutes: IntMinutes ): LongMinutes operator fun minus(minutes: LongMinutes ): LongMinutes operator fun minus(hours: IntHours ): LongMinutes operator fun minus(hours: LongHours ): LongMinutes operator fun minus(days: IntDays ): LongMinutes operator fun minus(days: LongDays ): LongMinutes (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) plus operator fun plus(nanoseconds: IntNanoseconds ): LongNanoseconds operator fun plus(nanoseconds: LongNanoseconds ): LongNanoseconds operator fun plus(microseconds: IntMicroseconds ): LongMicroseconds operator fun plus(microseconds: LongMicroseconds ): LongMicroseconds operator fun plus(milliseconds: IntMilliseconds ): LongMilliseconds operator fun plus(milliseconds: LongMilliseconds ): LongMilliseconds operator fun plus(seconds: IntSeconds ): LongSeconds operator fun plus(seconds: LongSeconds ): LongSeconds operator fun plus(minutes: IntMinutes ): LongMinutes operator fun plus(minutes: LongMinutes ): LongMinutes operator fun plus(hours: IntHours ): LongMinutes operator fun plus(hours: LongHours ): LongMinutes operator fun plus(days: IntDays ): LongMinutes operator fun plus(days: LongDays ): LongMinutes (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) rem operator fun rem(scalar: Int ): LongMinutes operator fun rem(scalar: Long ): LongMinutes (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) times Multiply by a scalar value. operator fun times(scalar: Int ): LongMinutes operator fun times(scalar: Long ): LongMinutes (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toComponents fun <T> toComponents(action: (hours: LongHours , minutes: IntMinutes ) -> T): T fun <T> toComponents(action: (days: LongDays , hours: IntHours , minutes: IntMinutes ) -> T): T (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toInt Convert to a unit-less Int value. fun toInt(): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toIntMinutes Convert to IntMinutes . fun toIntMinutes(): IntMinutes toKotlinDuration Convert to a kotlin.time.Duration .(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toKotlinDuration(): <ERROR CLASS> (jvm) fun toKotlinDuration(): Duration (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toString Convert to an ISO-8601 time interval representation. fun toString(): String (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) unaryMinus Negate the value. operator fun unaryMinus(): LongMinutes","title":"Functions"},{"location":"api/core/io.islandtime.measures/-long-minutes/#companion-object-properties","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MAX The largest supported value. val MAX: LongMinutes (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MIN The smallest supported value. val MIN: LongMinutes","title":"Companion Object Properties"},{"location":"api/core/io.islandtime.measures/-long-minutes/#extension-functions","text":"Name Summary (jvm) toJavaDuration Convert to an equivalent Java Duration . fun LongMinutes .toJavaDuration(): Duration","title":"Extension Functions"},{"location":"api/core/io.islandtime.measures/-long-minutes/-init-/","text":"core / io.islandtime.measures / LongMinutes / <init> <init> (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init>(value: Long ) A number of minutes.","title":" init "},{"location":"api/core/io.islandtime.measures/-long-minutes/-init-/#init","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init>(value: Long ) A number of minutes.","title":"&lt;init&gt;"},{"location":"api/core/io.islandtime.measures/-long-minutes/-m-a-x/","text":"core / io.islandtime.measures / LongMinutes / MAX MAX (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val MAX: LongMinutes The largest supported value.","title":" m a x"},{"location":"api/core/io.islandtime.measures/-long-minutes/-m-a-x/#max","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val MAX: LongMinutes The largest supported value.","title":"MAX"},{"location":"api/core/io.islandtime.measures/-long-minutes/-m-i-n/","text":"core / io.islandtime.measures / LongMinutes / MIN MIN (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val MIN: LongMinutes The smallest supported value.","title":" m i n"},{"location":"api/core/io.islandtime.measures/-long-minutes/-m-i-n/#min","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val MIN: LongMinutes The smallest supported value.","title":"MIN"},{"location":"api/core/io.islandtime.measures/-long-minutes/absolute-value/","text":"core / io.islandtime.measures / LongMinutes / absoluteValue absoluteValue (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val absoluteValue: LongMinutes Returns the absolute value. Exceptions ArithmeticException - if overflow occurs","title":"Absolute value"},{"location":"api/core/io.islandtime.measures/-long-minutes/absolute-value/#absolutevalue","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val absoluteValue: LongMinutes Returns the absolute value.","title":"absoluteValue"},{"location":"api/core/io.islandtime.measures/-long-minutes/absolute-value/#exceptions","text":"ArithmeticException - if overflow occurs","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-long-minutes/compare-to/","text":"core / io.islandtime.measures / LongMinutes / compareTo compareTo (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun compareTo(other: LongMinutes ): Int","title":"Compare to"},{"location":"api/core/io.islandtime.measures/-long-minutes/compare-to/#compareto","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun compareTo(other: LongMinutes ): Int","title":"compareTo"},{"location":"api/core/io.islandtime.measures/-long-minutes/div/","text":"core / io.islandtime.measures / LongMinutes / div div (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun div(scalar: Int ): LongMinutes operator fun div(scalar: Long ): LongMinutes Divide by a scalar value. Exceptions ArithmeticException - if overflow occurs or the scalar is zero","title":"Div"},{"location":"api/core/io.islandtime.measures/-long-minutes/div/#div","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun div(scalar: Int ): LongMinutes operator fun div(scalar: Long ): LongMinutes Divide by a scalar value.","title":"div"},{"location":"api/core/io.islandtime.measures/-long-minutes/div/#exceptions","text":"ArithmeticException - if overflow occurs or the scalar is zero","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-long-minutes/in-days/","text":"core / io.islandtime.measures / LongMinutes / inDays inDays (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inDays: LongDays Convert to whole days.","title":"In days"},{"location":"api/core/io.islandtime.measures/-long-minutes/in-days/#indays","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inDays: LongDays Convert to whole days.","title":"inDays"},{"location":"api/core/io.islandtime.measures/-long-minutes/in-hours/","text":"core / io.islandtime.measures / LongMinutes / inHours inHours (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inHours: LongHours Convert to whole hours.","title":"In hours"},{"location":"api/core/io.islandtime.measures/-long-minutes/in-hours/#inhours","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inHours: LongHours Convert to whole hours.","title":"inHours"},{"location":"api/core/io.islandtime.measures/-long-minutes/in-microseconds/","text":"core / io.islandtime.measures / LongMinutes / inMicroseconds inMicroseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inMicroseconds: LongMicroseconds Convert to microseconds. Exceptions ArithmeticException - if overflow occurs","title":"In microseconds"},{"location":"api/core/io.islandtime.measures/-long-minutes/in-microseconds/#inmicroseconds","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inMicroseconds: LongMicroseconds Convert to microseconds.","title":"inMicroseconds"},{"location":"api/core/io.islandtime.measures/-long-minutes/in-microseconds/#exceptions","text":"ArithmeticException - if overflow occurs","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-long-minutes/in-milliseconds/","text":"core / io.islandtime.measures / LongMinutes / inMilliseconds inMilliseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inMilliseconds: LongMilliseconds Convert to milliseconds. Exceptions ArithmeticException - if overflow occurs","title":"In milliseconds"},{"location":"api/core/io.islandtime.measures/-long-minutes/in-milliseconds/#inmilliseconds","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inMilliseconds: LongMilliseconds Convert to milliseconds.","title":"inMilliseconds"},{"location":"api/core/io.islandtime.measures/-long-minutes/in-milliseconds/#exceptions","text":"ArithmeticException - if overflow occurs","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-long-minutes/in-nanoseconds/","text":"core / io.islandtime.measures / LongMinutes / inNanoseconds inNanoseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inNanoseconds: LongNanoseconds Convert to nanoseconds. Exceptions ArithmeticException - if overflow occurs","title":"In nanoseconds"},{"location":"api/core/io.islandtime.measures/-long-minutes/in-nanoseconds/#innanoseconds","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inNanoseconds: LongNanoseconds Convert to nanoseconds.","title":"inNanoseconds"},{"location":"api/core/io.islandtime.measures/-long-minutes/in-nanoseconds/#exceptions","text":"ArithmeticException - if overflow occurs","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-long-minutes/in-seconds/","text":"core / io.islandtime.measures / LongMinutes / inSeconds inSeconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inSeconds: LongSeconds Convert to seconds. Exceptions ArithmeticException - if overflow occurs","title":"In seconds"},{"location":"api/core/io.islandtime.measures/-long-minutes/in-seconds/#inseconds","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inSeconds: LongSeconds Convert to seconds.","title":"inSeconds"},{"location":"api/core/io.islandtime.measures/-long-minutes/in-seconds/#exceptions","text":"ArithmeticException - if overflow occurs","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-long-minutes/is-negative/","text":"core / io.islandtime.measures / LongMinutes / isNegative isNegative (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isNegative(): Boolean Is this duration negative?","title":"Is negative"},{"location":"api/core/io.islandtime.measures/-long-minutes/is-negative/#isnegative","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isNegative(): Boolean Is this duration negative?","title":"isNegative"},{"location":"api/core/io.islandtime.measures/-long-minutes/is-positive/","text":"core / io.islandtime.measures / LongMinutes / isPositive isPositive (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isPositive(): Boolean Is this duration positive?","title":"Is positive"},{"location":"api/core/io.islandtime.measures/-long-minutes/is-positive/#ispositive","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isPositive(): Boolean Is this duration positive?","title":"isPositive"},{"location":"api/core/io.islandtime.measures/-long-minutes/is-zero/","text":"core / io.islandtime.measures / LongMinutes / isZero isZero (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isZero(): Boolean Is this duration zero?","title":"Is zero"},{"location":"api/core/io.islandtime.measures/-long-minutes/is-zero/#iszero","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isZero(): Boolean Is this duration zero?","title":"isZero"},{"location":"api/core/io.islandtime.measures/-long-minutes/minus/","text":"core / io.islandtime.measures / LongMinutes / minus minus (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun minus(nanoseconds: IntNanoseconds ): LongNanoseconds operator fun minus(nanoseconds: LongNanoseconds ): LongNanoseconds operator fun minus(microseconds: IntMicroseconds ): LongMicroseconds operator fun minus(microseconds: LongMicroseconds ): LongMicroseconds operator fun minus(milliseconds: IntMilliseconds ): LongMilliseconds operator fun minus(milliseconds: LongMilliseconds ): LongMilliseconds operator fun minus(seconds: IntSeconds ): LongSeconds operator fun minus(seconds: LongSeconds ): LongSeconds operator fun minus(minutes: IntMinutes ): LongMinutes operator fun minus(minutes: LongMinutes ): LongMinutes operator fun minus(hours: IntHours ): LongMinutes operator fun minus(hours: LongHours ): LongMinutes operator fun minus(days: IntDays ): LongMinutes operator fun minus(days: LongDays ): LongMinutes","title":"Minus"},{"location":"api/core/io.islandtime.measures/-long-minutes/minus/#minus","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun minus(nanoseconds: IntNanoseconds ): LongNanoseconds operator fun minus(nanoseconds: LongNanoseconds ): LongNanoseconds operator fun minus(microseconds: IntMicroseconds ): LongMicroseconds operator fun minus(microseconds: LongMicroseconds ): LongMicroseconds operator fun minus(milliseconds: IntMilliseconds ): LongMilliseconds operator fun minus(milliseconds: LongMilliseconds ): LongMilliseconds operator fun minus(seconds: IntSeconds ): LongSeconds operator fun minus(seconds: LongSeconds ): LongSeconds operator fun minus(minutes: IntMinutes ): LongMinutes operator fun minus(minutes: LongMinutes ): LongMinutes operator fun minus(hours: IntHours ): LongMinutes operator fun minus(hours: LongHours ): LongMinutes operator fun minus(days: IntDays ): LongMinutes operator fun minus(days: LongDays ): LongMinutes","title":"minus"},{"location":"api/core/io.islandtime.measures/-long-minutes/plus/","text":"core / io.islandtime.measures / LongMinutes / plus plus (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun plus(nanoseconds: IntNanoseconds ): LongNanoseconds operator fun plus(nanoseconds: LongNanoseconds ): LongNanoseconds operator fun plus(microseconds: IntMicroseconds ): LongMicroseconds operator fun plus(microseconds: LongMicroseconds ): LongMicroseconds operator fun plus(milliseconds: IntMilliseconds ): LongMilliseconds operator fun plus(milliseconds: LongMilliseconds ): LongMilliseconds operator fun plus(seconds: IntSeconds ): LongSeconds operator fun plus(seconds: LongSeconds ): LongSeconds operator fun plus(minutes: IntMinutes ): LongMinutes operator fun plus(minutes: LongMinutes ): LongMinutes operator fun plus(hours: IntHours ): LongMinutes operator fun plus(hours: LongHours ): LongMinutes operator fun plus(days: IntDays ): LongMinutes operator fun plus(days: LongDays ): LongMinutes","title":"Plus"},{"location":"api/core/io.islandtime.measures/-long-minutes/plus/#plus","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun plus(nanoseconds: IntNanoseconds ): LongNanoseconds operator fun plus(nanoseconds: LongNanoseconds ): LongNanoseconds operator fun plus(microseconds: IntMicroseconds ): LongMicroseconds operator fun plus(microseconds: LongMicroseconds ): LongMicroseconds operator fun plus(milliseconds: IntMilliseconds ): LongMilliseconds operator fun plus(milliseconds: LongMilliseconds ): LongMilliseconds operator fun plus(seconds: IntSeconds ): LongSeconds operator fun plus(seconds: LongSeconds ): LongSeconds operator fun plus(minutes: IntMinutes ): LongMinutes operator fun plus(minutes: LongMinutes ): LongMinutes operator fun plus(hours: IntHours ): LongMinutes operator fun plus(hours: LongHours ): LongMinutes operator fun plus(days: IntDays ): LongMinutes operator fun plus(days: LongDays ): LongMinutes","title":"plus"},{"location":"api/core/io.islandtime.measures/-long-minutes/rem/","text":"core / io.islandtime.measures / LongMinutes / rem rem (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun rem(scalar: Int ): LongMinutes operator fun rem(scalar: Long ): LongMinutes","title":"Rem"},{"location":"api/core/io.islandtime.measures/-long-minutes/rem/#rem","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun rem(scalar: Int ): LongMinutes operator fun rem(scalar: Long ): LongMinutes","title":"rem"},{"location":"api/core/io.islandtime.measures/-long-minutes/times/","text":"core / io.islandtime.measures / LongMinutes / times times (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun times(scalar: Int ): LongMinutes operator fun times(scalar: Long ): LongMinutes Multiply by a scalar value. Exceptions ArithmeticException - if overflow occurs","title":"Times"},{"location":"api/core/io.islandtime.measures/-long-minutes/times/#times","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun times(scalar: Int ): LongMinutes operator fun times(scalar: Long ): LongMinutes Multiply by a scalar value.","title":"times"},{"location":"api/core/io.islandtime.measures/-long-minutes/times/#exceptions","text":"ArithmeticException - if overflow occurs","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-long-minutes/to-components/","text":"core / io.islandtime.measures / LongMinutes / toComponents toComponents (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline fun <T> toComponents(action: (hours: LongHours , minutes: IntMinutes ) -> T): T inline fun <T> toComponents(action: (days: LongDays , hours: IntHours , minutes: IntMinutes ) -> T): T","title":"To components"},{"location":"api/core/io.islandtime.measures/-long-minutes/to-components/#tocomponents","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline fun <T> toComponents(action: (hours: LongHours , minutes: IntMinutes ) -> T): T inline fun <T> toComponents(action: (days: LongDays , hours: IntHours , minutes: IntMinutes ) -> T): T","title":"toComponents"},{"location":"api/core/io.islandtime.measures/-long-minutes/to-int-minutes/","text":"core / io.islandtime.measures / LongMinutes / toIntMinutes toIntMinutes (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toIntMinutes(): IntMinutes Convert to IntMinutes . Exceptions ArithmeticException - if overflow occurs","title":"To int minutes"},{"location":"api/core/io.islandtime.measures/-long-minutes/to-int-minutes/#tointminutes","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toIntMinutes(): IntMinutes Convert to IntMinutes .","title":"toIntMinutes"},{"location":"api/core/io.islandtime.measures/-long-minutes/to-int-minutes/#exceptions","text":"ArithmeticException - if overflow occurs","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-long-minutes/to-int/","text":"core / io.islandtime.measures / LongMinutes / toInt toInt (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toInt(): Int Convert to a unit-less Int value. Exceptions ArithmeticException - if overflow occurs","title":"To int"},{"location":"api/core/io.islandtime.measures/-long-minutes/to-int/#toint","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toInt(): Int Convert to a unit-less Int value.","title":"toInt"},{"location":"api/core/io.islandtime.measures/-long-minutes/to-int/#exceptions","text":"ArithmeticException - if overflow occurs","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-long-minutes/to-kotlin-duration/","text":"core / io.islandtime.measures / LongMinutes / toKotlinDuration toKotlinDuration (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toKotlinDuration(): <ERROR CLASS> (jvm) @ExperimentalTime fun toKotlinDuration(): Duration (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) Convert to a kotlin.time.Duration . (jvm) Convert to a kotlin.time.Duration .","title":"To kotlin duration"},{"location":"api/core/io.islandtime.measures/-long-minutes/to-kotlin-duration/#tokotlinduration","text":"(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toKotlinDuration(): <ERROR CLASS> (jvm) @ExperimentalTime fun toKotlinDuration(): Duration (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) Convert to a kotlin.time.Duration . (jvm) Convert to a kotlin.time.Duration .","title":"toKotlinDuration"},{"location":"api/core/io.islandtime.measures/-long-minutes/to-string/","text":"core / io.islandtime.measures / LongMinutes / toString toString (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toString(): String Convert to an ISO-8601 time interval representation.","title":"To string"},{"location":"api/core/io.islandtime.measures/-long-minutes/to-string/#tostring","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toString(): String Convert to an ISO-8601 time interval representation.","title":"toString"},{"location":"api/core/io.islandtime.measures/-long-minutes/unary-minus/","text":"core / io.islandtime.measures / LongMinutes / unaryMinus unaryMinus (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun unaryMinus(): LongMinutes Negate the value. Exceptions ArithmeticException - if overflow occurs","title":"Unary minus"},{"location":"api/core/io.islandtime.measures/-long-minutes/unary-minus/#unaryminus","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun unaryMinus(): LongMinutes Negate the value.","title":"unaryMinus"},{"location":"api/core/io.islandtime.measures/-long-minutes/unary-minus/#exceptions","text":"ArithmeticException - if overflow occurs","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-long-minutes/value/","text":"core / io.islandtime.measures / LongMinutes / value value (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val value: Long The underlying value.","title":"Value"},{"location":"api/core/io.islandtime.measures/-long-minutes/value/#value","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val value: Long The underlying value.","title":"value"},{"location":"api/core/io.islandtime.measures/-long-months/","text":"core / io.islandtime.measures / LongMonths LongMonths (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline class LongMonths : Comparable < LongMonths > A number of months. Constructors Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init> A number of months. <init>(value: Long ) Properties Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) absoluteValue Returns the absolute value. val absoluteValue: LongMonths (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inCenturies Convert to whole centuries. val inCenturies: LongCenturies (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inDecades Convert to whole decades. val inDecades: LongDecades (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inYears Convert to whole years. val inYears: LongYears (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) value The underlying value. val value: Long Functions Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) compareTo fun compareTo(other: LongMonths ): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) div Divide by a scalar value. operator fun div(scalar: Int ): LongMonths operator fun div(scalar: Long ): LongMonths (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isNegative Is this duration negative? fun isNegative(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isPositive Is this duration positive? fun isPositive(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isZero Is this duration zero? fun isZero(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) minus operator fun minus(months: IntMonths ): LongMonths operator fun minus(months: LongMonths ): LongMonths operator fun minus(years: IntYears ): LongMonths operator fun minus(years: LongYears ): LongMonths operator fun minus(decades: IntDecades ): LongMonths operator fun minus(decades: LongDecades ): LongMonths operator fun minus(centuries: IntCenturies ): LongMonths operator fun minus(centuries: LongCenturies ): LongMonths (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) plus operator fun plus(months: IntMonths ): LongMonths operator fun plus(months: LongMonths ): LongMonths operator fun plus(years: IntYears ): LongMonths operator fun plus(years: LongYears ): LongMonths operator fun plus(decades: IntDecades ): LongMonths operator fun plus(decades: LongDecades ): LongMonths operator fun plus(centuries: IntCenturies ): LongMonths operator fun plus(centuries: LongCenturies ): LongMonths (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) rem operator fun rem(scalar: Int ): LongMonths operator fun rem(scalar: Long ): LongMonths (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) times Multiply by a scalar value. operator fun times(scalar: Int ): LongMonths operator fun times(scalar: Long ): LongMonths (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toComponents fun <T> toComponents(action: (years: LongYears , months: IntMonths ) -> T): T fun <T> toComponents(action: (decades: LongDecades , years: IntYears , months: IntMonths ) -> T): T fun <T> toComponents(action: (centuries: LongCenturies , decades: IntDecades , years: IntYears , months: IntMonths ) -> T): T (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toInt Convert to a unit-less Int value. fun toInt(): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toIntMonths Convert to IntMonths . fun toIntMonths(): IntMonths (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toString Convert to an ISO-8601 time interval representation. fun toString(): String (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) unaryMinus Negate the value. operator fun unaryMinus(): LongMonths Companion Object Properties Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MAX The largest supported value. val MAX: LongMonths (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MIN The smallest supported value. val MIN: LongMonths Extension Functions Name Summary (jvm) toJavaPeriod Convert to an equivalent Java Period . fun LongMonths .toJavaPeriod(): Period","title":"Index"},{"location":"api/core/io.islandtime.measures/-long-months/#longmonths","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline class LongMonths : Comparable < LongMonths > A number of months.","title":"LongMonths"},{"location":"api/core/io.islandtime.measures/-long-months/#constructors","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init> A number of months. <init>(value: Long )","title":"Constructors"},{"location":"api/core/io.islandtime.measures/-long-months/#properties","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) absoluteValue Returns the absolute value. val absoluteValue: LongMonths (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inCenturies Convert to whole centuries. val inCenturies: LongCenturies (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inDecades Convert to whole decades. val inDecades: LongDecades (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inYears Convert to whole years. val inYears: LongYears (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) value The underlying value. val value: Long","title":"Properties"},{"location":"api/core/io.islandtime.measures/-long-months/#functions","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) compareTo fun compareTo(other: LongMonths ): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) div Divide by a scalar value. operator fun div(scalar: Int ): LongMonths operator fun div(scalar: Long ): LongMonths (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isNegative Is this duration negative? fun isNegative(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isPositive Is this duration positive? fun isPositive(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isZero Is this duration zero? fun isZero(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) minus operator fun minus(months: IntMonths ): LongMonths operator fun minus(months: LongMonths ): LongMonths operator fun minus(years: IntYears ): LongMonths operator fun minus(years: LongYears ): LongMonths operator fun minus(decades: IntDecades ): LongMonths operator fun minus(decades: LongDecades ): LongMonths operator fun minus(centuries: IntCenturies ): LongMonths operator fun minus(centuries: LongCenturies ): LongMonths (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) plus operator fun plus(months: IntMonths ): LongMonths operator fun plus(months: LongMonths ): LongMonths operator fun plus(years: IntYears ): LongMonths operator fun plus(years: LongYears ): LongMonths operator fun plus(decades: IntDecades ): LongMonths operator fun plus(decades: LongDecades ): LongMonths operator fun plus(centuries: IntCenturies ): LongMonths operator fun plus(centuries: LongCenturies ): LongMonths (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) rem operator fun rem(scalar: Int ): LongMonths operator fun rem(scalar: Long ): LongMonths (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) times Multiply by a scalar value. operator fun times(scalar: Int ): LongMonths operator fun times(scalar: Long ): LongMonths (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toComponents fun <T> toComponents(action: (years: LongYears , months: IntMonths ) -> T): T fun <T> toComponents(action: (decades: LongDecades , years: IntYears , months: IntMonths ) -> T): T fun <T> toComponents(action: (centuries: LongCenturies , decades: IntDecades , years: IntYears , months: IntMonths ) -> T): T (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toInt Convert to a unit-less Int value. fun toInt(): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toIntMonths Convert to IntMonths . fun toIntMonths(): IntMonths (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toString Convert to an ISO-8601 time interval representation. fun toString(): String (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) unaryMinus Negate the value. operator fun unaryMinus(): LongMonths","title":"Functions"},{"location":"api/core/io.islandtime.measures/-long-months/#companion-object-properties","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MAX The largest supported value. val MAX: LongMonths (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MIN The smallest supported value. val MIN: LongMonths","title":"Companion Object Properties"},{"location":"api/core/io.islandtime.measures/-long-months/#extension-functions","text":"Name Summary (jvm) toJavaPeriod Convert to an equivalent Java Period . fun LongMonths .toJavaPeriod(): Period","title":"Extension Functions"},{"location":"api/core/io.islandtime.measures/-long-months/-init-/","text":"core / io.islandtime.measures / LongMonths / <init> <init> (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init>(value: Long ) A number of months.","title":" init "},{"location":"api/core/io.islandtime.measures/-long-months/-init-/#init","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init>(value: Long ) A number of months.","title":"&lt;init&gt;"},{"location":"api/core/io.islandtime.measures/-long-months/-m-a-x/","text":"core / io.islandtime.measures / LongMonths / MAX MAX (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val MAX: LongMonths The largest supported value.","title":" m a x"},{"location":"api/core/io.islandtime.measures/-long-months/-m-a-x/#max","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val MAX: LongMonths The largest supported value.","title":"MAX"},{"location":"api/core/io.islandtime.measures/-long-months/-m-i-n/","text":"core / io.islandtime.measures / LongMonths / MIN MIN (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val MIN: LongMonths The smallest supported value.","title":" m i n"},{"location":"api/core/io.islandtime.measures/-long-months/-m-i-n/#min","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val MIN: LongMonths The smallest supported value.","title":"MIN"},{"location":"api/core/io.islandtime.measures/-long-months/absolute-value/","text":"core / io.islandtime.measures / LongMonths / absoluteValue absoluteValue (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val absoluteValue: LongMonths Returns the absolute value. Exceptions ArithmeticException - if overflow occurs","title":"Absolute value"},{"location":"api/core/io.islandtime.measures/-long-months/absolute-value/#absolutevalue","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val absoluteValue: LongMonths Returns the absolute value.","title":"absoluteValue"},{"location":"api/core/io.islandtime.measures/-long-months/absolute-value/#exceptions","text":"ArithmeticException - if overflow occurs","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-long-months/compare-to/","text":"core / io.islandtime.measures / LongMonths / compareTo compareTo (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun compareTo(other: LongMonths ): Int","title":"Compare to"},{"location":"api/core/io.islandtime.measures/-long-months/compare-to/#compareto","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun compareTo(other: LongMonths ): Int","title":"compareTo"},{"location":"api/core/io.islandtime.measures/-long-months/div/","text":"core / io.islandtime.measures / LongMonths / div div (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun div(scalar: Int ): LongMonths operator fun div(scalar: Long ): LongMonths Divide by a scalar value. Exceptions ArithmeticException - if overflow occurs or the scalar is zero","title":"Div"},{"location":"api/core/io.islandtime.measures/-long-months/div/#div","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun div(scalar: Int ): LongMonths operator fun div(scalar: Long ): LongMonths Divide by a scalar value.","title":"div"},{"location":"api/core/io.islandtime.measures/-long-months/div/#exceptions","text":"ArithmeticException - if overflow occurs or the scalar is zero","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-long-months/in-centuries/","text":"core / io.islandtime.measures / LongMonths / inCenturies inCenturies (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inCenturies: LongCenturies Convert to whole centuries.","title":"In centuries"},{"location":"api/core/io.islandtime.measures/-long-months/in-centuries/#incenturies","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inCenturies: LongCenturies Convert to whole centuries.","title":"inCenturies"},{"location":"api/core/io.islandtime.measures/-long-months/in-decades/","text":"core / io.islandtime.measures / LongMonths / inDecades inDecades (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inDecades: LongDecades Convert to whole decades.","title":"In decades"},{"location":"api/core/io.islandtime.measures/-long-months/in-decades/#indecades","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inDecades: LongDecades Convert to whole decades.","title":"inDecades"},{"location":"api/core/io.islandtime.measures/-long-months/in-years/","text":"core / io.islandtime.measures / LongMonths / inYears inYears (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inYears: LongYears Convert to whole years.","title":"In years"},{"location":"api/core/io.islandtime.measures/-long-months/in-years/#inyears","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inYears: LongYears Convert to whole years.","title":"inYears"},{"location":"api/core/io.islandtime.measures/-long-months/is-negative/","text":"core / io.islandtime.measures / LongMonths / isNegative isNegative (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isNegative(): Boolean Is this duration negative?","title":"Is negative"},{"location":"api/core/io.islandtime.measures/-long-months/is-negative/#isnegative","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isNegative(): Boolean Is this duration negative?","title":"isNegative"},{"location":"api/core/io.islandtime.measures/-long-months/is-positive/","text":"core / io.islandtime.measures / LongMonths / isPositive isPositive (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isPositive(): Boolean Is this duration positive?","title":"Is positive"},{"location":"api/core/io.islandtime.measures/-long-months/is-positive/#ispositive","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isPositive(): Boolean Is this duration positive?","title":"isPositive"},{"location":"api/core/io.islandtime.measures/-long-months/is-zero/","text":"core / io.islandtime.measures / LongMonths / isZero isZero (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isZero(): Boolean Is this duration zero?","title":"Is zero"},{"location":"api/core/io.islandtime.measures/-long-months/is-zero/#iszero","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isZero(): Boolean Is this duration zero?","title":"isZero"},{"location":"api/core/io.islandtime.measures/-long-months/minus/","text":"core / io.islandtime.measures / LongMonths / minus minus (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun minus(months: IntMonths ): LongMonths operator fun minus(months: LongMonths ): LongMonths operator fun minus(years: IntYears ): LongMonths operator fun minus(years: LongYears ): LongMonths operator fun minus(decades: IntDecades ): LongMonths operator fun minus(decades: LongDecades ): LongMonths operator fun minus(centuries: IntCenturies ): LongMonths operator fun minus(centuries: LongCenturies ): LongMonths","title":"Minus"},{"location":"api/core/io.islandtime.measures/-long-months/minus/#minus","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun minus(months: IntMonths ): LongMonths operator fun minus(months: LongMonths ): LongMonths operator fun minus(years: IntYears ): LongMonths operator fun minus(years: LongYears ): LongMonths operator fun minus(decades: IntDecades ): LongMonths operator fun minus(decades: LongDecades ): LongMonths operator fun minus(centuries: IntCenturies ): LongMonths operator fun minus(centuries: LongCenturies ): LongMonths","title":"minus"},{"location":"api/core/io.islandtime.measures/-long-months/plus/","text":"core / io.islandtime.measures / LongMonths / plus plus (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun plus(months: IntMonths ): LongMonths operator fun plus(months: LongMonths ): LongMonths operator fun plus(years: IntYears ): LongMonths operator fun plus(years: LongYears ): LongMonths operator fun plus(decades: IntDecades ): LongMonths operator fun plus(decades: LongDecades ): LongMonths operator fun plus(centuries: IntCenturies ): LongMonths operator fun plus(centuries: LongCenturies ): LongMonths","title":"Plus"},{"location":"api/core/io.islandtime.measures/-long-months/plus/#plus","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun plus(months: IntMonths ): LongMonths operator fun plus(months: LongMonths ): LongMonths operator fun plus(years: IntYears ): LongMonths operator fun plus(years: LongYears ): LongMonths operator fun plus(decades: IntDecades ): LongMonths operator fun plus(decades: LongDecades ): LongMonths operator fun plus(centuries: IntCenturies ): LongMonths operator fun plus(centuries: LongCenturies ): LongMonths","title":"plus"},{"location":"api/core/io.islandtime.measures/-long-months/rem/","text":"core / io.islandtime.measures / LongMonths / rem rem (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun rem(scalar: Int ): LongMonths operator fun rem(scalar: Long ): LongMonths","title":"Rem"},{"location":"api/core/io.islandtime.measures/-long-months/rem/#rem","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun rem(scalar: Int ): LongMonths operator fun rem(scalar: Long ): LongMonths","title":"rem"},{"location":"api/core/io.islandtime.measures/-long-months/times/","text":"core / io.islandtime.measures / LongMonths / times times (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun times(scalar: Int ): LongMonths operator fun times(scalar: Long ): LongMonths Multiply by a scalar value. Exceptions ArithmeticException - if overflow occurs","title":"Times"},{"location":"api/core/io.islandtime.measures/-long-months/times/#times","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun times(scalar: Int ): LongMonths operator fun times(scalar: Long ): LongMonths Multiply by a scalar value.","title":"times"},{"location":"api/core/io.islandtime.measures/-long-months/times/#exceptions","text":"ArithmeticException - if overflow occurs","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-long-months/to-components/","text":"core / io.islandtime.measures / LongMonths / toComponents toComponents (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline fun <T> toComponents(action: (years: LongYears , months: IntMonths ) -> T): T inline fun <T> toComponents(action: (decades: LongDecades , years: IntYears , months: IntMonths ) -> T): T inline fun <T> toComponents(action: (centuries: LongCenturies , decades: IntDecades , years: IntYears , months: IntMonths ) -> T): T","title":"To components"},{"location":"api/core/io.islandtime.measures/-long-months/to-components/#tocomponents","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline fun <T> toComponents(action: (years: LongYears , months: IntMonths ) -> T): T inline fun <T> toComponents(action: (decades: LongDecades , years: IntYears , months: IntMonths ) -> T): T inline fun <T> toComponents(action: (centuries: LongCenturies , decades: IntDecades , years: IntYears , months: IntMonths ) -> T): T","title":"toComponents"},{"location":"api/core/io.islandtime.measures/-long-months/to-int-months/","text":"core / io.islandtime.measures / LongMonths / toIntMonths toIntMonths (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toIntMonths(): IntMonths Convert to IntMonths . Exceptions ArithmeticException - if overflow occurs","title":"To int months"},{"location":"api/core/io.islandtime.measures/-long-months/to-int-months/#tointmonths","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toIntMonths(): IntMonths Convert to IntMonths .","title":"toIntMonths"},{"location":"api/core/io.islandtime.measures/-long-months/to-int-months/#exceptions","text":"ArithmeticException - if overflow occurs","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-long-months/to-int/","text":"core / io.islandtime.measures / LongMonths / toInt toInt (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toInt(): Int Convert to a unit-less Int value. Exceptions ArithmeticException - if overflow occurs","title":"To int"},{"location":"api/core/io.islandtime.measures/-long-months/to-int/#toint","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toInt(): Int Convert to a unit-less Int value.","title":"toInt"},{"location":"api/core/io.islandtime.measures/-long-months/to-int/#exceptions","text":"ArithmeticException - if overflow occurs","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-long-months/to-string/","text":"core / io.islandtime.measures / LongMonths / toString toString (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toString(): String Convert to an ISO-8601 time interval representation.","title":"To string"},{"location":"api/core/io.islandtime.measures/-long-months/to-string/#tostring","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toString(): String Convert to an ISO-8601 time interval representation.","title":"toString"},{"location":"api/core/io.islandtime.measures/-long-months/unary-minus/","text":"core / io.islandtime.measures / LongMonths / unaryMinus unaryMinus (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun unaryMinus(): LongMonths Negate the value. Exceptions ArithmeticException - if overflow occurs","title":"Unary minus"},{"location":"api/core/io.islandtime.measures/-long-months/unary-minus/#unaryminus","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun unaryMinus(): LongMonths Negate the value.","title":"unaryMinus"},{"location":"api/core/io.islandtime.measures/-long-months/unary-minus/#exceptions","text":"ArithmeticException - if overflow occurs","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-long-months/value/","text":"core / io.islandtime.measures / LongMonths / value value (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val value: Long The underlying value.","title":"Value"},{"location":"api/core/io.islandtime.measures/-long-months/value/#value","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val value: Long The underlying value.","title":"value"},{"location":"api/core/io.islandtime.measures/-long-nanoseconds/","text":"core / io.islandtime.measures / LongNanoseconds LongNanoseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline class LongNanoseconds : Comparable < LongNanoseconds > A number of nanoseconds. Constructors Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init> A number of nanoseconds. <init>(value: Long ) Properties Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) absoluteValue Returns the absolute value. val absoluteValue: LongNanoseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inDays Convert to whole days. val inDays: LongDays (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inHours Convert to whole hours. val inHours: LongHours (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inMicroseconds Convert to whole microseconds. val inMicroseconds: LongMicroseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inMilliseconds Convert to whole milliseconds. val inMilliseconds: LongMilliseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inMinutes Convert to whole minutes. val inMinutes: LongMinutes (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inSeconds Convert to whole seconds. val inSeconds: LongSeconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) value The underlying value. val value: Long Functions Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) compareTo fun compareTo(other: LongNanoseconds ): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) div Divide by a scalar value. operator fun div(scalar: Int ): LongNanoseconds operator fun div(scalar: Long ): LongNanoseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isNegative Is this duration negative? fun isNegative(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isPositive Is this duration positive? fun isPositive(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isZero Is this duration zero? fun isZero(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) minus operator fun minus(nanoseconds: IntNanoseconds ): LongNanoseconds operator fun minus(nanoseconds: LongNanoseconds ): LongNanoseconds operator fun minus(microseconds: IntMicroseconds ): LongNanoseconds operator fun minus(microseconds: LongMicroseconds ): LongNanoseconds operator fun minus(milliseconds: IntMilliseconds ): LongNanoseconds operator fun minus(milliseconds: LongMilliseconds ): LongNanoseconds operator fun minus(seconds: IntSeconds ): LongNanoseconds operator fun minus(seconds: LongSeconds ): LongNanoseconds operator fun minus(minutes: IntMinutes ): LongNanoseconds operator fun minus(minutes: LongMinutes ): LongNanoseconds operator fun minus(hours: IntHours ): LongNanoseconds operator fun minus(hours: LongHours ): LongNanoseconds operator fun minus(days: IntDays ): LongNanoseconds operator fun minus(days: LongDays ): LongNanoseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) plus operator fun plus(nanoseconds: IntNanoseconds ): LongNanoseconds operator fun plus(nanoseconds: LongNanoseconds ): LongNanoseconds operator fun plus(microseconds: IntMicroseconds ): LongNanoseconds operator fun plus(microseconds: LongMicroseconds ): LongNanoseconds operator fun plus(milliseconds: IntMilliseconds ): LongNanoseconds operator fun plus(milliseconds: LongMilliseconds ): LongNanoseconds operator fun plus(seconds: IntSeconds ): LongNanoseconds operator fun plus(seconds: LongSeconds ): LongNanoseconds operator fun plus(minutes: IntMinutes ): LongNanoseconds operator fun plus(minutes: LongMinutes ): LongNanoseconds operator fun plus(hours: IntHours ): LongNanoseconds operator fun plus(hours: LongHours ): LongNanoseconds operator fun plus(days: IntDays ): LongNanoseconds operator fun plus(days: LongDays ): LongNanoseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) rem operator fun rem(scalar: Int ): LongNanoseconds operator fun rem(scalar: Long ): LongNanoseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) times Multiply by a scalar value. operator fun times(scalar: Int ): LongNanoseconds operator fun times(scalar: Long ): LongNanoseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toComponents fun <T> toComponents(action: (microseconds: LongMicroseconds , nanoseconds: IntNanoseconds ) -> T): T fun <T> toComponents(action: (milliseconds: LongMilliseconds , microseconds: IntMicroseconds , nanoseconds: IntNanoseconds ) -> T): T fun <T> toComponents(action: (seconds: LongSeconds , milliseconds: IntMilliseconds , microseconds: IntMicroseconds , nanoseconds: IntNanoseconds ) -> T): T fun <T> toComponents(action: (minutes: LongMinutes , seconds: IntSeconds , milliseconds: IntMilliseconds , microseconds: IntMicroseconds , nanoseconds: IntNanoseconds ) -> T): T fun <T> toComponents(action: (hours: LongHours , minutes: IntMinutes , seconds: IntSeconds , milliseconds: IntMilliseconds , microseconds: IntMicroseconds , nanoseconds: IntNanoseconds ) -> T): T fun <T> toComponents(action: (days: LongDays , hours: IntHours , minutes: IntMinutes , seconds: IntSeconds , milliseconds: IntMilliseconds , microseconds: IntMicroseconds , nanoseconds: IntNanoseconds ) -> T): T (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toInt Convert to a unit-less Int value. fun toInt(): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toIntNanoseconds Convert to IntNanoseconds . fun toIntNanoseconds(): IntNanoseconds toKotlinDuration Convert to a kotlin.time.Duration .(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toKotlinDuration(): <ERROR CLASS> (jvm) fun toKotlinDuration(): Duration (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toString Convert to an ISO-8601 time interval representation. fun toString(): String (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) unaryMinus Negate the value. operator fun unaryMinus(): LongNanoseconds Companion Object Properties Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MAX The largest supported value. val MAX: LongNanoseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MIN The smallest supported value. val MIN: LongNanoseconds Extension Functions Name Summary (jvm) toJavaDuration Convert to an equivalent Java Duration . fun LongNanoseconds .toJavaDuration(): Duration","title":"Index"},{"location":"api/core/io.islandtime.measures/-long-nanoseconds/#longnanoseconds","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline class LongNanoseconds : Comparable < LongNanoseconds > A number of nanoseconds.","title":"LongNanoseconds"},{"location":"api/core/io.islandtime.measures/-long-nanoseconds/#constructors","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init> A number of nanoseconds. <init>(value: Long )","title":"Constructors"},{"location":"api/core/io.islandtime.measures/-long-nanoseconds/#properties","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) absoluteValue Returns the absolute value. val absoluteValue: LongNanoseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inDays Convert to whole days. val inDays: LongDays (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inHours Convert to whole hours. val inHours: LongHours (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inMicroseconds Convert to whole microseconds. val inMicroseconds: LongMicroseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inMilliseconds Convert to whole milliseconds. val inMilliseconds: LongMilliseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inMinutes Convert to whole minutes. val inMinutes: LongMinutes (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inSeconds Convert to whole seconds. val inSeconds: LongSeconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) value The underlying value. val value: Long","title":"Properties"},{"location":"api/core/io.islandtime.measures/-long-nanoseconds/#functions","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) compareTo fun compareTo(other: LongNanoseconds ): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) div Divide by a scalar value. operator fun div(scalar: Int ): LongNanoseconds operator fun div(scalar: Long ): LongNanoseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isNegative Is this duration negative? fun isNegative(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isPositive Is this duration positive? fun isPositive(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isZero Is this duration zero? fun isZero(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) minus operator fun minus(nanoseconds: IntNanoseconds ): LongNanoseconds operator fun minus(nanoseconds: LongNanoseconds ): LongNanoseconds operator fun minus(microseconds: IntMicroseconds ): LongNanoseconds operator fun minus(microseconds: LongMicroseconds ): LongNanoseconds operator fun minus(milliseconds: IntMilliseconds ): LongNanoseconds operator fun minus(milliseconds: LongMilliseconds ): LongNanoseconds operator fun minus(seconds: IntSeconds ): LongNanoseconds operator fun minus(seconds: LongSeconds ): LongNanoseconds operator fun minus(minutes: IntMinutes ): LongNanoseconds operator fun minus(minutes: LongMinutes ): LongNanoseconds operator fun minus(hours: IntHours ): LongNanoseconds operator fun minus(hours: LongHours ): LongNanoseconds operator fun minus(days: IntDays ): LongNanoseconds operator fun minus(days: LongDays ): LongNanoseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) plus operator fun plus(nanoseconds: IntNanoseconds ): LongNanoseconds operator fun plus(nanoseconds: LongNanoseconds ): LongNanoseconds operator fun plus(microseconds: IntMicroseconds ): LongNanoseconds operator fun plus(microseconds: LongMicroseconds ): LongNanoseconds operator fun plus(milliseconds: IntMilliseconds ): LongNanoseconds operator fun plus(milliseconds: LongMilliseconds ): LongNanoseconds operator fun plus(seconds: IntSeconds ): LongNanoseconds operator fun plus(seconds: LongSeconds ): LongNanoseconds operator fun plus(minutes: IntMinutes ): LongNanoseconds operator fun plus(minutes: LongMinutes ): LongNanoseconds operator fun plus(hours: IntHours ): LongNanoseconds operator fun plus(hours: LongHours ): LongNanoseconds operator fun plus(days: IntDays ): LongNanoseconds operator fun plus(days: LongDays ): LongNanoseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) rem operator fun rem(scalar: Int ): LongNanoseconds operator fun rem(scalar: Long ): LongNanoseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) times Multiply by a scalar value. operator fun times(scalar: Int ): LongNanoseconds operator fun times(scalar: Long ): LongNanoseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toComponents fun <T> toComponents(action: (microseconds: LongMicroseconds , nanoseconds: IntNanoseconds ) -> T): T fun <T> toComponents(action: (milliseconds: LongMilliseconds , microseconds: IntMicroseconds , nanoseconds: IntNanoseconds ) -> T): T fun <T> toComponents(action: (seconds: LongSeconds , milliseconds: IntMilliseconds , microseconds: IntMicroseconds , nanoseconds: IntNanoseconds ) -> T): T fun <T> toComponents(action: (minutes: LongMinutes , seconds: IntSeconds , milliseconds: IntMilliseconds , microseconds: IntMicroseconds , nanoseconds: IntNanoseconds ) -> T): T fun <T> toComponents(action: (hours: LongHours , minutes: IntMinutes , seconds: IntSeconds , milliseconds: IntMilliseconds , microseconds: IntMicroseconds , nanoseconds: IntNanoseconds ) -> T): T fun <T> toComponents(action: (days: LongDays , hours: IntHours , minutes: IntMinutes , seconds: IntSeconds , milliseconds: IntMilliseconds , microseconds: IntMicroseconds , nanoseconds: IntNanoseconds ) -> T): T (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toInt Convert to a unit-less Int value. fun toInt(): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toIntNanoseconds Convert to IntNanoseconds . fun toIntNanoseconds(): IntNanoseconds toKotlinDuration Convert to a kotlin.time.Duration .(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toKotlinDuration(): <ERROR CLASS> (jvm) fun toKotlinDuration(): Duration (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toString Convert to an ISO-8601 time interval representation. fun toString(): String (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) unaryMinus Negate the value. operator fun unaryMinus(): LongNanoseconds","title":"Functions"},{"location":"api/core/io.islandtime.measures/-long-nanoseconds/#companion-object-properties","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MAX The largest supported value. val MAX: LongNanoseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MIN The smallest supported value. val MIN: LongNanoseconds","title":"Companion Object Properties"},{"location":"api/core/io.islandtime.measures/-long-nanoseconds/#extension-functions","text":"Name Summary (jvm) toJavaDuration Convert to an equivalent Java Duration . fun LongNanoseconds .toJavaDuration(): Duration","title":"Extension Functions"},{"location":"api/core/io.islandtime.measures/-long-nanoseconds/-init-/","text":"core / io.islandtime.measures / LongNanoseconds / <init> <init> (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init>(value: Long ) A number of nanoseconds.","title":" init "},{"location":"api/core/io.islandtime.measures/-long-nanoseconds/-init-/#init","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init>(value: Long ) A number of nanoseconds.","title":"&lt;init&gt;"},{"location":"api/core/io.islandtime.measures/-long-nanoseconds/-m-a-x/","text":"core / io.islandtime.measures / LongNanoseconds / MAX MAX (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val MAX: LongNanoseconds The largest supported value.","title":" m a x"},{"location":"api/core/io.islandtime.measures/-long-nanoseconds/-m-a-x/#max","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val MAX: LongNanoseconds The largest supported value.","title":"MAX"},{"location":"api/core/io.islandtime.measures/-long-nanoseconds/-m-i-n/","text":"core / io.islandtime.measures / LongNanoseconds / MIN MIN (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val MIN: LongNanoseconds The smallest supported value.","title":" m i n"},{"location":"api/core/io.islandtime.measures/-long-nanoseconds/-m-i-n/#min","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val MIN: LongNanoseconds The smallest supported value.","title":"MIN"},{"location":"api/core/io.islandtime.measures/-long-nanoseconds/absolute-value/","text":"core / io.islandtime.measures / LongNanoseconds / absoluteValue absoluteValue (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val absoluteValue: LongNanoseconds Returns the absolute value. Exceptions ArithmeticException - if overflow occurs","title":"Absolute value"},{"location":"api/core/io.islandtime.measures/-long-nanoseconds/absolute-value/#absolutevalue","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val absoluteValue: LongNanoseconds Returns the absolute value.","title":"absoluteValue"},{"location":"api/core/io.islandtime.measures/-long-nanoseconds/absolute-value/#exceptions","text":"ArithmeticException - if overflow occurs","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-long-nanoseconds/compare-to/","text":"core / io.islandtime.measures / LongNanoseconds / compareTo compareTo (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun compareTo(other: LongNanoseconds ): Int","title":"Compare to"},{"location":"api/core/io.islandtime.measures/-long-nanoseconds/compare-to/#compareto","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun compareTo(other: LongNanoseconds ): Int","title":"compareTo"},{"location":"api/core/io.islandtime.measures/-long-nanoseconds/div/","text":"core / io.islandtime.measures / LongNanoseconds / div div (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun div(scalar: Int ): LongNanoseconds operator fun div(scalar: Long ): LongNanoseconds Divide by a scalar value. Exceptions ArithmeticException - if overflow occurs or the scalar is zero","title":"Div"},{"location":"api/core/io.islandtime.measures/-long-nanoseconds/div/#div","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun div(scalar: Int ): LongNanoseconds operator fun div(scalar: Long ): LongNanoseconds Divide by a scalar value.","title":"div"},{"location":"api/core/io.islandtime.measures/-long-nanoseconds/div/#exceptions","text":"ArithmeticException - if overflow occurs or the scalar is zero","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-long-nanoseconds/in-days/","text":"core / io.islandtime.measures / LongNanoseconds / inDays inDays (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inDays: LongDays Convert to whole days.","title":"In days"},{"location":"api/core/io.islandtime.measures/-long-nanoseconds/in-days/#indays","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inDays: LongDays Convert to whole days.","title":"inDays"},{"location":"api/core/io.islandtime.measures/-long-nanoseconds/in-hours/","text":"core / io.islandtime.measures / LongNanoseconds / inHours inHours (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inHours: LongHours Convert to whole hours.","title":"In hours"},{"location":"api/core/io.islandtime.measures/-long-nanoseconds/in-hours/#inhours","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inHours: LongHours Convert to whole hours.","title":"inHours"},{"location":"api/core/io.islandtime.measures/-long-nanoseconds/in-microseconds/","text":"core / io.islandtime.measures / LongNanoseconds / inMicroseconds inMicroseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inMicroseconds: LongMicroseconds Convert to whole microseconds.","title":"In microseconds"},{"location":"api/core/io.islandtime.measures/-long-nanoseconds/in-microseconds/#inmicroseconds","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inMicroseconds: LongMicroseconds Convert to whole microseconds.","title":"inMicroseconds"},{"location":"api/core/io.islandtime.measures/-long-nanoseconds/in-milliseconds/","text":"core / io.islandtime.measures / LongNanoseconds / inMilliseconds inMilliseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inMilliseconds: LongMilliseconds Convert to whole milliseconds.","title":"In milliseconds"},{"location":"api/core/io.islandtime.measures/-long-nanoseconds/in-milliseconds/#inmilliseconds","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inMilliseconds: LongMilliseconds Convert to whole milliseconds.","title":"inMilliseconds"},{"location":"api/core/io.islandtime.measures/-long-nanoseconds/in-minutes/","text":"core / io.islandtime.measures / LongNanoseconds / inMinutes inMinutes (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inMinutes: LongMinutes Convert to whole minutes.","title":"In minutes"},{"location":"api/core/io.islandtime.measures/-long-nanoseconds/in-minutes/#inminutes","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inMinutes: LongMinutes Convert to whole minutes.","title":"inMinutes"},{"location":"api/core/io.islandtime.measures/-long-nanoseconds/in-seconds/","text":"core / io.islandtime.measures / LongNanoseconds / inSeconds inSeconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inSeconds: LongSeconds Convert to whole seconds.","title":"In seconds"},{"location":"api/core/io.islandtime.measures/-long-nanoseconds/in-seconds/#inseconds","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inSeconds: LongSeconds Convert to whole seconds.","title":"inSeconds"},{"location":"api/core/io.islandtime.measures/-long-nanoseconds/is-negative/","text":"core / io.islandtime.measures / LongNanoseconds / isNegative isNegative (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isNegative(): Boolean Is this duration negative?","title":"Is negative"},{"location":"api/core/io.islandtime.measures/-long-nanoseconds/is-negative/#isnegative","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isNegative(): Boolean Is this duration negative?","title":"isNegative"},{"location":"api/core/io.islandtime.measures/-long-nanoseconds/is-positive/","text":"core / io.islandtime.measures / LongNanoseconds / isPositive isPositive (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isPositive(): Boolean Is this duration positive?","title":"Is positive"},{"location":"api/core/io.islandtime.measures/-long-nanoseconds/is-positive/#ispositive","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isPositive(): Boolean Is this duration positive?","title":"isPositive"},{"location":"api/core/io.islandtime.measures/-long-nanoseconds/is-zero/","text":"core / io.islandtime.measures / LongNanoseconds / isZero isZero (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isZero(): Boolean Is this duration zero?","title":"Is zero"},{"location":"api/core/io.islandtime.measures/-long-nanoseconds/is-zero/#iszero","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isZero(): Boolean Is this duration zero?","title":"isZero"},{"location":"api/core/io.islandtime.measures/-long-nanoseconds/minus/","text":"core / io.islandtime.measures / LongNanoseconds / minus minus (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun minus(nanoseconds: IntNanoseconds ): LongNanoseconds operator fun minus(nanoseconds: LongNanoseconds ): LongNanoseconds operator fun minus(microseconds: IntMicroseconds ): LongNanoseconds operator fun minus(microseconds: LongMicroseconds ): LongNanoseconds operator fun minus(milliseconds: IntMilliseconds ): LongNanoseconds operator fun minus(milliseconds: LongMilliseconds ): LongNanoseconds operator fun minus(seconds: IntSeconds ): LongNanoseconds operator fun minus(seconds: LongSeconds ): LongNanoseconds operator fun minus(minutes: IntMinutes ): LongNanoseconds operator fun minus(minutes: LongMinutes ): LongNanoseconds operator fun minus(hours: IntHours ): LongNanoseconds operator fun minus(hours: LongHours ): LongNanoseconds operator fun minus(days: IntDays ): LongNanoseconds operator fun minus(days: LongDays ): LongNanoseconds","title":"Minus"},{"location":"api/core/io.islandtime.measures/-long-nanoseconds/minus/#minus","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun minus(nanoseconds: IntNanoseconds ): LongNanoseconds operator fun minus(nanoseconds: LongNanoseconds ): LongNanoseconds operator fun minus(microseconds: IntMicroseconds ): LongNanoseconds operator fun minus(microseconds: LongMicroseconds ): LongNanoseconds operator fun minus(milliseconds: IntMilliseconds ): LongNanoseconds operator fun minus(milliseconds: LongMilliseconds ): LongNanoseconds operator fun minus(seconds: IntSeconds ): LongNanoseconds operator fun minus(seconds: LongSeconds ): LongNanoseconds operator fun minus(minutes: IntMinutes ): LongNanoseconds operator fun minus(minutes: LongMinutes ): LongNanoseconds operator fun minus(hours: IntHours ): LongNanoseconds operator fun minus(hours: LongHours ): LongNanoseconds operator fun minus(days: IntDays ): LongNanoseconds operator fun minus(days: LongDays ): LongNanoseconds","title":"minus"},{"location":"api/core/io.islandtime.measures/-long-nanoseconds/plus/","text":"core / io.islandtime.measures / LongNanoseconds / plus plus (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun plus(nanoseconds: IntNanoseconds ): LongNanoseconds operator fun plus(nanoseconds: LongNanoseconds ): LongNanoseconds operator fun plus(microseconds: IntMicroseconds ): LongNanoseconds operator fun plus(microseconds: LongMicroseconds ): LongNanoseconds operator fun plus(milliseconds: IntMilliseconds ): LongNanoseconds operator fun plus(milliseconds: LongMilliseconds ): LongNanoseconds operator fun plus(seconds: IntSeconds ): LongNanoseconds operator fun plus(seconds: LongSeconds ): LongNanoseconds operator fun plus(minutes: IntMinutes ): LongNanoseconds operator fun plus(minutes: LongMinutes ): LongNanoseconds operator fun plus(hours: IntHours ): LongNanoseconds operator fun plus(hours: LongHours ): LongNanoseconds operator fun plus(days: IntDays ): LongNanoseconds operator fun plus(days: LongDays ): LongNanoseconds","title":"Plus"},{"location":"api/core/io.islandtime.measures/-long-nanoseconds/plus/#plus","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun plus(nanoseconds: IntNanoseconds ): LongNanoseconds operator fun plus(nanoseconds: LongNanoseconds ): LongNanoseconds operator fun plus(microseconds: IntMicroseconds ): LongNanoseconds operator fun plus(microseconds: LongMicroseconds ): LongNanoseconds operator fun plus(milliseconds: IntMilliseconds ): LongNanoseconds operator fun plus(milliseconds: LongMilliseconds ): LongNanoseconds operator fun plus(seconds: IntSeconds ): LongNanoseconds operator fun plus(seconds: LongSeconds ): LongNanoseconds operator fun plus(minutes: IntMinutes ): LongNanoseconds operator fun plus(minutes: LongMinutes ): LongNanoseconds operator fun plus(hours: IntHours ): LongNanoseconds operator fun plus(hours: LongHours ): LongNanoseconds operator fun plus(days: IntDays ): LongNanoseconds operator fun plus(days: LongDays ): LongNanoseconds","title":"plus"},{"location":"api/core/io.islandtime.measures/-long-nanoseconds/rem/","text":"core / io.islandtime.measures / LongNanoseconds / rem rem (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun rem(scalar: Int ): LongNanoseconds operator fun rem(scalar: Long ): LongNanoseconds","title":"Rem"},{"location":"api/core/io.islandtime.measures/-long-nanoseconds/rem/#rem","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun rem(scalar: Int ): LongNanoseconds operator fun rem(scalar: Long ): LongNanoseconds","title":"rem"},{"location":"api/core/io.islandtime.measures/-long-nanoseconds/times/","text":"core / io.islandtime.measures / LongNanoseconds / times times (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun times(scalar: Int ): LongNanoseconds operator fun times(scalar: Long ): LongNanoseconds Multiply by a scalar value. Exceptions ArithmeticException - if overflow occurs","title":"Times"},{"location":"api/core/io.islandtime.measures/-long-nanoseconds/times/#times","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun times(scalar: Int ): LongNanoseconds operator fun times(scalar: Long ): LongNanoseconds Multiply by a scalar value.","title":"times"},{"location":"api/core/io.islandtime.measures/-long-nanoseconds/times/#exceptions","text":"ArithmeticException - if overflow occurs","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-long-nanoseconds/to-components/","text":"core / io.islandtime.measures / LongNanoseconds / toComponents toComponents (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline fun <T> toComponents(action: (microseconds: LongMicroseconds , nanoseconds: IntNanoseconds ) -> T): T inline fun <T> toComponents(action: (milliseconds: LongMilliseconds , microseconds: IntMicroseconds , nanoseconds: IntNanoseconds ) -> T): T inline fun <T> toComponents(action: (seconds: LongSeconds , milliseconds: IntMilliseconds , microseconds: IntMicroseconds , nanoseconds: IntNanoseconds ) -> T): T inline fun <T> toComponents(action: (minutes: LongMinutes , seconds: IntSeconds , milliseconds: IntMilliseconds , microseconds: IntMicroseconds , nanoseconds: IntNanoseconds ) -> T): T inline fun <T> toComponents(action: (hours: LongHours , minutes: IntMinutes , seconds: IntSeconds , milliseconds: IntMilliseconds , microseconds: IntMicroseconds , nanoseconds: IntNanoseconds ) -> T): T inline fun <T> toComponents(action: (days: LongDays , hours: IntHours , minutes: IntMinutes , seconds: IntSeconds , milliseconds: IntMilliseconds , microseconds: IntMicroseconds , nanoseconds: IntNanoseconds ) -> T): T","title":"To components"},{"location":"api/core/io.islandtime.measures/-long-nanoseconds/to-components/#tocomponents","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline fun <T> toComponents(action: (microseconds: LongMicroseconds , nanoseconds: IntNanoseconds ) -> T): T inline fun <T> toComponents(action: (milliseconds: LongMilliseconds , microseconds: IntMicroseconds , nanoseconds: IntNanoseconds ) -> T): T inline fun <T> toComponents(action: (seconds: LongSeconds , milliseconds: IntMilliseconds , microseconds: IntMicroseconds , nanoseconds: IntNanoseconds ) -> T): T inline fun <T> toComponents(action: (minutes: LongMinutes , seconds: IntSeconds , milliseconds: IntMilliseconds , microseconds: IntMicroseconds , nanoseconds: IntNanoseconds ) -> T): T inline fun <T> toComponents(action: (hours: LongHours , minutes: IntMinutes , seconds: IntSeconds , milliseconds: IntMilliseconds , microseconds: IntMicroseconds , nanoseconds: IntNanoseconds ) -> T): T inline fun <T> toComponents(action: (days: LongDays , hours: IntHours , minutes: IntMinutes , seconds: IntSeconds , milliseconds: IntMilliseconds , microseconds: IntMicroseconds , nanoseconds: IntNanoseconds ) -> T): T","title":"toComponents"},{"location":"api/core/io.islandtime.measures/-long-nanoseconds/to-int-nanoseconds/","text":"core / io.islandtime.measures / LongNanoseconds / toIntNanoseconds toIntNanoseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toIntNanoseconds(): IntNanoseconds Convert to IntNanoseconds . Exceptions ArithmeticException - if overflow occurs","title":"To int nanoseconds"},{"location":"api/core/io.islandtime.measures/-long-nanoseconds/to-int-nanoseconds/#tointnanoseconds","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toIntNanoseconds(): IntNanoseconds Convert to IntNanoseconds .","title":"toIntNanoseconds"},{"location":"api/core/io.islandtime.measures/-long-nanoseconds/to-int-nanoseconds/#exceptions","text":"ArithmeticException - if overflow occurs","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-long-nanoseconds/to-int/","text":"core / io.islandtime.measures / LongNanoseconds / toInt toInt (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toInt(): Int Convert to a unit-less Int value. Exceptions ArithmeticException - if overflow occurs","title":"To int"},{"location":"api/core/io.islandtime.measures/-long-nanoseconds/to-int/#toint","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toInt(): Int Convert to a unit-less Int value.","title":"toInt"},{"location":"api/core/io.islandtime.measures/-long-nanoseconds/to-int/#exceptions","text":"ArithmeticException - if overflow occurs","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-long-nanoseconds/to-kotlin-duration/","text":"core / io.islandtime.measures / LongNanoseconds / toKotlinDuration toKotlinDuration (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toKotlinDuration(): <ERROR CLASS> (jvm) @ExperimentalTime fun toKotlinDuration(): Duration (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) Convert to a kotlin.time.Duration . (jvm) Convert to a kotlin.time.Duration .","title":"To kotlin duration"},{"location":"api/core/io.islandtime.measures/-long-nanoseconds/to-kotlin-duration/#tokotlinduration","text":"(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toKotlinDuration(): <ERROR CLASS> (jvm) @ExperimentalTime fun toKotlinDuration(): Duration (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) Convert to a kotlin.time.Duration . (jvm) Convert to a kotlin.time.Duration .","title":"toKotlinDuration"},{"location":"api/core/io.islandtime.measures/-long-nanoseconds/to-string/","text":"core / io.islandtime.measures / LongNanoseconds / toString toString (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toString(): String Convert to an ISO-8601 time interval representation.","title":"To string"},{"location":"api/core/io.islandtime.measures/-long-nanoseconds/to-string/#tostring","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toString(): String Convert to an ISO-8601 time interval representation.","title":"toString"},{"location":"api/core/io.islandtime.measures/-long-nanoseconds/unary-minus/","text":"core / io.islandtime.measures / LongNanoseconds / unaryMinus unaryMinus (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun unaryMinus(): LongNanoseconds Negate the value. Exceptions ArithmeticException - if overflow occurs","title":"Unary minus"},{"location":"api/core/io.islandtime.measures/-long-nanoseconds/unary-minus/#unaryminus","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun unaryMinus(): LongNanoseconds Negate the value.","title":"unaryMinus"},{"location":"api/core/io.islandtime.measures/-long-nanoseconds/unary-minus/#exceptions","text":"ArithmeticException - if overflow occurs","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-long-nanoseconds/value/","text":"core / io.islandtime.measures / LongNanoseconds / value value (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val value: Long The underlying value.","title":"Value"},{"location":"api/core/io.islandtime.measures/-long-nanoseconds/value/#value","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val value: Long The underlying value.","title":"value"},{"location":"api/core/io.islandtime.measures/-long-seconds/","text":"core / io.islandtime.measures / LongSeconds LongSeconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline class LongSeconds : Comparable < LongSeconds > A number of seconds. Constructors Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init> A number of seconds. <init>(value: Long ) Properties Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) absoluteValue Returns the absolute value. val absoluteValue: LongSeconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inDays Convert to whole days. val inDays: LongDays (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inHours Convert to whole hours. val inHours: LongHours (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inMicroseconds Convert to microseconds. val inMicroseconds: LongMicroseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inMilliseconds Convert to milliseconds. val inMilliseconds: LongMilliseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inMinutes Convert to whole minutes. val inMinutes: LongMinutes (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inNanoseconds Convert to nanoseconds. val inNanoseconds: LongNanoseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) value The underlying value. val value: Long Functions Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) compareTo fun compareTo(other: LongSeconds ): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) div Divide by a scalar value. operator fun div(scalar: Int ): LongSeconds operator fun div(scalar: Long ): LongSeconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isNegative Is this duration negative? fun isNegative(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isPositive Is this duration positive? fun isPositive(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isZero Is this duration zero? fun isZero(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) minus operator fun minus(nanoseconds: IntNanoseconds ): LongNanoseconds operator fun minus(nanoseconds: LongNanoseconds ): LongNanoseconds operator fun minus(microseconds: IntMicroseconds ): LongMicroseconds operator fun minus(microseconds: LongMicroseconds ): LongMicroseconds operator fun minus(milliseconds: IntMilliseconds ): LongMilliseconds operator fun minus(milliseconds: LongMilliseconds ): LongMilliseconds operator fun minus(seconds: IntSeconds ): LongSeconds operator fun minus(seconds: LongSeconds ): LongSeconds operator fun minus(minutes: IntMinutes ): LongSeconds operator fun minus(minutes: LongMinutes ): LongSeconds operator fun minus(hours: IntHours ): LongSeconds operator fun minus(hours: LongHours ): LongSeconds operator fun minus(days: IntDays ): LongSeconds operator fun minus(days: LongDays ): LongSeconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) plus operator fun plus(nanoseconds: IntNanoseconds ): LongNanoseconds operator fun plus(nanoseconds: LongNanoseconds ): LongNanoseconds operator fun plus(microseconds: IntMicroseconds ): LongMicroseconds operator fun plus(microseconds: LongMicroseconds ): LongMicroseconds operator fun plus(milliseconds: IntMilliseconds ): LongMilliseconds operator fun plus(milliseconds: LongMilliseconds ): LongMilliseconds operator fun plus(seconds: IntSeconds ): LongSeconds operator fun plus(seconds: LongSeconds ): LongSeconds operator fun plus(minutes: IntMinutes ): LongSeconds operator fun plus(minutes: LongMinutes ): LongSeconds operator fun plus(hours: IntHours ): LongSeconds operator fun plus(hours: LongHours ): LongSeconds operator fun plus(days: IntDays ): LongSeconds operator fun plus(days: LongDays ): LongSeconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) rem operator fun rem(scalar: Int ): LongSeconds operator fun rem(scalar: Long ): LongSeconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) times Multiply by a scalar value. operator fun times(scalar: Int ): LongSeconds operator fun times(scalar: Long ): LongSeconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toComponents fun <T> toComponents(action: (minutes: LongMinutes , seconds: IntSeconds ) -> T): T fun <T> toComponents(action: (hours: LongHours , minutes: IntMinutes , seconds: IntSeconds ) -> T): T fun <T> toComponents(action: (days: LongDays , hours: IntHours , minutes: IntMinutes , seconds: IntSeconds ) -> T): T (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toInt Convert to a unit-less Int value. fun toInt(): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toIntSeconds Convert to IntSeconds . fun toIntSeconds(): IntSeconds toKotlinDuration Convert to a kotlin.time.Duration .(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toKotlinDuration(): <ERROR CLASS> (jvm) fun toKotlinDuration(): Duration (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toString Convert to an ISO-8601 time interval representation. fun toString(): String (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) unaryMinus Negate the value. operator fun unaryMinus(): LongSeconds Companion Object Properties Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MAX The largest supported value. val MAX: LongSeconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MIN The smallest supported value. val MIN: LongSeconds Extension Functions Name Summary (jvm) toJavaDuration Convert to an equivalent Java Duration . fun LongSeconds .toJavaDuration(): Duration","title":"Index"},{"location":"api/core/io.islandtime.measures/-long-seconds/#longseconds","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline class LongSeconds : Comparable < LongSeconds > A number of seconds.","title":"LongSeconds"},{"location":"api/core/io.islandtime.measures/-long-seconds/#constructors","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init> A number of seconds. <init>(value: Long )","title":"Constructors"},{"location":"api/core/io.islandtime.measures/-long-seconds/#properties","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) absoluteValue Returns the absolute value. val absoluteValue: LongSeconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inDays Convert to whole days. val inDays: LongDays (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inHours Convert to whole hours. val inHours: LongHours (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inMicroseconds Convert to microseconds. val inMicroseconds: LongMicroseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inMilliseconds Convert to milliseconds. val inMilliseconds: LongMilliseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inMinutes Convert to whole minutes. val inMinutes: LongMinutes (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inNanoseconds Convert to nanoseconds. val inNanoseconds: LongNanoseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) value The underlying value. val value: Long","title":"Properties"},{"location":"api/core/io.islandtime.measures/-long-seconds/#functions","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) compareTo fun compareTo(other: LongSeconds ): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) div Divide by a scalar value. operator fun div(scalar: Int ): LongSeconds operator fun div(scalar: Long ): LongSeconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isNegative Is this duration negative? fun isNegative(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isPositive Is this duration positive? fun isPositive(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isZero Is this duration zero? fun isZero(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) minus operator fun minus(nanoseconds: IntNanoseconds ): LongNanoseconds operator fun minus(nanoseconds: LongNanoseconds ): LongNanoseconds operator fun minus(microseconds: IntMicroseconds ): LongMicroseconds operator fun minus(microseconds: LongMicroseconds ): LongMicroseconds operator fun minus(milliseconds: IntMilliseconds ): LongMilliseconds operator fun minus(milliseconds: LongMilliseconds ): LongMilliseconds operator fun minus(seconds: IntSeconds ): LongSeconds operator fun minus(seconds: LongSeconds ): LongSeconds operator fun minus(minutes: IntMinutes ): LongSeconds operator fun minus(minutes: LongMinutes ): LongSeconds operator fun minus(hours: IntHours ): LongSeconds operator fun minus(hours: LongHours ): LongSeconds operator fun minus(days: IntDays ): LongSeconds operator fun minus(days: LongDays ): LongSeconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) plus operator fun plus(nanoseconds: IntNanoseconds ): LongNanoseconds operator fun plus(nanoseconds: LongNanoseconds ): LongNanoseconds operator fun plus(microseconds: IntMicroseconds ): LongMicroseconds operator fun plus(microseconds: LongMicroseconds ): LongMicroseconds operator fun plus(milliseconds: IntMilliseconds ): LongMilliseconds operator fun plus(milliseconds: LongMilliseconds ): LongMilliseconds operator fun plus(seconds: IntSeconds ): LongSeconds operator fun plus(seconds: LongSeconds ): LongSeconds operator fun plus(minutes: IntMinutes ): LongSeconds operator fun plus(minutes: LongMinutes ): LongSeconds operator fun plus(hours: IntHours ): LongSeconds operator fun plus(hours: LongHours ): LongSeconds operator fun plus(days: IntDays ): LongSeconds operator fun plus(days: LongDays ): LongSeconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) rem operator fun rem(scalar: Int ): LongSeconds operator fun rem(scalar: Long ): LongSeconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) times Multiply by a scalar value. operator fun times(scalar: Int ): LongSeconds operator fun times(scalar: Long ): LongSeconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toComponents fun <T> toComponents(action: (minutes: LongMinutes , seconds: IntSeconds ) -> T): T fun <T> toComponents(action: (hours: LongHours , minutes: IntMinutes , seconds: IntSeconds ) -> T): T fun <T> toComponents(action: (days: LongDays , hours: IntHours , minutes: IntMinutes , seconds: IntSeconds ) -> T): T (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toInt Convert to a unit-less Int value. fun toInt(): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toIntSeconds Convert to IntSeconds . fun toIntSeconds(): IntSeconds toKotlinDuration Convert to a kotlin.time.Duration .(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toKotlinDuration(): <ERROR CLASS> (jvm) fun toKotlinDuration(): Duration (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toString Convert to an ISO-8601 time interval representation. fun toString(): String (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) unaryMinus Negate the value. operator fun unaryMinus(): LongSeconds","title":"Functions"},{"location":"api/core/io.islandtime.measures/-long-seconds/#companion-object-properties","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MAX The largest supported value. val MAX: LongSeconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MIN The smallest supported value. val MIN: LongSeconds","title":"Companion Object Properties"},{"location":"api/core/io.islandtime.measures/-long-seconds/#extension-functions","text":"Name Summary (jvm) toJavaDuration Convert to an equivalent Java Duration . fun LongSeconds .toJavaDuration(): Duration","title":"Extension Functions"},{"location":"api/core/io.islandtime.measures/-long-seconds/-init-/","text":"core / io.islandtime.measures / LongSeconds / <init> <init> (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init>(value: Long ) A number of seconds.","title":" init "},{"location":"api/core/io.islandtime.measures/-long-seconds/-init-/#init","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init>(value: Long ) A number of seconds.","title":"&lt;init&gt;"},{"location":"api/core/io.islandtime.measures/-long-seconds/-m-a-x/","text":"core / io.islandtime.measures / LongSeconds / MAX MAX (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val MAX: LongSeconds The largest supported value.","title":" m a x"},{"location":"api/core/io.islandtime.measures/-long-seconds/-m-a-x/#max","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val MAX: LongSeconds The largest supported value.","title":"MAX"},{"location":"api/core/io.islandtime.measures/-long-seconds/-m-i-n/","text":"core / io.islandtime.measures / LongSeconds / MIN MIN (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val MIN: LongSeconds The smallest supported value.","title":" m i n"},{"location":"api/core/io.islandtime.measures/-long-seconds/-m-i-n/#min","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val MIN: LongSeconds The smallest supported value.","title":"MIN"},{"location":"api/core/io.islandtime.measures/-long-seconds/absolute-value/","text":"core / io.islandtime.measures / LongSeconds / absoluteValue absoluteValue (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val absoluteValue: LongSeconds Returns the absolute value. Exceptions ArithmeticException - if overflow occurs","title":"Absolute value"},{"location":"api/core/io.islandtime.measures/-long-seconds/absolute-value/#absolutevalue","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val absoluteValue: LongSeconds Returns the absolute value.","title":"absoluteValue"},{"location":"api/core/io.islandtime.measures/-long-seconds/absolute-value/#exceptions","text":"ArithmeticException - if overflow occurs","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-long-seconds/compare-to/","text":"core / io.islandtime.measures / LongSeconds / compareTo compareTo (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun compareTo(other: LongSeconds ): Int","title":"Compare to"},{"location":"api/core/io.islandtime.measures/-long-seconds/compare-to/#compareto","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun compareTo(other: LongSeconds ): Int","title":"compareTo"},{"location":"api/core/io.islandtime.measures/-long-seconds/div/","text":"core / io.islandtime.measures / LongSeconds / div div (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun div(scalar: Int ): LongSeconds operator fun div(scalar: Long ): LongSeconds Divide by a scalar value. Exceptions ArithmeticException - if overflow occurs or the scalar is zero","title":"Div"},{"location":"api/core/io.islandtime.measures/-long-seconds/div/#div","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun div(scalar: Int ): LongSeconds operator fun div(scalar: Long ): LongSeconds Divide by a scalar value.","title":"div"},{"location":"api/core/io.islandtime.measures/-long-seconds/div/#exceptions","text":"ArithmeticException - if overflow occurs or the scalar is zero","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-long-seconds/in-days/","text":"core / io.islandtime.measures / LongSeconds / inDays inDays (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inDays: LongDays Convert to whole days.","title":"In days"},{"location":"api/core/io.islandtime.measures/-long-seconds/in-days/#indays","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inDays: LongDays Convert to whole days.","title":"inDays"},{"location":"api/core/io.islandtime.measures/-long-seconds/in-hours/","text":"core / io.islandtime.measures / LongSeconds / inHours inHours (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inHours: LongHours Convert to whole hours.","title":"In hours"},{"location":"api/core/io.islandtime.measures/-long-seconds/in-hours/#inhours","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inHours: LongHours Convert to whole hours.","title":"inHours"},{"location":"api/core/io.islandtime.measures/-long-seconds/in-microseconds/","text":"core / io.islandtime.measures / LongSeconds / inMicroseconds inMicroseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inMicroseconds: LongMicroseconds Convert to microseconds. Exceptions ArithmeticException - if overflow occurs","title":"In microseconds"},{"location":"api/core/io.islandtime.measures/-long-seconds/in-microseconds/#inmicroseconds","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inMicroseconds: LongMicroseconds Convert to microseconds.","title":"inMicroseconds"},{"location":"api/core/io.islandtime.measures/-long-seconds/in-microseconds/#exceptions","text":"ArithmeticException - if overflow occurs","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-long-seconds/in-milliseconds/","text":"core / io.islandtime.measures / LongSeconds / inMilliseconds inMilliseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inMilliseconds: LongMilliseconds Convert to milliseconds. Exceptions ArithmeticException - if overflow occurs","title":"In milliseconds"},{"location":"api/core/io.islandtime.measures/-long-seconds/in-milliseconds/#inmilliseconds","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inMilliseconds: LongMilliseconds Convert to milliseconds.","title":"inMilliseconds"},{"location":"api/core/io.islandtime.measures/-long-seconds/in-milliseconds/#exceptions","text":"ArithmeticException - if overflow occurs","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-long-seconds/in-minutes/","text":"core / io.islandtime.measures / LongSeconds / inMinutes inMinutes (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inMinutes: LongMinutes Convert to whole minutes.","title":"In minutes"},{"location":"api/core/io.islandtime.measures/-long-seconds/in-minutes/#inminutes","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inMinutes: LongMinutes Convert to whole minutes.","title":"inMinutes"},{"location":"api/core/io.islandtime.measures/-long-seconds/in-nanoseconds/","text":"core / io.islandtime.measures / LongSeconds / inNanoseconds inNanoseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inNanoseconds: LongNanoseconds Convert to nanoseconds. Exceptions ArithmeticException - if overflow occurs","title":"In nanoseconds"},{"location":"api/core/io.islandtime.measures/-long-seconds/in-nanoseconds/#innanoseconds","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inNanoseconds: LongNanoseconds Convert to nanoseconds.","title":"inNanoseconds"},{"location":"api/core/io.islandtime.measures/-long-seconds/in-nanoseconds/#exceptions","text":"ArithmeticException - if overflow occurs","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-long-seconds/is-negative/","text":"core / io.islandtime.measures / LongSeconds / isNegative isNegative (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isNegative(): Boolean Is this duration negative?","title":"Is negative"},{"location":"api/core/io.islandtime.measures/-long-seconds/is-negative/#isnegative","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isNegative(): Boolean Is this duration negative?","title":"isNegative"},{"location":"api/core/io.islandtime.measures/-long-seconds/is-positive/","text":"core / io.islandtime.measures / LongSeconds / isPositive isPositive (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isPositive(): Boolean Is this duration positive?","title":"Is positive"},{"location":"api/core/io.islandtime.measures/-long-seconds/is-positive/#ispositive","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isPositive(): Boolean Is this duration positive?","title":"isPositive"},{"location":"api/core/io.islandtime.measures/-long-seconds/is-zero/","text":"core / io.islandtime.measures / LongSeconds / isZero isZero (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isZero(): Boolean Is this duration zero?","title":"Is zero"},{"location":"api/core/io.islandtime.measures/-long-seconds/is-zero/#iszero","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isZero(): Boolean Is this duration zero?","title":"isZero"},{"location":"api/core/io.islandtime.measures/-long-seconds/minus/","text":"core / io.islandtime.measures / LongSeconds / minus minus (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun minus(nanoseconds: IntNanoseconds ): LongNanoseconds operator fun minus(nanoseconds: LongNanoseconds ): LongNanoseconds operator fun minus(microseconds: IntMicroseconds ): LongMicroseconds operator fun minus(microseconds: LongMicroseconds ): LongMicroseconds operator fun minus(milliseconds: IntMilliseconds ): LongMilliseconds operator fun minus(milliseconds: LongMilliseconds ): LongMilliseconds operator fun minus(seconds: IntSeconds ): LongSeconds operator fun minus(seconds: LongSeconds ): LongSeconds operator fun minus(minutes: IntMinutes ): LongSeconds operator fun minus(minutes: LongMinutes ): LongSeconds operator fun minus(hours: IntHours ): LongSeconds operator fun minus(hours: LongHours ): LongSeconds operator fun minus(days: IntDays ): LongSeconds operator fun minus(days: LongDays ): LongSeconds","title":"Minus"},{"location":"api/core/io.islandtime.measures/-long-seconds/minus/#minus","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun minus(nanoseconds: IntNanoseconds ): LongNanoseconds operator fun minus(nanoseconds: LongNanoseconds ): LongNanoseconds operator fun minus(microseconds: IntMicroseconds ): LongMicroseconds operator fun minus(microseconds: LongMicroseconds ): LongMicroseconds operator fun minus(milliseconds: IntMilliseconds ): LongMilliseconds operator fun minus(milliseconds: LongMilliseconds ): LongMilliseconds operator fun minus(seconds: IntSeconds ): LongSeconds operator fun minus(seconds: LongSeconds ): LongSeconds operator fun minus(minutes: IntMinutes ): LongSeconds operator fun minus(minutes: LongMinutes ): LongSeconds operator fun minus(hours: IntHours ): LongSeconds operator fun minus(hours: LongHours ): LongSeconds operator fun minus(days: IntDays ): LongSeconds operator fun minus(days: LongDays ): LongSeconds","title":"minus"},{"location":"api/core/io.islandtime.measures/-long-seconds/plus/","text":"core / io.islandtime.measures / LongSeconds / plus plus (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun plus(nanoseconds: IntNanoseconds ): LongNanoseconds operator fun plus(nanoseconds: LongNanoseconds ): LongNanoseconds operator fun plus(microseconds: IntMicroseconds ): LongMicroseconds operator fun plus(microseconds: LongMicroseconds ): LongMicroseconds operator fun plus(milliseconds: IntMilliseconds ): LongMilliseconds operator fun plus(milliseconds: LongMilliseconds ): LongMilliseconds operator fun plus(seconds: IntSeconds ): LongSeconds operator fun plus(seconds: LongSeconds ): LongSeconds operator fun plus(minutes: IntMinutes ): LongSeconds operator fun plus(minutes: LongMinutes ): LongSeconds operator fun plus(hours: IntHours ): LongSeconds operator fun plus(hours: LongHours ): LongSeconds operator fun plus(days: IntDays ): LongSeconds operator fun plus(days: LongDays ): LongSeconds","title":"Plus"},{"location":"api/core/io.islandtime.measures/-long-seconds/plus/#plus","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun plus(nanoseconds: IntNanoseconds ): LongNanoseconds operator fun plus(nanoseconds: LongNanoseconds ): LongNanoseconds operator fun plus(microseconds: IntMicroseconds ): LongMicroseconds operator fun plus(microseconds: LongMicroseconds ): LongMicroseconds operator fun plus(milliseconds: IntMilliseconds ): LongMilliseconds operator fun plus(milliseconds: LongMilliseconds ): LongMilliseconds operator fun plus(seconds: IntSeconds ): LongSeconds operator fun plus(seconds: LongSeconds ): LongSeconds operator fun plus(minutes: IntMinutes ): LongSeconds operator fun plus(minutes: LongMinutes ): LongSeconds operator fun plus(hours: IntHours ): LongSeconds operator fun plus(hours: LongHours ): LongSeconds operator fun plus(days: IntDays ): LongSeconds operator fun plus(days: LongDays ): LongSeconds","title":"plus"},{"location":"api/core/io.islandtime.measures/-long-seconds/rem/","text":"core / io.islandtime.measures / LongSeconds / rem rem (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun rem(scalar: Int ): LongSeconds operator fun rem(scalar: Long ): LongSeconds","title":"Rem"},{"location":"api/core/io.islandtime.measures/-long-seconds/rem/#rem","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun rem(scalar: Int ): LongSeconds operator fun rem(scalar: Long ): LongSeconds","title":"rem"},{"location":"api/core/io.islandtime.measures/-long-seconds/times/","text":"core / io.islandtime.measures / LongSeconds / times times (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun times(scalar: Int ): LongSeconds operator fun times(scalar: Long ): LongSeconds Multiply by a scalar value. Exceptions ArithmeticException - if overflow occurs","title":"Times"},{"location":"api/core/io.islandtime.measures/-long-seconds/times/#times","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun times(scalar: Int ): LongSeconds operator fun times(scalar: Long ): LongSeconds Multiply by a scalar value.","title":"times"},{"location":"api/core/io.islandtime.measures/-long-seconds/times/#exceptions","text":"ArithmeticException - if overflow occurs","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-long-seconds/to-components/","text":"core / io.islandtime.measures / LongSeconds / toComponents toComponents (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline fun <T> toComponents(action: (minutes: LongMinutes , seconds: IntSeconds ) -> T): T inline fun <T> toComponents(action: (hours: LongHours , minutes: IntMinutes , seconds: IntSeconds ) -> T): T inline fun <T> toComponents(action: (days: LongDays , hours: IntHours , minutes: IntMinutes , seconds: IntSeconds ) -> T): T","title":"To components"},{"location":"api/core/io.islandtime.measures/-long-seconds/to-components/#tocomponents","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline fun <T> toComponents(action: (minutes: LongMinutes , seconds: IntSeconds ) -> T): T inline fun <T> toComponents(action: (hours: LongHours , minutes: IntMinutes , seconds: IntSeconds ) -> T): T inline fun <T> toComponents(action: (days: LongDays , hours: IntHours , minutes: IntMinutes , seconds: IntSeconds ) -> T): T","title":"toComponents"},{"location":"api/core/io.islandtime.measures/-long-seconds/to-int-seconds/","text":"core / io.islandtime.measures / LongSeconds / toIntSeconds toIntSeconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toIntSeconds(): IntSeconds Convert to IntSeconds . Exceptions ArithmeticException - if overflow occurs","title":"To int seconds"},{"location":"api/core/io.islandtime.measures/-long-seconds/to-int-seconds/#tointseconds","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toIntSeconds(): IntSeconds Convert to IntSeconds .","title":"toIntSeconds"},{"location":"api/core/io.islandtime.measures/-long-seconds/to-int-seconds/#exceptions","text":"ArithmeticException - if overflow occurs","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-long-seconds/to-int/","text":"core / io.islandtime.measures / LongSeconds / toInt toInt (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toInt(): Int Convert to a unit-less Int value. Exceptions ArithmeticException - if overflow occurs","title":"To int"},{"location":"api/core/io.islandtime.measures/-long-seconds/to-int/#toint","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toInt(): Int Convert to a unit-less Int value.","title":"toInt"},{"location":"api/core/io.islandtime.measures/-long-seconds/to-int/#exceptions","text":"ArithmeticException - if overflow occurs","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-long-seconds/to-kotlin-duration/","text":"core / io.islandtime.measures / LongSeconds / toKotlinDuration toKotlinDuration (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toKotlinDuration(): <ERROR CLASS> (jvm) @ExperimentalTime fun toKotlinDuration(): Duration (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) Convert to a kotlin.time.Duration . (jvm) Convert to a kotlin.time.Duration .","title":"To kotlin duration"},{"location":"api/core/io.islandtime.measures/-long-seconds/to-kotlin-duration/#tokotlinduration","text":"(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toKotlinDuration(): <ERROR CLASS> (jvm) @ExperimentalTime fun toKotlinDuration(): Duration (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) Convert to a kotlin.time.Duration . (jvm) Convert to a kotlin.time.Duration .","title":"toKotlinDuration"},{"location":"api/core/io.islandtime.measures/-long-seconds/to-string/","text":"core / io.islandtime.measures / LongSeconds / toString toString (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toString(): String Convert to an ISO-8601 time interval representation.","title":"To string"},{"location":"api/core/io.islandtime.measures/-long-seconds/to-string/#tostring","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toString(): String Convert to an ISO-8601 time interval representation.","title":"toString"},{"location":"api/core/io.islandtime.measures/-long-seconds/unary-minus/","text":"core / io.islandtime.measures / LongSeconds / unaryMinus unaryMinus (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun unaryMinus(): LongSeconds Negate the value. Exceptions ArithmeticException - if overflow occurs","title":"Unary minus"},{"location":"api/core/io.islandtime.measures/-long-seconds/unary-minus/#unaryminus","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun unaryMinus(): LongSeconds Negate the value.","title":"unaryMinus"},{"location":"api/core/io.islandtime.measures/-long-seconds/unary-minus/#exceptions","text":"ArithmeticException - if overflow occurs","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-long-seconds/value/","text":"core / io.islandtime.measures / LongSeconds / value value (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val value: Long The underlying value.","title":"Value"},{"location":"api/core/io.islandtime.measures/-long-seconds/value/#value","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val value: Long The underlying value.","title":"value"},{"location":"api/core/io.islandtime.measures/-long-weeks/","text":"core / io.islandtime.measures / LongWeeks LongWeeks (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline class LongWeeks : Comparable < LongWeeks > A number of weeks. Constructors Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init> A number of weeks. <init>(value: Long ) Properties Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) absoluteValue Returns the absolute value. val absoluteValue: LongWeeks (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inDays Convert to days. val inDays: LongDays (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) value The underlying value. val value: Long Functions Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) compareTo fun compareTo(other: LongWeeks ): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) div Divide by a scalar value. operator fun div(scalar: Int ): LongWeeks operator fun div(scalar: Long ): LongWeeks (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isNegative Is this duration negative? fun isNegative(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isPositive Is this duration positive? fun isPositive(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isZero Is this duration zero? fun isZero(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) minus operator fun minus(days: IntDays ): LongDays operator fun minus(days: LongDays ): LongDays operator fun minus(weeks: IntWeeks ): LongWeeks operator fun minus(weeks: LongWeeks ): LongWeeks (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) plus operator fun plus(days: IntDays ): LongDays operator fun plus(days: LongDays ): LongDays operator fun plus(weeks: IntWeeks ): LongWeeks operator fun plus(weeks: LongWeeks ): LongWeeks (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) rem operator fun rem(scalar: Int ): LongWeeks operator fun rem(scalar: Long ): LongWeeks (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) times Multiply by a scalar value. operator fun times(scalar: Int ): LongWeeks operator fun times(scalar: Long ): LongWeeks (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toInt Convert to a unit-less Int value. fun toInt(): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toIntWeeks Convert to IntWeeks . fun toIntWeeks(): IntWeeks (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toString Convert to an ISO-8601 time interval representation. fun toString(): String (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) unaryMinus Negate the value. operator fun unaryMinus(): LongWeeks Companion Object Properties Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MAX The largest supported value. val MAX: LongWeeks (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MIN The smallest supported value. val MIN: LongWeeks Extension Functions Name Summary (jvm) toJavaPeriod Convert to an equivalent Java Period . fun LongWeeks .toJavaPeriod(): Period","title":"Index"},{"location":"api/core/io.islandtime.measures/-long-weeks/#longweeks","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline class LongWeeks : Comparable < LongWeeks > A number of weeks.","title":"LongWeeks"},{"location":"api/core/io.islandtime.measures/-long-weeks/#constructors","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init> A number of weeks. <init>(value: Long )","title":"Constructors"},{"location":"api/core/io.islandtime.measures/-long-weeks/#properties","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) absoluteValue Returns the absolute value. val absoluteValue: LongWeeks (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inDays Convert to days. val inDays: LongDays (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) value The underlying value. val value: Long","title":"Properties"},{"location":"api/core/io.islandtime.measures/-long-weeks/#functions","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) compareTo fun compareTo(other: LongWeeks ): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) div Divide by a scalar value. operator fun div(scalar: Int ): LongWeeks operator fun div(scalar: Long ): LongWeeks (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isNegative Is this duration negative? fun isNegative(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isPositive Is this duration positive? fun isPositive(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isZero Is this duration zero? fun isZero(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) minus operator fun minus(days: IntDays ): LongDays operator fun minus(days: LongDays ): LongDays operator fun minus(weeks: IntWeeks ): LongWeeks operator fun minus(weeks: LongWeeks ): LongWeeks (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) plus operator fun plus(days: IntDays ): LongDays operator fun plus(days: LongDays ): LongDays operator fun plus(weeks: IntWeeks ): LongWeeks operator fun plus(weeks: LongWeeks ): LongWeeks (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) rem operator fun rem(scalar: Int ): LongWeeks operator fun rem(scalar: Long ): LongWeeks (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) times Multiply by a scalar value. operator fun times(scalar: Int ): LongWeeks operator fun times(scalar: Long ): LongWeeks (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toInt Convert to a unit-less Int value. fun toInt(): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toIntWeeks Convert to IntWeeks . fun toIntWeeks(): IntWeeks (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toString Convert to an ISO-8601 time interval representation. fun toString(): String (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) unaryMinus Negate the value. operator fun unaryMinus(): LongWeeks","title":"Functions"},{"location":"api/core/io.islandtime.measures/-long-weeks/#companion-object-properties","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MAX The largest supported value. val MAX: LongWeeks (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MIN The smallest supported value. val MIN: LongWeeks","title":"Companion Object Properties"},{"location":"api/core/io.islandtime.measures/-long-weeks/#extension-functions","text":"Name Summary (jvm) toJavaPeriod Convert to an equivalent Java Period . fun LongWeeks .toJavaPeriod(): Period","title":"Extension Functions"},{"location":"api/core/io.islandtime.measures/-long-weeks/-init-/","text":"core / io.islandtime.measures / LongWeeks / <init> <init> (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init>(value: Long ) A number of weeks.","title":" init "},{"location":"api/core/io.islandtime.measures/-long-weeks/-init-/#init","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init>(value: Long ) A number of weeks.","title":"&lt;init&gt;"},{"location":"api/core/io.islandtime.measures/-long-weeks/-m-a-x/","text":"core / io.islandtime.measures / LongWeeks / MAX MAX (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val MAX: LongWeeks The largest supported value.","title":" m a x"},{"location":"api/core/io.islandtime.measures/-long-weeks/-m-a-x/#max","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val MAX: LongWeeks The largest supported value.","title":"MAX"},{"location":"api/core/io.islandtime.measures/-long-weeks/-m-i-n/","text":"core / io.islandtime.measures / LongWeeks / MIN MIN (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val MIN: LongWeeks The smallest supported value.","title":" m i n"},{"location":"api/core/io.islandtime.measures/-long-weeks/-m-i-n/#min","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val MIN: LongWeeks The smallest supported value.","title":"MIN"},{"location":"api/core/io.islandtime.measures/-long-weeks/absolute-value/","text":"core / io.islandtime.measures / LongWeeks / absoluteValue absoluteValue (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val absoluteValue: LongWeeks Returns the absolute value. Exceptions ArithmeticException - if overflow occurs","title":"Absolute value"},{"location":"api/core/io.islandtime.measures/-long-weeks/absolute-value/#absolutevalue","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val absoluteValue: LongWeeks Returns the absolute value.","title":"absoluteValue"},{"location":"api/core/io.islandtime.measures/-long-weeks/absolute-value/#exceptions","text":"ArithmeticException - if overflow occurs","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-long-weeks/compare-to/","text":"core / io.islandtime.measures / LongWeeks / compareTo compareTo (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun compareTo(other: LongWeeks ): Int","title":"Compare to"},{"location":"api/core/io.islandtime.measures/-long-weeks/compare-to/#compareto","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun compareTo(other: LongWeeks ): Int","title":"compareTo"},{"location":"api/core/io.islandtime.measures/-long-weeks/div/","text":"core / io.islandtime.measures / LongWeeks / div div (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun div(scalar: Int ): LongWeeks operator fun div(scalar: Long ): LongWeeks Divide by a scalar value. Exceptions ArithmeticException - if overflow occurs or the scalar is zero","title":"Div"},{"location":"api/core/io.islandtime.measures/-long-weeks/div/#div","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun div(scalar: Int ): LongWeeks operator fun div(scalar: Long ): LongWeeks Divide by a scalar value.","title":"div"},{"location":"api/core/io.islandtime.measures/-long-weeks/div/#exceptions","text":"ArithmeticException - if overflow occurs or the scalar is zero","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-long-weeks/in-days/","text":"core / io.islandtime.measures / LongWeeks / inDays inDays (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inDays: LongDays Convert to days. Exceptions ArithmeticException - if overflow occurs","title":"In days"},{"location":"api/core/io.islandtime.measures/-long-weeks/in-days/#indays","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inDays: LongDays Convert to days.","title":"inDays"},{"location":"api/core/io.islandtime.measures/-long-weeks/in-days/#exceptions","text":"ArithmeticException - if overflow occurs","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-long-weeks/is-negative/","text":"core / io.islandtime.measures / LongWeeks / isNegative isNegative (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isNegative(): Boolean Is this duration negative?","title":"Is negative"},{"location":"api/core/io.islandtime.measures/-long-weeks/is-negative/#isnegative","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isNegative(): Boolean Is this duration negative?","title":"isNegative"},{"location":"api/core/io.islandtime.measures/-long-weeks/is-positive/","text":"core / io.islandtime.measures / LongWeeks / isPositive isPositive (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isPositive(): Boolean Is this duration positive?","title":"Is positive"},{"location":"api/core/io.islandtime.measures/-long-weeks/is-positive/#ispositive","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isPositive(): Boolean Is this duration positive?","title":"isPositive"},{"location":"api/core/io.islandtime.measures/-long-weeks/is-zero/","text":"core / io.islandtime.measures / LongWeeks / isZero isZero (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isZero(): Boolean Is this duration zero?","title":"Is zero"},{"location":"api/core/io.islandtime.measures/-long-weeks/is-zero/#iszero","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isZero(): Boolean Is this duration zero?","title":"isZero"},{"location":"api/core/io.islandtime.measures/-long-weeks/minus/","text":"core / io.islandtime.measures / LongWeeks / minus minus (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun minus(days: IntDays ): LongDays operator fun minus(days: LongDays ): LongDays operator fun minus(weeks: IntWeeks ): LongWeeks operator fun minus(weeks: LongWeeks ): LongWeeks","title":"Minus"},{"location":"api/core/io.islandtime.measures/-long-weeks/minus/#minus","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun minus(days: IntDays ): LongDays operator fun minus(days: LongDays ): LongDays operator fun minus(weeks: IntWeeks ): LongWeeks operator fun minus(weeks: LongWeeks ): LongWeeks","title":"minus"},{"location":"api/core/io.islandtime.measures/-long-weeks/plus/","text":"core / io.islandtime.measures / LongWeeks / plus plus (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun plus(days: IntDays ): LongDays operator fun plus(days: LongDays ): LongDays operator fun plus(weeks: IntWeeks ): LongWeeks operator fun plus(weeks: LongWeeks ): LongWeeks","title":"Plus"},{"location":"api/core/io.islandtime.measures/-long-weeks/plus/#plus","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun plus(days: IntDays ): LongDays operator fun plus(days: LongDays ): LongDays operator fun plus(weeks: IntWeeks ): LongWeeks operator fun plus(weeks: LongWeeks ): LongWeeks","title":"plus"},{"location":"api/core/io.islandtime.measures/-long-weeks/rem/","text":"core / io.islandtime.measures / LongWeeks / rem rem (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun rem(scalar: Int ): LongWeeks operator fun rem(scalar: Long ): LongWeeks","title":"Rem"},{"location":"api/core/io.islandtime.measures/-long-weeks/rem/#rem","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun rem(scalar: Int ): LongWeeks operator fun rem(scalar: Long ): LongWeeks","title":"rem"},{"location":"api/core/io.islandtime.measures/-long-weeks/times/","text":"core / io.islandtime.measures / LongWeeks / times times (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun times(scalar: Int ): LongWeeks operator fun times(scalar: Long ): LongWeeks Multiply by a scalar value. Exceptions ArithmeticException - if overflow occurs","title":"Times"},{"location":"api/core/io.islandtime.measures/-long-weeks/times/#times","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun times(scalar: Int ): LongWeeks operator fun times(scalar: Long ): LongWeeks Multiply by a scalar value.","title":"times"},{"location":"api/core/io.islandtime.measures/-long-weeks/times/#exceptions","text":"ArithmeticException - if overflow occurs","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-long-weeks/to-int-weeks/","text":"core / io.islandtime.measures / LongWeeks / toIntWeeks toIntWeeks (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toIntWeeks(): IntWeeks Convert to IntWeeks . Exceptions ArithmeticException - if overflow occurs","title":"To int weeks"},{"location":"api/core/io.islandtime.measures/-long-weeks/to-int-weeks/#tointweeks","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toIntWeeks(): IntWeeks Convert to IntWeeks .","title":"toIntWeeks"},{"location":"api/core/io.islandtime.measures/-long-weeks/to-int-weeks/#exceptions","text":"ArithmeticException - if overflow occurs","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-long-weeks/to-int/","text":"core / io.islandtime.measures / LongWeeks / toInt toInt (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toInt(): Int Convert to a unit-less Int value. Exceptions ArithmeticException - if overflow occurs","title":"To int"},{"location":"api/core/io.islandtime.measures/-long-weeks/to-int/#toint","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toInt(): Int Convert to a unit-less Int value.","title":"toInt"},{"location":"api/core/io.islandtime.measures/-long-weeks/to-int/#exceptions","text":"ArithmeticException - if overflow occurs","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-long-weeks/to-string/","text":"core / io.islandtime.measures / LongWeeks / toString toString (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toString(): String Convert to an ISO-8601 time interval representation.","title":"To string"},{"location":"api/core/io.islandtime.measures/-long-weeks/to-string/#tostring","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toString(): String Convert to an ISO-8601 time interval representation.","title":"toString"},{"location":"api/core/io.islandtime.measures/-long-weeks/unary-minus/","text":"core / io.islandtime.measures / LongWeeks / unaryMinus unaryMinus (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun unaryMinus(): LongWeeks Negate the value. Exceptions ArithmeticException - if overflow occurs","title":"Unary minus"},{"location":"api/core/io.islandtime.measures/-long-weeks/unary-minus/#unaryminus","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun unaryMinus(): LongWeeks Negate the value.","title":"unaryMinus"},{"location":"api/core/io.islandtime.measures/-long-weeks/unary-minus/#exceptions","text":"ArithmeticException - if overflow occurs","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-long-weeks/value/","text":"core / io.islandtime.measures / LongWeeks / value value (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val value: Long The underlying value.","title":"Value"},{"location":"api/core/io.islandtime.measures/-long-weeks/value/#value","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val value: Long The underlying value.","title":"value"},{"location":"api/core/io.islandtime.measures/-long-years/","text":"core / io.islandtime.measures / LongYears LongYears (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline class LongYears : Comparable < LongYears > A number of years. Constructors Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init> A number of years. <init>(value: Long ) Properties Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) absoluteValue Returns the absolute value. val absoluteValue: LongYears (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inCenturies Convert to whole centuries. val inCenturies: LongCenturies (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inDecades Convert to whole decades. val inDecades: LongDecades (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inMonths Convert to months. val inMonths: LongMonths (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) value The underlying value. val value: Long Functions Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) compareTo fun compareTo(other: LongYears ): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) div Divide by a scalar value. operator fun div(scalar: Int ): LongYears operator fun div(scalar: Long ): LongYears (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isNegative Is this duration negative? fun isNegative(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isPositive Is this duration positive? fun isPositive(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isZero Is this duration zero? fun isZero(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) minus operator fun minus(months: IntMonths ): LongMonths operator fun minus(months: LongMonths ): LongMonths operator fun minus(years: IntYears ): LongYears operator fun minus(years: LongYears ): LongYears operator fun minus(decades: IntDecades ): LongYears operator fun minus(decades: LongDecades ): LongYears operator fun minus(centuries: IntCenturies ): LongYears operator fun minus(centuries: LongCenturies ): LongYears (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) plus operator fun plus(months: IntMonths ): LongMonths operator fun plus(months: LongMonths ): LongMonths operator fun plus(years: IntYears ): LongYears operator fun plus(years: LongYears ): LongYears operator fun plus(decades: IntDecades ): LongYears operator fun plus(decades: LongDecades ): LongYears operator fun plus(centuries: IntCenturies ): LongYears operator fun plus(centuries: LongCenturies ): LongYears (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) rem operator fun rem(scalar: Int ): LongYears operator fun rem(scalar: Long ): LongYears (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) times Multiply by a scalar value. operator fun times(scalar: Int ): LongYears operator fun times(scalar: Long ): LongYears (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toComponents fun <T> toComponents(action: (decades: LongDecades , years: IntYears ) -> T): T fun <T> toComponents(action: (centuries: LongCenturies , decades: IntDecades , years: IntYears ) -> T): T (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toInt Convert to a unit-less Int value. fun toInt(): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toIntYears Convert to IntYears . fun toIntYears(): IntYears (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toString Convert to an ISO-8601 time interval representation. fun toString(): String (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) unaryMinus Negate the value. operator fun unaryMinus(): LongYears Companion Object Properties Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MAX The largest supported value. val MAX: LongYears (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MIN The smallest supported value. val MIN: LongYears Extension Functions Name Summary (jvm) toJavaPeriod Convert to an equivalent Java Period . fun LongYears .toJavaPeriod(): Period","title":"Index"},{"location":"api/core/io.islandtime.measures/-long-years/#longyears","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline class LongYears : Comparable < LongYears > A number of years.","title":"LongYears"},{"location":"api/core/io.islandtime.measures/-long-years/#constructors","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init> A number of years. <init>(value: Long )","title":"Constructors"},{"location":"api/core/io.islandtime.measures/-long-years/#properties","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) absoluteValue Returns the absolute value. val absoluteValue: LongYears (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inCenturies Convert to whole centuries. val inCenturies: LongCenturies (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inDecades Convert to whole decades. val inDecades: LongDecades (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inMonths Convert to months. val inMonths: LongMonths (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) value The underlying value. val value: Long","title":"Properties"},{"location":"api/core/io.islandtime.measures/-long-years/#functions","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) compareTo fun compareTo(other: LongYears ): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) div Divide by a scalar value. operator fun div(scalar: Int ): LongYears operator fun div(scalar: Long ): LongYears (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isNegative Is this duration negative? fun isNegative(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isPositive Is this duration positive? fun isPositive(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isZero Is this duration zero? fun isZero(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) minus operator fun minus(months: IntMonths ): LongMonths operator fun minus(months: LongMonths ): LongMonths operator fun minus(years: IntYears ): LongYears operator fun minus(years: LongYears ): LongYears operator fun minus(decades: IntDecades ): LongYears operator fun minus(decades: LongDecades ): LongYears operator fun minus(centuries: IntCenturies ): LongYears operator fun minus(centuries: LongCenturies ): LongYears (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) plus operator fun plus(months: IntMonths ): LongMonths operator fun plus(months: LongMonths ): LongMonths operator fun plus(years: IntYears ): LongYears operator fun plus(years: LongYears ): LongYears operator fun plus(decades: IntDecades ): LongYears operator fun plus(decades: LongDecades ): LongYears operator fun plus(centuries: IntCenturies ): LongYears operator fun plus(centuries: LongCenturies ): LongYears (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) rem operator fun rem(scalar: Int ): LongYears operator fun rem(scalar: Long ): LongYears (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) times Multiply by a scalar value. operator fun times(scalar: Int ): LongYears operator fun times(scalar: Long ): LongYears (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toComponents fun <T> toComponents(action: (decades: LongDecades , years: IntYears ) -> T): T fun <T> toComponents(action: (centuries: LongCenturies , decades: IntDecades , years: IntYears ) -> T): T (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toInt Convert to a unit-less Int value. fun toInt(): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toIntYears Convert to IntYears . fun toIntYears(): IntYears (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toString Convert to an ISO-8601 time interval representation. fun toString(): String (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) unaryMinus Negate the value. operator fun unaryMinus(): LongYears","title":"Functions"},{"location":"api/core/io.islandtime.measures/-long-years/#companion-object-properties","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MAX The largest supported value. val MAX: LongYears (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MIN The smallest supported value. val MIN: LongYears","title":"Companion Object Properties"},{"location":"api/core/io.islandtime.measures/-long-years/#extension-functions","text":"Name Summary (jvm) toJavaPeriod Convert to an equivalent Java Period . fun LongYears .toJavaPeriod(): Period","title":"Extension Functions"},{"location":"api/core/io.islandtime.measures/-long-years/-init-/","text":"core / io.islandtime.measures / LongYears / <init> <init> (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init>(value: Long ) A number of years.","title":" init "},{"location":"api/core/io.islandtime.measures/-long-years/-init-/#init","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init>(value: Long ) A number of years.","title":"&lt;init&gt;"},{"location":"api/core/io.islandtime.measures/-long-years/-m-a-x/","text":"core / io.islandtime.measures / LongYears / MAX MAX (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val MAX: LongYears The largest supported value.","title":" m a x"},{"location":"api/core/io.islandtime.measures/-long-years/-m-a-x/#max","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val MAX: LongYears The largest supported value.","title":"MAX"},{"location":"api/core/io.islandtime.measures/-long-years/-m-i-n/","text":"core / io.islandtime.measures / LongYears / MIN MIN (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val MIN: LongYears The smallest supported value.","title":" m i n"},{"location":"api/core/io.islandtime.measures/-long-years/-m-i-n/#min","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val MIN: LongYears The smallest supported value.","title":"MIN"},{"location":"api/core/io.islandtime.measures/-long-years/absolute-value/","text":"core / io.islandtime.measures / LongYears / absoluteValue absoluteValue (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val absoluteValue: LongYears Returns the absolute value. Exceptions ArithmeticException - if overflow occurs","title":"Absolute value"},{"location":"api/core/io.islandtime.measures/-long-years/absolute-value/#absolutevalue","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val absoluteValue: LongYears Returns the absolute value.","title":"absoluteValue"},{"location":"api/core/io.islandtime.measures/-long-years/absolute-value/#exceptions","text":"ArithmeticException - if overflow occurs","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-long-years/compare-to/","text":"core / io.islandtime.measures / LongYears / compareTo compareTo (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun compareTo(other: LongYears ): Int","title":"Compare to"},{"location":"api/core/io.islandtime.measures/-long-years/compare-to/#compareto","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun compareTo(other: LongYears ): Int","title":"compareTo"},{"location":"api/core/io.islandtime.measures/-long-years/div/","text":"core / io.islandtime.measures / LongYears / div div (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun div(scalar: Int ): LongYears operator fun div(scalar: Long ): LongYears Divide by a scalar value. Exceptions ArithmeticException - if overflow occurs or the scalar is zero","title":"Div"},{"location":"api/core/io.islandtime.measures/-long-years/div/#div","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun div(scalar: Int ): LongYears operator fun div(scalar: Long ): LongYears Divide by a scalar value.","title":"div"},{"location":"api/core/io.islandtime.measures/-long-years/div/#exceptions","text":"ArithmeticException - if overflow occurs or the scalar is zero","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-long-years/in-centuries/","text":"core / io.islandtime.measures / LongYears / inCenturies inCenturies (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inCenturies: LongCenturies Convert to whole centuries.","title":"In centuries"},{"location":"api/core/io.islandtime.measures/-long-years/in-centuries/#incenturies","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inCenturies: LongCenturies Convert to whole centuries.","title":"inCenturies"},{"location":"api/core/io.islandtime.measures/-long-years/in-decades/","text":"core / io.islandtime.measures / LongYears / inDecades inDecades (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inDecades: LongDecades Convert to whole decades.","title":"In decades"},{"location":"api/core/io.islandtime.measures/-long-years/in-decades/#indecades","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inDecades: LongDecades Convert to whole decades.","title":"inDecades"},{"location":"api/core/io.islandtime.measures/-long-years/in-months/","text":"core / io.islandtime.measures / LongYears / inMonths inMonths (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inMonths: LongMonths Convert to months. Exceptions ArithmeticException - if overflow occurs","title":"In months"},{"location":"api/core/io.islandtime.measures/-long-years/in-months/#inmonths","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val inMonths: LongMonths Convert to months.","title":"inMonths"},{"location":"api/core/io.islandtime.measures/-long-years/in-months/#exceptions","text":"ArithmeticException - if overflow occurs","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-long-years/is-negative/","text":"core / io.islandtime.measures / LongYears / isNegative isNegative (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isNegative(): Boolean Is this duration negative?","title":"Is negative"},{"location":"api/core/io.islandtime.measures/-long-years/is-negative/#isnegative","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isNegative(): Boolean Is this duration negative?","title":"isNegative"},{"location":"api/core/io.islandtime.measures/-long-years/is-positive/","text":"core / io.islandtime.measures / LongYears / isPositive isPositive (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isPositive(): Boolean Is this duration positive?","title":"Is positive"},{"location":"api/core/io.islandtime.measures/-long-years/is-positive/#ispositive","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isPositive(): Boolean Is this duration positive?","title":"isPositive"},{"location":"api/core/io.islandtime.measures/-long-years/is-zero/","text":"core / io.islandtime.measures / LongYears / isZero isZero (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isZero(): Boolean Is this duration zero?","title":"Is zero"},{"location":"api/core/io.islandtime.measures/-long-years/is-zero/#iszero","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isZero(): Boolean Is this duration zero?","title":"isZero"},{"location":"api/core/io.islandtime.measures/-long-years/minus/","text":"core / io.islandtime.measures / LongYears / minus minus (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun minus(months: IntMonths ): LongMonths operator fun minus(months: LongMonths ): LongMonths operator fun minus(years: IntYears ): LongYears operator fun minus(years: LongYears ): LongYears operator fun minus(decades: IntDecades ): LongYears operator fun minus(decades: LongDecades ): LongYears operator fun minus(centuries: IntCenturies ): LongYears operator fun minus(centuries: LongCenturies ): LongYears","title":"Minus"},{"location":"api/core/io.islandtime.measures/-long-years/minus/#minus","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun minus(months: IntMonths ): LongMonths operator fun minus(months: LongMonths ): LongMonths operator fun minus(years: IntYears ): LongYears operator fun minus(years: LongYears ): LongYears operator fun minus(decades: IntDecades ): LongYears operator fun minus(decades: LongDecades ): LongYears operator fun minus(centuries: IntCenturies ): LongYears operator fun minus(centuries: LongCenturies ): LongYears","title":"minus"},{"location":"api/core/io.islandtime.measures/-long-years/plus/","text":"core / io.islandtime.measures / LongYears / plus plus (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun plus(months: IntMonths ): LongMonths operator fun plus(months: LongMonths ): LongMonths operator fun plus(years: IntYears ): LongYears operator fun plus(years: LongYears ): LongYears operator fun plus(decades: IntDecades ): LongYears operator fun plus(decades: LongDecades ): LongYears operator fun plus(centuries: IntCenturies ): LongYears operator fun plus(centuries: LongCenturies ): LongYears","title":"Plus"},{"location":"api/core/io.islandtime.measures/-long-years/plus/#plus","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun plus(months: IntMonths ): LongMonths operator fun plus(months: LongMonths ): LongMonths operator fun plus(years: IntYears ): LongYears operator fun plus(years: LongYears ): LongYears operator fun plus(decades: IntDecades ): LongYears operator fun plus(decades: LongDecades ): LongYears operator fun plus(centuries: IntCenturies ): LongYears operator fun plus(centuries: LongCenturies ): LongYears","title":"plus"},{"location":"api/core/io.islandtime.measures/-long-years/rem/","text":"core / io.islandtime.measures / LongYears / rem rem (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun rem(scalar: Int ): LongYears operator fun rem(scalar: Long ): LongYears","title":"Rem"},{"location":"api/core/io.islandtime.measures/-long-years/rem/#rem","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun rem(scalar: Int ): LongYears operator fun rem(scalar: Long ): LongYears","title":"rem"},{"location":"api/core/io.islandtime.measures/-long-years/times/","text":"core / io.islandtime.measures / LongYears / times times (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun times(scalar: Int ): LongYears operator fun times(scalar: Long ): LongYears Multiply by a scalar value. Exceptions ArithmeticException - if overflow occurs","title":"Times"},{"location":"api/core/io.islandtime.measures/-long-years/times/#times","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun times(scalar: Int ): LongYears operator fun times(scalar: Long ): LongYears Multiply by a scalar value.","title":"times"},{"location":"api/core/io.islandtime.measures/-long-years/times/#exceptions","text":"ArithmeticException - if overflow occurs","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-long-years/to-components/","text":"core / io.islandtime.measures / LongYears / toComponents toComponents (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline fun <T> toComponents(action: (decades: LongDecades , years: IntYears ) -> T): T inline fun <T> toComponents(action: (centuries: LongCenturies , decades: IntDecades , years: IntYears ) -> T): T","title":"To components"},{"location":"api/core/io.islandtime.measures/-long-years/to-components/#tocomponents","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline fun <T> toComponents(action: (decades: LongDecades , years: IntYears ) -> T): T inline fun <T> toComponents(action: (centuries: LongCenturies , decades: IntDecades , years: IntYears ) -> T): T","title":"toComponents"},{"location":"api/core/io.islandtime.measures/-long-years/to-int-years/","text":"core / io.islandtime.measures / LongYears / toIntYears toIntYears (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toIntYears(): IntYears Convert to IntYears . Exceptions ArithmeticException - if overflow occurs","title":"To int years"},{"location":"api/core/io.islandtime.measures/-long-years/to-int-years/#tointyears","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toIntYears(): IntYears Convert to IntYears .","title":"toIntYears"},{"location":"api/core/io.islandtime.measures/-long-years/to-int-years/#exceptions","text":"ArithmeticException - if overflow occurs","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-long-years/to-int/","text":"core / io.islandtime.measures / LongYears / toInt toInt (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toInt(): Int Convert to a unit-less Int value. Exceptions ArithmeticException - if overflow occurs","title":"To int"},{"location":"api/core/io.islandtime.measures/-long-years/to-int/#toint","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toInt(): Int Convert to a unit-less Int value.","title":"toInt"},{"location":"api/core/io.islandtime.measures/-long-years/to-int/#exceptions","text":"ArithmeticException - if overflow occurs","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-long-years/to-string/","text":"core / io.islandtime.measures / LongYears / toString toString (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toString(): String Convert to an ISO-8601 time interval representation.","title":"To string"},{"location":"api/core/io.islandtime.measures/-long-years/to-string/#tostring","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toString(): String Convert to an ISO-8601 time interval representation.","title":"toString"},{"location":"api/core/io.islandtime.measures/-long-years/unary-minus/","text":"core / io.islandtime.measures / LongYears / unaryMinus unaryMinus (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun unaryMinus(): LongYears Negate the value. Exceptions ArithmeticException - if overflow occurs","title":"Unary minus"},{"location":"api/core/io.islandtime.measures/-long-years/unary-minus/#unaryminus","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun unaryMinus(): LongYears Negate the value.","title":"unaryMinus"},{"location":"api/core/io.islandtime.measures/-long-years/unary-minus/#exceptions","text":"ArithmeticException - if overflow occurs","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-long-years/value/","text":"core / io.islandtime.measures / LongYears / value value (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val value: Long The underlying value.","title":"Value"},{"location":"api/core/io.islandtime.measures/-long-years/value/#value","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val value: Long The underlying value.","title":"value"},{"location":"api/core/io.islandtime.measures/-period/","text":"core / io.islandtime.measures / Period Period (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) class Period A date-based period of time, such as \"2 years, 5 months, 16 days\". Unlike Duration , which uses exact increments, a Period works with conceptual days, months, and years, ignoring daylight savings and length differences. Properties Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) days The number of days in this period. val days: IntDays (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) months The number of months in this period. val months: IntMonths (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) totalMonths The total number of months in this period, including years. val totalMonths: LongMonths (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) years The number of years in this period. val years: IntYears Functions Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) component1 operator fun component1(): IntYears (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) component2 operator fun component2(): IntMonths (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) component3 operator fun component3(): IntDays (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) copy Return a new Period, replacing the years, months, and days components with new values, as desired fun copy(years: IntYears = this.years, months: IntMonths = this.months, days: IntDays = this.days): Period (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) equals fun equals(other: Any ?): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) hashCode fun hashCode(): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isNegative Check if any component of this period is negative. fun isNegative(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isZero Check if this period has no length. fun isZero(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) minus Subtract each component of another period from this period. operator fun minus(other: Period ): Period operator fun minus(years: IntYears ): Period operator fun minus(months: IntMonths ): Period operator fun minus(weeks: IntWeeks ): Period operator fun minus(days: IntDays ): Period operator fun minus(years: LongYears ): Period operator fun minus(months: LongMonths ): Period operator fun minus(weeks: LongWeeks ): Period operator fun minus(days: LongDays ): Period (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) normalized Normalize the number of years and months such that \"1 year, 15 months\" becomes \"2 years, 3 months\". Only the months and years components are combined. Days are never adjusted. fun normalized(): Period (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) plus Add each component of another period to each component of this period. operator fun plus(other: Period ): Period operator fun plus(years: IntYears ): Period operator fun plus(months: IntMonths ): Period operator fun plus(weeks: IntWeeks ): Period operator fun plus(days: IntDays ): Period operator fun plus(years: LongYears ): Period operator fun plus(months: LongMonths ): Period operator fun plus(weeks: LongWeeks ): Period operator fun plus(days: LongDays ): Period (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) times Multiply each component of this period by a scalar value. operator fun times(scalar: Int ): Period (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toString Returns an ISO-8601 period representation, such as \"P1Y10M3D\" fun toString(): String (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) unaryMinus Reverse the sign of each component in the period. operator fun unaryMinus(): Period Companion Object Properties Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) ZERO A period of no length val ZERO: Period Extension Functions Name Summary (jvm) toJavaPeriod Convert to an equivalent Java Period . fun Period .toJavaPeriod(): Period","title":"Index"},{"location":"api/core/io.islandtime.measures/-period/#period","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) class Period A date-based period of time, such as \"2 years, 5 months, 16 days\". Unlike Duration , which uses exact increments, a Period works with conceptual days, months, and years, ignoring daylight savings and length differences.","title":"Period"},{"location":"api/core/io.islandtime.measures/-period/#properties","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) days The number of days in this period. val days: IntDays (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) months The number of months in this period. val months: IntMonths (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) totalMonths The total number of months in this period, including years. val totalMonths: LongMonths (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) years The number of years in this period. val years: IntYears","title":"Properties"},{"location":"api/core/io.islandtime.measures/-period/#functions","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) component1 operator fun component1(): IntYears (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) component2 operator fun component2(): IntMonths (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) component3 operator fun component3(): IntDays (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) copy Return a new Period, replacing the years, months, and days components with new values, as desired fun copy(years: IntYears = this.years, months: IntMonths = this.months, days: IntDays = this.days): Period (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) equals fun equals(other: Any ?): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) hashCode fun hashCode(): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isNegative Check if any component of this period is negative. fun isNegative(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isZero Check if this period has no length. fun isZero(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) minus Subtract each component of another period from this period. operator fun minus(other: Period ): Period operator fun minus(years: IntYears ): Period operator fun minus(months: IntMonths ): Period operator fun minus(weeks: IntWeeks ): Period operator fun minus(days: IntDays ): Period operator fun minus(years: LongYears ): Period operator fun minus(months: LongMonths ): Period operator fun minus(weeks: LongWeeks ): Period operator fun minus(days: LongDays ): Period (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) normalized Normalize the number of years and months such that \"1 year, 15 months\" becomes \"2 years, 3 months\". Only the months and years components are combined. Days are never adjusted. fun normalized(): Period (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) plus Add each component of another period to each component of this period. operator fun plus(other: Period ): Period operator fun plus(years: IntYears ): Period operator fun plus(months: IntMonths ): Period operator fun plus(weeks: IntWeeks ): Period operator fun plus(days: IntDays ): Period operator fun plus(years: LongYears ): Period operator fun plus(months: LongMonths ): Period operator fun plus(weeks: LongWeeks ): Period operator fun plus(days: LongDays ): Period (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) times Multiply each component of this period by a scalar value. operator fun times(scalar: Int ): Period (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toString Returns an ISO-8601 period representation, such as \"P1Y10M3D\" fun toString(): String (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) unaryMinus Reverse the sign of each component in the period. operator fun unaryMinus(): Period","title":"Functions"},{"location":"api/core/io.islandtime.measures/-period/#companion-object-properties","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) ZERO A period of no length val ZERO: Period","title":"Companion Object Properties"},{"location":"api/core/io.islandtime.measures/-period/#extension-functions","text":"Name Summary (jvm) toJavaPeriod Convert to an equivalent Java Period . fun Period .toJavaPeriod(): Period","title":"Extension Functions"},{"location":"api/core/io.islandtime.measures/-period/-z-e-r-o/","text":"core / io.islandtime.measures / Period / ZERO ZERO (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val ZERO: Period A period of no length","title":" z e r o"},{"location":"api/core/io.islandtime.measures/-period/-z-e-r-o/#zero","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val ZERO: Period A period of no length","title":"ZERO"},{"location":"api/core/io.islandtime.measures/-period/component1/","text":"core / io.islandtime.measures / Period / component1 component1 (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun component1(): IntYears","title":"Component1"},{"location":"api/core/io.islandtime.measures/-period/component1/#component1","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun component1(): IntYears","title":"component1"},{"location":"api/core/io.islandtime.measures/-period/component2/","text":"core / io.islandtime.measures / Period / component2 component2 (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun component2(): IntMonths","title":"Component2"},{"location":"api/core/io.islandtime.measures/-period/component2/#component2","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun component2(): IntMonths","title":"component2"},{"location":"api/core/io.islandtime.measures/-period/component3/","text":"core / io.islandtime.measures / Period / component3 component3 (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun component3(): IntDays","title":"Component3"},{"location":"api/core/io.islandtime.measures/-period/component3/#component3","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun component3(): IntDays","title":"component3"},{"location":"api/core/io.islandtime.measures/-period/copy/","text":"core / io.islandtime.measures / Period / copy copy (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun copy(years: IntYears = this.years, months: IntMonths = this.months, days: IntDays = this.days): Period Return a new Period, replacing the years, months, and days components with new values, as desired Parameters years - new years value months - new months value days - new days value Return a new Period with the supplied values","title":"Copy"},{"location":"api/core/io.islandtime.measures/-period/copy/#copy","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun copy(years: IntYears = this.years, months: IntMonths = this.months, days: IntDays = this.days): Period Return a new Period, replacing the years, months, and days components with new values, as desired","title":"copy"},{"location":"api/core/io.islandtime.measures/-period/copy/#parameters","text":"years - new years value months - new months value days - new days value Return a new Period with the supplied values","title":"Parameters"},{"location":"api/core/io.islandtime.measures/-period/days/","text":"core / io.islandtime.measures / Period / days days (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val days: IntDays The number of days in this period. Property days - The number of days in this period.","title":"Days"},{"location":"api/core/io.islandtime.measures/-period/days/#days","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val days: IntDays The number of days in this period.","title":"days"},{"location":"api/core/io.islandtime.measures/-period/days/#property","text":"days - The number of days in this period.","title":"Property"},{"location":"api/core/io.islandtime.measures/-period/equals/","text":"core / io.islandtime.measures / Period / equals equals (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun equals(other: Any ?): Boolean","title":"Equals"},{"location":"api/core/io.islandtime.measures/-period/equals/#equals","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun equals(other: Any ?): Boolean","title":"equals"},{"location":"api/core/io.islandtime.measures/-period/hash-code/","text":"core / io.islandtime.measures / Period / hashCode hashCode (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun hashCode(): Int","title":"Hash code"},{"location":"api/core/io.islandtime.measures/-period/hash-code/#hashcode","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun hashCode(): Int","title":"hashCode"},{"location":"api/core/io.islandtime.measures/-period/is-negative/","text":"core / io.islandtime.measures / Period / isNegative isNegative (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isNegative(): Boolean Check if any component of this period is negative.","title":"Is negative"},{"location":"api/core/io.islandtime.measures/-period/is-negative/#isnegative","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isNegative(): Boolean Check if any component of this period is negative.","title":"isNegative"},{"location":"api/core/io.islandtime.measures/-period/is-zero/","text":"core / io.islandtime.measures / Period / isZero isZero (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isZero(): Boolean Check if this period has no length.","title":"Is zero"},{"location":"api/core/io.islandtime.measures/-period/is-zero/#iszero","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isZero(): Boolean Check if this period has no length.","title":"isZero"},{"location":"api/core/io.islandtime.measures/-period/minus/","text":"core / io.islandtime.measures / Period / minus minus (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun minus(other: Period ): Period Subtract each component of another period from this period. Exceptions ArithmeticException - if overflow occurs(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun minus(years: IntYears ): Period operator fun minus(months: IntMonths ): Period operator fun minus(weeks: IntWeeks ): Period operator fun minus(days: IntDays ): Period operator fun minus(years: LongYears ): Period operator fun minus(months: LongMonths ): Period operator fun minus(weeks: LongWeeks ): Period operator fun minus(days: LongDays ): Period","title":"Minus"},{"location":"api/core/io.islandtime.measures/-period/minus/#minus","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun minus(other: Period ): Period Subtract each component of another period from this period.","title":"minus"},{"location":"api/core/io.islandtime.measures/-period/minus/#exceptions","text":"ArithmeticException - if overflow occurs(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun minus(years: IntYears ): Period operator fun minus(months: IntMonths ): Period operator fun minus(weeks: IntWeeks ): Period operator fun minus(days: IntDays ): Period operator fun minus(years: LongYears ): Period operator fun minus(months: LongMonths ): Period operator fun minus(weeks: LongWeeks ): Period operator fun minus(days: LongDays ): Period","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-period/months/","text":"core / io.islandtime.measures / Period / months months (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val months: IntMonths The number of months in this period. Property months - The number of months in this period.","title":"Months"},{"location":"api/core/io.islandtime.measures/-period/months/#months","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val months: IntMonths The number of months in this period.","title":"months"},{"location":"api/core/io.islandtime.measures/-period/months/#property","text":"months - The number of months in this period.","title":"Property"},{"location":"api/core/io.islandtime.measures/-period/normalized/","text":"core / io.islandtime.measures / Period / normalized normalized (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun normalized(): Period Normalize the number of years and months such that \"1 year, 15 months\" becomes \"2 years, 3 months\". Only the months and years components are combined. Days are never adjusted.","title":"Normalized"},{"location":"api/core/io.islandtime.measures/-period/normalized/#normalized","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun normalized(): Period Normalize the number of years and months such that \"1 year, 15 months\" becomes \"2 years, 3 months\". Only the months and years components are combined. Days are never adjusted.","title":"normalized"},{"location":"api/core/io.islandtime.measures/-period/plus/","text":"core / io.islandtime.measures / Period / plus plus (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun plus(other: Period ): Period Add each component of another period to each component of this period. Exceptions ArithmeticException - if overflow occurs(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun plus(years: IntYears ): Period operator fun plus(months: IntMonths ): Period operator fun plus(weeks: IntWeeks ): Period operator fun plus(days: IntDays ): Period operator fun plus(years: LongYears ): Period operator fun plus(months: LongMonths ): Period operator fun plus(weeks: LongWeeks ): Period operator fun plus(days: LongDays ): Period","title":"Plus"},{"location":"api/core/io.islandtime.measures/-period/plus/#plus","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun plus(other: Period ): Period Add each component of another period to each component of this period.","title":"plus"},{"location":"api/core/io.islandtime.measures/-period/plus/#exceptions","text":"ArithmeticException - if overflow occurs(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun plus(years: IntYears ): Period operator fun plus(months: IntMonths ): Period operator fun plus(weeks: IntWeeks ): Period operator fun plus(days: IntDays ): Period operator fun plus(years: LongYears ): Period operator fun plus(months: LongMonths ): Period operator fun plus(weeks: LongWeeks ): Period operator fun plus(days: LongDays ): Period","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-period/times/","text":"core / io.islandtime.measures / Period / times times (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun times(scalar: Int ): Period Multiply each component of this period by a scalar value. Exceptions ArithmeticException - if overflow occurs","title":"Times"},{"location":"api/core/io.islandtime.measures/-period/times/#times","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun times(scalar: Int ): Period Multiply each component of this period by a scalar value.","title":"times"},{"location":"api/core/io.islandtime.measures/-period/times/#exceptions","text":"ArithmeticException - if overflow occurs","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-period/to-string/","text":"core / io.islandtime.measures / Period / toString toString (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toString(): String Returns an ISO-8601 period representation, such as \"P1Y10M3D\"","title":"To string"},{"location":"api/core/io.islandtime.measures/-period/to-string/#tostring","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toString(): String Returns an ISO-8601 period representation, such as \"P1Y10M3D\"","title":"toString"},{"location":"api/core/io.islandtime.measures/-period/total-months/","text":"core / io.islandtime.measures / Period / totalMonths totalMonths (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val totalMonths: LongMonths The total number of months in this period, including years.","title":"Total months"},{"location":"api/core/io.islandtime.measures/-period/total-months/#totalmonths","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val totalMonths: LongMonths The total number of months in this period, including years.","title":"totalMonths"},{"location":"api/core/io.islandtime.measures/-period/unary-minus/","text":"core / io.islandtime.measures / Period / unaryMinus unaryMinus (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun unaryMinus(): Period Reverse the sign of each component in the period. Exceptions ArithmeticException - if overflow occurs","title":"Unary minus"},{"location":"api/core/io.islandtime.measures/-period/unary-minus/#unaryminus","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun unaryMinus(): Period Reverse the sign of each component in the period.","title":"unaryMinus"},{"location":"api/core/io.islandtime.measures/-period/unary-minus/#exceptions","text":"ArithmeticException - if overflow occurs","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/-period/years/","text":"core / io.islandtime.measures / Period / years years (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val years: IntYears The number of years in this period. Property years - The number of years in this period.","title":"Years"},{"location":"api/core/io.islandtime.measures/-period/years/#years","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val years: IntYears The number of years in this period.","title":"years"},{"location":"api/core/io.islandtime.measures/-period/years/#property","text":"years - The number of years in this period.","title":"Property"},{"location":"api/core/io.islandtime.measures/-time-unit/","text":"core / io.islandtime.measures / TimeUnit TimeUnit (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) enum class TimeUnit A unit of time measurement. Enum Values Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) NANOSECONDS (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MICROSECONDS (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MILLISECONDS (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) SECONDS (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MINUTES (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) HOURS (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) DAYS Inheritors Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) DAYS (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) HOURS (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MICROSECONDS (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MILLISECONDS (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MINUTES (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) NANOSECONDS (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) SECONDS","title":"Index"},{"location":"api/core/io.islandtime.measures/-time-unit/#timeunit","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) enum class TimeUnit A unit of time measurement.","title":"TimeUnit"},{"location":"api/core/io.islandtime.measures/-time-unit/#enum-values","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) NANOSECONDS (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MICROSECONDS (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MILLISECONDS (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) SECONDS (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MINUTES (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) HOURS (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) DAYS","title":"Enum Values"},{"location":"api/core/io.islandtime.measures/-time-unit/#inheritors","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) DAYS (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) HOURS (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MICROSECONDS (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MILLISECONDS (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MINUTES (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) NANOSECONDS (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) SECONDS","title":"Inheritors"},{"location":"api/core/io.islandtime.measures/-time-unit/-d-a-y-s/","text":"core / io.islandtime.measures / TimeUnit / DAYS DAYS (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) DAYS","title":" d a y s"},{"location":"api/core/io.islandtime.measures/-time-unit/-d-a-y-s/#days","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) DAYS","title":"DAYS"},{"location":"api/core/io.islandtime.measures/-time-unit/-h-o-u-r-s/","text":"core / io.islandtime.measures / TimeUnit / HOURS HOURS (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) HOURS","title":" h o u r s"},{"location":"api/core/io.islandtime.measures/-time-unit/-h-o-u-r-s/#hours","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) HOURS","title":"HOURS"},{"location":"api/core/io.islandtime.measures/-time-unit/-m-i-c-r-o-s-e-c-o-n-d-s/","text":"core / io.islandtime.measures / TimeUnit / MICROSECONDS MICROSECONDS (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MICROSECONDS","title":" m i c r o s e c o n d s"},{"location":"api/core/io.islandtime.measures/-time-unit/-m-i-c-r-o-s-e-c-o-n-d-s/#microseconds","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MICROSECONDS","title":"MICROSECONDS"},{"location":"api/core/io.islandtime.measures/-time-unit/-m-i-l-l-i-s-e-c-o-n-d-s/","text":"core / io.islandtime.measures / TimeUnit / MILLISECONDS MILLISECONDS (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MILLISECONDS","title":" m i l l i s e c o n d s"},{"location":"api/core/io.islandtime.measures/-time-unit/-m-i-l-l-i-s-e-c-o-n-d-s/#milliseconds","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MILLISECONDS","title":"MILLISECONDS"},{"location":"api/core/io.islandtime.measures/-time-unit/-m-i-n-u-t-e-s/","text":"core / io.islandtime.measures / TimeUnit / MINUTES MINUTES (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MINUTES","title":" m i n u t e s"},{"location":"api/core/io.islandtime.measures/-time-unit/-m-i-n-u-t-e-s/#minutes","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) MINUTES","title":"MINUTES"},{"location":"api/core/io.islandtime.measures/-time-unit/-n-a-n-o-s-e-c-o-n-d-s/","text":"core / io.islandtime.measures / TimeUnit / NANOSECONDS NANOSECONDS (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) NANOSECONDS","title":" n a n o s e c o n d s"},{"location":"api/core/io.islandtime.measures/-time-unit/-n-a-n-o-s-e-c-o-n-d-s/#nanoseconds","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) NANOSECONDS","title":"NANOSECONDS"},{"location":"api/core/io.islandtime.measures/-time-unit/-s-e-c-o-n-d-s/","text":"core / io.islandtime.measures / TimeUnit / SECONDS SECONDS (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) SECONDS","title":" s e c o n d s"},{"location":"api/core/io.islandtime.measures/-time-unit/-s-e-c-o-n-d-s/#seconds","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) SECONDS","title":"SECONDS"},{"location":"api/core/io.islandtime.measures/kotlin.-int/","text":"core / io.islandtime.measures / kotlin.Int Extensions for kotlin.Int Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) centuries Convert to IntCenturies . val Int .centuries: IntCenturies (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) days Convert to IntDays . val Int .days: IntDays (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) decades Convert to IntDecades . val Int .decades: IntDecades (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) hours Convert to IntHours . val Int .hours: IntHours (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) microseconds Convert to IntMicroseconds . val Int .microseconds: IntMicroseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) milliseconds Convert to IntMilliseconds . val Int .milliseconds: IntMilliseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) minutes Convert to IntMinutes . val Int .minutes: IntMinutes (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) months Convert to IntMonths . val Int .months: IntMonths (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) nanoseconds Convert to IntNanoseconds . val Int .nanoseconds: IntNanoseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) seconds Convert to IntSeconds . val Int .seconds: IntSeconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) times Multiply by a number of centuries. operator fun Int .times(centuries: IntCenturies ): IntCenturies operator fun Int .times(centuries: LongCenturies ): LongCenturies Multiply by a number of days. operator fun Int .times(days: IntDays ): IntDays operator fun Int .times(days: LongDays ): LongDays Multiply by a number of decades. operator fun Int .times(decades: IntDecades ): IntDecades operator fun Int .times(decades: LongDecades ): LongDecades Multiply by a number of hours. operator fun Int .times(hours: IntHours ): IntHours operator fun Int .times(hours: LongHours ): LongHours Multiply by a number of microseconds. operator fun Int .times(microseconds: IntMicroseconds ): LongMicroseconds operator fun Int .times(microseconds: LongMicroseconds ): LongMicroseconds Multiply by a number of milliseconds. operator fun Int .times(milliseconds: IntMilliseconds ): LongMilliseconds operator fun Int .times(milliseconds: LongMilliseconds ): LongMilliseconds Multiply by a number of minutes. operator fun Int .times(minutes: IntMinutes ): IntMinutes operator fun Int .times(minutes: LongMinutes ): LongMinutes Multiply by a number of months. operator fun Int .times(months: IntMonths ): IntMonths operator fun Int .times(months: LongMonths ): LongMonths Multiply by a number of nanoseconds. operator fun Int .times(nanoseconds: IntNanoseconds ): LongNanoseconds operator fun Int .times(nanoseconds: LongNanoseconds ): LongNanoseconds Multiply by a number of seconds. operator fun Int .times(seconds: IntSeconds ): IntSeconds operator fun Int .times(seconds: LongSeconds ): LongSeconds Multiply by a number of weeks. operator fun Int .times(weeks: IntWeeks ): IntWeeks operator fun Int .times(weeks: LongWeeks ): LongWeeks Multiply by a number of years. operator fun Int .times(years: IntYears ): IntYears operator fun Int .times(years: LongYears ): LongYears Multiply by a duration. operator fun Int .times(duration: Duration ): Duration operator fun Int .times(period: Period ): Period (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) weeks Convert to IntWeeks . val Int .weeks: IntWeeks (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) years Convert to IntYears . val Int .years: IntYears","title":"Index"},{"location":"api/core/io.islandtime.measures/kotlin.-int/#extensions-for-kotlinint","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) centuries Convert to IntCenturies . val Int .centuries: IntCenturies (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) days Convert to IntDays . val Int .days: IntDays (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) decades Convert to IntDecades . val Int .decades: IntDecades (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) hours Convert to IntHours . val Int .hours: IntHours (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) microseconds Convert to IntMicroseconds . val Int .microseconds: IntMicroseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) milliseconds Convert to IntMilliseconds . val Int .milliseconds: IntMilliseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) minutes Convert to IntMinutes . val Int .minutes: IntMinutes (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) months Convert to IntMonths . val Int .months: IntMonths (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) nanoseconds Convert to IntNanoseconds . val Int .nanoseconds: IntNanoseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) seconds Convert to IntSeconds . val Int .seconds: IntSeconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) times Multiply by a number of centuries. operator fun Int .times(centuries: IntCenturies ): IntCenturies operator fun Int .times(centuries: LongCenturies ): LongCenturies Multiply by a number of days. operator fun Int .times(days: IntDays ): IntDays operator fun Int .times(days: LongDays ): LongDays Multiply by a number of decades. operator fun Int .times(decades: IntDecades ): IntDecades operator fun Int .times(decades: LongDecades ): LongDecades Multiply by a number of hours. operator fun Int .times(hours: IntHours ): IntHours operator fun Int .times(hours: LongHours ): LongHours Multiply by a number of microseconds. operator fun Int .times(microseconds: IntMicroseconds ): LongMicroseconds operator fun Int .times(microseconds: LongMicroseconds ): LongMicroseconds Multiply by a number of milliseconds. operator fun Int .times(milliseconds: IntMilliseconds ): LongMilliseconds operator fun Int .times(milliseconds: LongMilliseconds ): LongMilliseconds Multiply by a number of minutes. operator fun Int .times(minutes: IntMinutes ): IntMinutes operator fun Int .times(minutes: LongMinutes ): LongMinutes Multiply by a number of months. operator fun Int .times(months: IntMonths ): IntMonths operator fun Int .times(months: LongMonths ): LongMonths Multiply by a number of nanoseconds. operator fun Int .times(nanoseconds: IntNanoseconds ): LongNanoseconds operator fun Int .times(nanoseconds: LongNanoseconds ): LongNanoseconds Multiply by a number of seconds. operator fun Int .times(seconds: IntSeconds ): IntSeconds operator fun Int .times(seconds: LongSeconds ): LongSeconds Multiply by a number of weeks. operator fun Int .times(weeks: IntWeeks ): IntWeeks operator fun Int .times(weeks: LongWeeks ): LongWeeks Multiply by a number of years. operator fun Int .times(years: IntYears ): IntYears operator fun Int .times(years: LongYears ): LongYears Multiply by a duration. operator fun Int .times(duration: Duration ): Duration operator fun Int .times(period: Period ): Period (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) weeks Convert to IntWeeks . val Int .weeks: IntWeeks (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) years Convert to IntYears . val Int .years: IntYears","title":"Extensions for kotlin.Int"},{"location":"api/core/io.islandtime.measures/kotlin.-int/centuries/","text":"core / io.islandtime.measures / kotlin.Int / centuries centuries (iosArm64) val Int .centuries: IntCenturies (iosX64) val Int .centuries: IntCenturies (jvm) val Int .centuries: IntCenturies (macosX64) val Int .centuries: IntCenturies (tvosArm64) val Int .centuries: IntCenturies (tvosX64) val Int .centuries: IntCenturies (watchosArm64) val Int .centuries: IntCenturies (watchosX86) val Int .centuries: IntCenturies Convert to IntCenturies .","title":"Centuries"},{"location":"api/core/io.islandtime.measures/kotlin.-int/centuries/#centuries","text":"(iosArm64) val Int .centuries: IntCenturies (iosX64) val Int .centuries: IntCenturies (jvm) val Int .centuries: IntCenturies (macosX64) val Int .centuries: IntCenturies (tvosArm64) val Int .centuries: IntCenturies (tvosX64) val Int .centuries: IntCenturies (watchosArm64) val Int .centuries: IntCenturies (watchosX86) val Int .centuries: IntCenturies Convert to IntCenturies .","title":"centuries"},{"location":"api/core/io.islandtime.measures/kotlin.-int/days/","text":"core / io.islandtime.measures / kotlin.Int / days days (iosArm64) val Int .days: IntDays (iosX64) val Int .days: IntDays (jvm) val Int .days: IntDays (macosX64) val Int .days: IntDays (tvosArm64) val Int .days: IntDays (tvosX64) val Int .days: IntDays (watchosArm64) val Int .days: IntDays (watchosX86) val Int .days: IntDays Convert to IntDays .","title":"Days"},{"location":"api/core/io.islandtime.measures/kotlin.-int/days/#days","text":"(iosArm64) val Int .days: IntDays (iosX64) val Int .days: IntDays (jvm) val Int .days: IntDays (macosX64) val Int .days: IntDays (tvosArm64) val Int .days: IntDays (tvosX64) val Int .days: IntDays (watchosArm64) val Int .days: IntDays (watchosX86) val Int .days: IntDays Convert to IntDays .","title":"days"},{"location":"api/core/io.islandtime.measures/kotlin.-int/decades/","text":"core / io.islandtime.measures / kotlin.Int / decades decades (iosArm64) val Int .decades: IntDecades (iosX64) val Int .decades: IntDecades (jvm) val Int .decades: IntDecades (macosX64) val Int .decades: IntDecades (tvosArm64) val Int .decades: IntDecades (tvosX64) val Int .decades: IntDecades (watchosArm64) val Int .decades: IntDecades (watchosX86) val Int .decades: IntDecades Convert to IntDecades .","title":"Decades"},{"location":"api/core/io.islandtime.measures/kotlin.-int/decades/#decades","text":"(iosArm64) val Int .decades: IntDecades (iosX64) val Int .decades: IntDecades (jvm) val Int .decades: IntDecades (macosX64) val Int .decades: IntDecades (tvosArm64) val Int .decades: IntDecades (tvosX64) val Int .decades: IntDecades (watchosArm64) val Int .decades: IntDecades (watchosX86) val Int .decades: IntDecades Convert to IntDecades .","title":"decades"},{"location":"api/core/io.islandtime.measures/kotlin.-int/hours/","text":"core / io.islandtime.measures / kotlin.Int / hours hours (iosArm64) val Int .hours: IntHours (iosX64) val Int .hours: IntHours (jvm) val Int .hours: IntHours (macosX64) val Int .hours: IntHours (tvosArm64) val Int .hours: IntHours (tvosX64) val Int .hours: IntHours (watchosArm64) val Int .hours: IntHours (watchosX86) val Int .hours: IntHours Convert to IntHours .","title":"Hours"},{"location":"api/core/io.islandtime.measures/kotlin.-int/hours/#hours","text":"(iosArm64) val Int .hours: IntHours (iosX64) val Int .hours: IntHours (jvm) val Int .hours: IntHours (macosX64) val Int .hours: IntHours (tvosArm64) val Int .hours: IntHours (tvosX64) val Int .hours: IntHours (watchosArm64) val Int .hours: IntHours (watchosX86) val Int .hours: IntHours Convert to IntHours .","title":"hours"},{"location":"api/core/io.islandtime.measures/kotlin.-int/microseconds/","text":"core / io.islandtime.measures / kotlin.Int / microseconds microseconds (iosArm64) val Int .microseconds: IntMicroseconds (iosX64) val Int .microseconds: IntMicroseconds (jvm) val Int .microseconds: IntMicroseconds (macosX64) val Int .microseconds: IntMicroseconds (tvosArm64) val Int .microseconds: IntMicroseconds (tvosX64) val Int .microseconds: IntMicroseconds (watchosArm64) val Int .microseconds: IntMicroseconds (watchosX86) val Int .microseconds: IntMicroseconds Convert to IntMicroseconds .","title":"Microseconds"},{"location":"api/core/io.islandtime.measures/kotlin.-int/microseconds/#microseconds","text":"(iosArm64) val Int .microseconds: IntMicroseconds (iosX64) val Int .microseconds: IntMicroseconds (jvm) val Int .microseconds: IntMicroseconds (macosX64) val Int .microseconds: IntMicroseconds (tvosArm64) val Int .microseconds: IntMicroseconds (tvosX64) val Int .microseconds: IntMicroseconds (watchosArm64) val Int .microseconds: IntMicroseconds (watchosX86) val Int .microseconds: IntMicroseconds Convert to IntMicroseconds .","title":"microseconds"},{"location":"api/core/io.islandtime.measures/kotlin.-int/milliseconds/","text":"core / io.islandtime.measures / kotlin.Int / milliseconds milliseconds (iosArm64) val Int .milliseconds: IntMilliseconds (iosX64) val Int .milliseconds: IntMilliseconds (jvm) val Int .milliseconds: IntMilliseconds (macosX64) val Int .milliseconds: IntMilliseconds (tvosArm64) val Int .milliseconds: IntMilliseconds (tvosX64) val Int .milliseconds: IntMilliseconds (watchosArm64) val Int .milliseconds: IntMilliseconds (watchosX86) val Int .milliseconds: IntMilliseconds Convert to IntMilliseconds .","title":"Milliseconds"},{"location":"api/core/io.islandtime.measures/kotlin.-int/milliseconds/#milliseconds","text":"(iosArm64) val Int .milliseconds: IntMilliseconds (iosX64) val Int .milliseconds: IntMilliseconds (jvm) val Int .milliseconds: IntMilliseconds (macosX64) val Int .milliseconds: IntMilliseconds (tvosArm64) val Int .milliseconds: IntMilliseconds (tvosX64) val Int .milliseconds: IntMilliseconds (watchosArm64) val Int .milliseconds: IntMilliseconds (watchosX86) val Int .milliseconds: IntMilliseconds Convert to IntMilliseconds .","title":"milliseconds"},{"location":"api/core/io.islandtime.measures/kotlin.-int/minutes/","text":"core / io.islandtime.measures / kotlin.Int / minutes minutes (iosArm64) val Int .minutes: IntMinutes (iosX64) val Int .minutes: IntMinutes (jvm) val Int .minutes: IntMinutes (macosX64) val Int .minutes: IntMinutes (tvosArm64) val Int .minutes: IntMinutes (tvosX64) val Int .minutes: IntMinutes (watchosArm64) val Int .minutes: IntMinutes (watchosX86) val Int .minutes: IntMinutes Convert to IntMinutes .","title":"Minutes"},{"location":"api/core/io.islandtime.measures/kotlin.-int/minutes/#minutes","text":"(iosArm64) val Int .minutes: IntMinutes (iosX64) val Int .minutes: IntMinutes (jvm) val Int .minutes: IntMinutes (macosX64) val Int .minutes: IntMinutes (tvosArm64) val Int .minutes: IntMinutes (tvosX64) val Int .minutes: IntMinutes (watchosArm64) val Int .minutes: IntMinutes (watchosX86) val Int .minutes: IntMinutes Convert to IntMinutes .","title":"minutes"},{"location":"api/core/io.islandtime.measures/kotlin.-int/months/","text":"core / io.islandtime.measures / kotlin.Int / months months (iosArm64) val Int .months: IntMonths (iosX64) val Int .months: IntMonths (jvm) val Int .months: IntMonths (macosX64) val Int .months: IntMonths (tvosArm64) val Int .months: IntMonths (tvosX64) val Int .months: IntMonths (watchosArm64) val Int .months: IntMonths (watchosX86) val Int .months: IntMonths Convert to IntMonths .","title":"Months"},{"location":"api/core/io.islandtime.measures/kotlin.-int/months/#months","text":"(iosArm64) val Int .months: IntMonths (iosX64) val Int .months: IntMonths (jvm) val Int .months: IntMonths (macosX64) val Int .months: IntMonths (tvosArm64) val Int .months: IntMonths (tvosX64) val Int .months: IntMonths (watchosArm64) val Int .months: IntMonths (watchosX86) val Int .months: IntMonths Convert to IntMonths .","title":"months"},{"location":"api/core/io.islandtime.measures/kotlin.-int/nanoseconds/","text":"core / io.islandtime.measures / kotlin.Int / nanoseconds nanoseconds (iosArm64) val Int .nanoseconds: IntNanoseconds (iosX64) val Int .nanoseconds: IntNanoseconds (jvm) val Int .nanoseconds: IntNanoseconds (macosX64) val Int .nanoseconds: IntNanoseconds (tvosArm64) val Int .nanoseconds: IntNanoseconds (tvosX64) val Int .nanoseconds: IntNanoseconds (watchosArm64) val Int .nanoseconds: IntNanoseconds (watchosX86) val Int .nanoseconds: IntNanoseconds Convert to IntNanoseconds .","title":"Nanoseconds"},{"location":"api/core/io.islandtime.measures/kotlin.-int/nanoseconds/#nanoseconds","text":"(iosArm64) val Int .nanoseconds: IntNanoseconds (iosX64) val Int .nanoseconds: IntNanoseconds (jvm) val Int .nanoseconds: IntNanoseconds (macosX64) val Int .nanoseconds: IntNanoseconds (tvosArm64) val Int .nanoseconds: IntNanoseconds (tvosX64) val Int .nanoseconds: IntNanoseconds (watchosArm64) val Int .nanoseconds: IntNanoseconds (watchosX86) val Int .nanoseconds: IntNanoseconds Convert to IntNanoseconds .","title":"nanoseconds"},{"location":"api/core/io.islandtime.measures/kotlin.-int/seconds/","text":"core / io.islandtime.measures / kotlin.Int / seconds seconds (iosArm64) val Int .seconds: IntSeconds (iosX64) val Int .seconds: IntSeconds (jvm) val Int .seconds: IntSeconds (macosX64) val Int .seconds: IntSeconds (tvosArm64) val Int .seconds: IntSeconds (tvosX64) val Int .seconds: IntSeconds (watchosArm64) val Int .seconds: IntSeconds (watchosX86) val Int .seconds: IntSeconds Convert to IntSeconds .","title":"Seconds"},{"location":"api/core/io.islandtime.measures/kotlin.-int/seconds/#seconds","text":"(iosArm64) val Int .seconds: IntSeconds (iosX64) val Int .seconds: IntSeconds (jvm) val Int .seconds: IntSeconds (macosX64) val Int .seconds: IntSeconds (tvosArm64) val Int .seconds: IntSeconds (tvosX64) val Int .seconds: IntSeconds (watchosArm64) val Int .seconds: IntSeconds (watchosX86) val Int .seconds: IntSeconds Convert to IntSeconds .","title":"seconds"},{"location":"api/core/io.islandtime.measures/kotlin.-int/times/","text":"core / io.islandtime.measures / kotlin.Int / times times (iosArm64) operator fun Int .times(centuries: IntCenturies ): IntCenturies (iosArm64) operator fun Int .times(centuries: LongCenturies ): LongCenturies (iosX64) operator fun Int .times(centuries: IntCenturies ): IntCenturies (iosX64) operator fun Int .times(centuries: LongCenturies ): LongCenturies (jvm) operator fun Int .times(centuries: IntCenturies ): IntCenturies (jvm) operator fun Int .times(centuries: LongCenturies ): LongCenturies (macosX64) operator fun Int .times(centuries: IntCenturies ): IntCenturies (macosX64) operator fun Int .times(centuries: LongCenturies ): LongCenturies (tvosArm64) operator fun Int .times(centuries: IntCenturies ): IntCenturies (tvosArm64) operator fun Int .times(centuries: LongCenturies ): LongCenturies (tvosX64) operator fun Int .times(centuries: IntCenturies ): IntCenturies (tvosX64) operator fun Int .times(centuries: LongCenturies ): LongCenturies (watchosArm64) operator fun Int .times(centuries: IntCenturies ): IntCenturies (watchosArm64) operator fun Int .times(centuries: LongCenturies ): LongCenturies (watchosX86) operator fun Int .times(centuries: IntCenturies ): IntCenturies (watchosX86) operator fun Int .times(centuries: LongCenturies ): LongCenturies Multiply by a number of centuries. Exceptions ArithmeticException - if overflow occurs(iosArm64) operator fun Int .times(days: IntDays ): IntDays (iosArm64) operator fun Int .times(days: LongDays ): LongDays (iosX64) operator fun Int .times(days: IntDays ): IntDays (iosX64) operator fun Int .times(days: LongDays ): LongDays (jvm) operator fun Int .times(days: IntDays ): IntDays (jvm) operator fun Int .times(days: LongDays ): LongDays (macosX64) operator fun Int .times(days: IntDays ): IntDays (macosX64) operator fun Int .times(days: LongDays ): LongDays (tvosArm64) operator fun Int .times(days: IntDays ): IntDays (tvosArm64) operator fun Int .times(days: LongDays ): LongDays (tvosX64) operator fun Int .times(days: IntDays ): IntDays (tvosX64) operator fun Int .times(days: LongDays ): LongDays (watchosArm64) operator fun Int .times(days: IntDays ): IntDays (watchosArm64) operator fun Int .times(days: LongDays ): LongDays (watchosX86) operator fun Int .times(days: IntDays ): IntDays (watchosX86) operator fun Int .times(days: LongDays ): LongDays Multiply by a number of days. Exceptions ArithmeticException - if overflow occurs(iosArm64) operator fun Int .times(decades: IntDecades ): IntDecades (iosArm64) operator fun Int .times(decades: LongDecades ): LongDecades (iosX64) operator fun Int .times(decades: IntDecades ): IntDecades (iosX64) operator fun Int .times(decades: LongDecades ): LongDecades (jvm) operator fun Int .times(decades: IntDecades ): IntDecades (jvm) operator fun Int .times(decades: LongDecades ): LongDecades (macosX64) operator fun Int .times(decades: IntDecades ): IntDecades (macosX64) operator fun Int .times(decades: LongDecades ): LongDecades (tvosArm64) operator fun Int .times(decades: IntDecades ): IntDecades (tvosArm64) operator fun Int .times(decades: LongDecades ): LongDecades (tvosX64) operator fun Int .times(decades: IntDecades ): IntDecades (tvosX64) operator fun Int .times(decades: LongDecades ): LongDecades (watchosArm64) operator fun Int .times(decades: IntDecades ): IntDecades (watchosArm64) operator fun Int .times(decades: LongDecades ): LongDecades (watchosX86) operator fun Int .times(decades: IntDecades ): IntDecades (watchosX86) operator fun Int .times(decades: LongDecades ): LongDecades Multiply by a number of decades. Exceptions ArithmeticException - if overflow occurs(iosArm64) operator fun Int .times(hours: IntHours ): IntHours (iosArm64) operator fun Int .times(hours: LongHours ): LongHours (iosX64) operator fun Int .times(hours: IntHours ): IntHours (iosX64) operator fun Int .times(hours: LongHours ): LongHours (jvm) operator fun Int .times(hours: IntHours ): IntHours (jvm) operator fun Int .times(hours: LongHours ): LongHours (macosX64) operator fun Int .times(hours: IntHours ): IntHours (macosX64) operator fun Int .times(hours: LongHours ): LongHours (tvosArm64) operator fun Int .times(hours: IntHours ): IntHours (tvosArm64) operator fun Int .times(hours: LongHours ): LongHours (tvosX64) operator fun Int .times(hours: IntHours ): IntHours (tvosX64) operator fun Int .times(hours: LongHours ): LongHours (watchosArm64) operator fun Int .times(hours: IntHours ): IntHours (watchosArm64) operator fun Int .times(hours: LongHours ): LongHours (watchosX86) operator fun Int .times(hours: IntHours ): IntHours (watchosX86) operator fun Int .times(hours: LongHours ): LongHours Multiply by a number of hours. Exceptions ArithmeticException - if overflow occurs(iosArm64) operator fun Int .times(microseconds: IntMicroseconds ): LongMicroseconds (iosArm64) operator fun Int .times(microseconds: LongMicroseconds ): LongMicroseconds (iosX64) operator fun Int .times(microseconds: IntMicroseconds ): LongMicroseconds (iosX64) operator fun Int .times(microseconds: LongMicroseconds ): LongMicroseconds (jvm) operator fun Int .times(microseconds: IntMicroseconds ): LongMicroseconds (jvm) operator fun Int .times(microseconds: LongMicroseconds ): LongMicroseconds (macosX64) operator fun Int .times(microseconds: IntMicroseconds ): LongMicroseconds (macosX64) operator fun Int .times(microseconds: LongMicroseconds ): LongMicroseconds (tvosArm64) operator fun Int .times(microseconds: IntMicroseconds ): LongMicroseconds (tvosArm64) operator fun Int .times(microseconds: LongMicroseconds ): LongMicroseconds (tvosX64) operator fun Int .times(microseconds: IntMicroseconds ): LongMicroseconds (tvosX64) operator fun Int .times(microseconds: LongMicroseconds ): LongMicroseconds (watchosArm64) operator fun Int .times(microseconds: IntMicroseconds ): LongMicroseconds (watchosArm64) operator fun Int .times(microseconds: LongMicroseconds ): LongMicroseconds (watchosX86) operator fun Int .times(microseconds: IntMicroseconds ): LongMicroseconds (watchosX86) operator fun Int .times(microseconds: LongMicroseconds ): LongMicroseconds Multiply by a number of microseconds. Exceptions ArithmeticException - if overflow occurs(iosArm64) operator fun Int .times(milliseconds: IntMilliseconds ): LongMilliseconds (iosArm64) operator fun Int .times(milliseconds: LongMilliseconds ): LongMilliseconds (iosX64) operator fun Int .times(milliseconds: IntMilliseconds ): LongMilliseconds (iosX64) operator fun Int .times(milliseconds: LongMilliseconds ): LongMilliseconds (jvm) operator fun Int .times(milliseconds: IntMilliseconds ): LongMilliseconds (jvm) operator fun Int .times(milliseconds: LongMilliseconds ): LongMilliseconds (macosX64) operator fun Int .times(milliseconds: IntMilliseconds ): LongMilliseconds (macosX64) operator fun Int .times(milliseconds: LongMilliseconds ): LongMilliseconds (tvosArm64) operator fun Int .times(milliseconds: IntMilliseconds ): LongMilliseconds (tvosArm64) operator fun Int .times(milliseconds: LongMilliseconds ): LongMilliseconds (tvosX64) operator fun Int .times(milliseconds: IntMilliseconds ): LongMilliseconds (tvosX64) operator fun Int .times(milliseconds: LongMilliseconds ): LongMilliseconds (watchosArm64) operator fun Int .times(milliseconds: IntMilliseconds ): LongMilliseconds (watchosArm64) operator fun Int .times(milliseconds: LongMilliseconds ): LongMilliseconds (watchosX86) operator fun Int .times(milliseconds: IntMilliseconds ): LongMilliseconds (watchosX86) operator fun Int .times(milliseconds: LongMilliseconds ): LongMilliseconds Multiply by a number of milliseconds. Exceptions ArithmeticException - if overflow occurs(iosArm64) operator fun Int .times(minutes: IntMinutes ): IntMinutes (iosArm64) operator fun Int .times(minutes: LongMinutes ): LongMinutes (iosX64) operator fun Int .times(minutes: IntMinutes ): IntMinutes (iosX64) operator fun Int .times(minutes: LongMinutes ): LongMinutes (jvm) operator fun Int .times(minutes: IntMinutes ): IntMinutes (jvm) operator fun Int .times(minutes: LongMinutes ): LongMinutes (macosX64) operator fun Int .times(minutes: IntMinutes ): IntMinutes (macosX64) operator fun Int .times(minutes: LongMinutes ): LongMinutes (tvosArm64) operator fun Int .times(minutes: IntMinutes ): IntMinutes (tvosArm64) operator fun Int .times(minutes: LongMinutes ): LongMinutes (tvosX64) operator fun Int .times(minutes: IntMinutes ): IntMinutes (tvosX64) operator fun Int .times(minutes: LongMinutes ): LongMinutes (watchosArm64) operator fun Int .times(minutes: IntMinutes ): IntMinutes (watchosArm64) operator fun Int .times(minutes: LongMinutes ): LongMinutes (watchosX86) operator fun Int .times(minutes: IntMinutes ): IntMinutes (watchosX86) operator fun Int .times(minutes: LongMinutes ): LongMinutes Multiply by a number of minutes. Exceptions ArithmeticException - if overflow occurs(iosArm64) operator fun Int .times(months: IntMonths ): IntMonths (iosArm64) operator fun Int .times(months: LongMonths ): LongMonths (iosX64) operator fun Int .times(months: IntMonths ): IntMonths (iosX64) operator fun Int .times(months: LongMonths ): LongMonths (jvm) operator fun Int .times(months: IntMonths ): IntMonths (jvm) operator fun Int .times(months: LongMonths ): LongMonths (macosX64) operator fun Int .times(months: IntMonths ): IntMonths (macosX64) operator fun Int .times(months: LongMonths ): LongMonths (tvosArm64) operator fun Int .times(months: IntMonths ): IntMonths (tvosArm64) operator fun Int .times(months: LongMonths ): LongMonths (tvosX64) operator fun Int .times(months: IntMonths ): IntMonths (tvosX64) operator fun Int .times(months: LongMonths ): LongMonths (watchosArm64) operator fun Int .times(months: IntMonths ): IntMonths (watchosArm64) operator fun Int .times(months: LongMonths ): LongMonths (watchosX86) operator fun Int .times(months: IntMonths ): IntMonths (watchosX86) operator fun Int .times(months: LongMonths ): LongMonths Multiply by a number of months. Exceptions ArithmeticException - if overflow occurs(iosArm64) operator fun Int .times(nanoseconds: IntNanoseconds ): LongNanoseconds (iosArm64) operator fun Int .times(nanoseconds: LongNanoseconds ): LongNanoseconds (iosX64) operator fun Int .times(nanoseconds: IntNanoseconds ): LongNanoseconds (iosX64) operator fun Int .times(nanoseconds: LongNanoseconds ): LongNanoseconds (jvm) operator fun Int .times(nanoseconds: IntNanoseconds ): LongNanoseconds (jvm) operator fun Int .times(nanoseconds: LongNanoseconds ): LongNanoseconds (macosX64) operator fun Int .times(nanoseconds: IntNanoseconds ): LongNanoseconds (macosX64) operator fun Int .times(nanoseconds: LongNanoseconds ): LongNanoseconds (tvosArm64) operator fun Int .times(nanoseconds: IntNanoseconds ): LongNanoseconds (tvosArm64) operator fun Int .times(nanoseconds: LongNanoseconds ): LongNanoseconds (tvosX64) operator fun Int .times(nanoseconds: IntNanoseconds ): LongNanoseconds (tvosX64) operator fun Int .times(nanoseconds: LongNanoseconds ): LongNanoseconds (watchosArm64) operator fun Int .times(nanoseconds: IntNanoseconds ): LongNanoseconds (watchosArm64) operator fun Int .times(nanoseconds: LongNanoseconds ): LongNanoseconds (watchosX86) operator fun Int .times(nanoseconds: IntNanoseconds ): LongNanoseconds (watchosX86) operator fun Int .times(nanoseconds: LongNanoseconds ): LongNanoseconds Multiply by a number of nanoseconds. Exceptions ArithmeticException - if overflow occurs(iosArm64) operator fun Int .times(seconds: IntSeconds ): IntSeconds (iosArm64) operator fun Int .times(seconds: LongSeconds ): LongSeconds (iosX64) operator fun Int .times(seconds: IntSeconds ): IntSeconds (iosX64) operator fun Int .times(seconds: LongSeconds ): LongSeconds (jvm) operator fun Int .times(seconds: IntSeconds ): IntSeconds (jvm) operator fun Int .times(seconds: LongSeconds ): LongSeconds (macosX64) operator fun Int .times(seconds: IntSeconds ): IntSeconds (macosX64) operator fun Int .times(seconds: LongSeconds ): LongSeconds (tvosArm64) operator fun Int .times(seconds: IntSeconds ): IntSeconds (tvosArm64) operator fun Int .times(seconds: LongSeconds ): LongSeconds (tvosX64) operator fun Int .times(seconds: IntSeconds ): IntSeconds (tvosX64) operator fun Int .times(seconds: LongSeconds ): LongSeconds (watchosArm64) operator fun Int .times(seconds: IntSeconds ): IntSeconds (watchosArm64) operator fun Int .times(seconds: LongSeconds ): LongSeconds (watchosX86) operator fun Int .times(seconds: IntSeconds ): IntSeconds (watchosX86) operator fun Int .times(seconds: LongSeconds ): LongSeconds Multiply by a number of seconds. Exceptions ArithmeticException - if overflow occurs(iosArm64) operator fun Int .times(weeks: IntWeeks ): IntWeeks (iosArm64) operator fun Int .times(weeks: LongWeeks ): LongWeeks (iosX64) operator fun Int .times(weeks: IntWeeks ): IntWeeks (iosX64) operator fun Int .times(weeks: LongWeeks ): LongWeeks (jvm) operator fun Int .times(weeks: IntWeeks ): IntWeeks (jvm) operator fun Int .times(weeks: LongWeeks ): LongWeeks (macosX64) operator fun Int .times(weeks: IntWeeks ): IntWeeks (macosX64) operator fun Int .times(weeks: LongWeeks ): LongWeeks (tvosArm64) operator fun Int .times(weeks: IntWeeks ): IntWeeks (tvosArm64) operator fun Int .times(weeks: LongWeeks ): LongWeeks (tvosX64) operator fun Int .times(weeks: IntWeeks ): IntWeeks (tvosX64) operator fun Int .times(weeks: LongWeeks ): LongWeeks (watchosArm64) operator fun Int .times(weeks: IntWeeks ): IntWeeks (watchosArm64) operator fun Int .times(weeks: LongWeeks ): LongWeeks (watchosX86) operator fun Int .times(weeks: IntWeeks ): IntWeeks (watchosX86) operator fun Int .times(weeks: LongWeeks ): LongWeeks Multiply by a number of weeks. Exceptions ArithmeticException - if overflow occurs(iosArm64) operator fun Int .times(years: IntYears ): IntYears (iosArm64) operator fun Int .times(years: LongYears ): LongYears (iosX64) operator fun Int .times(years: IntYears ): IntYears (iosX64) operator fun Int .times(years: LongYears ): LongYears (jvm) operator fun Int .times(years: IntYears ): IntYears (jvm) operator fun Int .times(years: LongYears ): LongYears (macosX64) operator fun Int .times(years: IntYears ): IntYears (macosX64) operator fun Int .times(years: LongYears ): LongYears (tvosArm64) operator fun Int .times(years: IntYears ): IntYears (tvosArm64) operator fun Int .times(years: LongYears ): LongYears (tvosX64) operator fun Int .times(years: IntYears ): IntYears (tvosX64) operator fun Int .times(years: LongYears ): LongYears (watchosArm64) operator fun Int .times(years: IntYears ): IntYears (watchosArm64) operator fun Int .times(years: LongYears ): LongYears (watchosX86) operator fun Int .times(years: IntYears ): IntYears (watchosX86) operator fun Int .times(years: LongYears ): LongYears Multiply by a number of years. Exceptions ArithmeticException - if overflow occurs(iosArm64) operator fun Int .times(duration: Duration ): Duration (iosX64) operator fun Int .times(duration: Duration ): Duration (jvm) operator fun Int .times(duration: Duration ): Duration (macosX64) operator fun Int .times(duration: Duration ): Duration (tvosArm64) operator fun Int .times(duration: Duration ): Duration (tvosX64) operator fun Int .times(duration: Duration ): Duration (watchosArm64) operator fun Int .times(duration: Duration ): Duration (watchosX86) operator fun Int .times(duration: Duration ): Duration Multiply by a duration. Exceptions ArithmeticException - if overflow occurs(iosArm64) operator fun Int .times(period: Period ): Period (iosX64) operator fun Int .times(period: Period ): Period (jvm) operator fun Int .times(period: Period ): Period (macosX64) operator fun Int .times(period: Period ): Period (tvosArm64) operator fun Int .times(period: Period ): Period (tvosX64) operator fun Int .times(period: Period ): Period (watchosArm64) operator fun Int .times(period: Period ): Period (watchosX86) operator fun Int .times(period: Period ): Period","title":"Times"},{"location":"api/core/io.islandtime.measures/kotlin.-int/times/#times","text":"(iosArm64) operator fun Int .times(centuries: IntCenturies ): IntCenturies (iosArm64) operator fun Int .times(centuries: LongCenturies ): LongCenturies (iosX64) operator fun Int .times(centuries: IntCenturies ): IntCenturies (iosX64) operator fun Int .times(centuries: LongCenturies ): LongCenturies (jvm) operator fun Int .times(centuries: IntCenturies ): IntCenturies (jvm) operator fun Int .times(centuries: LongCenturies ): LongCenturies (macosX64) operator fun Int .times(centuries: IntCenturies ): IntCenturies (macosX64) operator fun Int .times(centuries: LongCenturies ): LongCenturies (tvosArm64) operator fun Int .times(centuries: IntCenturies ): IntCenturies (tvosArm64) operator fun Int .times(centuries: LongCenturies ): LongCenturies (tvosX64) operator fun Int .times(centuries: IntCenturies ): IntCenturies (tvosX64) operator fun Int .times(centuries: LongCenturies ): LongCenturies (watchosArm64) operator fun Int .times(centuries: IntCenturies ): IntCenturies (watchosArm64) operator fun Int .times(centuries: LongCenturies ): LongCenturies (watchosX86) operator fun Int .times(centuries: IntCenturies ): IntCenturies (watchosX86) operator fun Int .times(centuries: LongCenturies ): LongCenturies Multiply by a number of centuries.","title":"times"},{"location":"api/core/io.islandtime.measures/kotlin.-int/times/#exceptions","text":"ArithmeticException - if overflow occurs(iosArm64) operator fun Int .times(days: IntDays ): IntDays (iosArm64) operator fun Int .times(days: LongDays ): LongDays (iosX64) operator fun Int .times(days: IntDays ): IntDays (iosX64) operator fun Int .times(days: LongDays ): LongDays (jvm) operator fun Int .times(days: IntDays ): IntDays (jvm) operator fun Int .times(days: LongDays ): LongDays (macosX64) operator fun Int .times(days: IntDays ): IntDays (macosX64) operator fun Int .times(days: LongDays ): LongDays (tvosArm64) operator fun Int .times(days: IntDays ): IntDays (tvosArm64) operator fun Int .times(days: LongDays ): LongDays (tvosX64) operator fun Int .times(days: IntDays ): IntDays (tvosX64) operator fun Int .times(days: LongDays ): LongDays (watchosArm64) operator fun Int .times(days: IntDays ): IntDays (watchosArm64) operator fun Int .times(days: LongDays ): LongDays (watchosX86) operator fun Int .times(days: IntDays ): IntDays (watchosX86) operator fun Int .times(days: LongDays ): LongDays Multiply by a number of days.","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/kotlin.-int/times/#exceptions_1","text":"ArithmeticException - if overflow occurs(iosArm64) operator fun Int .times(decades: IntDecades ): IntDecades (iosArm64) operator fun Int .times(decades: LongDecades ): LongDecades (iosX64) operator fun Int .times(decades: IntDecades ): IntDecades (iosX64) operator fun Int .times(decades: LongDecades ): LongDecades (jvm) operator fun Int .times(decades: IntDecades ): IntDecades (jvm) operator fun Int .times(decades: LongDecades ): LongDecades (macosX64) operator fun Int .times(decades: IntDecades ): IntDecades (macosX64) operator fun Int .times(decades: LongDecades ): LongDecades (tvosArm64) operator fun Int .times(decades: IntDecades ): IntDecades (tvosArm64) operator fun Int .times(decades: LongDecades ): LongDecades (tvosX64) operator fun Int .times(decades: IntDecades ): IntDecades (tvosX64) operator fun Int .times(decades: LongDecades ): LongDecades (watchosArm64) operator fun Int .times(decades: IntDecades ): IntDecades (watchosArm64) operator fun Int .times(decades: LongDecades ): LongDecades (watchosX86) operator fun Int .times(decades: IntDecades ): IntDecades (watchosX86) operator fun Int .times(decades: LongDecades ): LongDecades Multiply by a number of decades.","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/kotlin.-int/times/#exceptions_2","text":"ArithmeticException - if overflow occurs(iosArm64) operator fun Int .times(hours: IntHours ): IntHours (iosArm64) operator fun Int .times(hours: LongHours ): LongHours (iosX64) operator fun Int .times(hours: IntHours ): IntHours (iosX64) operator fun Int .times(hours: LongHours ): LongHours (jvm) operator fun Int .times(hours: IntHours ): IntHours (jvm) operator fun Int .times(hours: LongHours ): LongHours (macosX64) operator fun Int .times(hours: IntHours ): IntHours (macosX64) operator fun Int .times(hours: LongHours ): LongHours (tvosArm64) operator fun Int .times(hours: IntHours ): IntHours (tvosArm64) operator fun Int .times(hours: LongHours ): LongHours (tvosX64) operator fun Int .times(hours: IntHours ): IntHours (tvosX64) operator fun Int .times(hours: LongHours ): LongHours (watchosArm64) operator fun Int .times(hours: IntHours ): IntHours (watchosArm64) operator fun Int .times(hours: LongHours ): LongHours (watchosX86) operator fun Int .times(hours: IntHours ): IntHours (watchosX86) operator fun Int .times(hours: LongHours ): LongHours Multiply by a number of hours.","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/kotlin.-int/times/#exceptions_3","text":"ArithmeticException - if overflow occurs(iosArm64) operator fun Int .times(microseconds: IntMicroseconds ): LongMicroseconds (iosArm64) operator fun Int .times(microseconds: LongMicroseconds ): LongMicroseconds (iosX64) operator fun Int .times(microseconds: IntMicroseconds ): LongMicroseconds (iosX64) operator fun Int .times(microseconds: LongMicroseconds ): LongMicroseconds (jvm) operator fun Int .times(microseconds: IntMicroseconds ): LongMicroseconds (jvm) operator fun Int .times(microseconds: LongMicroseconds ): LongMicroseconds (macosX64) operator fun Int .times(microseconds: IntMicroseconds ): LongMicroseconds (macosX64) operator fun Int .times(microseconds: LongMicroseconds ): LongMicroseconds (tvosArm64) operator fun Int .times(microseconds: IntMicroseconds ): LongMicroseconds (tvosArm64) operator fun Int .times(microseconds: LongMicroseconds ): LongMicroseconds (tvosX64) operator fun Int .times(microseconds: IntMicroseconds ): LongMicroseconds (tvosX64) operator fun Int .times(microseconds: LongMicroseconds ): LongMicroseconds (watchosArm64) operator fun Int .times(microseconds: IntMicroseconds ): LongMicroseconds (watchosArm64) operator fun Int .times(microseconds: LongMicroseconds ): LongMicroseconds (watchosX86) operator fun Int .times(microseconds: IntMicroseconds ): LongMicroseconds (watchosX86) operator fun Int .times(microseconds: LongMicroseconds ): LongMicroseconds Multiply by a number of microseconds.","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/kotlin.-int/times/#exceptions_4","text":"ArithmeticException - if overflow occurs(iosArm64) operator fun Int .times(milliseconds: IntMilliseconds ): LongMilliseconds (iosArm64) operator fun Int .times(milliseconds: LongMilliseconds ): LongMilliseconds (iosX64) operator fun Int .times(milliseconds: IntMilliseconds ): LongMilliseconds (iosX64) operator fun Int .times(milliseconds: LongMilliseconds ): LongMilliseconds (jvm) operator fun Int .times(milliseconds: IntMilliseconds ): LongMilliseconds (jvm) operator fun Int .times(milliseconds: LongMilliseconds ): LongMilliseconds (macosX64) operator fun Int .times(milliseconds: IntMilliseconds ): LongMilliseconds (macosX64) operator fun Int .times(milliseconds: LongMilliseconds ): LongMilliseconds (tvosArm64) operator fun Int .times(milliseconds: IntMilliseconds ): LongMilliseconds (tvosArm64) operator fun Int .times(milliseconds: LongMilliseconds ): LongMilliseconds (tvosX64) operator fun Int .times(milliseconds: IntMilliseconds ): LongMilliseconds (tvosX64) operator fun Int .times(milliseconds: LongMilliseconds ): LongMilliseconds (watchosArm64) operator fun Int .times(milliseconds: IntMilliseconds ): LongMilliseconds (watchosArm64) operator fun Int .times(milliseconds: LongMilliseconds ): LongMilliseconds (watchosX86) operator fun Int .times(milliseconds: IntMilliseconds ): LongMilliseconds (watchosX86) operator fun Int .times(milliseconds: LongMilliseconds ): LongMilliseconds Multiply by a number of milliseconds.","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/kotlin.-int/times/#exceptions_5","text":"ArithmeticException - if overflow occurs(iosArm64) operator fun Int .times(minutes: IntMinutes ): IntMinutes (iosArm64) operator fun Int .times(minutes: LongMinutes ): LongMinutes (iosX64) operator fun Int .times(minutes: IntMinutes ): IntMinutes (iosX64) operator fun Int .times(minutes: LongMinutes ): LongMinutes (jvm) operator fun Int .times(minutes: IntMinutes ): IntMinutes (jvm) operator fun Int .times(minutes: LongMinutes ): LongMinutes (macosX64) operator fun Int .times(minutes: IntMinutes ): IntMinutes (macosX64) operator fun Int .times(minutes: LongMinutes ): LongMinutes (tvosArm64) operator fun Int .times(minutes: IntMinutes ): IntMinutes (tvosArm64) operator fun Int .times(minutes: LongMinutes ): LongMinutes (tvosX64) operator fun Int .times(minutes: IntMinutes ): IntMinutes (tvosX64) operator fun Int .times(minutes: LongMinutes ): LongMinutes (watchosArm64) operator fun Int .times(minutes: IntMinutes ): IntMinutes (watchosArm64) operator fun Int .times(minutes: LongMinutes ): LongMinutes (watchosX86) operator fun Int .times(minutes: IntMinutes ): IntMinutes (watchosX86) operator fun Int .times(minutes: LongMinutes ): LongMinutes Multiply by a number of minutes.","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/kotlin.-int/times/#exceptions_6","text":"ArithmeticException - if overflow occurs(iosArm64) operator fun Int .times(months: IntMonths ): IntMonths (iosArm64) operator fun Int .times(months: LongMonths ): LongMonths (iosX64) operator fun Int .times(months: IntMonths ): IntMonths (iosX64) operator fun Int .times(months: LongMonths ): LongMonths (jvm) operator fun Int .times(months: IntMonths ): IntMonths (jvm) operator fun Int .times(months: LongMonths ): LongMonths (macosX64) operator fun Int .times(months: IntMonths ): IntMonths (macosX64) operator fun Int .times(months: LongMonths ): LongMonths (tvosArm64) operator fun Int .times(months: IntMonths ): IntMonths (tvosArm64) operator fun Int .times(months: LongMonths ): LongMonths (tvosX64) operator fun Int .times(months: IntMonths ): IntMonths (tvosX64) operator fun Int .times(months: LongMonths ): LongMonths (watchosArm64) operator fun Int .times(months: IntMonths ): IntMonths (watchosArm64) operator fun Int .times(months: LongMonths ): LongMonths (watchosX86) operator fun Int .times(months: IntMonths ): IntMonths (watchosX86) operator fun Int .times(months: LongMonths ): LongMonths Multiply by a number of months.","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/kotlin.-int/times/#exceptions_7","text":"ArithmeticException - if overflow occurs(iosArm64) operator fun Int .times(nanoseconds: IntNanoseconds ): LongNanoseconds (iosArm64) operator fun Int .times(nanoseconds: LongNanoseconds ): LongNanoseconds (iosX64) operator fun Int .times(nanoseconds: IntNanoseconds ): LongNanoseconds (iosX64) operator fun Int .times(nanoseconds: LongNanoseconds ): LongNanoseconds (jvm) operator fun Int .times(nanoseconds: IntNanoseconds ): LongNanoseconds (jvm) operator fun Int .times(nanoseconds: LongNanoseconds ): LongNanoseconds (macosX64) operator fun Int .times(nanoseconds: IntNanoseconds ): LongNanoseconds (macosX64) operator fun Int .times(nanoseconds: LongNanoseconds ): LongNanoseconds (tvosArm64) operator fun Int .times(nanoseconds: IntNanoseconds ): LongNanoseconds (tvosArm64) operator fun Int .times(nanoseconds: LongNanoseconds ): LongNanoseconds (tvosX64) operator fun Int .times(nanoseconds: IntNanoseconds ): LongNanoseconds (tvosX64) operator fun Int .times(nanoseconds: LongNanoseconds ): LongNanoseconds (watchosArm64) operator fun Int .times(nanoseconds: IntNanoseconds ): LongNanoseconds (watchosArm64) operator fun Int .times(nanoseconds: LongNanoseconds ): LongNanoseconds (watchosX86) operator fun Int .times(nanoseconds: IntNanoseconds ): LongNanoseconds (watchosX86) operator fun Int .times(nanoseconds: LongNanoseconds ): LongNanoseconds Multiply by a number of nanoseconds.","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/kotlin.-int/times/#exceptions_8","text":"ArithmeticException - if overflow occurs(iosArm64) operator fun Int .times(seconds: IntSeconds ): IntSeconds (iosArm64) operator fun Int .times(seconds: LongSeconds ): LongSeconds (iosX64) operator fun Int .times(seconds: IntSeconds ): IntSeconds (iosX64) operator fun Int .times(seconds: LongSeconds ): LongSeconds (jvm) operator fun Int .times(seconds: IntSeconds ): IntSeconds (jvm) operator fun Int .times(seconds: LongSeconds ): LongSeconds (macosX64) operator fun Int .times(seconds: IntSeconds ): IntSeconds (macosX64) operator fun Int .times(seconds: LongSeconds ): LongSeconds (tvosArm64) operator fun Int .times(seconds: IntSeconds ): IntSeconds (tvosArm64) operator fun Int .times(seconds: LongSeconds ): LongSeconds (tvosX64) operator fun Int .times(seconds: IntSeconds ): IntSeconds (tvosX64) operator fun Int .times(seconds: LongSeconds ): LongSeconds (watchosArm64) operator fun Int .times(seconds: IntSeconds ): IntSeconds (watchosArm64) operator fun Int .times(seconds: LongSeconds ): LongSeconds (watchosX86) operator fun Int .times(seconds: IntSeconds ): IntSeconds (watchosX86) operator fun Int .times(seconds: LongSeconds ): LongSeconds Multiply by a number of seconds.","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/kotlin.-int/times/#exceptions_9","text":"ArithmeticException - if overflow occurs(iosArm64) operator fun Int .times(weeks: IntWeeks ): IntWeeks (iosArm64) operator fun Int .times(weeks: LongWeeks ): LongWeeks (iosX64) operator fun Int .times(weeks: IntWeeks ): IntWeeks (iosX64) operator fun Int .times(weeks: LongWeeks ): LongWeeks (jvm) operator fun Int .times(weeks: IntWeeks ): IntWeeks (jvm) operator fun Int .times(weeks: LongWeeks ): LongWeeks (macosX64) operator fun Int .times(weeks: IntWeeks ): IntWeeks (macosX64) operator fun Int .times(weeks: LongWeeks ): LongWeeks (tvosArm64) operator fun Int .times(weeks: IntWeeks ): IntWeeks (tvosArm64) operator fun Int .times(weeks: LongWeeks ): LongWeeks (tvosX64) operator fun Int .times(weeks: IntWeeks ): IntWeeks (tvosX64) operator fun Int .times(weeks: LongWeeks ): LongWeeks (watchosArm64) operator fun Int .times(weeks: IntWeeks ): IntWeeks (watchosArm64) operator fun Int .times(weeks: LongWeeks ): LongWeeks (watchosX86) operator fun Int .times(weeks: IntWeeks ): IntWeeks (watchosX86) operator fun Int .times(weeks: LongWeeks ): LongWeeks Multiply by a number of weeks.","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/kotlin.-int/times/#exceptions_10","text":"ArithmeticException - if overflow occurs(iosArm64) operator fun Int .times(years: IntYears ): IntYears (iosArm64) operator fun Int .times(years: LongYears ): LongYears (iosX64) operator fun Int .times(years: IntYears ): IntYears (iosX64) operator fun Int .times(years: LongYears ): LongYears (jvm) operator fun Int .times(years: IntYears ): IntYears (jvm) operator fun Int .times(years: LongYears ): LongYears (macosX64) operator fun Int .times(years: IntYears ): IntYears (macosX64) operator fun Int .times(years: LongYears ): LongYears (tvosArm64) operator fun Int .times(years: IntYears ): IntYears (tvosArm64) operator fun Int .times(years: LongYears ): LongYears (tvosX64) operator fun Int .times(years: IntYears ): IntYears (tvosX64) operator fun Int .times(years: LongYears ): LongYears (watchosArm64) operator fun Int .times(years: IntYears ): IntYears (watchosArm64) operator fun Int .times(years: LongYears ): LongYears (watchosX86) operator fun Int .times(years: IntYears ): IntYears (watchosX86) operator fun Int .times(years: LongYears ): LongYears Multiply by a number of years.","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/kotlin.-int/times/#exceptions_11","text":"ArithmeticException - if overflow occurs(iosArm64) operator fun Int .times(duration: Duration ): Duration (iosX64) operator fun Int .times(duration: Duration ): Duration (jvm) operator fun Int .times(duration: Duration ): Duration (macosX64) operator fun Int .times(duration: Duration ): Duration (tvosArm64) operator fun Int .times(duration: Duration ): Duration (tvosX64) operator fun Int .times(duration: Duration ): Duration (watchosArm64) operator fun Int .times(duration: Duration ): Duration (watchosX86) operator fun Int .times(duration: Duration ): Duration Multiply by a duration.","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/kotlin.-int/times/#exceptions_12","text":"ArithmeticException - if overflow occurs(iosArm64) operator fun Int .times(period: Period ): Period (iosX64) operator fun Int .times(period: Period ): Period (jvm) operator fun Int .times(period: Period ): Period (macosX64) operator fun Int .times(period: Period ): Period (tvosArm64) operator fun Int .times(period: Period ): Period (tvosX64) operator fun Int .times(period: Period ): Period (watchosArm64) operator fun Int .times(period: Period ): Period (watchosX86) operator fun Int .times(period: Period ): Period","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/kotlin.-int/weeks/","text":"core / io.islandtime.measures / kotlin.Int / weeks weeks (iosArm64) val Int .weeks: IntWeeks (iosX64) val Int .weeks: IntWeeks (jvm) val Int .weeks: IntWeeks (macosX64) val Int .weeks: IntWeeks (tvosArm64) val Int .weeks: IntWeeks (tvosX64) val Int .weeks: IntWeeks (watchosArm64) val Int .weeks: IntWeeks (watchosX86) val Int .weeks: IntWeeks Convert to IntWeeks .","title":"Weeks"},{"location":"api/core/io.islandtime.measures/kotlin.-int/weeks/#weeks","text":"(iosArm64) val Int .weeks: IntWeeks (iosX64) val Int .weeks: IntWeeks (jvm) val Int .weeks: IntWeeks (macosX64) val Int .weeks: IntWeeks (tvosArm64) val Int .weeks: IntWeeks (tvosX64) val Int .weeks: IntWeeks (watchosArm64) val Int .weeks: IntWeeks (watchosX86) val Int .weeks: IntWeeks Convert to IntWeeks .","title":"weeks"},{"location":"api/core/io.islandtime.measures/kotlin.-int/years/","text":"core / io.islandtime.measures / kotlin.Int / years years (iosArm64) val Int .years: IntYears (iosX64) val Int .years: IntYears (jvm) val Int .years: IntYears (macosX64) val Int .years: IntYears (tvosArm64) val Int .years: IntYears (tvosX64) val Int .years: IntYears (watchosArm64) val Int .years: IntYears (watchosX86) val Int .years: IntYears Convert to IntYears .","title":"Years"},{"location":"api/core/io.islandtime.measures/kotlin.-int/years/#years","text":"(iosArm64) val Int .years: IntYears (iosX64) val Int .years: IntYears (jvm) val Int .years: IntYears (macosX64) val Int .years: IntYears (tvosArm64) val Int .years: IntYears (tvosX64) val Int .years: IntYears (watchosArm64) val Int .years: IntYears (watchosX86) val Int .years: IntYears Convert to IntYears .","title":"years"},{"location":"api/core/io.islandtime.measures/kotlin.-long/","text":"core / io.islandtime.measures / kotlin.Long Extensions for kotlin.Long Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) centuries Convert to LongCenturies . val Long .centuries: LongCenturies (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) days Convert to LongDays . val Long .days: LongDays (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) decades Convert to LongDecades . val Long .decades: LongDecades (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) hours Convert to LongHours . val Long .hours: LongHours (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) microseconds Convert to LongMicroseconds . val Long .microseconds: LongMicroseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) milliseconds Convert to LongMilliseconds . val Long .milliseconds: LongMilliseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) minutes Convert to LongMinutes . val Long .minutes: LongMinutes (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) months Convert to LongMonths . val Long .months: LongMonths (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) nanoseconds Convert to LongNanoseconds . val Long .nanoseconds: LongNanoseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) seconds Convert to LongSeconds . val Long .seconds: LongSeconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) times Multiply by a number of centuries. operator fun Long .times(centuries: IntCenturies ): LongCenturies operator fun Long .times(centuries: LongCenturies ): LongCenturies Multiply by a number of days. operator fun Long .times(days: IntDays ): LongDays operator fun Long .times(days: LongDays ): LongDays Multiply by a number of decades. operator fun Long .times(decades: IntDecades ): LongDecades operator fun Long .times(decades: LongDecades ): LongDecades Multiply by a number of hours. operator fun Long .times(hours: IntHours ): LongHours operator fun Long .times(hours: LongHours ): LongHours Multiply by a number of microseconds. operator fun Long .times(microseconds: IntMicroseconds ): LongMicroseconds operator fun Long .times(microseconds: LongMicroseconds ): LongMicroseconds Multiply by a number of milliseconds. operator fun Long .times(milliseconds: IntMilliseconds ): LongMilliseconds operator fun Long .times(milliseconds: LongMilliseconds ): LongMilliseconds Multiply by a number of minutes. operator fun Long .times(minutes: IntMinutes ): LongMinutes operator fun Long .times(minutes: LongMinutes ): LongMinutes Multiply by a number of months. operator fun Long .times(months: IntMonths ): LongMonths operator fun Long .times(months: LongMonths ): LongMonths Multiply by a number of nanoseconds. operator fun Long .times(nanoseconds: IntNanoseconds ): LongNanoseconds operator fun Long .times(nanoseconds: LongNanoseconds ): LongNanoseconds Multiply by a number of seconds. operator fun Long .times(seconds: IntSeconds ): LongSeconds operator fun Long .times(seconds: LongSeconds ): LongSeconds Multiply by a number of weeks. operator fun Long .times(weeks: IntWeeks ): LongWeeks operator fun Long .times(weeks: LongWeeks ): LongWeeks Multiply by a number of years. operator fun Long .times(years: IntYears ): LongYears operator fun Long .times(years: LongYears ): LongYears (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) weeks Convert to LongWeeks . val Long .weeks: LongWeeks (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) years Convert to LongYears . val Long .years: LongYears","title":"Index"},{"location":"api/core/io.islandtime.measures/kotlin.-long/#extensions-for-kotlinlong","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) centuries Convert to LongCenturies . val Long .centuries: LongCenturies (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) days Convert to LongDays . val Long .days: LongDays (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) decades Convert to LongDecades . val Long .decades: LongDecades (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) hours Convert to LongHours . val Long .hours: LongHours (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) microseconds Convert to LongMicroseconds . val Long .microseconds: LongMicroseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) milliseconds Convert to LongMilliseconds . val Long .milliseconds: LongMilliseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) minutes Convert to LongMinutes . val Long .minutes: LongMinutes (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) months Convert to LongMonths . val Long .months: LongMonths (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) nanoseconds Convert to LongNanoseconds . val Long .nanoseconds: LongNanoseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) seconds Convert to LongSeconds . val Long .seconds: LongSeconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) times Multiply by a number of centuries. operator fun Long .times(centuries: IntCenturies ): LongCenturies operator fun Long .times(centuries: LongCenturies ): LongCenturies Multiply by a number of days. operator fun Long .times(days: IntDays ): LongDays operator fun Long .times(days: LongDays ): LongDays Multiply by a number of decades. operator fun Long .times(decades: IntDecades ): LongDecades operator fun Long .times(decades: LongDecades ): LongDecades Multiply by a number of hours. operator fun Long .times(hours: IntHours ): LongHours operator fun Long .times(hours: LongHours ): LongHours Multiply by a number of microseconds. operator fun Long .times(microseconds: IntMicroseconds ): LongMicroseconds operator fun Long .times(microseconds: LongMicroseconds ): LongMicroseconds Multiply by a number of milliseconds. operator fun Long .times(milliseconds: IntMilliseconds ): LongMilliseconds operator fun Long .times(milliseconds: LongMilliseconds ): LongMilliseconds Multiply by a number of minutes. operator fun Long .times(minutes: IntMinutes ): LongMinutes operator fun Long .times(minutes: LongMinutes ): LongMinutes Multiply by a number of months. operator fun Long .times(months: IntMonths ): LongMonths operator fun Long .times(months: LongMonths ): LongMonths Multiply by a number of nanoseconds. operator fun Long .times(nanoseconds: IntNanoseconds ): LongNanoseconds operator fun Long .times(nanoseconds: LongNanoseconds ): LongNanoseconds Multiply by a number of seconds. operator fun Long .times(seconds: IntSeconds ): LongSeconds operator fun Long .times(seconds: LongSeconds ): LongSeconds Multiply by a number of weeks. operator fun Long .times(weeks: IntWeeks ): LongWeeks operator fun Long .times(weeks: LongWeeks ): LongWeeks Multiply by a number of years. operator fun Long .times(years: IntYears ): LongYears operator fun Long .times(years: LongYears ): LongYears (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) weeks Convert to LongWeeks . val Long .weeks: LongWeeks (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) years Convert to LongYears . val Long .years: LongYears","title":"Extensions for kotlin.Long"},{"location":"api/core/io.islandtime.measures/kotlin.-long/centuries/","text":"core / io.islandtime.measures / kotlin.Long / centuries centuries (iosArm64) val Long .centuries: LongCenturies (iosX64) val Long .centuries: LongCenturies (jvm) val Long .centuries: LongCenturies (macosX64) val Long .centuries: LongCenturies (tvosArm64) val Long .centuries: LongCenturies (tvosX64) val Long .centuries: LongCenturies (watchosArm64) val Long .centuries: LongCenturies (watchosX86) val Long .centuries: LongCenturies Convert to LongCenturies .","title":"Centuries"},{"location":"api/core/io.islandtime.measures/kotlin.-long/centuries/#centuries","text":"(iosArm64) val Long .centuries: LongCenturies (iosX64) val Long .centuries: LongCenturies (jvm) val Long .centuries: LongCenturies (macosX64) val Long .centuries: LongCenturies (tvosArm64) val Long .centuries: LongCenturies (tvosX64) val Long .centuries: LongCenturies (watchosArm64) val Long .centuries: LongCenturies (watchosX86) val Long .centuries: LongCenturies Convert to LongCenturies .","title":"centuries"},{"location":"api/core/io.islandtime.measures/kotlin.-long/days/","text":"core / io.islandtime.measures / kotlin.Long / days days (iosArm64) val Long .days: LongDays (iosX64) val Long .days: LongDays (jvm) val Long .days: LongDays (macosX64) val Long .days: LongDays (tvosArm64) val Long .days: LongDays (tvosX64) val Long .days: LongDays (watchosArm64) val Long .days: LongDays (watchosX86) val Long .days: LongDays Convert to LongDays .","title":"Days"},{"location":"api/core/io.islandtime.measures/kotlin.-long/days/#days","text":"(iosArm64) val Long .days: LongDays (iosX64) val Long .days: LongDays (jvm) val Long .days: LongDays (macosX64) val Long .days: LongDays (tvosArm64) val Long .days: LongDays (tvosX64) val Long .days: LongDays (watchosArm64) val Long .days: LongDays (watchosX86) val Long .days: LongDays Convert to LongDays .","title":"days"},{"location":"api/core/io.islandtime.measures/kotlin.-long/decades/","text":"core / io.islandtime.measures / kotlin.Long / decades decades (iosArm64) val Long .decades: LongDecades (iosX64) val Long .decades: LongDecades (jvm) val Long .decades: LongDecades (macosX64) val Long .decades: LongDecades (tvosArm64) val Long .decades: LongDecades (tvosX64) val Long .decades: LongDecades (watchosArm64) val Long .decades: LongDecades (watchosX86) val Long .decades: LongDecades Convert to LongDecades .","title":"Decades"},{"location":"api/core/io.islandtime.measures/kotlin.-long/decades/#decades","text":"(iosArm64) val Long .decades: LongDecades (iosX64) val Long .decades: LongDecades (jvm) val Long .decades: LongDecades (macosX64) val Long .decades: LongDecades (tvosArm64) val Long .decades: LongDecades (tvosX64) val Long .decades: LongDecades (watchosArm64) val Long .decades: LongDecades (watchosX86) val Long .decades: LongDecades Convert to LongDecades .","title":"decades"},{"location":"api/core/io.islandtime.measures/kotlin.-long/hours/","text":"core / io.islandtime.measures / kotlin.Long / hours hours (iosArm64) val Long .hours: LongHours (iosX64) val Long .hours: LongHours (jvm) val Long .hours: LongHours (macosX64) val Long .hours: LongHours (tvosArm64) val Long .hours: LongHours (tvosX64) val Long .hours: LongHours (watchosArm64) val Long .hours: LongHours (watchosX86) val Long .hours: LongHours Convert to LongHours .","title":"Hours"},{"location":"api/core/io.islandtime.measures/kotlin.-long/hours/#hours","text":"(iosArm64) val Long .hours: LongHours (iosX64) val Long .hours: LongHours (jvm) val Long .hours: LongHours (macosX64) val Long .hours: LongHours (tvosArm64) val Long .hours: LongHours (tvosX64) val Long .hours: LongHours (watchosArm64) val Long .hours: LongHours (watchosX86) val Long .hours: LongHours Convert to LongHours .","title":"hours"},{"location":"api/core/io.islandtime.measures/kotlin.-long/microseconds/","text":"core / io.islandtime.measures / kotlin.Long / microseconds microseconds (iosArm64) val Long .microseconds: LongMicroseconds (iosX64) val Long .microseconds: LongMicroseconds (jvm) val Long .microseconds: LongMicroseconds (macosX64) val Long .microseconds: LongMicroseconds (tvosArm64) val Long .microseconds: LongMicroseconds (tvosX64) val Long .microseconds: LongMicroseconds (watchosArm64) val Long .microseconds: LongMicroseconds (watchosX86) val Long .microseconds: LongMicroseconds Convert to LongMicroseconds .","title":"Microseconds"},{"location":"api/core/io.islandtime.measures/kotlin.-long/microseconds/#microseconds","text":"(iosArm64) val Long .microseconds: LongMicroseconds (iosX64) val Long .microseconds: LongMicroseconds (jvm) val Long .microseconds: LongMicroseconds (macosX64) val Long .microseconds: LongMicroseconds (tvosArm64) val Long .microseconds: LongMicroseconds (tvosX64) val Long .microseconds: LongMicroseconds (watchosArm64) val Long .microseconds: LongMicroseconds (watchosX86) val Long .microseconds: LongMicroseconds Convert to LongMicroseconds .","title":"microseconds"},{"location":"api/core/io.islandtime.measures/kotlin.-long/milliseconds/","text":"core / io.islandtime.measures / kotlin.Long / milliseconds milliseconds (iosArm64) val Long .milliseconds: LongMilliseconds (iosX64) val Long .milliseconds: LongMilliseconds (jvm) val Long .milliseconds: LongMilliseconds (macosX64) val Long .milliseconds: LongMilliseconds (tvosArm64) val Long .milliseconds: LongMilliseconds (tvosX64) val Long .milliseconds: LongMilliseconds (watchosArm64) val Long .milliseconds: LongMilliseconds (watchosX86) val Long .milliseconds: LongMilliseconds Convert to LongMilliseconds .","title":"Milliseconds"},{"location":"api/core/io.islandtime.measures/kotlin.-long/milliseconds/#milliseconds","text":"(iosArm64) val Long .milliseconds: LongMilliseconds (iosX64) val Long .milliseconds: LongMilliseconds (jvm) val Long .milliseconds: LongMilliseconds (macosX64) val Long .milliseconds: LongMilliseconds (tvosArm64) val Long .milliseconds: LongMilliseconds (tvosX64) val Long .milliseconds: LongMilliseconds (watchosArm64) val Long .milliseconds: LongMilliseconds (watchosX86) val Long .milliseconds: LongMilliseconds Convert to LongMilliseconds .","title":"milliseconds"},{"location":"api/core/io.islandtime.measures/kotlin.-long/minutes/","text":"core / io.islandtime.measures / kotlin.Long / minutes minutes (iosArm64) val Long .minutes: LongMinutes (iosX64) val Long .minutes: LongMinutes (jvm) val Long .minutes: LongMinutes (macosX64) val Long .minutes: LongMinutes (tvosArm64) val Long .minutes: LongMinutes (tvosX64) val Long .minutes: LongMinutes (watchosArm64) val Long .minutes: LongMinutes (watchosX86) val Long .minutes: LongMinutes Convert to LongMinutes .","title":"Minutes"},{"location":"api/core/io.islandtime.measures/kotlin.-long/minutes/#minutes","text":"(iosArm64) val Long .minutes: LongMinutes (iosX64) val Long .minutes: LongMinutes (jvm) val Long .minutes: LongMinutes (macosX64) val Long .minutes: LongMinutes (tvosArm64) val Long .minutes: LongMinutes (tvosX64) val Long .minutes: LongMinutes (watchosArm64) val Long .minutes: LongMinutes (watchosX86) val Long .minutes: LongMinutes Convert to LongMinutes .","title":"minutes"},{"location":"api/core/io.islandtime.measures/kotlin.-long/months/","text":"core / io.islandtime.measures / kotlin.Long / months months (iosArm64) val Long .months: LongMonths (iosX64) val Long .months: LongMonths (jvm) val Long .months: LongMonths (macosX64) val Long .months: LongMonths (tvosArm64) val Long .months: LongMonths (tvosX64) val Long .months: LongMonths (watchosArm64) val Long .months: LongMonths (watchosX86) val Long .months: LongMonths Convert to LongMonths .","title":"Months"},{"location":"api/core/io.islandtime.measures/kotlin.-long/months/#months","text":"(iosArm64) val Long .months: LongMonths (iosX64) val Long .months: LongMonths (jvm) val Long .months: LongMonths (macosX64) val Long .months: LongMonths (tvosArm64) val Long .months: LongMonths (tvosX64) val Long .months: LongMonths (watchosArm64) val Long .months: LongMonths (watchosX86) val Long .months: LongMonths Convert to LongMonths .","title":"months"},{"location":"api/core/io.islandtime.measures/kotlin.-long/nanoseconds/","text":"core / io.islandtime.measures / kotlin.Long / nanoseconds nanoseconds (iosArm64) val Long .nanoseconds: LongNanoseconds (iosX64) val Long .nanoseconds: LongNanoseconds (jvm) val Long .nanoseconds: LongNanoseconds (macosX64) val Long .nanoseconds: LongNanoseconds (tvosArm64) val Long .nanoseconds: LongNanoseconds (tvosX64) val Long .nanoseconds: LongNanoseconds (watchosArm64) val Long .nanoseconds: LongNanoseconds (watchosX86) val Long .nanoseconds: LongNanoseconds Convert to LongNanoseconds .","title":"Nanoseconds"},{"location":"api/core/io.islandtime.measures/kotlin.-long/nanoseconds/#nanoseconds","text":"(iosArm64) val Long .nanoseconds: LongNanoseconds (iosX64) val Long .nanoseconds: LongNanoseconds (jvm) val Long .nanoseconds: LongNanoseconds (macosX64) val Long .nanoseconds: LongNanoseconds (tvosArm64) val Long .nanoseconds: LongNanoseconds (tvosX64) val Long .nanoseconds: LongNanoseconds (watchosArm64) val Long .nanoseconds: LongNanoseconds (watchosX86) val Long .nanoseconds: LongNanoseconds Convert to LongNanoseconds .","title":"nanoseconds"},{"location":"api/core/io.islandtime.measures/kotlin.-long/seconds/","text":"core / io.islandtime.measures / kotlin.Long / seconds seconds (iosArm64) val Long .seconds: LongSeconds (iosX64) val Long .seconds: LongSeconds (jvm) val Long .seconds: LongSeconds (macosX64) val Long .seconds: LongSeconds (tvosArm64) val Long .seconds: LongSeconds (tvosX64) val Long .seconds: LongSeconds (watchosArm64) val Long .seconds: LongSeconds (watchosX86) val Long .seconds: LongSeconds Convert to LongSeconds .","title":"Seconds"},{"location":"api/core/io.islandtime.measures/kotlin.-long/seconds/#seconds","text":"(iosArm64) val Long .seconds: LongSeconds (iosX64) val Long .seconds: LongSeconds (jvm) val Long .seconds: LongSeconds (macosX64) val Long .seconds: LongSeconds (tvosArm64) val Long .seconds: LongSeconds (tvosX64) val Long .seconds: LongSeconds (watchosArm64) val Long .seconds: LongSeconds (watchosX86) val Long .seconds: LongSeconds Convert to LongSeconds .","title":"seconds"},{"location":"api/core/io.islandtime.measures/kotlin.-long/times/","text":"core / io.islandtime.measures / kotlin.Long / times times (iosArm64) operator fun Long .times(centuries: IntCenturies ): LongCenturies (iosArm64) operator fun Long .times(centuries: LongCenturies ): LongCenturies (iosX64) operator fun Long .times(centuries: IntCenturies ): LongCenturies (iosX64) operator fun Long .times(centuries: LongCenturies ): LongCenturies (jvm) operator fun Long .times(centuries: IntCenturies ): LongCenturies (jvm) operator fun Long .times(centuries: LongCenturies ): LongCenturies (macosX64) operator fun Long .times(centuries: IntCenturies ): LongCenturies (macosX64) operator fun Long .times(centuries: LongCenturies ): LongCenturies (tvosArm64) operator fun Long .times(centuries: IntCenturies ): LongCenturies (tvosArm64) operator fun Long .times(centuries: LongCenturies ): LongCenturies (tvosX64) operator fun Long .times(centuries: IntCenturies ): LongCenturies (tvosX64) operator fun Long .times(centuries: LongCenturies ): LongCenturies (watchosArm64) operator fun Long .times(centuries: IntCenturies ): LongCenturies (watchosArm64) operator fun Long .times(centuries: LongCenturies ): LongCenturies (watchosX86) operator fun Long .times(centuries: IntCenturies ): LongCenturies (watchosX86) operator fun Long .times(centuries: LongCenturies ): LongCenturies Multiply by a number of centuries. Exceptions ArithmeticException - if overflow occurs(iosArm64) operator fun Long .times(days: IntDays ): LongDays (iosArm64) operator fun Long .times(days: LongDays ): LongDays (iosX64) operator fun Long .times(days: IntDays ): LongDays (iosX64) operator fun Long .times(days: LongDays ): LongDays (jvm) operator fun Long .times(days: IntDays ): LongDays (jvm) operator fun Long .times(days: LongDays ): LongDays (macosX64) operator fun Long .times(days: IntDays ): LongDays (macosX64) operator fun Long .times(days: LongDays ): LongDays (tvosArm64) operator fun Long .times(days: IntDays ): LongDays (tvosArm64) operator fun Long .times(days: LongDays ): LongDays (tvosX64) operator fun Long .times(days: IntDays ): LongDays (tvosX64) operator fun Long .times(days: LongDays ): LongDays (watchosArm64) operator fun Long .times(days: IntDays ): LongDays (watchosArm64) operator fun Long .times(days: LongDays ): LongDays (watchosX86) operator fun Long .times(days: IntDays ): LongDays (watchosX86) operator fun Long .times(days: LongDays ): LongDays Multiply by a number of days. Exceptions ArithmeticException - if overflow occurs(iosArm64) operator fun Long .times(decades: IntDecades ): LongDecades (iosArm64) operator fun Long .times(decades: LongDecades ): LongDecades (iosX64) operator fun Long .times(decades: IntDecades ): LongDecades (iosX64) operator fun Long .times(decades: LongDecades ): LongDecades (jvm) operator fun Long .times(decades: IntDecades ): LongDecades (jvm) operator fun Long .times(decades: LongDecades ): LongDecades (macosX64) operator fun Long .times(decades: IntDecades ): LongDecades (macosX64) operator fun Long .times(decades: LongDecades ): LongDecades (tvosArm64) operator fun Long .times(decades: IntDecades ): LongDecades (tvosArm64) operator fun Long .times(decades: LongDecades ): LongDecades (tvosX64) operator fun Long .times(decades: IntDecades ): LongDecades (tvosX64) operator fun Long .times(decades: LongDecades ): LongDecades (watchosArm64) operator fun Long .times(decades: IntDecades ): LongDecades (watchosArm64) operator fun Long .times(decades: LongDecades ): LongDecades (watchosX86) operator fun Long .times(decades: IntDecades ): LongDecades (watchosX86) operator fun Long .times(decades: LongDecades ): LongDecades Multiply by a number of decades. Exceptions ArithmeticException - if overflow occurs(iosArm64) operator fun Long .times(hours: IntHours ): LongHours (iosArm64) operator fun Long .times(hours: LongHours ): LongHours (iosX64) operator fun Long .times(hours: IntHours ): LongHours (iosX64) operator fun Long .times(hours: LongHours ): LongHours (jvm) operator fun Long .times(hours: IntHours ): LongHours (jvm) operator fun Long .times(hours: LongHours ): LongHours (macosX64) operator fun Long .times(hours: IntHours ): LongHours (macosX64) operator fun Long .times(hours: LongHours ): LongHours (tvosArm64) operator fun Long .times(hours: IntHours ): LongHours (tvosArm64) operator fun Long .times(hours: LongHours ): LongHours (tvosX64) operator fun Long .times(hours: IntHours ): LongHours (tvosX64) operator fun Long .times(hours: LongHours ): LongHours (watchosArm64) operator fun Long .times(hours: IntHours ): LongHours (watchosArm64) operator fun Long .times(hours: LongHours ): LongHours (watchosX86) operator fun Long .times(hours: IntHours ): LongHours (watchosX86) operator fun Long .times(hours: LongHours ): LongHours Multiply by a number of hours. Exceptions ArithmeticException - if overflow occurs(iosArm64) operator fun Long .times(microseconds: IntMicroseconds ): LongMicroseconds (iosArm64) operator fun Long .times(microseconds: LongMicroseconds ): LongMicroseconds (iosX64) operator fun Long .times(microseconds: IntMicroseconds ): LongMicroseconds (iosX64) operator fun Long .times(microseconds: LongMicroseconds ): LongMicroseconds (jvm) operator fun Long .times(microseconds: IntMicroseconds ): LongMicroseconds (jvm) operator fun Long .times(microseconds: LongMicroseconds ): LongMicroseconds (macosX64) operator fun Long .times(microseconds: IntMicroseconds ): LongMicroseconds (macosX64) operator fun Long .times(microseconds: LongMicroseconds ): LongMicroseconds (tvosArm64) operator fun Long .times(microseconds: IntMicroseconds ): LongMicroseconds (tvosArm64) operator fun Long .times(microseconds: LongMicroseconds ): LongMicroseconds (tvosX64) operator fun Long .times(microseconds: IntMicroseconds ): LongMicroseconds (tvosX64) operator fun Long .times(microseconds: LongMicroseconds ): LongMicroseconds (watchosArm64) operator fun Long .times(microseconds: IntMicroseconds ): LongMicroseconds (watchosArm64) operator fun Long .times(microseconds: LongMicroseconds ): LongMicroseconds (watchosX86) operator fun Long .times(microseconds: IntMicroseconds ): LongMicroseconds (watchosX86) operator fun Long .times(microseconds: LongMicroseconds ): LongMicroseconds Multiply by a number of microseconds. Exceptions ArithmeticException - if overflow occurs(iosArm64) operator fun Long .times(milliseconds: IntMilliseconds ): LongMilliseconds (iosArm64) operator fun Long .times(milliseconds: LongMilliseconds ): LongMilliseconds (iosX64) operator fun Long .times(milliseconds: IntMilliseconds ): LongMilliseconds (iosX64) operator fun Long .times(milliseconds: LongMilliseconds ): LongMilliseconds (jvm) operator fun Long .times(milliseconds: IntMilliseconds ): LongMilliseconds (jvm) operator fun Long .times(milliseconds: LongMilliseconds ): LongMilliseconds (macosX64) operator fun Long .times(milliseconds: IntMilliseconds ): LongMilliseconds (macosX64) operator fun Long .times(milliseconds: LongMilliseconds ): LongMilliseconds (tvosArm64) operator fun Long .times(milliseconds: IntMilliseconds ): LongMilliseconds (tvosArm64) operator fun Long .times(milliseconds: LongMilliseconds ): LongMilliseconds (tvosX64) operator fun Long .times(milliseconds: IntMilliseconds ): LongMilliseconds (tvosX64) operator fun Long .times(milliseconds: LongMilliseconds ): LongMilliseconds (watchosArm64) operator fun Long .times(milliseconds: IntMilliseconds ): LongMilliseconds (watchosArm64) operator fun Long .times(milliseconds: LongMilliseconds ): LongMilliseconds (watchosX86) operator fun Long .times(milliseconds: IntMilliseconds ): LongMilliseconds (watchosX86) operator fun Long .times(milliseconds: LongMilliseconds ): LongMilliseconds Multiply by a number of milliseconds. Exceptions ArithmeticException - if overflow occurs(iosArm64) operator fun Long .times(minutes: IntMinutes ): LongMinutes (iosArm64) operator fun Long .times(minutes: LongMinutes ): LongMinutes (iosX64) operator fun Long .times(minutes: IntMinutes ): LongMinutes (iosX64) operator fun Long .times(minutes: LongMinutes ): LongMinutes (jvm) operator fun Long .times(minutes: IntMinutes ): LongMinutes (jvm) operator fun Long .times(minutes: LongMinutes ): LongMinutes (macosX64) operator fun Long .times(minutes: IntMinutes ): LongMinutes (macosX64) operator fun Long .times(minutes: LongMinutes ): LongMinutes (tvosArm64) operator fun Long .times(minutes: IntMinutes ): LongMinutes (tvosArm64) operator fun Long .times(minutes: LongMinutes ): LongMinutes (tvosX64) operator fun Long .times(minutes: IntMinutes ): LongMinutes (tvosX64) operator fun Long .times(minutes: LongMinutes ): LongMinutes (watchosArm64) operator fun Long .times(minutes: IntMinutes ): LongMinutes (watchosArm64) operator fun Long .times(minutes: LongMinutes ): LongMinutes (watchosX86) operator fun Long .times(minutes: IntMinutes ): LongMinutes (watchosX86) operator fun Long .times(minutes: LongMinutes ): LongMinutes Multiply by a number of minutes. Exceptions ArithmeticException - if overflow occurs(iosArm64) operator fun Long .times(months: IntMonths ): LongMonths (iosArm64) operator fun Long .times(months: LongMonths ): LongMonths (iosX64) operator fun Long .times(months: IntMonths ): LongMonths (iosX64) operator fun Long .times(months: LongMonths ): LongMonths (jvm) operator fun Long .times(months: IntMonths ): LongMonths (jvm) operator fun Long .times(months: LongMonths ): LongMonths (macosX64) operator fun Long .times(months: IntMonths ): LongMonths (macosX64) operator fun Long .times(months: LongMonths ): LongMonths (tvosArm64) operator fun Long .times(months: IntMonths ): LongMonths (tvosArm64) operator fun Long .times(months: LongMonths ): LongMonths (tvosX64) operator fun Long .times(months: IntMonths ): LongMonths (tvosX64) operator fun Long .times(months: LongMonths ): LongMonths (watchosArm64) operator fun Long .times(months: IntMonths ): LongMonths (watchosArm64) operator fun Long .times(months: LongMonths ): LongMonths (watchosX86) operator fun Long .times(months: IntMonths ): LongMonths (watchosX86) operator fun Long .times(months: LongMonths ): LongMonths Multiply by a number of months. Exceptions ArithmeticException - if overflow occurs(iosArm64) operator fun Long .times(nanoseconds: IntNanoseconds ): LongNanoseconds (iosArm64) operator fun Long .times(nanoseconds: LongNanoseconds ): LongNanoseconds (iosX64) operator fun Long .times(nanoseconds: IntNanoseconds ): LongNanoseconds (iosX64) operator fun Long .times(nanoseconds: LongNanoseconds ): LongNanoseconds (jvm) operator fun Long .times(nanoseconds: IntNanoseconds ): LongNanoseconds (jvm) operator fun Long .times(nanoseconds: LongNanoseconds ): LongNanoseconds (macosX64) operator fun Long .times(nanoseconds: IntNanoseconds ): LongNanoseconds (macosX64) operator fun Long .times(nanoseconds: LongNanoseconds ): LongNanoseconds (tvosArm64) operator fun Long .times(nanoseconds: IntNanoseconds ): LongNanoseconds (tvosArm64) operator fun Long .times(nanoseconds: LongNanoseconds ): LongNanoseconds (tvosX64) operator fun Long .times(nanoseconds: IntNanoseconds ): LongNanoseconds (tvosX64) operator fun Long .times(nanoseconds: LongNanoseconds ): LongNanoseconds (watchosArm64) operator fun Long .times(nanoseconds: IntNanoseconds ): LongNanoseconds (watchosArm64) operator fun Long .times(nanoseconds: LongNanoseconds ): LongNanoseconds (watchosX86) operator fun Long .times(nanoseconds: IntNanoseconds ): LongNanoseconds (watchosX86) operator fun Long .times(nanoseconds: LongNanoseconds ): LongNanoseconds Multiply by a number of nanoseconds. Exceptions ArithmeticException - if overflow occurs(iosArm64) operator fun Long .times(seconds: IntSeconds ): LongSeconds (iosArm64) operator fun Long .times(seconds: LongSeconds ): LongSeconds (iosX64) operator fun Long .times(seconds: IntSeconds ): LongSeconds (iosX64) operator fun Long .times(seconds: LongSeconds ): LongSeconds (jvm) operator fun Long .times(seconds: IntSeconds ): LongSeconds (jvm) operator fun Long .times(seconds: LongSeconds ): LongSeconds (macosX64) operator fun Long .times(seconds: IntSeconds ): LongSeconds (macosX64) operator fun Long .times(seconds: LongSeconds ): LongSeconds (tvosArm64) operator fun Long .times(seconds: IntSeconds ): LongSeconds (tvosArm64) operator fun Long .times(seconds: LongSeconds ): LongSeconds (tvosX64) operator fun Long .times(seconds: IntSeconds ): LongSeconds (tvosX64) operator fun Long .times(seconds: LongSeconds ): LongSeconds (watchosArm64) operator fun Long .times(seconds: IntSeconds ): LongSeconds (watchosArm64) operator fun Long .times(seconds: LongSeconds ): LongSeconds (watchosX86) operator fun Long .times(seconds: IntSeconds ): LongSeconds (watchosX86) operator fun Long .times(seconds: LongSeconds ): LongSeconds Multiply by a number of seconds. Exceptions ArithmeticException - if overflow occurs(iosArm64) operator fun Long .times(weeks: IntWeeks ): LongWeeks (iosArm64) operator fun Long .times(weeks: LongWeeks ): LongWeeks (iosX64) operator fun Long .times(weeks: IntWeeks ): LongWeeks (iosX64) operator fun Long .times(weeks: LongWeeks ): LongWeeks (jvm) operator fun Long .times(weeks: IntWeeks ): LongWeeks (jvm) operator fun Long .times(weeks: LongWeeks ): LongWeeks (macosX64) operator fun Long .times(weeks: IntWeeks ): LongWeeks (macosX64) operator fun Long .times(weeks: LongWeeks ): LongWeeks (tvosArm64) operator fun Long .times(weeks: IntWeeks ): LongWeeks (tvosArm64) operator fun Long .times(weeks: LongWeeks ): LongWeeks (tvosX64) operator fun Long .times(weeks: IntWeeks ): LongWeeks (tvosX64) operator fun Long .times(weeks: LongWeeks ): LongWeeks (watchosArm64) operator fun Long .times(weeks: IntWeeks ): LongWeeks (watchosArm64) operator fun Long .times(weeks: LongWeeks ): LongWeeks (watchosX86) operator fun Long .times(weeks: IntWeeks ): LongWeeks (watchosX86) operator fun Long .times(weeks: LongWeeks ): LongWeeks Multiply by a number of weeks. Exceptions ArithmeticException - if overflow occurs(iosArm64) operator fun Long .times(years: IntYears ): LongYears (iosArm64) operator fun Long .times(years: LongYears ): LongYears (iosX64) operator fun Long .times(years: IntYears ): LongYears (iosX64) operator fun Long .times(years: LongYears ): LongYears (jvm) operator fun Long .times(years: IntYears ): LongYears (jvm) operator fun Long .times(years: LongYears ): LongYears (macosX64) operator fun Long .times(years: IntYears ): LongYears (macosX64) operator fun Long .times(years: LongYears ): LongYears (tvosArm64) operator fun Long .times(years: IntYears ): LongYears (tvosArm64) operator fun Long .times(years: LongYears ): LongYears (tvosX64) operator fun Long .times(years: IntYears ): LongYears (tvosX64) operator fun Long .times(years: LongYears ): LongYears (watchosArm64) operator fun Long .times(years: IntYears ): LongYears (watchosArm64) operator fun Long .times(years: LongYears ): LongYears (watchosX86) operator fun Long .times(years: IntYears ): LongYears (watchosX86) operator fun Long .times(years: LongYears ): LongYears Multiply by a number of years. Exceptions ArithmeticException - if overflow occurs","title":"Times"},{"location":"api/core/io.islandtime.measures/kotlin.-long/times/#times","text":"(iosArm64) operator fun Long .times(centuries: IntCenturies ): LongCenturies (iosArm64) operator fun Long .times(centuries: LongCenturies ): LongCenturies (iosX64) operator fun Long .times(centuries: IntCenturies ): LongCenturies (iosX64) operator fun Long .times(centuries: LongCenturies ): LongCenturies (jvm) operator fun Long .times(centuries: IntCenturies ): LongCenturies (jvm) operator fun Long .times(centuries: LongCenturies ): LongCenturies (macosX64) operator fun Long .times(centuries: IntCenturies ): LongCenturies (macosX64) operator fun Long .times(centuries: LongCenturies ): LongCenturies (tvosArm64) operator fun Long .times(centuries: IntCenturies ): LongCenturies (tvosArm64) operator fun Long .times(centuries: LongCenturies ): LongCenturies (tvosX64) operator fun Long .times(centuries: IntCenturies ): LongCenturies (tvosX64) operator fun Long .times(centuries: LongCenturies ): LongCenturies (watchosArm64) operator fun Long .times(centuries: IntCenturies ): LongCenturies (watchosArm64) operator fun Long .times(centuries: LongCenturies ): LongCenturies (watchosX86) operator fun Long .times(centuries: IntCenturies ): LongCenturies (watchosX86) operator fun Long .times(centuries: LongCenturies ): LongCenturies Multiply by a number of centuries.","title":"times"},{"location":"api/core/io.islandtime.measures/kotlin.-long/times/#exceptions","text":"ArithmeticException - if overflow occurs(iosArm64) operator fun Long .times(days: IntDays ): LongDays (iosArm64) operator fun Long .times(days: LongDays ): LongDays (iosX64) operator fun Long .times(days: IntDays ): LongDays (iosX64) operator fun Long .times(days: LongDays ): LongDays (jvm) operator fun Long .times(days: IntDays ): LongDays (jvm) operator fun Long .times(days: LongDays ): LongDays (macosX64) operator fun Long .times(days: IntDays ): LongDays (macosX64) operator fun Long .times(days: LongDays ): LongDays (tvosArm64) operator fun Long .times(days: IntDays ): LongDays (tvosArm64) operator fun Long .times(days: LongDays ): LongDays (tvosX64) operator fun Long .times(days: IntDays ): LongDays (tvosX64) operator fun Long .times(days: LongDays ): LongDays (watchosArm64) operator fun Long .times(days: IntDays ): LongDays (watchosArm64) operator fun Long .times(days: LongDays ): LongDays (watchosX86) operator fun Long .times(days: IntDays ): LongDays (watchosX86) operator fun Long .times(days: LongDays ): LongDays Multiply by a number of days.","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/kotlin.-long/times/#exceptions_1","text":"ArithmeticException - if overflow occurs(iosArm64) operator fun Long .times(decades: IntDecades ): LongDecades (iosArm64) operator fun Long .times(decades: LongDecades ): LongDecades (iosX64) operator fun Long .times(decades: IntDecades ): LongDecades (iosX64) operator fun Long .times(decades: LongDecades ): LongDecades (jvm) operator fun Long .times(decades: IntDecades ): LongDecades (jvm) operator fun Long .times(decades: LongDecades ): LongDecades (macosX64) operator fun Long .times(decades: IntDecades ): LongDecades (macosX64) operator fun Long .times(decades: LongDecades ): LongDecades (tvosArm64) operator fun Long .times(decades: IntDecades ): LongDecades (tvosArm64) operator fun Long .times(decades: LongDecades ): LongDecades (tvosX64) operator fun Long .times(decades: IntDecades ): LongDecades (tvosX64) operator fun Long .times(decades: LongDecades ): LongDecades (watchosArm64) operator fun Long .times(decades: IntDecades ): LongDecades (watchosArm64) operator fun Long .times(decades: LongDecades ): LongDecades (watchosX86) operator fun Long .times(decades: IntDecades ): LongDecades (watchosX86) operator fun Long .times(decades: LongDecades ): LongDecades Multiply by a number of decades.","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/kotlin.-long/times/#exceptions_2","text":"ArithmeticException - if overflow occurs(iosArm64) operator fun Long .times(hours: IntHours ): LongHours (iosArm64) operator fun Long .times(hours: LongHours ): LongHours (iosX64) operator fun Long .times(hours: IntHours ): LongHours (iosX64) operator fun Long .times(hours: LongHours ): LongHours (jvm) operator fun Long .times(hours: IntHours ): LongHours (jvm) operator fun Long .times(hours: LongHours ): LongHours (macosX64) operator fun Long .times(hours: IntHours ): LongHours (macosX64) operator fun Long .times(hours: LongHours ): LongHours (tvosArm64) operator fun Long .times(hours: IntHours ): LongHours (tvosArm64) operator fun Long .times(hours: LongHours ): LongHours (tvosX64) operator fun Long .times(hours: IntHours ): LongHours (tvosX64) operator fun Long .times(hours: LongHours ): LongHours (watchosArm64) operator fun Long .times(hours: IntHours ): LongHours (watchosArm64) operator fun Long .times(hours: LongHours ): LongHours (watchosX86) operator fun Long .times(hours: IntHours ): LongHours (watchosX86) operator fun Long .times(hours: LongHours ): LongHours Multiply by a number of hours.","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/kotlin.-long/times/#exceptions_3","text":"ArithmeticException - if overflow occurs(iosArm64) operator fun Long .times(microseconds: IntMicroseconds ): LongMicroseconds (iosArm64) operator fun Long .times(microseconds: LongMicroseconds ): LongMicroseconds (iosX64) operator fun Long .times(microseconds: IntMicroseconds ): LongMicroseconds (iosX64) operator fun Long .times(microseconds: LongMicroseconds ): LongMicroseconds (jvm) operator fun Long .times(microseconds: IntMicroseconds ): LongMicroseconds (jvm) operator fun Long .times(microseconds: LongMicroseconds ): LongMicroseconds (macosX64) operator fun Long .times(microseconds: IntMicroseconds ): LongMicroseconds (macosX64) operator fun Long .times(microseconds: LongMicroseconds ): LongMicroseconds (tvosArm64) operator fun Long .times(microseconds: IntMicroseconds ): LongMicroseconds (tvosArm64) operator fun Long .times(microseconds: LongMicroseconds ): LongMicroseconds (tvosX64) operator fun Long .times(microseconds: IntMicroseconds ): LongMicroseconds (tvosX64) operator fun Long .times(microseconds: LongMicroseconds ): LongMicroseconds (watchosArm64) operator fun Long .times(microseconds: IntMicroseconds ): LongMicroseconds (watchosArm64) operator fun Long .times(microseconds: LongMicroseconds ): LongMicroseconds (watchosX86) operator fun Long .times(microseconds: IntMicroseconds ): LongMicroseconds (watchosX86) operator fun Long .times(microseconds: LongMicroseconds ): LongMicroseconds Multiply by a number of microseconds.","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/kotlin.-long/times/#exceptions_4","text":"ArithmeticException - if overflow occurs(iosArm64) operator fun Long .times(milliseconds: IntMilliseconds ): LongMilliseconds (iosArm64) operator fun Long .times(milliseconds: LongMilliseconds ): LongMilliseconds (iosX64) operator fun Long .times(milliseconds: IntMilliseconds ): LongMilliseconds (iosX64) operator fun Long .times(milliseconds: LongMilliseconds ): LongMilliseconds (jvm) operator fun Long .times(milliseconds: IntMilliseconds ): LongMilliseconds (jvm) operator fun Long .times(milliseconds: LongMilliseconds ): LongMilliseconds (macosX64) operator fun Long .times(milliseconds: IntMilliseconds ): LongMilliseconds (macosX64) operator fun Long .times(milliseconds: LongMilliseconds ): LongMilliseconds (tvosArm64) operator fun Long .times(milliseconds: IntMilliseconds ): LongMilliseconds (tvosArm64) operator fun Long .times(milliseconds: LongMilliseconds ): LongMilliseconds (tvosX64) operator fun Long .times(milliseconds: IntMilliseconds ): LongMilliseconds (tvosX64) operator fun Long .times(milliseconds: LongMilliseconds ): LongMilliseconds (watchosArm64) operator fun Long .times(milliseconds: IntMilliseconds ): LongMilliseconds (watchosArm64) operator fun Long .times(milliseconds: LongMilliseconds ): LongMilliseconds (watchosX86) operator fun Long .times(milliseconds: IntMilliseconds ): LongMilliseconds (watchosX86) operator fun Long .times(milliseconds: LongMilliseconds ): LongMilliseconds Multiply by a number of milliseconds.","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/kotlin.-long/times/#exceptions_5","text":"ArithmeticException - if overflow occurs(iosArm64) operator fun Long .times(minutes: IntMinutes ): LongMinutes (iosArm64) operator fun Long .times(minutes: LongMinutes ): LongMinutes (iosX64) operator fun Long .times(minutes: IntMinutes ): LongMinutes (iosX64) operator fun Long .times(minutes: LongMinutes ): LongMinutes (jvm) operator fun Long .times(minutes: IntMinutes ): LongMinutes (jvm) operator fun Long .times(minutes: LongMinutes ): LongMinutes (macosX64) operator fun Long .times(minutes: IntMinutes ): LongMinutes (macosX64) operator fun Long .times(minutes: LongMinutes ): LongMinutes (tvosArm64) operator fun Long .times(minutes: IntMinutes ): LongMinutes (tvosArm64) operator fun Long .times(minutes: LongMinutes ): LongMinutes (tvosX64) operator fun Long .times(minutes: IntMinutes ): LongMinutes (tvosX64) operator fun Long .times(minutes: LongMinutes ): LongMinutes (watchosArm64) operator fun Long .times(minutes: IntMinutes ): LongMinutes (watchosArm64) operator fun Long .times(minutes: LongMinutes ): LongMinutes (watchosX86) operator fun Long .times(minutes: IntMinutes ): LongMinutes (watchosX86) operator fun Long .times(minutes: LongMinutes ): LongMinutes Multiply by a number of minutes.","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/kotlin.-long/times/#exceptions_6","text":"ArithmeticException - if overflow occurs(iosArm64) operator fun Long .times(months: IntMonths ): LongMonths (iosArm64) operator fun Long .times(months: LongMonths ): LongMonths (iosX64) operator fun Long .times(months: IntMonths ): LongMonths (iosX64) operator fun Long .times(months: LongMonths ): LongMonths (jvm) operator fun Long .times(months: IntMonths ): LongMonths (jvm) operator fun Long .times(months: LongMonths ): LongMonths (macosX64) operator fun Long .times(months: IntMonths ): LongMonths (macosX64) operator fun Long .times(months: LongMonths ): LongMonths (tvosArm64) operator fun Long .times(months: IntMonths ): LongMonths (tvosArm64) operator fun Long .times(months: LongMonths ): LongMonths (tvosX64) operator fun Long .times(months: IntMonths ): LongMonths (tvosX64) operator fun Long .times(months: LongMonths ): LongMonths (watchosArm64) operator fun Long .times(months: IntMonths ): LongMonths (watchosArm64) operator fun Long .times(months: LongMonths ): LongMonths (watchosX86) operator fun Long .times(months: IntMonths ): LongMonths (watchosX86) operator fun Long .times(months: LongMonths ): LongMonths Multiply by a number of months.","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/kotlin.-long/times/#exceptions_7","text":"ArithmeticException - if overflow occurs(iosArm64) operator fun Long .times(nanoseconds: IntNanoseconds ): LongNanoseconds (iosArm64) operator fun Long .times(nanoseconds: LongNanoseconds ): LongNanoseconds (iosX64) operator fun Long .times(nanoseconds: IntNanoseconds ): LongNanoseconds (iosX64) operator fun Long .times(nanoseconds: LongNanoseconds ): LongNanoseconds (jvm) operator fun Long .times(nanoseconds: IntNanoseconds ): LongNanoseconds (jvm) operator fun Long .times(nanoseconds: LongNanoseconds ): LongNanoseconds (macosX64) operator fun Long .times(nanoseconds: IntNanoseconds ): LongNanoseconds (macosX64) operator fun Long .times(nanoseconds: LongNanoseconds ): LongNanoseconds (tvosArm64) operator fun Long .times(nanoseconds: IntNanoseconds ): LongNanoseconds (tvosArm64) operator fun Long .times(nanoseconds: LongNanoseconds ): LongNanoseconds (tvosX64) operator fun Long .times(nanoseconds: IntNanoseconds ): LongNanoseconds (tvosX64) operator fun Long .times(nanoseconds: LongNanoseconds ): LongNanoseconds (watchosArm64) operator fun Long .times(nanoseconds: IntNanoseconds ): LongNanoseconds (watchosArm64) operator fun Long .times(nanoseconds: LongNanoseconds ): LongNanoseconds (watchosX86) operator fun Long .times(nanoseconds: IntNanoseconds ): LongNanoseconds (watchosX86) operator fun Long .times(nanoseconds: LongNanoseconds ): LongNanoseconds Multiply by a number of nanoseconds.","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/kotlin.-long/times/#exceptions_8","text":"ArithmeticException - if overflow occurs(iosArm64) operator fun Long .times(seconds: IntSeconds ): LongSeconds (iosArm64) operator fun Long .times(seconds: LongSeconds ): LongSeconds (iosX64) operator fun Long .times(seconds: IntSeconds ): LongSeconds (iosX64) operator fun Long .times(seconds: LongSeconds ): LongSeconds (jvm) operator fun Long .times(seconds: IntSeconds ): LongSeconds (jvm) operator fun Long .times(seconds: LongSeconds ): LongSeconds (macosX64) operator fun Long .times(seconds: IntSeconds ): LongSeconds (macosX64) operator fun Long .times(seconds: LongSeconds ): LongSeconds (tvosArm64) operator fun Long .times(seconds: IntSeconds ): LongSeconds (tvosArm64) operator fun Long .times(seconds: LongSeconds ): LongSeconds (tvosX64) operator fun Long .times(seconds: IntSeconds ): LongSeconds (tvosX64) operator fun Long .times(seconds: LongSeconds ): LongSeconds (watchosArm64) operator fun Long .times(seconds: IntSeconds ): LongSeconds (watchosArm64) operator fun Long .times(seconds: LongSeconds ): LongSeconds (watchosX86) operator fun Long .times(seconds: IntSeconds ): LongSeconds (watchosX86) operator fun Long .times(seconds: LongSeconds ): LongSeconds Multiply by a number of seconds.","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/kotlin.-long/times/#exceptions_9","text":"ArithmeticException - if overflow occurs(iosArm64) operator fun Long .times(weeks: IntWeeks ): LongWeeks (iosArm64) operator fun Long .times(weeks: LongWeeks ): LongWeeks (iosX64) operator fun Long .times(weeks: IntWeeks ): LongWeeks (iosX64) operator fun Long .times(weeks: LongWeeks ): LongWeeks (jvm) operator fun Long .times(weeks: IntWeeks ): LongWeeks (jvm) operator fun Long .times(weeks: LongWeeks ): LongWeeks (macosX64) operator fun Long .times(weeks: IntWeeks ): LongWeeks (macosX64) operator fun Long .times(weeks: LongWeeks ): LongWeeks (tvosArm64) operator fun Long .times(weeks: IntWeeks ): LongWeeks (tvosArm64) operator fun Long .times(weeks: LongWeeks ): LongWeeks (tvosX64) operator fun Long .times(weeks: IntWeeks ): LongWeeks (tvosX64) operator fun Long .times(weeks: LongWeeks ): LongWeeks (watchosArm64) operator fun Long .times(weeks: IntWeeks ): LongWeeks (watchosArm64) operator fun Long .times(weeks: LongWeeks ): LongWeeks (watchosX86) operator fun Long .times(weeks: IntWeeks ): LongWeeks (watchosX86) operator fun Long .times(weeks: LongWeeks ): LongWeeks Multiply by a number of weeks.","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/kotlin.-long/times/#exceptions_10","text":"ArithmeticException - if overflow occurs(iosArm64) operator fun Long .times(years: IntYears ): LongYears (iosArm64) operator fun Long .times(years: LongYears ): LongYears (iosX64) operator fun Long .times(years: IntYears ): LongYears (iosX64) operator fun Long .times(years: LongYears ): LongYears (jvm) operator fun Long .times(years: IntYears ): LongYears (jvm) operator fun Long .times(years: LongYears ): LongYears (macosX64) operator fun Long .times(years: IntYears ): LongYears (macosX64) operator fun Long .times(years: LongYears ): LongYears (tvosArm64) operator fun Long .times(years: IntYears ): LongYears (tvosArm64) operator fun Long .times(years: LongYears ): LongYears (tvosX64) operator fun Long .times(years: IntYears ): LongYears (tvosX64) operator fun Long .times(years: LongYears ): LongYears (watchosArm64) operator fun Long .times(years: IntYears ): LongYears (watchosArm64) operator fun Long .times(years: LongYears ): LongYears (watchosX86) operator fun Long .times(years: IntYears ): LongYears (watchosX86) operator fun Long .times(years: LongYears ): LongYears Multiply by a number of years.","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/kotlin.-long/times/#exceptions_11","text":"ArithmeticException - if overflow occurs","title":"Exceptions"},{"location":"api/core/io.islandtime.measures/kotlin.-long/weeks/","text":"core / io.islandtime.measures / kotlin.Long / weeks weeks (iosArm64) val Long .weeks: LongWeeks (iosX64) val Long .weeks: LongWeeks (jvm) val Long .weeks: LongWeeks (macosX64) val Long .weeks: LongWeeks (tvosArm64) val Long .weeks: LongWeeks (tvosX64) val Long .weeks: LongWeeks (watchosArm64) val Long .weeks: LongWeeks (watchosX86) val Long .weeks: LongWeeks Convert to LongWeeks .","title":"Weeks"},{"location":"api/core/io.islandtime.measures/kotlin.-long/weeks/#weeks","text":"(iosArm64) val Long .weeks: LongWeeks (iosX64) val Long .weeks: LongWeeks (jvm) val Long .weeks: LongWeeks (macosX64) val Long .weeks: LongWeeks (tvosArm64) val Long .weeks: LongWeeks (tvosX64) val Long .weeks: LongWeeks (watchosArm64) val Long .weeks: LongWeeks (watchosX86) val Long .weeks: LongWeeks Convert to LongWeeks .","title":"weeks"},{"location":"api/core/io.islandtime.measures/kotlin.-long/years/","text":"core / io.islandtime.measures / kotlin.Long / years years (iosArm64) val Long .years: LongYears (iosX64) val Long .years: LongYears (jvm) val Long .years: LongYears (macosX64) val Long .years: LongYears (tvosArm64) val Long .years: LongYears (tvosX64) val Long .years: LongYears (watchosArm64) val Long .years: LongYears (watchosX86) val Long .years: LongYears Convert to LongYears .","title":"Years"},{"location":"api/core/io.islandtime.measures/kotlin.-long/years/#years","text":"(iosArm64) val Long .years: LongYears (iosX64) val Long .years: LongYears (jvm) val Long .years: LongYears (macosX64) val Long .years: LongYears (tvosArm64) val Long .years: LongYears (tvosX64) val Long .years: LongYears (watchosArm64) val Long .years: LongYears (watchosX86) val Long .years: LongYears Convert to LongYears .","title":"years"},{"location":"api/core/io.islandtime.measures/kotlin.-string/","text":"core / io.islandtime.measures / kotlin.String Extensions for kotlin.String Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toDuration Convert an ISO-8601 duration string into a Duration . fun String .toDuration(): Duration Convert a string to a Duration using parser . fun String .toDuration(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): Duration (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toPeriod fun String .toPeriod(): Period fun String .toPeriod(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): Period","title":"Index"},{"location":"api/core/io.islandtime.measures/kotlin.-string/#extensions-for-kotlinstring","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toDuration Convert an ISO-8601 duration string into a Duration . fun String .toDuration(): Duration Convert a string to a Duration using parser . fun String .toDuration(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): Duration (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toPeriod fun String .toPeriod(): Period fun String .toPeriod(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): Period","title":"Extensions for kotlin.String"},{"location":"api/core/io.islandtime.measures/kotlin.-string/to-duration/","text":"core / io.islandtime.measures / kotlin.String / toDuration toDuration (iosArm64) fun String .toDuration(): Duration (iosX64) fun String .toDuration(): Duration (jvm) fun String .toDuration(): Duration (macosX64) fun String .toDuration(): Duration (tvosArm64) fun String .toDuration(): Duration (tvosX64) fun String .toDuration(): Duration (watchosArm64) fun String .toDuration(): Duration (watchosX86) fun String .toDuration(): Duration Convert an ISO-8601 duration string into a Duration . (iosArm64) fun String .toDuration(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): Duration (iosX64) fun String .toDuration(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): Duration (jvm) fun String .toDuration(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): Duration (macosX64) fun String .toDuration(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): Duration (tvosArm64) fun String .toDuration(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): Duration (tvosX64) fun String .toDuration(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): Duration (watchosArm64) fun String .toDuration(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): Duration (watchosX86) fun String .toDuration(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): Duration Convert a string to a Duration using parser .","title":"To duration"},{"location":"api/core/io.islandtime.measures/kotlin.-string/to-duration/#toduration","text":"(iosArm64) fun String .toDuration(): Duration (iosX64) fun String .toDuration(): Duration (jvm) fun String .toDuration(): Duration (macosX64) fun String .toDuration(): Duration (tvosArm64) fun String .toDuration(): Duration (tvosX64) fun String .toDuration(): Duration (watchosArm64) fun String .toDuration(): Duration (watchosX86) fun String .toDuration(): Duration Convert an ISO-8601 duration string into a Duration . (iosArm64) fun String .toDuration(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): Duration (iosX64) fun String .toDuration(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): Duration (jvm) fun String .toDuration(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): Duration (macosX64) fun String .toDuration(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): Duration (tvosArm64) fun String .toDuration(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): Duration (tvosX64) fun String .toDuration(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): Duration (watchosArm64) fun String .toDuration(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): Duration (watchosX86) fun String .toDuration(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): Duration Convert a string to a Duration using parser .","title":"toDuration"},{"location":"api/core/io.islandtime.measures/kotlin.-string/to-period/","text":"core / io.islandtime.measures / kotlin.String / toPeriod toPeriod (iosArm64) fun String .toPeriod(): Period (iosArm64) fun String .toPeriod(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): Period (iosX64) fun String .toPeriod(): Period (iosX64) fun String .toPeriod(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): Period (jvm) fun String .toPeriod(): Period (jvm) fun String .toPeriod(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): Period (macosX64) fun String .toPeriod(): Period (macosX64) fun String .toPeriod(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): Period (tvosArm64) fun String .toPeriod(): Period (tvosArm64) fun String .toPeriod(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): Period (tvosX64) fun String .toPeriod(): Period (tvosX64) fun String .toPeriod(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): Period (watchosArm64) fun String .toPeriod(): Period (watchosArm64) fun String .toPeriod(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): Period (watchosX86) fun String .toPeriod(): Period (watchosX86) fun String .toPeriod(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): Period","title":"To period"},{"location":"api/core/io.islandtime.measures/kotlin.-string/to-period/#toperiod","text":"(iosArm64) fun String .toPeriod(): Period (iosArm64) fun String .toPeriod(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): Period (iosX64) fun String .toPeriod(): Period (iosX64) fun String .toPeriod(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): Period (jvm) fun String .toPeriod(): Period (jvm) fun String .toPeriod(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): Period (macosX64) fun String .toPeriod(): Period (macosX64) fun String .toPeriod(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): Period (tvosArm64) fun String .toPeriod(): Period (tvosArm64) fun String .toPeriod(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): Period (tvosX64) fun String .toPeriod(): Period (tvosX64) fun String .toPeriod(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): Period (watchosArm64) fun String .toPeriod(): Period (watchosArm64) fun String .toPeriod(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): Period (watchosX86) fun String .toPeriod(): Period (watchosX86) fun String .toPeriod(parser: DateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): Period","title":"toPeriod"},{"location":"api/core/io.islandtime.measures/kotlin.time.-duration/","text":"core / io.islandtime.measures / kotlin.time.Duration Extensions for kotlin.time.Duration Name Summary (jvm) toIslandDays Convert to Island Time LongDays . fun Duration .toIslandDays(): LongDays (jvm) toIslandDuration fun Duration .toIslandDuration(): Duration (jvm) toIslandHours Convert to Island Time LongHours . fun Duration .toIslandHours(): LongHours (jvm) toIslandMicroseconds Convert to Island Time LongMicroseconds . fun Duration .toIslandMicroseconds(): LongMicroseconds (jvm) toIslandMilliseconds Convert to Island Time LongMilliseconds . fun Duration .toIslandMilliseconds(): LongMilliseconds (jvm) toIslandMinutes Convert to Island Time LongMinutes . fun Duration .toIslandMinutes(): LongMinutes (jvm) toIslandNanoseconds Convert to Island Time LongNanoseconds . fun Duration .toIslandNanoseconds(): LongNanoseconds (jvm) toIslandSeconds Convert to Island Time LongSeconds . fun Duration .toIslandSeconds(): LongSeconds","title":"Index"},{"location":"api/core/io.islandtime.measures/kotlin.time.-duration/#extensions-for-kotlintimeduration","text":"Name Summary (jvm) toIslandDays Convert to Island Time LongDays . fun Duration .toIslandDays(): LongDays (jvm) toIslandDuration fun Duration .toIslandDuration(): Duration (jvm) toIslandHours Convert to Island Time LongHours . fun Duration .toIslandHours(): LongHours (jvm) toIslandMicroseconds Convert to Island Time LongMicroseconds . fun Duration .toIslandMicroseconds(): LongMicroseconds (jvm) toIslandMilliseconds Convert to Island Time LongMilliseconds . fun Duration .toIslandMilliseconds(): LongMilliseconds (jvm) toIslandMinutes Convert to Island Time LongMinutes . fun Duration .toIslandMinutes(): LongMinutes (jvm) toIslandNanoseconds Convert to Island Time LongNanoseconds . fun Duration .toIslandNanoseconds(): LongNanoseconds (jvm) toIslandSeconds Convert to Island Time LongSeconds . fun Duration .toIslandSeconds(): LongSeconds","title":"Extensions for kotlin.time.Duration"},{"location":"api/core/io.islandtime.measures/kotlin.time.-duration/to-island-days/","text":"core / io.islandtime.measures / kotlin.time.Duration / toIslandDays toIslandDays (jvm) @ExperimentalTime fun Duration .toIslandDays(): LongDays Convert to Island Time LongDays .","title":"To island days"},{"location":"api/core/io.islandtime.measures/kotlin.time.-duration/to-island-days/#toislanddays","text":"(jvm) @ExperimentalTime fun Duration .toIslandDays(): LongDays Convert to Island Time LongDays .","title":"toIslandDays"},{"location":"api/core/io.islandtime.measures/kotlin.time.-duration/to-island-duration/","text":"core / io.islandtime.measures / kotlin.time.Duration / toIslandDuration toIslandDuration (jvm) @ExperimentalTime fun Duration .toIslandDuration(): Duration","title":"To island duration"},{"location":"api/core/io.islandtime.measures/kotlin.time.-duration/to-island-duration/#toislandduration","text":"(jvm) @ExperimentalTime fun Duration .toIslandDuration(): Duration","title":"toIslandDuration"},{"location":"api/core/io.islandtime.measures/kotlin.time.-duration/to-island-hours/","text":"core / io.islandtime.measures / kotlin.time.Duration / toIslandHours toIslandHours (jvm) @ExperimentalTime fun Duration .toIslandHours(): LongHours Convert to Island Time LongHours .","title":"To island hours"},{"location":"api/core/io.islandtime.measures/kotlin.time.-duration/to-island-hours/#toislandhours","text":"(jvm) @ExperimentalTime fun Duration .toIslandHours(): LongHours Convert to Island Time LongHours .","title":"toIslandHours"},{"location":"api/core/io.islandtime.measures/kotlin.time.-duration/to-island-microseconds/","text":"core / io.islandtime.measures / kotlin.time.Duration / toIslandMicroseconds toIslandMicroseconds (jvm) @ExperimentalTime fun Duration .toIslandMicroseconds(): LongMicroseconds Convert to Island Time LongMicroseconds .","title":"To island microseconds"},{"location":"api/core/io.islandtime.measures/kotlin.time.-duration/to-island-microseconds/#toislandmicroseconds","text":"(jvm) @ExperimentalTime fun Duration .toIslandMicroseconds(): LongMicroseconds Convert to Island Time LongMicroseconds .","title":"toIslandMicroseconds"},{"location":"api/core/io.islandtime.measures/kotlin.time.-duration/to-island-milliseconds/","text":"core / io.islandtime.measures / kotlin.time.Duration / toIslandMilliseconds toIslandMilliseconds (jvm) @ExperimentalTime fun Duration .toIslandMilliseconds(): LongMilliseconds Convert to Island Time LongMilliseconds .","title":"To island milliseconds"},{"location":"api/core/io.islandtime.measures/kotlin.time.-duration/to-island-milliseconds/#toislandmilliseconds","text":"(jvm) @ExperimentalTime fun Duration .toIslandMilliseconds(): LongMilliseconds Convert to Island Time LongMilliseconds .","title":"toIslandMilliseconds"},{"location":"api/core/io.islandtime.measures/kotlin.time.-duration/to-island-minutes/","text":"core / io.islandtime.measures / kotlin.time.Duration / toIslandMinutes toIslandMinutes (jvm) @ExperimentalTime fun Duration .toIslandMinutes(): LongMinutes Convert to Island Time LongMinutes .","title":"To island minutes"},{"location":"api/core/io.islandtime.measures/kotlin.time.-duration/to-island-minutes/#toislandminutes","text":"(jvm) @ExperimentalTime fun Duration .toIslandMinutes(): LongMinutes Convert to Island Time LongMinutes .","title":"toIslandMinutes"},{"location":"api/core/io.islandtime.measures/kotlin.time.-duration/to-island-nanoseconds/","text":"core / io.islandtime.measures / kotlin.time.Duration / toIslandNanoseconds toIslandNanoseconds (jvm) @ExperimentalTime fun Duration .toIslandNanoseconds(): LongNanoseconds Convert to Island Time LongNanoseconds .","title":"To island nanoseconds"},{"location":"api/core/io.islandtime.measures/kotlin.time.-duration/to-island-nanoseconds/#toislandnanoseconds","text":"(jvm) @ExperimentalTime fun Duration .toIslandNanoseconds(): LongNanoseconds Convert to Island Time LongNanoseconds .","title":"toIslandNanoseconds"},{"location":"api/core/io.islandtime.measures/kotlin.time.-duration/to-island-seconds/","text":"core / io.islandtime.measures / kotlin.time.Duration / toIslandSeconds toIslandSeconds (jvm) @ExperimentalTime fun Duration .toIslandSeconds(): LongSeconds Convert to Island Time LongSeconds .","title":"To island seconds"},{"location":"api/core/io.islandtime.measures/kotlin.time.-duration/to-island-seconds/#toislandseconds","text":"(jvm) @ExperimentalTime fun Duration .toIslandSeconds(): LongSeconds Convert to Island Time LongSeconds .","title":"toIslandSeconds"},{"location":"api/core/io.islandtime.operators/","text":"core / io.islandtime.operators Package io.islandtime.operators A set of convenience operators for various date-time primitives, enabling things like date.next(TUESDAY) , date.startOfWeek , or dateTime.truncatedTo(HOURS) . Properties Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) endOfMonth The date at the end of the month that this date falls in. val Date .endOfMonth: Date The date-time at the last representable instant of the month that this date-time falls in. val DateTime .endOfMonth: DateTime val OffsetDateTime .endOfMonth: OffsetDateTime val ZonedDateTime .endOfMonth: ZonedDateTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) endOfWeek The date at the end of the ISO week that this date falls in. val Date .endOfWeek: Date The date-time at the last representable instant of the ISO week that this date-time falls in. val DateTime .endOfWeek: DateTime val OffsetDateTime .endOfWeek: OffsetDateTime val ZonedDateTime .endOfWeek: ZonedDateTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) endOfYear The date at the end of the year that this date falls in. val Date .endOfYear: Date The date-time at the last representable instant of the year that this date-time falls in. val DateTime .endOfYear: DateTime val OffsetDateTime .endOfYear: OffsetDateTime val ZonedDateTime .endOfYear: ZonedDateTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) startOfMonth The date at the start of the month that this date falls in. val Date .startOfMonth: Date The date-time at the first instant of the month that this date-time falls in. val DateTime .startOfMonth: DateTime val OffsetDateTime .startOfMonth: OffsetDateTime val ZonedDateTime .startOfMonth: ZonedDateTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) startOfWeek The date at the start of the ISO week that this date falls in. val Date .startOfWeek: Date The date-time at the first instant of the ISO week that this date-time falls in. val DateTime .startOfWeek: DateTime val OffsetDateTime .startOfWeek: OffsetDateTime val ZonedDateTime .startOfWeek: ZonedDateTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) startOfYear The date at the start of the year that this date falls in. val Date .startOfYear: Date The date-time at the first instant of the year that this date-time falls in. val DateTime .startOfYear: DateTime val OffsetDateTime .startOfYear: OffsetDateTime val ZonedDateTime .startOfYear: ZonedDateTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) weekInterval The interval of the ISO week that this date-time falls within. val DateTime .weekInterval: DateTimeInterval The interval of the ISO week that this date-time falls within. The offset will be preserved in both the start and end date-times val OffsetDateTime .weekInterval: OffsetDateTimeInterval The interval of the ISO week that this date-time falls within. The zone will be preserved in both the start and end date-times. val ZonedDateTime .weekInterval: ZonedDateTimeInterval (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) weekRange The date range of the ISO week that this date falls within. val Date .weekRange: DateRange Functions Name Summary endOfWeek The date at the end of the week that this date falls in. The first day of the week will be determined by locale .(jvm) fun Date .endOfWeek(locale: Locale ): Date (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Date .endOfWeek(locale: <ERROR CLASS>): Date The date-time at the last representable instant of the week that this date-time falls in. The first day of the week will be determined by locale .(jvm) fun DateTime .endOfWeek(locale: Locale ): DateTime (jvm) fun OffsetDateTime .endOfWeek(locale: Locale ): OffsetDateTime (jvm) fun ZonedDateTime .endOfWeek(locale: Locale ): ZonedDateTime (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateTime .endOfWeek(locale: <ERROR CLASS>): DateTime (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun OffsetDateTime .endOfWeek(locale: <ERROR CLASS>): OffsetDateTime (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun ZonedDateTime .endOfWeek(locale: <ERROR CLASS>): ZonedDateTime The date at the end of the week that this date falls in. The first day of the week will be determined by settings . The first day of the week will be determined by the system settings. The first day of the week will be determined by the system settings. This may differ from the first day of the week associated with the default locale on platforms that allow this to be customized.(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Date .endOfWeek(settings: WeekSettings ): Date The date-time at the last representable instant of the week that this date-time falls in. The first day of the week will be determined by the system settings. This may differ from the first day of the week associated with the default locale on platforms that allow this to be customized.(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateTime .endOfWeek(settings: WeekSettings ): DateTime The date-time at the last representable instant of the week that this date-time falls in. The first day of the week will be determined by the user's system settings. This may differ from the first day of the week associated with the default locale on platforms that allow the user to customize this.(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun OffsetDateTime .endOfWeek(settings: WeekSettings ): OffsetDateTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun ZonedDateTime .endOfWeek(settings: WeekSettings ): ZonedDateTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) next The next date after this one that falls on a particular day of the week. fun Date .next(dayOfWeek: DayOfWeek ): Date The next date-time after this one that falls on a particular day of the week. fun DateTime .next(dayOfWeek: DayOfWeek ): DateTime fun OffsetDateTime .next(dayOfWeek: DayOfWeek ): OffsetDateTime fun ZonedDateTime .next(dayOfWeek: DayOfWeek ): ZonedDateTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) nextOrSame The next date that falls on a particular day of the week, or this one if it falls on the same day. fun Date .nextOrSame(dayOfWeek: DayOfWeek ): Date The next date-time that falls on a particular day of the week, or this one if it falls on the same day. fun DateTime .nextOrSame(dayOfWeek: DayOfWeek ): DateTime fun OffsetDateTime .nextOrSame(dayOfWeek: DayOfWeek ): OffsetDateTime fun ZonedDateTime .nextOrSame(dayOfWeek: DayOfWeek ): ZonedDateTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) previous The last date before this one that falls on a particular day of the week. fun Date .previous(dayOfWeek: DayOfWeek ): Date The last date-time before this one that falls on a particular day of the week. fun DateTime .previous(dayOfWeek: DayOfWeek ): DateTime fun OffsetDateTime .previous(dayOfWeek: DayOfWeek ): OffsetDateTime fun ZonedDateTime .previous(dayOfWeek: DayOfWeek ): ZonedDateTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) previousOrSame The last date that falls on a particular day of the week, or this one if it falls on the same day. fun Date .previousOrSame(dayOfWeek: DayOfWeek ): Date The last date-time that falls on a particular day of the week, or this one if it falls on the same day. fun DateTime .previousOrSame(dayOfWeek: DayOfWeek ): DateTime fun OffsetDateTime .previousOrSame(dayOfWeek: DayOfWeek ): OffsetDateTime fun ZonedDateTime .previousOrSame(dayOfWeek: DayOfWeek ): ZonedDateTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) roundedDownTo Return this time, rounded down to match the precision of a given unit . fun Time .roundedDownTo(unit: TimeUnit ): Time fun OffsetTime .roundedDownTo(unit: TimeUnit ): OffsetTime Return this date-time, rounded down to match the precision of a given unit . fun DateTime .roundedDownTo(unit: TimeUnit ): DateTime fun OffsetDateTime .roundedDownTo(unit: TimeUnit ): OffsetDateTime fun ZonedDateTime .roundedDownTo(unit: TimeUnit ): ZonedDateTime Return this instant, rounded down to match the precision of a given unit . fun Instant .roundedDownTo(unit: TimeUnit ): Instant (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) roundedDownToNearest Return this time, rounded down to the nearest hour that satisfies the increment . fun Time .roundedDownToNearest(increment: IntHours ): Time fun OffsetTime .roundedDownToNearest(increment: IntHours ): OffsetTime Return this time, rounded down to the nearest minute that satisfies the increment . fun Time .roundedDownToNearest(increment: IntMinutes ): Time fun OffsetTime .roundedDownToNearest(increment: IntMinutes ): OffsetTime Return this time, rounded down to the nearest second that satisfies the increment . fun Time .roundedDownToNearest(increment: IntSeconds ): Time fun OffsetTime .roundedDownToNearest(increment: IntSeconds ): OffsetTime Return this time, rounded down to the nearest millisecond that satisfies the increment . fun Time .roundedDownToNearest(increment: IntMilliseconds ): Time fun OffsetTime .roundedDownToNearest(increment: IntMilliseconds ): OffsetTime Return this time, rounded down to the nearest microsecond that satisfies the increment . fun Time .roundedDownToNearest(increment: IntMicroseconds ): Time fun OffsetTime .roundedDownToNearest(increment: IntMicroseconds ): OffsetTime Return this time, rounded down to the nearest nanosecond that satisfies the increment . fun Time .roundedDownToNearest(increment: IntNanoseconds ): Time fun OffsetTime .roundedDownToNearest(increment: IntNanoseconds ): OffsetTime Return this date-time, rounded down to the nearest hour that satisfies the increment . fun DateTime .roundedDownToNearest(increment: IntHours ): DateTime fun OffsetDateTime .roundedDownToNearest(increment: IntHours ): OffsetDateTime fun ZonedDateTime .roundedDownToNearest(increment: IntHours ): ZonedDateTime Return this date-time, rounded down to the nearest minute that satisfies the increment . fun DateTime .roundedDownToNearest(increment: IntMinutes ): DateTime fun OffsetDateTime .roundedDownToNearest(increment: IntMinutes ): OffsetDateTime fun ZonedDateTime .roundedDownToNearest(increment: IntMinutes ): ZonedDateTime Return this date-time, rounded down to the nearest second that satisfies the increment . fun DateTime .roundedDownToNearest(increment: IntSeconds ): DateTime fun OffsetDateTime .roundedDownToNearest(increment: IntSeconds ): OffsetDateTime fun ZonedDateTime .roundedDownToNearest(increment: IntSeconds ): ZonedDateTime Return this date-time, rounded down to the nearest millisecond that satisfies the increment . fun DateTime .roundedDownToNearest(increment: IntMilliseconds ): DateTime fun OffsetDateTime .roundedDownToNearest(increment: IntMilliseconds ): OffsetDateTime fun ZonedDateTime .roundedDownToNearest(increment: IntMilliseconds ): ZonedDateTime Return this date-time, rounded down to the nearest microsecond that satisfies the increment . fun DateTime .roundedDownToNearest(increment: IntMicroseconds ): DateTime fun OffsetDateTime .roundedDownToNearest(increment: IntMicroseconds ): OffsetDateTime fun ZonedDateTime .roundedDownToNearest(increment: IntMicroseconds ): ZonedDateTime Return this date-time, rounded down to the nearest nanosecond that satisfies the increment . fun DateTime .roundedDownToNearest(increment: IntNanoseconds ): DateTime fun OffsetDateTime .roundedDownToNearest(increment: IntNanoseconds ): OffsetDateTime fun ZonedDateTime .roundedDownToNearest(increment: IntNanoseconds ): ZonedDateTime Return this instant, rounded down to the nearest hour that satisfies the increment . fun Instant .roundedDownToNearest(increment: IntHours ): Instant Return this instant, rounded down to the nearest minute that satisfies the increment . fun Instant .roundedDownToNearest(increment: IntMinutes ): Instant Return this instant, rounded down to the nearest second that satisfies the increment . fun Instant .roundedDownToNearest(increment: IntSeconds ): Instant Return this instant, rounded down to the nearest millisecond that satisfies the increment . fun Instant .roundedDownToNearest(increment: IntMilliseconds ): Instant Return this instant, rounded down to the nearest microsecond that satisfies the increment . fun Instant .roundedDownToNearest(increment: IntMicroseconds ): Instant Return this instant, rounded down to the nearest nanosecond that satisfies the increment . fun Instant .roundedDownToNearest(increment: IntNanoseconds ): Instant (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) roundedTo Return this time, rounded to match the precision of a given unit . If the time is halfway between whole values of the unit, it will be rounded up. fun Time .roundedTo(unit: TimeUnit ): Time fun OffsetTime .roundedTo(unit: TimeUnit ): OffsetTime Return this date-time, rounded to match the precision of a given unit . If the time is halfway between whole values of the unit, it will be rounded up. fun DateTime .roundedTo(unit: TimeUnit ): DateTime fun OffsetDateTime .roundedTo(unit: TimeUnit ): OffsetDateTime fun ZonedDateTime .roundedTo(unit: TimeUnit ): ZonedDateTime Return this instant, rounded to match the precision of a given unit . If the time is halfway between whole values of the unit, it will be rounded up. fun Instant .roundedTo(unit: TimeUnit ): Instant (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) roundedToNearest Return this time, rounded to the nearest hour that satisfies the increment . If the time is halfway between increments, it will be rounded up. fun Time .roundedToNearest(increment: IntHours ): Time fun OffsetTime .roundedToNearest(increment: IntHours ): OffsetTime Return this time, rounded to the nearest minute that satisfies the increment . If the time is halfway between increments, it will be rounded up. fun Time .roundedToNearest(increment: IntMinutes ): Time fun OffsetTime .roundedToNearest(increment: IntMinutes ): OffsetTime Return this time, rounded to the nearest second that satisfies the increment . If the time is halfway between increments, it will be rounded up. fun Time .roundedToNearest(increment: IntSeconds ): Time fun OffsetTime .roundedToNearest(increment: IntSeconds ): OffsetTime Return this time, rounded to the nearest millisecond that satisfies the increment . If the time is halfway between increments, it will be rounded up. fun Time .roundedToNearest(increment: IntMilliseconds ): Time fun OffsetTime .roundedToNearest(increment: IntMilliseconds ): OffsetTime Return this time, rounded to the nearest microsecond that satisfies the increment . If the time is halfway between increments, it will be rounded up. fun Time .roundedToNearest(increment: IntMicroseconds ): Time fun OffsetTime .roundedToNearest(increment: IntMicroseconds ): OffsetTime Return this time, rounded to the nearest nanosecond that satisfies the increment . If the time is halfway between increments, it will be rounded up. fun Time .roundedToNearest(increment: IntNanoseconds ): Time fun OffsetTime .roundedToNearest(increment: IntNanoseconds ): OffsetTime Return this date-time, rounded to the nearest hour that satisfies the increment . If the time is halfway between increments, it will be rounded up. fun DateTime .roundedToNearest(increment: IntHours ): DateTime fun OffsetDateTime .roundedToNearest(increment: IntHours ): OffsetDateTime fun ZonedDateTime .roundedToNearest(increment: IntHours ): ZonedDateTime Return this date-time, rounded to the nearest minute that satisfies the increment . If the time is halfway between increments, it will be rounded up. fun DateTime .roundedToNearest(increment: IntMinutes ): DateTime fun OffsetDateTime .roundedToNearest(increment: IntMinutes ): OffsetDateTime fun ZonedDateTime .roundedToNearest(increment: IntMinutes ): ZonedDateTime Return this date-time, rounded to the nearest second that satisfies the increment . If the time is halfway between increments, it will be rounded up. fun DateTime .roundedToNearest(increment: IntSeconds ): DateTime fun OffsetDateTime .roundedToNearest(increment: IntSeconds ): OffsetDateTime fun ZonedDateTime .roundedToNearest(increment: IntSeconds ): ZonedDateTime Return this date-time, rounded to the nearest millisecond that satisfies the increment . If the time is halfway between increments, it will be rounded up. fun DateTime .roundedToNearest(increment: IntMilliseconds ): DateTime fun OffsetDateTime .roundedToNearest(increment: IntMilliseconds ): OffsetDateTime fun ZonedDateTime .roundedToNearest(increment: IntMilliseconds ): ZonedDateTime Return this date-time, rounded to the nearest microsecond that satisfies the increment . If the time is halfway between increments, it will be rounded up. fun DateTime .roundedToNearest(increment: IntMicroseconds ): DateTime fun OffsetDateTime .roundedToNearest(increment: IntMicroseconds ): OffsetDateTime fun ZonedDateTime .roundedToNearest(increment: IntMicroseconds ): ZonedDateTime Return this date-time, rounded to the nearest nanosecond that satisfies the increment . If the time is halfway between increments, it will be rounded up. fun DateTime .roundedToNearest(increment: IntNanoseconds ): DateTime fun OffsetDateTime .roundedToNearest(increment: IntNanoseconds ): OffsetDateTime fun ZonedDateTime .roundedToNearest(increment: IntNanoseconds ): ZonedDateTime Return this instant, rounded to the nearest hour that satisfies the increment . If the time is halfway between increments, it will be rounded up. fun Instant .roundedToNearest(increment: IntHours ): Instant Return this instant, rounded to the nearest minute that satisfies the increment . If the time is halfway between increments, it will be rounded up. fun Instant .roundedToNearest(increment: IntMinutes ): Instant Return this instant, rounded to the nearest second that satisfies the increment . If the time is halfway between increments, it will be rounded up. fun Instant .roundedToNearest(increment: IntSeconds ): Instant Return this instant, rounded to the nearest millisecond that satisfies the increment . If the time is halfway between increments, it will be rounded up. fun Instant .roundedToNearest(increment: IntMilliseconds ): Instant Return this instant, rounded to the nearest microsecond that satisfies the increment . If the time is halfway between increments, it will be rounded up. fun Instant .roundedToNearest(increment: IntMicroseconds ): Instant Return this instant, rounded to the nearest nanosecond that satisfies the increment . If the time is halfway between increments, it will be rounded up. fun Instant .roundedToNearest(increment: IntNanoseconds ): Instant (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) roundedUpTo Return this time, rounded up to match the precision of a given unit . fun Time .roundedUpTo(unit: TimeUnit ): Time fun OffsetTime .roundedUpTo(unit: TimeUnit ): OffsetTime Return this date-time, rounded up to match the precision of a given unit . fun DateTime .roundedUpTo(unit: TimeUnit ): DateTime fun OffsetDateTime .roundedUpTo(unit: TimeUnit ): OffsetDateTime fun ZonedDateTime .roundedUpTo(unit: TimeUnit ): ZonedDateTime Return this instant, rounded up to match the precision of a given unit . fun Instant .roundedUpTo(unit: TimeUnit ): Instant (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) roundedUpToNearest Return this time, rounded up to the nearest hour that satisfies the increment . fun Time .roundedUpToNearest(increment: IntHours ): Time fun OffsetTime .roundedUpToNearest(increment: IntHours ): OffsetTime Return this time, rounded up to the nearest minute that satisfies the increment . fun Time .roundedUpToNearest(increment: IntMinutes ): Time fun OffsetTime .roundedUpToNearest(increment: IntMinutes ): OffsetTime Return this time, rounded up to the nearest second that satisfies the increment . fun Time .roundedUpToNearest(increment: IntSeconds ): Time fun OffsetTime .roundedUpToNearest(increment: IntSeconds ): OffsetTime Return this time, rounded up to the nearest millisecond that satisfies the increment . fun Time .roundedUpToNearest(increment: IntMilliseconds ): Time fun OffsetTime .roundedUpToNearest(increment: IntMilliseconds ): OffsetTime Return this time, rounded up to the nearest microsecond that satisfies the increment . fun Time .roundedUpToNearest(increment: IntMicroseconds ): Time fun OffsetTime .roundedUpToNearest(increment: IntMicroseconds ): OffsetTime Return this time, rounded up to the nearest nanosecond that satisfies the increment . fun Time .roundedUpToNearest(increment: IntNanoseconds ): Time fun OffsetTime .roundedUpToNearest(increment: IntNanoseconds ): OffsetTime Return this date-time, rounded up to the nearest hour that satisfies the increment . fun DateTime .roundedUpToNearest(increment: IntHours ): DateTime fun OffsetDateTime .roundedUpToNearest(increment: IntHours ): OffsetDateTime fun ZonedDateTime .roundedUpToNearest(increment: IntHours ): ZonedDateTime Return this date-time, rounded up to the nearest minute that satisfies the increment . fun DateTime .roundedUpToNearest(increment: IntMinutes ): DateTime fun OffsetDateTime .roundedUpToNearest(increment: IntMinutes ): OffsetDateTime fun ZonedDateTime .roundedUpToNearest(increment: IntMinutes ): ZonedDateTime Return this date-time, rounded up to the nearest second that satisfies the increment . fun DateTime .roundedUpToNearest(increment: IntSeconds ): DateTime fun OffsetDateTime .roundedUpToNearest(increment: IntSeconds ): OffsetDateTime fun ZonedDateTime .roundedUpToNearest(increment: IntSeconds ): ZonedDateTime Return this date-time, rounded up to the nearest millisecond that satisfies the increment . fun DateTime .roundedUpToNearest(increment: IntMilliseconds ): DateTime fun OffsetDateTime .roundedUpToNearest(increment: IntMilliseconds ): OffsetDateTime fun ZonedDateTime .roundedUpToNearest(increment: IntMilliseconds ): ZonedDateTime Return this date-time, rounded up to the nearest microsecond that satisfies the increment . fun DateTime .roundedUpToNearest(increment: IntMicroseconds ): DateTime fun OffsetDateTime .roundedUpToNearest(increment: IntMicroseconds ): OffsetDateTime fun ZonedDateTime .roundedUpToNearest(increment: IntMicroseconds ): ZonedDateTime Return this date-time, rounded up to the nearest nanosecond that satisfies the increment . fun DateTime .roundedUpToNearest(increment: IntNanoseconds ): DateTime fun OffsetDateTime .roundedUpToNearest(increment: IntNanoseconds ): OffsetDateTime fun ZonedDateTime .roundedUpToNearest(increment: IntNanoseconds ): ZonedDateTime Return this instant, rounded up to the nearest hour that satisfies the increment . fun Instant .roundedUpToNearest(increment: IntHours ): Instant Return this instant, rounded up to the nearest minute that satisfies the increment . fun Instant .roundedUpToNearest(increment: IntMinutes ): Instant Return this instant, rounded up to the nearest second that satisfies the increment . fun Instant .roundedUpToNearest(increment: IntSeconds ): Instant Return this instant, rounded up to the nearest millisecond that satisfies the increment . fun Instant .roundedUpToNearest(increment: IntMilliseconds ): Instant Return this instant, rounded up to the nearest microsecond that satisfies the increment . fun Instant .roundedUpToNearest(increment: IntMicroseconds ): Instant Return this instant, rounded up to the nearest nanosecond that satisfies the increment . fun Instant .roundedUpToNearest(increment: IntNanoseconds ): Instant startOfWeek The date at the start of the week that this date falls in. The first day of the week will be determined by locale .(jvm) fun Date .startOfWeek(locale: Locale ): Date (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Date .startOfWeek(locale: <ERROR CLASS>): Date The date-time at the first instant of the week that this date-time falls in. The first day of the week will be determined by locale .(jvm) fun DateTime .startOfWeek(locale: Locale ): DateTime (jvm) fun OffsetDateTime .startOfWeek(locale: Locale ): OffsetDateTime (jvm) fun ZonedDateTime .startOfWeek(locale: Locale ): ZonedDateTime (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateTime .startOfWeek(locale: <ERROR CLASS>): DateTime (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun OffsetDateTime .startOfWeek(locale: <ERROR CLASS>): OffsetDateTime (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun ZonedDateTime .startOfWeek(locale: <ERROR CLASS>): ZonedDateTime The date at the start of the week that this date falls in. The first day of the week will be determined by settings .(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Date .startOfWeek(settings: WeekSettings ): Date The date-time at the first instant of the week that this date-time falls in. The first day of the week will be determined by the system settings. This may differ from the first day of the week associated with the default locale on platforms that allow this to be customized.(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateTime .startOfWeek(settings: WeekSettings ): DateTime The date-time at the first instant of the week that this date-time falls in. The first day of the week will be determined by the user's system settings. This may differ from the first day of the week associated with the default locale on platforms that allow the user to customize this.(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun OffsetDateTime .startOfWeek(settings: WeekSettings ): OffsetDateTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun ZonedDateTime .startOfWeek(settings: WeekSettings ): ZonedDateTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) truncatedTo Return this time, rounded down to match the precision of a given unit . fun Time .truncatedTo(unit: TimeUnit ): Time fun OffsetTime .truncatedTo(unit: TimeUnit ): OffsetTime Return this date-time, rounded down to match the precision of a given unit . fun DateTime .truncatedTo(unit: TimeUnit ): DateTime fun OffsetDateTime .truncatedTo(unit: TimeUnit ): OffsetDateTime fun ZonedDateTime .truncatedTo(unit: TimeUnit ): ZonedDateTime Return this instant, rounded down to match the precision of a given unit . fun Instant .truncatedTo(unit: TimeUnit ): Instant (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) truncatedToHours Return a copy of this time, truncated to the hour value. All smaller components will be replaced with zero. fun Time .~~truncatedToHours~~(): Time fun OffsetTime .~~truncatedToHours~~(): OffsetTime Return a copy of this date-time, truncated to the hour value. All smaller components will be replaced with zero. fun DateTime .~~truncatedToHours~~(): DateTime fun ZonedDateTime .~~truncatedToHours~~(): ZonedDateTime fun OffsetDateTime .~~truncatedToHours~~(): OffsetDateTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) truncatedToMicroseconds Return a copy of this time with the nanosecond value truncated to microseconds. fun Time .~~truncatedToMicroseconds~~(): Time fun OffsetTime .~~truncatedToMicroseconds~~(): OffsetTime Return a copy of this date-time with the nanosecond value truncated to microseconds. fun DateTime .~~truncatedToMicroseconds~~(): DateTime fun ZonedDateTime .~~truncatedToMicroseconds~~(): ZonedDateTime fun OffsetDateTime .~~truncatedToMicroseconds~~(): OffsetDateTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) truncatedToMilliseconds Return a copy of this time with the nanosecond value truncated to milliseconds. fun Time .~~truncatedToMilliseconds~~(): Time fun OffsetTime .~~truncatedToMilliseconds~~(): OffsetTime Return a copy of this date-time with the nanosecond value truncated to milliseconds. fun DateTime .~~truncatedToMilliseconds~~(): DateTime fun ZonedDateTime .~~truncatedToMilliseconds~~(): ZonedDateTime fun OffsetDateTime .~~truncatedToMilliseconds~~(): OffsetDateTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) truncatedToMinutes Return a copy of this time, truncated to the minute value. All smaller components will be replaced with zero. fun Time .~~truncatedToMinutes~~(): Time Return a copy of this date-time, truncated to the minute value. ll smaller components will be replaced with zero. fun DateTime .~~truncatedToMinutes~~(): DateTime fun OffsetDateTime .~~truncatedToMinutes~~(): OffsetDateTime Return a copy of this date-time, truncated to the minute value. All smaller components will be replaced with zero. fun ZonedDateTime .~~truncatedToMinutes~~(): ZonedDateTime Return a copy of this time, truncated to the minute value. ll smaller components will be replaced with zero. fun OffsetTime .~~truncatedToMinutes~~(): OffsetTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) truncatedToSeconds Return a copy of this time, truncated to the second value. All smaller components will be replaced with zero. fun Time .~~truncatedToSeconds~~(): Time fun OffsetTime .~~truncatedToSeconds~~(): OffsetTime Return a copy of this date-time, truncated to the second value. All smaller components will be replaced with zero. fun DateTime .~~truncatedToSeconds~~(): DateTime fun ZonedDateTime .~~truncatedToSeconds~~(): ZonedDateTime fun OffsetDateTime .~~truncatedToSeconds~~(): OffsetDateTime weekInterval The interval of the week that this date falls within. The first day of the week will be determined by locale .(jvm) fun DateTime .weekInterval(locale: Locale ): DateTimeInterval (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateTime .weekInterval(locale: <ERROR CLASS>): DateTimeInterval The interval of the week that this date falls within. The first day of the week will be determined by locale . The offset will be preserved in both the start and end date-times.(jvm) fun OffsetDateTime .weekInterval(locale: Locale ): OffsetDateTimeInterval (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun OffsetDateTime .weekInterval(locale: <ERROR CLASS>): OffsetDateTimeInterval The interval of the week that this date falls within. The first day of the week will be determined by locale . The zone will be preserved in both the start and end date-times.(jvm) fun ZonedDateTime .weekInterval(locale: Locale ): ZonedDateTimeInterval (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun ZonedDateTime .weekInterval(locale: <ERROR CLASS>): ZonedDateTimeInterval The interval of the week that this date-time falls within. The first day of the week will be determined by settings .(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateTime .weekInterval(settings: WeekSettings ): DateTimeInterval The interval of the week that this date-time falls within. The first day of the week will be determined by settings . The offset will be preserved in both the start and end date-times.(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun OffsetDateTime .weekInterval(settings: WeekSettings ): OffsetDateTimeInterval The interval of the week that this date-time falls within. The first day of the week will be determined by settings . The zone will be preserved in both the start and end date-times.(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun ZonedDateTime .weekInterval(settings: WeekSettings ): ZonedDateTimeInterval weekRange The date range of the week that this date falls within. The first day of the week will be determined by locale .(jvm) fun Date .weekRange(locale: Locale ): DateRange (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Date .weekRange(locale: <ERROR CLASS>): DateRange The date range of the week that this date falls within. The first day of the week will be determined by settings .(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Date .weekRange(settings: WeekSettings ): DateRange","title":"Index"},{"location":"api/core/io.islandtime.operators/#package-ioislandtimeoperators","text":"A set of convenience operators for various date-time primitives, enabling things like date.next(TUESDAY) , date.startOfWeek , or dateTime.truncatedTo(HOURS) .","title":"Package io.islandtime.operators"},{"location":"api/core/io.islandtime.operators/#properties","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) endOfMonth The date at the end of the month that this date falls in. val Date .endOfMonth: Date The date-time at the last representable instant of the month that this date-time falls in. val DateTime .endOfMonth: DateTime val OffsetDateTime .endOfMonth: OffsetDateTime val ZonedDateTime .endOfMonth: ZonedDateTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) endOfWeek The date at the end of the ISO week that this date falls in. val Date .endOfWeek: Date The date-time at the last representable instant of the ISO week that this date-time falls in. val DateTime .endOfWeek: DateTime val OffsetDateTime .endOfWeek: OffsetDateTime val ZonedDateTime .endOfWeek: ZonedDateTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) endOfYear The date at the end of the year that this date falls in. val Date .endOfYear: Date The date-time at the last representable instant of the year that this date-time falls in. val DateTime .endOfYear: DateTime val OffsetDateTime .endOfYear: OffsetDateTime val ZonedDateTime .endOfYear: ZonedDateTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) startOfMonth The date at the start of the month that this date falls in. val Date .startOfMonth: Date The date-time at the first instant of the month that this date-time falls in. val DateTime .startOfMonth: DateTime val OffsetDateTime .startOfMonth: OffsetDateTime val ZonedDateTime .startOfMonth: ZonedDateTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) startOfWeek The date at the start of the ISO week that this date falls in. val Date .startOfWeek: Date The date-time at the first instant of the ISO week that this date-time falls in. val DateTime .startOfWeek: DateTime val OffsetDateTime .startOfWeek: OffsetDateTime val ZonedDateTime .startOfWeek: ZonedDateTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) startOfYear The date at the start of the year that this date falls in. val Date .startOfYear: Date The date-time at the first instant of the year that this date-time falls in. val DateTime .startOfYear: DateTime val OffsetDateTime .startOfYear: OffsetDateTime val ZonedDateTime .startOfYear: ZonedDateTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) weekInterval The interval of the ISO week that this date-time falls within. val DateTime .weekInterval: DateTimeInterval The interval of the ISO week that this date-time falls within. The offset will be preserved in both the start and end date-times val OffsetDateTime .weekInterval: OffsetDateTimeInterval The interval of the ISO week that this date-time falls within. The zone will be preserved in both the start and end date-times. val ZonedDateTime .weekInterval: ZonedDateTimeInterval (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) weekRange The date range of the ISO week that this date falls within. val Date .weekRange: DateRange","title":"Properties"},{"location":"api/core/io.islandtime.operators/#functions","text":"Name Summary endOfWeek The date at the end of the week that this date falls in. The first day of the week will be determined by locale .(jvm) fun Date .endOfWeek(locale: Locale ): Date (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Date .endOfWeek(locale: <ERROR CLASS>): Date The date-time at the last representable instant of the week that this date-time falls in. The first day of the week will be determined by locale .(jvm) fun DateTime .endOfWeek(locale: Locale ): DateTime (jvm) fun OffsetDateTime .endOfWeek(locale: Locale ): OffsetDateTime (jvm) fun ZonedDateTime .endOfWeek(locale: Locale ): ZonedDateTime (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateTime .endOfWeek(locale: <ERROR CLASS>): DateTime (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun OffsetDateTime .endOfWeek(locale: <ERROR CLASS>): OffsetDateTime (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun ZonedDateTime .endOfWeek(locale: <ERROR CLASS>): ZonedDateTime The date at the end of the week that this date falls in. The first day of the week will be determined by settings . The first day of the week will be determined by the system settings. The first day of the week will be determined by the system settings. This may differ from the first day of the week associated with the default locale on platforms that allow this to be customized.(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Date .endOfWeek(settings: WeekSettings ): Date The date-time at the last representable instant of the week that this date-time falls in. The first day of the week will be determined by the system settings. This may differ from the first day of the week associated with the default locale on platforms that allow this to be customized.(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateTime .endOfWeek(settings: WeekSettings ): DateTime The date-time at the last representable instant of the week that this date-time falls in. The first day of the week will be determined by the user's system settings. This may differ from the first day of the week associated with the default locale on platforms that allow the user to customize this.(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun OffsetDateTime .endOfWeek(settings: WeekSettings ): OffsetDateTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun ZonedDateTime .endOfWeek(settings: WeekSettings ): ZonedDateTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) next The next date after this one that falls on a particular day of the week. fun Date .next(dayOfWeek: DayOfWeek ): Date The next date-time after this one that falls on a particular day of the week. fun DateTime .next(dayOfWeek: DayOfWeek ): DateTime fun OffsetDateTime .next(dayOfWeek: DayOfWeek ): OffsetDateTime fun ZonedDateTime .next(dayOfWeek: DayOfWeek ): ZonedDateTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) nextOrSame The next date that falls on a particular day of the week, or this one if it falls on the same day. fun Date .nextOrSame(dayOfWeek: DayOfWeek ): Date The next date-time that falls on a particular day of the week, or this one if it falls on the same day. fun DateTime .nextOrSame(dayOfWeek: DayOfWeek ): DateTime fun OffsetDateTime .nextOrSame(dayOfWeek: DayOfWeek ): OffsetDateTime fun ZonedDateTime .nextOrSame(dayOfWeek: DayOfWeek ): ZonedDateTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) previous The last date before this one that falls on a particular day of the week. fun Date .previous(dayOfWeek: DayOfWeek ): Date The last date-time before this one that falls on a particular day of the week. fun DateTime .previous(dayOfWeek: DayOfWeek ): DateTime fun OffsetDateTime .previous(dayOfWeek: DayOfWeek ): OffsetDateTime fun ZonedDateTime .previous(dayOfWeek: DayOfWeek ): ZonedDateTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) previousOrSame The last date that falls on a particular day of the week, or this one if it falls on the same day. fun Date .previousOrSame(dayOfWeek: DayOfWeek ): Date The last date-time that falls on a particular day of the week, or this one if it falls on the same day. fun DateTime .previousOrSame(dayOfWeek: DayOfWeek ): DateTime fun OffsetDateTime .previousOrSame(dayOfWeek: DayOfWeek ): OffsetDateTime fun ZonedDateTime .previousOrSame(dayOfWeek: DayOfWeek ): ZonedDateTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) roundedDownTo Return this time, rounded down to match the precision of a given unit . fun Time .roundedDownTo(unit: TimeUnit ): Time fun OffsetTime .roundedDownTo(unit: TimeUnit ): OffsetTime Return this date-time, rounded down to match the precision of a given unit . fun DateTime .roundedDownTo(unit: TimeUnit ): DateTime fun OffsetDateTime .roundedDownTo(unit: TimeUnit ): OffsetDateTime fun ZonedDateTime .roundedDownTo(unit: TimeUnit ): ZonedDateTime Return this instant, rounded down to match the precision of a given unit . fun Instant .roundedDownTo(unit: TimeUnit ): Instant (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) roundedDownToNearest Return this time, rounded down to the nearest hour that satisfies the increment . fun Time .roundedDownToNearest(increment: IntHours ): Time fun OffsetTime .roundedDownToNearest(increment: IntHours ): OffsetTime Return this time, rounded down to the nearest minute that satisfies the increment . fun Time .roundedDownToNearest(increment: IntMinutes ): Time fun OffsetTime .roundedDownToNearest(increment: IntMinutes ): OffsetTime Return this time, rounded down to the nearest second that satisfies the increment . fun Time .roundedDownToNearest(increment: IntSeconds ): Time fun OffsetTime .roundedDownToNearest(increment: IntSeconds ): OffsetTime Return this time, rounded down to the nearest millisecond that satisfies the increment . fun Time .roundedDownToNearest(increment: IntMilliseconds ): Time fun OffsetTime .roundedDownToNearest(increment: IntMilliseconds ): OffsetTime Return this time, rounded down to the nearest microsecond that satisfies the increment . fun Time .roundedDownToNearest(increment: IntMicroseconds ): Time fun OffsetTime .roundedDownToNearest(increment: IntMicroseconds ): OffsetTime Return this time, rounded down to the nearest nanosecond that satisfies the increment . fun Time .roundedDownToNearest(increment: IntNanoseconds ): Time fun OffsetTime .roundedDownToNearest(increment: IntNanoseconds ): OffsetTime Return this date-time, rounded down to the nearest hour that satisfies the increment . fun DateTime .roundedDownToNearest(increment: IntHours ): DateTime fun OffsetDateTime .roundedDownToNearest(increment: IntHours ): OffsetDateTime fun ZonedDateTime .roundedDownToNearest(increment: IntHours ): ZonedDateTime Return this date-time, rounded down to the nearest minute that satisfies the increment . fun DateTime .roundedDownToNearest(increment: IntMinutes ): DateTime fun OffsetDateTime .roundedDownToNearest(increment: IntMinutes ): OffsetDateTime fun ZonedDateTime .roundedDownToNearest(increment: IntMinutes ): ZonedDateTime Return this date-time, rounded down to the nearest second that satisfies the increment . fun DateTime .roundedDownToNearest(increment: IntSeconds ): DateTime fun OffsetDateTime .roundedDownToNearest(increment: IntSeconds ): OffsetDateTime fun ZonedDateTime .roundedDownToNearest(increment: IntSeconds ): ZonedDateTime Return this date-time, rounded down to the nearest millisecond that satisfies the increment . fun DateTime .roundedDownToNearest(increment: IntMilliseconds ): DateTime fun OffsetDateTime .roundedDownToNearest(increment: IntMilliseconds ): OffsetDateTime fun ZonedDateTime .roundedDownToNearest(increment: IntMilliseconds ): ZonedDateTime Return this date-time, rounded down to the nearest microsecond that satisfies the increment . fun DateTime .roundedDownToNearest(increment: IntMicroseconds ): DateTime fun OffsetDateTime .roundedDownToNearest(increment: IntMicroseconds ): OffsetDateTime fun ZonedDateTime .roundedDownToNearest(increment: IntMicroseconds ): ZonedDateTime Return this date-time, rounded down to the nearest nanosecond that satisfies the increment . fun DateTime .roundedDownToNearest(increment: IntNanoseconds ): DateTime fun OffsetDateTime .roundedDownToNearest(increment: IntNanoseconds ): OffsetDateTime fun ZonedDateTime .roundedDownToNearest(increment: IntNanoseconds ): ZonedDateTime Return this instant, rounded down to the nearest hour that satisfies the increment . fun Instant .roundedDownToNearest(increment: IntHours ): Instant Return this instant, rounded down to the nearest minute that satisfies the increment . fun Instant .roundedDownToNearest(increment: IntMinutes ): Instant Return this instant, rounded down to the nearest second that satisfies the increment . fun Instant .roundedDownToNearest(increment: IntSeconds ): Instant Return this instant, rounded down to the nearest millisecond that satisfies the increment . fun Instant .roundedDownToNearest(increment: IntMilliseconds ): Instant Return this instant, rounded down to the nearest microsecond that satisfies the increment . fun Instant .roundedDownToNearest(increment: IntMicroseconds ): Instant Return this instant, rounded down to the nearest nanosecond that satisfies the increment . fun Instant .roundedDownToNearest(increment: IntNanoseconds ): Instant (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) roundedTo Return this time, rounded to match the precision of a given unit . If the time is halfway between whole values of the unit, it will be rounded up. fun Time .roundedTo(unit: TimeUnit ): Time fun OffsetTime .roundedTo(unit: TimeUnit ): OffsetTime Return this date-time, rounded to match the precision of a given unit . If the time is halfway between whole values of the unit, it will be rounded up. fun DateTime .roundedTo(unit: TimeUnit ): DateTime fun OffsetDateTime .roundedTo(unit: TimeUnit ): OffsetDateTime fun ZonedDateTime .roundedTo(unit: TimeUnit ): ZonedDateTime Return this instant, rounded to match the precision of a given unit . If the time is halfway between whole values of the unit, it will be rounded up. fun Instant .roundedTo(unit: TimeUnit ): Instant (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) roundedToNearest Return this time, rounded to the nearest hour that satisfies the increment . If the time is halfway between increments, it will be rounded up. fun Time .roundedToNearest(increment: IntHours ): Time fun OffsetTime .roundedToNearest(increment: IntHours ): OffsetTime Return this time, rounded to the nearest minute that satisfies the increment . If the time is halfway between increments, it will be rounded up. fun Time .roundedToNearest(increment: IntMinutes ): Time fun OffsetTime .roundedToNearest(increment: IntMinutes ): OffsetTime Return this time, rounded to the nearest second that satisfies the increment . If the time is halfway between increments, it will be rounded up. fun Time .roundedToNearest(increment: IntSeconds ): Time fun OffsetTime .roundedToNearest(increment: IntSeconds ): OffsetTime Return this time, rounded to the nearest millisecond that satisfies the increment . If the time is halfway between increments, it will be rounded up. fun Time .roundedToNearest(increment: IntMilliseconds ): Time fun OffsetTime .roundedToNearest(increment: IntMilliseconds ): OffsetTime Return this time, rounded to the nearest microsecond that satisfies the increment . If the time is halfway between increments, it will be rounded up. fun Time .roundedToNearest(increment: IntMicroseconds ): Time fun OffsetTime .roundedToNearest(increment: IntMicroseconds ): OffsetTime Return this time, rounded to the nearest nanosecond that satisfies the increment . If the time is halfway between increments, it will be rounded up. fun Time .roundedToNearest(increment: IntNanoseconds ): Time fun OffsetTime .roundedToNearest(increment: IntNanoseconds ): OffsetTime Return this date-time, rounded to the nearest hour that satisfies the increment . If the time is halfway between increments, it will be rounded up. fun DateTime .roundedToNearest(increment: IntHours ): DateTime fun OffsetDateTime .roundedToNearest(increment: IntHours ): OffsetDateTime fun ZonedDateTime .roundedToNearest(increment: IntHours ): ZonedDateTime Return this date-time, rounded to the nearest minute that satisfies the increment . If the time is halfway between increments, it will be rounded up. fun DateTime .roundedToNearest(increment: IntMinutes ): DateTime fun OffsetDateTime .roundedToNearest(increment: IntMinutes ): OffsetDateTime fun ZonedDateTime .roundedToNearest(increment: IntMinutes ): ZonedDateTime Return this date-time, rounded to the nearest second that satisfies the increment . If the time is halfway between increments, it will be rounded up. fun DateTime .roundedToNearest(increment: IntSeconds ): DateTime fun OffsetDateTime .roundedToNearest(increment: IntSeconds ): OffsetDateTime fun ZonedDateTime .roundedToNearest(increment: IntSeconds ): ZonedDateTime Return this date-time, rounded to the nearest millisecond that satisfies the increment . If the time is halfway between increments, it will be rounded up. fun DateTime .roundedToNearest(increment: IntMilliseconds ): DateTime fun OffsetDateTime .roundedToNearest(increment: IntMilliseconds ): OffsetDateTime fun ZonedDateTime .roundedToNearest(increment: IntMilliseconds ): ZonedDateTime Return this date-time, rounded to the nearest microsecond that satisfies the increment . If the time is halfway between increments, it will be rounded up. fun DateTime .roundedToNearest(increment: IntMicroseconds ): DateTime fun OffsetDateTime .roundedToNearest(increment: IntMicroseconds ): OffsetDateTime fun ZonedDateTime .roundedToNearest(increment: IntMicroseconds ): ZonedDateTime Return this date-time, rounded to the nearest nanosecond that satisfies the increment . If the time is halfway between increments, it will be rounded up. fun DateTime .roundedToNearest(increment: IntNanoseconds ): DateTime fun OffsetDateTime .roundedToNearest(increment: IntNanoseconds ): OffsetDateTime fun ZonedDateTime .roundedToNearest(increment: IntNanoseconds ): ZonedDateTime Return this instant, rounded to the nearest hour that satisfies the increment . If the time is halfway between increments, it will be rounded up. fun Instant .roundedToNearest(increment: IntHours ): Instant Return this instant, rounded to the nearest minute that satisfies the increment . If the time is halfway between increments, it will be rounded up. fun Instant .roundedToNearest(increment: IntMinutes ): Instant Return this instant, rounded to the nearest second that satisfies the increment . If the time is halfway between increments, it will be rounded up. fun Instant .roundedToNearest(increment: IntSeconds ): Instant Return this instant, rounded to the nearest millisecond that satisfies the increment . If the time is halfway between increments, it will be rounded up. fun Instant .roundedToNearest(increment: IntMilliseconds ): Instant Return this instant, rounded to the nearest microsecond that satisfies the increment . If the time is halfway between increments, it will be rounded up. fun Instant .roundedToNearest(increment: IntMicroseconds ): Instant Return this instant, rounded to the nearest nanosecond that satisfies the increment . If the time is halfway between increments, it will be rounded up. fun Instant .roundedToNearest(increment: IntNanoseconds ): Instant (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) roundedUpTo Return this time, rounded up to match the precision of a given unit . fun Time .roundedUpTo(unit: TimeUnit ): Time fun OffsetTime .roundedUpTo(unit: TimeUnit ): OffsetTime Return this date-time, rounded up to match the precision of a given unit . fun DateTime .roundedUpTo(unit: TimeUnit ): DateTime fun OffsetDateTime .roundedUpTo(unit: TimeUnit ): OffsetDateTime fun ZonedDateTime .roundedUpTo(unit: TimeUnit ): ZonedDateTime Return this instant, rounded up to match the precision of a given unit . fun Instant .roundedUpTo(unit: TimeUnit ): Instant (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) roundedUpToNearest Return this time, rounded up to the nearest hour that satisfies the increment . fun Time .roundedUpToNearest(increment: IntHours ): Time fun OffsetTime .roundedUpToNearest(increment: IntHours ): OffsetTime Return this time, rounded up to the nearest minute that satisfies the increment . fun Time .roundedUpToNearest(increment: IntMinutes ): Time fun OffsetTime .roundedUpToNearest(increment: IntMinutes ): OffsetTime Return this time, rounded up to the nearest second that satisfies the increment . fun Time .roundedUpToNearest(increment: IntSeconds ): Time fun OffsetTime .roundedUpToNearest(increment: IntSeconds ): OffsetTime Return this time, rounded up to the nearest millisecond that satisfies the increment . fun Time .roundedUpToNearest(increment: IntMilliseconds ): Time fun OffsetTime .roundedUpToNearest(increment: IntMilliseconds ): OffsetTime Return this time, rounded up to the nearest microsecond that satisfies the increment . fun Time .roundedUpToNearest(increment: IntMicroseconds ): Time fun OffsetTime .roundedUpToNearest(increment: IntMicroseconds ): OffsetTime Return this time, rounded up to the nearest nanosecond that satisfies the increment . fun Time .roundedUpToNearest(increment: IntNanoseconds ): Time fun OffsetTime .roundedUpToNearest(increment: IntNanoseconds ): OffsetTime Return this date-time, rounded up to the nearest hour that satisfies the increment . fun DateTime .roundedUpToNearest(increment: IntHours ): DateTime fun OffsetDateTime .roundedUpToNearest(increment: IntHours ): OffsetDateTime fun ZonedDateTime .roundedUpToNearest(increment: IntHours ): ZonedDateTime Return this date-time, rounded up to the nearest minute that satisfies the increment . fun DateTime .roundedUpToNearest(increment: IntMinutes ): DateTime fun OffsetDateTime .roundedUpToNearest(increment: IntMinutes ): OffsetDateTime fun ZonedDateTime .roundedUpToNearest(increment: IntMinutes ): ZonedDateTime Return this date-time, rounded up to the nearest second that satisfies the increment . fun DateTime .roundedUpToNearest(increment: IntSeconds ): DateTime fun OffsetDateTime .roundedUpToNearest(increment: IntSeconds ): OffsetDateTime fun ZonedDateTime .roundedUpToNearest(increment: IntSeconds ): ZonedDateTime Return this date-time, rounded up to the nearest millisecond that satisfies the increment . fun DateTime .roundedUpToNearest(increment: IntMilliseconds ): DateTime fun OffsetDateTime .roundedUpToNearest(increment: IntMilliseconds ): OffsetDateTime fun ZonedDateTime .roundedUpToNearest(increment: IntMilliseconds ): ZonedDateTime Return this date-time, rounded up to the nearest microsecond that satisfies the increment . fun DateTime .roundedUpToNearest(increment: IntMicroseconds ): DateTime fun OffsetDateTime .roundedUpToNearest(increment: IntMicroseconds ): OffsetDateTime fun ZonedDateTime .roundedUpToNearest(increment: IntMicroseconds ): ZonedDateTime Return this date-time, rounded up to the nearest nanosecond that satisfies the increment . fun DateTime .roundedUpToNearest(increment: IntNanoseconds ): DateTime fun OffsetDateTime .roundedUpToNearest(increment: IntNanoseconds ): OffsetDateTime fun ZonedDateTime .roundedUpToNearest(increment: IntNanoseconds ): ZonedDateTime Return this instant, rounded up to the nearest hour that satisfies the increment . fun Instant .roundedUpToNearest(increment: IntHours ): Instant Return this instant, rounded up to the nearest minute that satisfies the increment . fun Instant .roundedUpToNearest(increment: IntMinutes ): Instant Return this instant, rounded up to the nearest second that satisfies the increment . fun Instant .roundedUpToNearest(increment: IntSeconds ): Instant Return this instant, rounded up to the nearest millisecond that satisfies the increment . fun Instant .roundedUpToNearest(increment: IntMilliseconds ): Instant Return this instant, rounded up to the nearest microsecond that satisfies the increment . fun Instant .roundedUpToNearest(increment: IntMicroseconds ): Instant Return this instant, rounded up to the nearest nanosecond that satisfies the increment . fun Instant .roundedUpToNearest(increment: IntNanoseconds ): Instant startOfWeek The date at the start of the week that this date falls in. The first day of the week will be determined by locale .(jvm) fun Date .startOfWeek(locale: Locale ): Date (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Date .startOfWeek(locale: <ERROR CLASS>): Date The date-time at the first instant of the week that this date-time falls in. The first day of the week will be determined by locale .(jvm) fun DateTime .startOfWeek(locale: Locale ): DateTime (jvm) fun OffsetDateTime .startOfWeek(locale: Locale ): OffsetDateTime (jvm) fun ZonedDateTime .startOfWeek(locale: Locale ): ZonedDateTime (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateTime .startOfWeek(locale: <ERROR CLASS>): DateTime (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun OffsetDateTime .startOfWeek(locale: <ERROR CLASS>): OffsetDateTime (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun ZonedDateTime .startOfWeek(locale: <ERROR CLASS>): ZonedDateTime The date at the start of the week that this date falls in. The first day of the week will be determined by settings .(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Date .startOfWeek(settings: WeekSettings ): Date The date-time at the first instant of the week that this date-time falls in. The first day of the week will be determined by the system settings. This may differ from the first day of the week associated with the default locale on platforms that allow this to be customized.(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateTime .startOfWeek(settings: WeekSettings ): DateTime The date-time at the first instant of the week that this date-time falls in. The first day of the week will be determined by the user's system settings. This may differ from the first day of the week associated with the default locale on platforms that allow the user to customize this.(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun OffsetDateTime .startOfWeek(settings: WeekSettings ): OffsetDateTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun ZonedDateTime .startOfWeek(settings: WeekSettings ): ZonedDateTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) truncatedTo Return this time, rounded down to match the precision of a given unit . fun Time .truncatedTo(unit: TimeUnit ): Time fun OffsetTime .truncatedTo(unit: TimeUnit ): OffsetTime Return this date-time, rounded down to match the precision of a given unit . fun DateTime .truncatedTo(unit: TimeUnit ): DateTime fun OffsetDateTime .truncatedTo(unit: TimeUnit ): OffsetDateTime fun ZonedDateTime .truncatedTo(unit: TimeUnit ): ZonedDateTime Return this instant, rounded down to match the precision of a given unit . fun Instant .truncatedTo(unit: TimeUnit ): Instant (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) truncatedToHours Return a copy of this time, truncated to the hour value. All smaller components will be replaced with zero. fun Time .~~truncatedToHours~~(): Time fun OffsetTime .~~truncatedToHours~~(): OffsetTime Return a copy of this date-time, truncated to the hour value. All smaller components will be replaced with zero. fun DateTime .~~truncatedToHours~~(): DateTime fun ZonedDateTime .~~truncatedToHours~~(): ZonedDateTime fun OffsetDateTime .~~truncatedToHours~~(): OffsetDateTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) truncatedToMicroseconds Return a copy of this time with the nanosecond value truncated to microseconds. fun Time .~~truncatedToMicroseconds~~(): Time fun OffsetTime .~~truncatedToMicroseconds~~(): OffsetTime Return a copy of this date-time with the nanosecond value truncated to microseconds. fun DateTime .~~truncatedToMicroseconds~~(): DateTime fun ZonedDateTime .~~truncatedToMicroseconds~~(): ZonedDateTime fun OffsetDateTime .~~truncatedToMicroseconds~~(): OffsetDateTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) truncatedToMilliseconds Return a copy of this time with the nanosecond value truncated to milliseconds. fun Time .~~truncatedToMilliseconds~~(): Time fun OffsetTime .~~truncatedToMilliseconds~~(): OffsetTime Return a copy of this date-time with the nanosecond value truncated to milliseconds. fun DateTime .~~truncatedToMilliseconds~~(): DateTime fun ZonedDateTime .~~truncatedToMilliseconds~~(): ZonedDateTime fun OffsetDateTime .~~truncatedToMilliseconds~~(): OffsetDateTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) truncatedToMinutes Return a copy of this time, truncated to the minute value. All smaller components will be replaced with zero. fun Time .~~truncatedToMinutes~~(): Time Return a copy of this date-time, truncated to the minute value. ll smaller components will be replaced with zero. fun DateTime .~~truncatedToMinutes~~(): DateTime fun OffsetDateTime .~~truncatedToMinutes~~(): OffsetDateTime Return a copy of this date-time, truncated to the minute value. All smaller components will be replaced with zero. fun ZonedDateTime .~~truncatedToMinutes~~(): ZonedDateTime Return a copy of this time, truncated to the minute value. ll smaller components will be replaced with zero. fun OffsetTime .~~truncatedToMinutes~~(): OffsetTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) truncatedToSeconds Return a copy of this time, truncated to the second value. All smaller components will be replaced with zero. fun Time .~~truncatedToSeconds~~(): Time fun OffsetTime .~~truncatedToSeconds~~(): OffsetTime Return a copy of this date-time, truncated to the second value. All smaller components will be replaced with zero. fun DateTime .~~truncatedToSeconds~~(): DateTime fun ZonedDateTime .~~truncatedToSeconds~~(): ZonedDateTime fun OffsetDateTime .~~truncatedToSeconds~~(): OffsetDateTime weekInterval The interval of the week that this date falls within. The first day of the week will be determined by locale .(jvm) fun DateTime .weekInterval(locale: Locale ): DateTimeInterval (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateTime .weekInterval(locale: <ERROR CLASS>): DateTimeInterval The interval of the week that this date falls within. The first day of the week will be determined by locale . The offset will be preserved in both the start and end date-times.(jvm) fun OffsetDateTime .weekInterval(locale: Locale ): OffsetDateTimeInterval (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun OffsetDateTime .weekInterval(locale: <ERROR CLASS>): OffsetDateTimeInterval The interval of the week that this date falls within. The first day of the week will be determined by locale . The zone will be preserved in both the start and end date-times.(jvm) fun ZonedDateTime .weekInterval(locale: Locale ): ZonedDateTimeInterval (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun ZonedDateTime .weekInterval(locale: <ERROR CLASS>): ZonedDateTimeInterval The interval of the week that this date-time falls within. The first day of the week will be determined by settings .(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateTime .weekInterval(settings: WeekSettings ): DateTimeInterval The interval of the week that this date-time falls within. The first day of the week will be determined by settings . The offset will be preserved in both the start and end date-times.(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun OffsetDateTime .weekInterval(settings: WeekSettings ): OffsetDateTimeInterval The interval of the week that this date-time falls within. The first day of the week will be determined by settings . The zone will be preserved in both the start and end date-times.(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun ZonedDateTime .weekInterval(settings: WeekSettings ): ZonedDateTimeInterval weekRange The date range of the week that this date falls within. The first day of the week will be determined by locale .(jvm) fun Date .weekRange(locale: Locale ): DateRange (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Date .weekRange(locale: <ERROR CLASS>): DateRange The date range of the week that this date falls within. The first day of the week will be determined by settings .(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Date .weekRange(settings: WeekSettings ): DateRange","title":"Functions"},{"location":"api/core/io.islandtime.operators/end-of-month/","text":"core / io.islandtime.operators / endOfMonth endOfMonth (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val Date .endOfMonth: Date The date at the end of the month that this date falls in. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val DateTime .endOfMonth: DateTime val OffsetDateTime .endOfMonth: OffsetDateTime val ZonedDateTime .endOfMonth: ZonedDateTime The date-time at the last representable instant of the month that this date-time falls in.","title":"End of month"},{"location":"api/core/io.islandtime.operators/end-of-month/#endofmonth","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val Date .endOfMonth: Date The date at the end of the month that this date falls in. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val DateTime .endOfMonth: DateTime val OffsetDateTime .endOfMonth: OffsetDateTime val ZonedDateTime .endOfMonth: ZonedDateTime The date-time at the last representable instant of the month that this date-time falls in.","title":"endOfMonth"},{"location":"api/core/io.islandtime.operators/end-of-week/","text":"core / io.islandtime.operators / endOfWeek endOfWeek (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val Date .endOfWeek: Date The date at the end of the ISO week that this date falls in. The ISO week starts on Monday and ends on Sunday. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val DateTime .endOfWeek: DateTime val OffsetDateTime .endOfWeek: OffsetDateTime val ZonedDateTime .endOfWeek: ZonedDateTime The date-time at the last representable instant of the ISO week that this date-time falls in. The ISO week starts on Monday and ends on Sunday. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Date .endOfWeek(settings: WeekSettings ): Date The date at the end of the week that this date falls in. The first day of the week will be determined by settings . The first day of the week will be determined by the system settings. The first day of the week will be determined by the system settings. This may differ from the first day of the week associated with the default locale on platforms that allow this to be customized. (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Date .endOfWeek(locale: <ERROR CLASS>): Date The date at the end of the week that this date falls in. The first day of the week will be determined by locale . (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateTime .endOfWeek(settings: WeekSettings ): DateTime The date-time at the last representable instant of the week that this date-time falls in. The first day of the week will be determined by the system settings. This may differ from the first day of the week associated with the default locale on platforms that allow this to be customized. (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateTime .endOfWeek(locale: <ERROR CLASS>): DateTime fun OffsetDateTime .endOfWeek(locale: <ERROR CLASS>): OffsetDateTime fun ZonedDateTime .endOfWeek(locale: <ERROR CLASS>): ZonedDateTime The date-time at the last representable instant of the week that this date-time falls in. The first day of the week will be determined by locale . (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun OffsetDateTime .endOfWeek(settings: WeekSettings ): OffsetDateTime fun ZonedDateTime .endOfWeek(settings: WeekSettings ): ZonedDateTime The date-time at the last representable instant of the week that this date-time falls in. The first day of the week will be determined by the user's system settings. This may differ from the first day of the week associated with the default locale on platforms that allow the user to customize this. (jvm) fun Date .endOfWeek(locale: Locale ): Date The date at the end of the week that this date falls in. The first day of the week will be determined by locale . (jvm) fun DateTime .endOfWeek(locale: Locale ): DateTime fun OffsetDateTime .endOfWeek(locale: Locale ): OffsetDateTime fun ZonedDateTime .endOfWeek(locale: Locale ): ZonedDateTime The date-time at the last representable instant of the week that this date-time falls in. The first day of the week will be determined by locale .","title":"End of week"},{"location":"api/core/io.islandtime.operators/end-of-week/#endofweek","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val Date .endOfWeek: Date The date at the end of the ISO week that this date falls in. The ISO week starts on Monday and ends on Sunday. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val DateTime .endOfWeek: DateTime val OffsetDateTime .endOfWeek: OffsetDateTime val ZonedDateTime .endOfWeek: ZonedDateTime The date-time at the last representable instant of the ISO week that this date-time falls in. The ISO week starts on Monday and ends on Sunday. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Date .endOfWeek(settings: WeekSettings ): Date The date at the end of the week that this date falls in. The first day of the week will be determined by settings . The first day of the week will be determined by the system settings. The first day of the week will be determined by the system settings. This may differ from the first day of the week associated with the default locale on platforms that allow this to be customized. (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Date .endOfWeek(locale: <ERROR CLASS>): Date The date at the end of the week that this date falls in. The first day of the week will be determined by locale . (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateTime .endOfWeek(settings: WeekSettings ): DateTime The date-time at the last representable instant of the week that this date-time falls in. The first day of the week will be determined by the system settings. This may differ from the first day of the week associated with the default locale on platforms that allow this to be customized. (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateTime .endOfWeek(locale: <ERROR CLASS>): DateTime fun OffsetDateTime .endOfWeek(locale: <ERROR CLASS>): OffsetDateTime fun ZonedDateTime .endOfWeek(locale: <ERROR CLASS>): ZonedDateTime The date-time at the last representable instant of the week that this date-time falls in. The first day of the week will be determined by locale . (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun OffsetDateTime .endOfWeek(settings: WeekSettings ): OffsetDateTime fun ZonedDateTime .endOfWeek(settings: WeekSettings ): ZonedDateTime The date-time at the last representable instant of the week that this date-time falls in. The first day of the week will be determined by the user's system settings. This may differ from the first day of the week associated with the default locale on platforms that allow the user to customize this. (jvm) fun Date .endOfWeek(locale: Locale ): Date The date at the end of the week that this date falls in. The first day of the week will be determined by locale . (jvm) fun DateTime .endOfWeek(locale: Locale ): DateTime fun OffsetDateTime .endOfWeek(locale: Locale ): OffsetDateTime fun ZonedDateTime .endOfWeek(locale: Locale ): ZonedDateTime The date-time at the last representable instant of the week that this date-time falls in. The first day of the week will be determined by locale .","title":"endOfWeek"},{"location":"api/core/io.islandtime.operators/end-of-year/","text":"core / io.islandtime.operators / endOfYear endOfYear (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val Date .endOfYear: Date The date at the end of the year that this date falls in. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val DateTime .endOfYear: DateTime val OffsetDateTime .endOfYear: OffsetDateTime val ZonedDateTime .endOfYear: ZonedDateTime The date-time at the last representable instant of the year that this date-time falls in.","title":"End of year"},{"location":"api/core/io.islandtime.operators/end-of-year/#endofyear","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val Date .endOfYear: Date The date at the end of the year that this date falls in. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val DateTime .endOfYear: DateTime val OffsetDateTime .endOfYear: OffsetDateTime val ZonedDateTime .endOfYear: ZonedDateTime The date-time at the last representable instant of the year that this date-time falls in.","title":"endOfYear"},{"location":"api/core/io.islandtime.operators/next-or-same/","text":"core / io.islandtime.operators / nextOrSame nextOrSame (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Date .nextOrSame(dayOfWeek: DayOfWeek ): Date The next date that falls on a particular day of the week, or this one if it falls on the same day. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateTime .nextOrSame(dayOfWeek: DayOfWeek ): DateTime fun OffsetDateTime .nextOrSame(dayOfWeek: DayOfWeek ): OffsetDateTime fun ZonedDateTime .nextOrSame(dayOfWeek: DayOfWeek ): ZonedDateTime The next date-time that falls on a particular day of the week, or this one if it falls on the same day.","title":"Next or same"},{"location":"api/core/io.islandtime.operators/next-or-same/#nextorsame","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Date .nextOrSame(dayOfWeek: DayOfWeek ): Date The next date that falls on a particular day of the week, or this one if it falls on the same day. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateTime .nextOrSame(dayOfWeek: DayOfWeek ): DateTime fun OffsetDateTime .nextOrSame(dayOfWeek: DayOfWeek ): OffsetDateTime fun ZonedDateTime .nextOrSame(dayOfWeek: DayOfWeek ): ZonedDateTime The next date-time that falls on a particular day of the week, or this one if it falls on the same day.","title":"nextOrSame"},{"location":"api/core/io.islandtime.operators/next/","text":"core / io.islandtime.operators / next next (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Date .next(dayOfWeek: DayOfWeek ): Date The next date after this one that falls on a particular day of the week. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateTime .next(dayOfWeek: DayOfWeek ): DateTime fun OffsetDateTime .next(dayOfWeek: DayOfWeek ): OffsetDateTime fun ZonedDateTime .next(dayOfWeek: DayOfWeek ): ZonedDateTime The next date-time after this one that falls on a particular day of the week.","title":"Next"},{"location":"api/core/io.islandtime.operators/next/#next","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Date .next(dayOfWeek: DayOfWeek ): Date The next date after this one that falls on a particular day of the week. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateTime .next(dayOfWeek: DayOfWeek ): DateTime fun OffsetDateTime .next(dayOfWeek: DayOfWeek ): OffsetDateTime fun ZonedDateTime .next(dayOfWeek: DayOfWeek ): ZonedDateTime The next date-time after this one that falls on a particular day of the week.","title":"next"},{"location":"api/core/io.islandtime.operators/previous-or-same/","text":"core / io.islandtime.operators / previousOrSame previousOrSame (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Date .previousOrSame(dayOfWeek: DayOfWeek ): Date The last date that falls on a particular day of the week, or this one if it falls on the same day. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateTime .previousOrSame(dayOfWeek: DayOfWeek ): DateTime fun OffsetDateTime .previousOrSame(dayOfWeek: DayOfWeek ): OffsetDateTime fun ZonedDateTime .previousOrSame(dayOfWeek: DayOfWeek ): ZonedDateTime The last date-time that falls on a particular day of the week, or this one if it falls on the same day.","title":"Previous or same"},{"location":"api/core/io.islandtime.operators/previous-or-same/#previousorsame","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Date .previousOrSame(dayOfWeek: DayOfWeek ): Date The last date that falls on a particular day of the week, or this one if it falls on the same day. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateTime .previousOrSame(dayOfWeek: DayOfWeek ): DateTime fun OffsetDateTime .previousOrSame(dayOfWeek: DayOfWeek ): OffsetDateTime fun ZonedDateTime .previousOrSame(dayOfWeek: DayOfWeek ): ZonedDateTime The last date-time that falls on a particular day of the week, or this one if it falls on the same day.","title":"previousOrSame"},{"location":"api/core/io.islandtime.operators/previous/","text":"core / io.islandtime.operators / previous previous (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Date .previous(dayOfWeek: DayOfWeek ): Date The last date before this one that falls on a particular day of the week. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateTime .previous(dayOfWeek: DayOfWeek ): DateTime fun OffsetDateTime .previous(dayOfWeek: DayOfWeek ): OffsetDateTime fun ZonedDateTime .previous(dayOfWeek: DayOfWeek ): ZonedDateTime The last date-time before this one that falls on a particular day of the week.","title":"Previous"},{"location":"api/core/io.islandtime.operators/previous/#previous","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Date .previous(dayOfWeek: DayOfWeek ): Date The last date before this one that falls on a particular day of the week. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateTime .previous(dayOfWeek: DayOfWeek ): DateTime fun OffsetDateTime .previous(dayOfWeek: DayOfWeek ): OffsetDateTime fun ZonedDateTime .previous(dayOfWeek: DayOfWeek ): ZonedDateTime The last date-time before this one that falls on a particular day of the week.","title":"previous"},{"location":"api/core/io.islandtime.operators/rounded-down-to-nearest/","text":"core / io.islandtime.operators / roundedDownToNearest roundedDownToNearest (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Time .roundedDownToNearest(increment: IntHours ): Time fun OffsetTime .roundedDownToNearest(increment: IntHours ): OffsetTime Return this time, rounded down to the nearest hour that satisfies the increment . The increment must multiply evenly into a 24-hour day. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Time .roundedDownToNearest(increment: IntMinutes ): Time fun OffsetTime .roundedDownToNearest(increment: IntMinutes ): OffsetTime Return this time, rounded down to the nearest minute that satisfies the increment . The increment must multiply evenly into an hour. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Time .roundedDownToNearest(increment: IntSeconds ): Time fun OffsetTime .roundedDownToNearest(increment: IntSeconds ): OffsetTime Return this time, rounded down to the nearest second that satisfies the increment . The increment must multiply evenly into a minute. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Time .roundedDownToNearest(increment: IntMilliseconds ): Time fun OffsetTime .roundedDownToNearest(increment: IntMilliseconds ): OffsetTime Return this time, rounded down to the nearest millisecond that satisfies the increment . The increment must multiply evenly into a second. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Time .roundedDownToNearest(increment: IntMicroseconds ): Time fun OffsetTime .roundedDownToNearest(increment: IntMicroseconds ): OffsetTime Return this time, rounded down to the nearest microsecond that satisfies the increment . The increment must multiply evenly into a second. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Time .roundedDownToNearest(increment: IntNanoseconds ): Time fun OffsetTime .roundedDownToNearest(increment: IntNanoseconds ): OffsetTime Return this time, rounded down to the nearest nanosecond that satisfies the increment . The increment must multiply evenly into a second. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateTime .roundedDownToNearest(increment: IntHours ): DateTime fun OffsetDateTime .roundedDownToNearest(increment: IntHours ): OffsetDateTime Return this date-time, rounded down to the nearest hour that satisfies the increment . The increment must multiply evenly into a 24-hour day. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateTime .roundedDownToNearest(increment: IntMinutes ): DateTime fun OffsetDateTime .roundedDownToNearest(increment: IntMinutes ): OffsetDateTime Return this date-time, rounded down to the nearest minute that satisfies the increment . The increment must multiply evenly into an hour. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateTime .roundedDownToNearest(increment: IntSeconds ): DateTime fun OffsetDateTime .roundedDownToNearest(increment: IntSeconds ): OffsetDateTime Return this date-time, rounded down to the nearest second that satisfies the increment . The increment must multiply evenly into a minute. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateTime .roundedDownToNearest(increment: IntMilliseconds ): DateTime fun OffsetDateTime .roundedDownToNearest(increment: IntMilliseconds ): OffsetDateTime Return this date-time, rounded down to the nearest millisecond that satisfies the increment . The increment must multiply evenly into a second. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateTime .roundedDownToNearest(increment: IntMicroseconds ): DateTime fun OffsetDateTime .roundedDownToNearest(increment: IntMicroseconds ): OffsetDateTime Return this date-time, rounded down to the nearest microsecond that satisfies the increment . The increment must multiply evenly into a second. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateTime .roundedDownToNearest(increment: IntNanoseconds ): DateTime fun OffsetDateTime .roundedDownToNearest(increment: IntNanoseconds ): OffsetDateTime Return this date-time, rounded down to the nearest nanosecond that satisfies the increment . The increment must multiply evenly into a second. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun ZonedDateTime .roundedDownToNearest(increment: IntHours ): ZonedDateTime Return this date-time, rounded down to the nearest hour that satisfies the increment . The increment must multiply evenly into a 24-hour day. Due to daylight savings time transitions, there a few complexities to be aware of. If the new local time falls within a gap (meaning it doesn't exist), it will be adjusted forward by the length of the gap. If it falls within an overlap (meaning the local time exists twice), the offset will be retained if possible. Otherwise, the earlier offset will be used. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun ZonedDateTime .roundedDownToNearest(increment: IntMinutes ): ZonedDateTime Return this date-time, rounded down to the nearest minute that satisfies the increment . The increment must multiply evenly into an hour. Due to daylight savings time transitions, there a few complexities to be aware of. If the new local time falls within a gap (meaning it doesn't exist), it will be adjusted forward by the length of the gap. If it falls within an overlap (meaning the local time exists twice), the offset will be retained if possible. Otherwise, the earlier offset will be used. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun ZonedDateTime .roundedDownToNearest(increment: IntSeconds ): ZonedDateTime Return this date-time, rounded down to the nearest second that satisfies the increment . The increment must multiply evenly into a minute. Due to daylight savings time transitions, there a few complexities to be aware of. If the new local time falls within a gap (meaning it doesn't exist), it will be adjusted forward by the length of the gap. If it falls within an overlap (meaning the local time exists twice), the offset will be retained if possible. Otherwise, the earlier offset will be used. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun ZonedDateTime .roundedDownToNearest(increment: IntMilliseconds ): ZonedDateTime Return this date-time, rounded down to the nearest millisecond that satisfies the increment . The increment must multiply evenly into a second. Due to daylight savings time transitions, there a few complexities to be aware of. If the new local time falls within a gap (meaning it doesn't exist), it will be adjusted forward by the length of the gap. If it falls within an overlap (meaning the local time exists twice), the offset will be retained if possible. Otherwise, the earlier offset will be used. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun ZonedDateTime .roundedDownToNearest(increment: IntMicroseconds ): ZonedDateTime Return this date-time, rounded down to the nearest microsecond that satisfies the increment . The increment must multiply evenly into a second. Due to daylight savings time transitions, there a few complexities to be aware of. If the new local time falls within a gap (meaning it doesn't exist), it will be adjusted forward by the length of the gap. If it falls within an overlap (meaning the local time exists twice), the offset will be retained if possible. Otherwise, the earlier offset will be used. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun ZonedDateTime .roundedDownToNearest(increment: IntNanoseconds ): ZonedDateTime Return this date-time, rounded down to the nearest nanosecond that satisfies the increment . The increment must multiply evenly into a second. Due to daylight savings time transitions, there a few complexities to be aware of. If the new local time falls within a gap (meaning it doesn't exist), it will be adjusted forward by the length of the gap. If it falls within an overlap (meaning the local time exists twice), the offset will be retained if possible. Otherwise, the earlier offset will be used. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Instant .roundedDownToNearest(increment: IntHours ): Instant Return this instant, rounded down to the nearest hour that satisfies the increment . The increment must multiply evenly into a 24-hour day. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Instant .roundedDownToNearest(increment: IntMinutes ): Instant Return this instant, rounded down to the nearest minute that satisfies the increment . The increment must multiply evenly into an hour. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Instant .roundedDownToNearest(increment: IntSeconds ): Instant Return this instant, rounded down to the nearest second that satisfies the increment . The increment must multiply evenly into a minute. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Instant .roundedDownToNearest(increment: IntMilliseconds ): Instant Return this instant, rounded down to the nearest millisecond that satisfies the increment . The increment must multiply evenly into a second. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Instant .roundedDownToNearest(increment: IntMicroseconds ): Instant Return this instant, rounded down to the nearest microsecond that satisfies the increment . The increment must multiply evenly into a second. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Instant .roundedDownToNearest(increment: IntNanoseconds ): Instant Return this instant, rounded down to the nearest nanosecond that satisfies the increment . The increment must multiply evenly into a second.","title":"Rounded down to nearest"},{"location":"api/core/io.islandtime.operators/rounded-down-to-nearest/#roundeddowntonearest","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Time .roundedDownToNearest(increment: IntHours ): Time fun OffsetTime .roundedDownToNearest(increment: IntHours ): OffsetTime Return this time, rounded down to the nearest hour that satisfies the increment . The increment must multiply evenly into a 24-hour day. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Time .roundedDownToNearest(increment: IntMinutes ): Time fun OffsetTime .roundedDownToNearest(increment: IntMinutes ): OffsetTime Return this time, rounded down to the nearest minute that satisfies the increment . The increment must multiply evenly into an hour. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Time .roundedDownToNearest(increment: IntSeconds ): Time fun OffsetTime .roundedDownToNearest(increment: IntSeconds ): OffsetTime Return this time, rounded down to the nearest second that satisfies the increment . The increment must multiply evenly into a minute. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Time .roundedDownToNearest(increment: IntMilliseconds ): Time fun OffsetTime .roundedDownToNearest(increment: IntMilliseconds ): OffsetTime Return this time, rounded down to the nearest millisecond that satisfies the increment . The increment must multiply evenly into a second. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Time .roundedDownToNearest(increment: IntMicroseconds ): Time fun OffsetTime .roundedDownToNearest(increment: IntMicroseconds ): OffsetTime Return this time, rounded down to the nearest microsecond that satisfies the increment . The increment must multiply evenly into a second. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Time .roundedDownToNearest(increment: IntNanoseconds ): Time fun OffsetTime .roundedDownToNearest(increment: IntNanoseconds ): OffsetTime Return this time, rounded down to the nearest nanosecond that satisfies the increment . The increment must multiply evenly into a second. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateTime .roundedDownToNearest(increment: IntHours ): DateTime fun OffsetDateTime .roundedDownToNearest(increment: IntHours ): OffsetDateTime Return this date-time, rounded down to the nearest hour that satisfies the increment . The increment must multiply evenly into a 24-hour day. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateTime .roundedDownToNearest(increment: IntMinutes ): DateTime fun OffsetDateTime .roundedDownToNearest(increment: IntMinutes ): OffsetDateTime Return this date-time, rounded down to the nearest minute that satisfies the increment . The increment must multiply evenly into an hour. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateTime .roundedDownToNearest(increment: IntSeconds ): DateTime fun OffsetDateTime .roundedDownToNearest(increment: IntSeconds ): OffsetDateTime Return this date-time, rounded down to the nearest second that satisfies the increment . The increment must multiply evenly into a minute. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateTime .roundedDownToNearest(increment: IntMilliseconds ): DateTime fun OffsetDateTime .roundedDownToNearest(increment: IntMilliseconds ): OffsetDateTime Return this date-time, rounded down to the nearest millisecond that satisfies the increment . The increment must multiply evenly into a second. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateTime .roundedDownToNearest(increment: IntMicroseconds ): DateTime fun OffsetDateTime .roundedDownToNearest(increment: IntMicroseconds ): OffsetDateTime Return this date-time, rounded down to the nearest microsecond that satisfies the increment . The increment must multiply evenly into a second. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateTime .roundedDownToNearest(increment: IntNanoseconds ): DateTime fun OffsetDateTime .roundedDownToNearest(increment: IntNanoseconds ): OffsetDateTime Return this date-time, rounded down to the nearest nanosecond that satisfies the increment . The increment must multiply evenly into a second. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun ZonedDateTime .roundedDownToNearest(increment: IntHours ): ZonedDateTime Return this date-time, rounded down to the nearest hour that satisfies the increment . The increment must multiply evenly into a 24-hour day. Due to daylight savings time transitions, there a few complexities to be aware of. If the new local time falls within a gap (meaning it doesn't exist), it will be adjusted forward by the length of the gap. If it falls within an overlap (meaning the local time exists twice), the offset will be retained if possible. Otherwise, the earlier offset will be used. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun ZonedDateTime .roundedDownToNearest(increment: IntMinutes ): ZonedDateTime Return this date-time, rounded down to the nearest minute that satisfies the increment . The increment must multiply evenly into an hour. Due to daylight savings time transitions, there a few complexities to be aware of. If the new local time falls within a gap (meaning it doesn't exist), it will be adjusted forward by the length of the gap. If it falls within an overlap (meaning the local time exists twice), the offset will be retained if possible. Otherwise, the earlier offset will be used. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun ZonedDateTime .roundedDownToNearest(increment: IntSeconds ): ZonedDateTime Return this date-time, rounded down to the nearest second that satisfies the increment . The increment must multiply evenly into a minute. Due to daylight savings time transitions, there a few complexities to be aware of. If the new local time falls within a gap (meaning it doesn't exist), it will be adjusted forward by the length of the gap. If it falls within an overlap (meaning the local time exists twice), the offset will be retained if possible. Otherwise, the earlier offset will be used. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun ZonedDateTime .roundedDownToNearest(increment: IntMilliseconds ): ZonedDateTime Return this date-time, rounded down to the nearest millisecond that satisfies the increment . The increment must multiply evenly into a second. Due to daylight savings time transitions, there a few complexities to be aware of. If the new local time falls within a gap (meaning it doesn't exist), it will be adjusted forward by the length of the gap. If it falls within an overlap (meaning the local time exists twice), the offset will be retained if possible. Otherwise, the earlier offset will be used. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun ZonedDateTime .roundedDownToNearest(increment: IntMicroseconds ): ZonedDateTime Return this date-time, rounded down to the nearest microsecond that satisfies the increment . The increment must multiply evenly into a second. Due to daylight savings time transitions, there a few complexities to be aware of. If the new local time falls within a gap (meaning it doesn't exist), it will be adjusted forward by the length of the gap. If it falls within an overlap (meaning the local time exists twice), the offset will be retained if possible. Otherwise, the earlier offset will be used. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun ZonedDateTime .roundedDownToNearest(increment: IntNanoseconds ): ZonedDateTime Return this date-time, rounded down to the nearest nanosecond that satisfies the increment . The increment must multiply evenly into a second. Due to daylight savings time transitions, there a few complexities to be aware of. If the new local time falls within a gap (meaning it doesn't exist), it will be adjusted forward by the length of the gap. If it falls within an overlap (meaning the local time exists twice), the offset will be retained if possible. Otherwise, the earlier offset will be used. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Instant .roundedDownToNearest(increment: IntHours ): Instant Return this instant, rounded down to the nearest hour that satisfies the increment . The increment must multiply evenly into a 24-hour day. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Instant .roundedDownToNearest(increment: IntMinutes ): Instant Return this instant, rounded down to the nearest minute that satisfies the increment . The increment must multiply evenly into an hour. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Instant .roundedDownToNearest(increment: IntSeconds ): Instant Return this instant, rounded down to the nearest second that satisfies the increment . The increment must multiply evenly into a minute. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Instant .roundedDownToNearest(increment: IntMilliseconds ): Instant Return this instant, rounded down to the nearest millisecond that satisfies the increment . The increment must multiply evenly into a second. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Instant .roundedDownToNearest(increment: IntMicroseconds ): Instant Return this instant, rounded down to the nearest microsecond that satisfies the increment . The increment must multiply evenly into a second. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Instant .roundedDownToNearest(increment: IntNanoseconds ): Instant Return this instant, rounded down to the nearest nanosecond that satisfies the increment . The increment must multiply evenly into a second.","title":"roundedDownToNearest"},{"location":"api/core/io.islandtime.operators/rounded-down-to/","text":"core / io.islandtime.operators / roundedDownTo roundedDownTo (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Time .roundedDownTo(unit: TimeUnit ): Time fun OffsetTime .roundedDownTo(unit: TimeUnit ): OffsetTime Return this time, rounded down to match the precision of a given unit . This is equivalent to truncatedTo . (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateTime .roundedDownTo(unit: TimeUnit ): DateTime fun OffsetDateTime .roundedDownTo(unit: TimeUnit ): OffsetDateTime Return this date-time, rounded down to match the precision of a given unit . This is equivalent to truncatedTo . (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun ZonedDateTime .roundedDownTo(unit: TimeUnit ): ZonedDateTime Return this date-time, rounded down to match the precision of a given unit . Due to daylight savings time transitions, there a few complexities to be aware of. If the new local time falls within a gap (meaning it doesn't exist), it will be adjusted forward by the length of the gap. If it falls within an overlap (meaning the local time exists twice), the offset will be retained if possible. Otherwise, the earlier offset will be used. This is equivalent to truncatedTo . (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Instant .roundedDownTo(unit: TimeUnit ): Instant Return this instant, rounded down to match the precision of a given unit . This is equivalent to truncatedTo .","title":"Rounded down to"},{"location":"api/core/io.islandtime.operators/rounded-down-to/#roundeddownto","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Time .roundedDownTo(unit: TimeUnit ): Time fun OffsetTime .roundedDownTo(unit: TimeUnit ): OffsetTime Return this time, rounded down to match the precision of a given unit . This is equivalent to truncatedTo . (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateTime .roundedDownTo(unit: TimeUnit ): DateTime fun OffsetDateTime .roundedDownTo(unit: TimeUnit ): OffsetDateTime Return this date-time, rounded down to match the precision of a given unit . This is equivalent to truncatedTo . (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun ZonedDateTime .roundedDownTo(unit: TimeUnit ): ZonedDateTime Return this date-time, rounded down to match the precision of a given unit . Due to daylight savings time transitions, there a few complexities to be aware of. If the new local time falls within a gap (meaning it doesn't exist), it will be adjusted forward by the length of the gap. If it falls within an overlap (meaning the local time exists twice), the offset will be retained if possible. Otherwise, the earlier offset will be used. This is equivalent to truncatedTo . (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Instant .roundedDownTo(unit: TimeUnit ): Instant Return this instant, rounded down to match the precision of a given unit . This is equivalent to truncatedTo .","title":"roundedDownTo"},{"location":"api/core/io.islandtime.operators/rounded-to-nearest/","text":"core / io.islandtime.operators / roundedToNearest roundedToNearest (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Time .roundedToNearest(increment: IntHours ): Time fun OffsetTime .roundedToNearest(increment: IntHours ): OffsetTime Return this time, rounded to the nearest hour that satisfies the increment . If the time is halfway between increments, it will be rounded up. The increment must multiply evenly into a 24-hour day. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Time .roundedToNearest(increment: IntMinutes ): Time fun OffsetTime .roundedToNearest(increment: IntMinutes ): OffsetTime Return this time, rounded to the nearest minute that satisfies the increment . If the time is halfway between increments, it will be rounded up. The increment must multiply evenly into an hour. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Time .roundedToNearest(increment: IntSeconds ): Time fun OffsetTime .roundedToNearest(increment: IntSeconds ): OffsetTime Return this time, rounded to the nearest second that satisfies the increment . If the time is halfway between increments, it will be rounded up. The increment must multiply evenly into a minute. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Time .roundedToNearest(increment: IntMilliseconds ): Time fun OffsetTime .roundedToNearest(increment: IntMilliseconds ): OffsetTime Return this time, rounded to the nearest millisecond that satisfies the increment . If the time is halfway between increments, it will be rounded up. The increment must multiply evenly into a second. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Time .roundedToNearest(increment: IntMicroseconds ): Time fun OffsetTime .roundedToNearest(increment: IntMicroseconds ): OffsetTime Return this time, rounded to the nearest microsecond that satisfies the increment . If the time is halfway between increments, it will be rounded up. The increment must multiply evenly into a second. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Time .roundedToNearest(increment: IntNanoseconds ): Time fun OffsetTime .roundedToNearest(increment: IntNanoseconds ): OffsetTime Return this time, rounded to the nearest nanosecond that satisfies the increment . If the time is halfway between increments, it will be rounded up. The increment must multiply evenly into a second. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateTime .roundedToNearest(increment: IntHours ): DateTime fun OffsetDateTime .roundedToNearest(increment: IntHours ): OffsetDateTime Return this date-time, rounded to the nearest hour that satisfies the increment . If the time is halfway between increments, it will be rounded up. The increment must multiply evenly into a 24-hour day. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateTime .roundedToNearest(increment: IntMinutes ): DateTime fun OffsetDateTime .roundedToNearest(increment: IntMinutes ): OffsetDateTime Return this date-time, rounded to the nearest minute that satisfies the increment . If the time is halfway between increments, it will be rounded up. The increment must multiply evenly into an hour. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateTime .roundedToNearest(increment: IntSeconds ): DateTime fun OffsetDateTime .roundedToNearest(increment: IntSeconds ): OffsetDateTime Return this date-time, rounded to the nearest second that satisfies the increment . If the time is halfway between increments, it will be rounded up. The increment must multiply evenly into a minute. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateTime .roundedToNearest(increment: IntMilliseconds ): DateTime fun OffsetDateTime .roundedToNearest(increment: IntMilliseconds ): OffsetDateTime Return this date-time, rounded to the nearest millisecond that satisfies the increment . If the time is halfway between increments, it will be rounded up. The increment must multiply evenly into a second. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateTime .roundedToNearest(increment: IntMicroseconds ): DateTime fun OffsetDateTime .roundedToNearest(increment: IntMicroseconds ): OffsetDateTime Return this date-time, rounded to the nearest microsecond that satisfies the increment . If the time is halfway between increments, it will be rounded up. The increment must multiply evenly into a second. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateTime .roundedToNearest(increment: IntNanoseconds ): DateTime fun OffsetDateTime .roundedToNearest(increment: IntNanoseconds ): OffsetDateTime Return this date-time, rounded to the nearest nanosecond that satisfies the increment . If the time is halfway between increments, it will be rounded up. The increment must multiply evenly into a second. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun ZonedDateTime .roundedToNearest(increment: IntHours ): ZonedDateTime Return this date-time, rounded to the nearest hour that satisfies the increment . If the time is halfway between increments, it will be rounded up. The increment must multiply evenly into a 24-hour day. Due to daylight savings time transitions, there a few complexities to be aware of. If the new local time falls within a gap (meaning it doesn't exist), it will be adjusted forward by the length of the gap. If it falls within an overlap (meaning the local time exists twice), the offset will be retained if possible. Otherwise, the earlier offset will be used. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun ZonedDateTime .roundedToNearest(increment: IntMinutes ): ZonedDateTime Return this date-time, rounded to the nearest minute that satisfies the increment . If the time is halfway between increments, it will be rounded up. The increment must multiply evenly into an hour. Due to daylight savings time transitions, there a few complexities to be aware of. If the new local time falls within a gap (meaning it doesn't exist), it will be adjusted forward by the length of the gap. If it falls within an overlap (meaning the local time exists twice), the offset will be retained if possible. Otherwise, the earlier offset will be used. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun ZonedDateTime .roundedToNearest(increment: IntSeconds ): ZonedDateTime Return this date-time, rounded to the nearest second that satisfies the increment . If the time is halfway between increments, it will be rounded up. The increment must multiply evenly into a minute. Due to daylight savings time transitions, there a few complexities to be aware of. If the new local time falls within a gap (meaning it doesn't exist), it will be adjusted forward by the length of the gap. If it falls within an overlap (meaning the local time exists twice), the offset will be retained if possible. Otherwise, the earlier offset will be used. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun ZonedDateTime .roundedToNearest(increment: IntMilliseconds ): ZonedDateTime Return this date-time, rounded to the nearest millisecond that satisfies the increment . If the time is halfway between increments, it will be rounded up. The increment must multiply evenly into a second. Due to daylight savings time transitions, there a few complexities to be aware of. If the new local time falls within a gap (meaning it doesn't exist), it will be adjusted forward by the length of the gap. If it falls within an overlap (meaning the local time exists twice), the offset will be retained if possible. Otherwise, the earlier offset will be used. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun ZonedDateTime .roundedToNearest(increment: IntMicroseconds ): ZonedDateTime Return this date-time, rounded to the nearest microsecond that satisfies the increment . If the time is halfway between increments, it will be rounded up. The increment must multiply evenly into a second. Due to daylight savings time transitions, there a few complexities to be aware of. If the new local time falls within a gap (meaning it doesn't exist), it will be adjusted forward by the length of the gap. If it falls within an overlap (meaning the local time exists twice), the offset will be retained if possible. Otherwise, the earlier offset will be used. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun ZonedDateTime .roundedToNearest(increment: IntNanoseconds ): ZonedDateTime Return this date-time, rounded to the nearest nanosecond that satisfies the increment . If the time is halfway between increments, it will be rounded up. The increment must multiply evenly into a second. Due to daylight savings time transitions, there a few complexities to be aware of. If the new local time falls within a gap (meaning it doesn't exist), it will be adjusted forward by the length of the gap. If it falls within an overlap (meaning the local time exists twice), the offset will be retained if possible. Otherwise, the earlier offset will be used. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Instant .roundedToNearest(increment: IntHours ): Instant Return this instant, rounded to the nearest hour that satisfies the increment . If the time is halfway between increments, it will be rounded up. The increment must multiply evenly into a 24-hour day. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Instant .roundedToNearest(increment: IntMinutes ): Instant Return this instant, rounded to the nearest minute that satisfies the increment . If the time is halfway between increments, it will be rounded up. The increment must multiply evenly into an hour. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Instant .roundedToNearest(increment: IntSeconds ): Instant Return this instant, rounded to the nearest second that satisfies the increment . If the time is halfway between increments, it will be rounded up. The increment must multiply evenly into a minute. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Instant .roundedToNearest(increment: IntMilliseconds ): Instant Return this instant, rounded to the nearest millisecond that satisfies the increment . If the time is halfway between increments, it will be rounded up. The increment must multiply evenly into a second. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Instant .roundedToNearest(increment: IntMicroseconds ): Instant Return this instant, rounded to the nearest microsecond that satisfies the increment . If the time is halfway between increments, it will be rounded up. The increment must multiply evenly into a second. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Instant .roundedToNearest(increment: IntNanoseconds ): Instant Return this instant, rounded to the nearest nanosecond that satisfies the increment . If the time is halfway between increments, it will be rounded up. The increment must multiply evenly into a second.","title":"Rounded to nearest"},{"location":"api/core/io.islandtime.operators/rounded-to-nearest/#roundedtonearest","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Time .roundedToNearest(increment: IntHours ): Time fun OffsetTime .roundedToNearest(increment: IntHours ): OffsetTime Return this time, rounded to the nearest hour that satisfies the increment . If the time is halfway between increments, it will be rounded up. The increment must multiply evenly into a 24-hour day. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Time .roundedToNearest(increment: IntMinutes ): Time fun OffsetTime .roundedToNearest(increment: IntMinutes ): OffsetTime Return this time, rounded to the nearest minute that satisfies the increment . If the time is halfway between increments, it will be rounded up. The increment must multiply evenly into an hour. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Time .roundedToNearest(increment: IntSeconds ): Time fun OffsetTime .roundedToNearest(increment: IntSeconds ): OffsetTime Return this time, rounded to the nearest second that satisfies the increment . If the time is halfway between increments, it will be rounded up. The increment must multiply evenly into a minute. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Time .roundedToNearest(increment: IntMilliseconds ): Time fun OffsetTime .roundedToNearest(increment: IntMilliseconds ): OffsetTime Return this time, rounded to the nearest millisecond that satisfies the increment . If the time is halfway between increments, it will be rounded up. The increment must multiply evenly into a second. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Time .roundedToNearest(increment: IntMicroseconds ): Time fun OffsetTime .roundedToNearest(increment: IntMicroseconds ): OffsetTime Return this time, rounded to the nearest microsecond that satisfies the increment . If the time is halfway between increments, it will be rounded up. The increment must multiply evenly into a second. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Time .roundedToNearest(increment: IntNanoseconds ): Time fun OffsetTime .roundedToNearest(increment: IntNanoseconds ): OffsetTime Return this time, rounded to the nearest nanosecond that satisfies the increment . If the time is halfway between increments, it will be rounded up. The increment must multiply evenly into a second. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateTime .roundedToNearest(increment: IntHours ): DateTime fun OffsetDateTime .roundedToNearest(increment: IntHours ): OffsetDateTime Return this date-time, rounded to the nearest hour that satisfies the increment . If the time is halfway between increments, it will be rounded up. The increment must multiply evenly into a 24-hour day. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateTime .roundedToNearest(increment: IntMinutes ): DateTime fun OffsetDateTime .roundedToNearest(increment: IntMinutes ): OffsetDateTime Return this date-time, rounded to the nearest minute that satisfies the increment . If the time is halfway between increments, it will be rounded up. The increment must multiply evenly into an hour. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateTime .roundedToNearest(increment: IntSeconds ): DateTime fun OffsetDateTime .roundedToNearest(increment: IntSeconds ): OffsetDateTime Return this date-time, rounded to the nearest second that satisfies the increment . If the time is halfway between increments, it will be rounded up. The increment must multiply evenly into a minute. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateTime .roundedToNearest(increment: IntMilliseconds ): DateTime fun OffsetDateTime .roundedToNearest(increment: IntMilliseconds ): OffsetDateTime Return this date-time, rounded to the nearest millisecond that satisfies the increment . If the time is halfway between increments, it will be rounded up. The increment must multiply evenly into a second. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateTime .roundedToNearest(increment: IntMicroseconds ): DateTime fun OffsetDateTime .roundedToNearest(increment: IntMicroseconds ): OffsetDateTime Return this date-time, rounded to the nearest microsecond that satisfies the increment . If the time is halfway between increments, it will be rounded up. The increment must multiply evenly into a second. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateTime .roundedToNearest(increment: IntNanoseconds ): DateTime fun OffsetDateTime .roundedToNearest(increment: IntNanoseconds ): OffsetDateTime Return this date-time, rounded to the nearest nanosecond that satisfies the increment . If the time is halfway between increments, it will be rounded up. The increment must multiply evenly into a second. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun ZonedDateTime .roundedToNearest(increment: IntHours ): ZonedDateTime Return this date-time, rounded to the nearest hour that satisfies the increment . If the time is halfway between increments, it will be rounded up. The increment must multiply evenly into a 24-hour day. Due to daylight savings time transitions, there a few complexities to be aware of. If the new local time falls within a gap (meaning it doesn't exist), it will be adjusted forward by the length of the gap. If it falls within an overlap (meaning the local time exists twice), the offset will be retained if possible. Otherwise, the earlier offset will be used. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun ZonedDateTime .roundedToNearest(increment: IntMinutes ): ZonedDateTime Return this date-time, rounded to the nearest minute that satisfies the increment . If the time is halfway between increments, it will be rounded up. The increment must multiply evenly into an hour. Due to daylight savings time transitions, there a few complexities to be aware of. If the new local time falls within a gap (meaning it doesn't exist), it will be adjusted forward by the length of the gap. If it falls within an overlap (meaning the local time exists twice), the offset will be retained if possible. Otherwise, the earlier offset will be used. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun ZonedDateTime .roundedToNearest(increment: IntSeconds ): ZonedDateTime Return this date-time, rounded to the nearest second that satisfies the increment . If the time is halfway between increments, it will be rounded up. The increment must multiply evenly into a minute. Due to daylight savings time transitions, there a few complexities to be aware of. If the new local time falls within a gap (meaning it doesn't exist), it will be adjusted forward by the length of the gap. If it falls within an overlap (meaning the local time exists twice), the offset will be retained if possible. Otherwise, the earlier offset will be used. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun ZonedDateTime .roundedToNearest(increment: IntMilliseconds ): ZonedDateTime Return this date-time, rounded to the nearest millisecond that satisfies the increment . If the time is halfway between increments, it will be rounded up. The increment must multiply evenly into a second. Due to daylight savings time transitions, there a few complexities to be aware of. If the new local time falls within a gap (meaning it doesn't exist), it will be adjusted forward by the length of the gap. If it falls within an overlap (meaning the local time exists twice), the offset will be retained if possible. Otherwise, the earlier offset will be used. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun ZonedDateTime .roundedToNearest(increment: IntMicroseconds ): ZonedDateTime Return this date-time, rounded to the nearest microsecond that satisfies the increment . If the time is halfway between increments, it will be rounded up. The increment must multiply evenly into a second. Due to daylight savings time transitions, there a few complexities to be aware of. If the new local time falls within a gap (meaning it doesn't exist), it will be adjusted forward by the length of the gap. If it falls within an overlap (meaning the local time exists twice), the offset will be retained if possible. Otherwise, the earlier offset will be used. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun ZonedDateTime .roundedToNearest(increment: IntNanoseconds ): ZonedDateTime Return this date-time, rounded to the nearest nanosecond that satisfies the increment . If the time is halfway between increments, it will be rounded up. The increment must multiply evenly into a second. Due to daylight savings time transitions, there a few complexities to be aware of. If the new local time falls within a gap (meaning it doesn't exist), it will be adjusted forward by the length of the gap. If it falls within an overlap (meaning the local time exists twice), the offset will be retained if possible. Otherwise, the earlier offset will be used. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Instant .roundedToNearest(increment: IntHours ): Instant Return this instant, rounded to the nearest hour that satisfies the increment . If the time is halfway between increments, it will be rounded up. The increment must multiply evenly into a 24-hour day. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Instant .roundedToNearest(increment: IntMinutes ): Instant Return this instant, rounded to the nearest minute that satisfies the increment . If the time is halfway between increments, it will be rounded up. The increment must multiply evenly into an hour. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Instant .roundedToNearest(increment: IntSeconds ): Instant Return this instant, rounded to the nearest second that satisfies the increment . If the time is halfway between increments, it will be rounded up. The increment must multiply evenly into a minute. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Instant .roundedToNearest(increment: IntMilliseconds ): Instant Return this instant, rounded to the nearest millisecond that satisfies the increment . If the time is halfway between increments, it will be rounded up. The increment must multiply evenly into a second. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Instant .roundedToNearest(increment: IntMicroseconds ): Instant Return this instant, rounded to the nearest microsecond that satisfies the increment . If the time is halfway between increments, it will be rounded up. The increment must multiply evenly into a second. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Instant .roundedToNearest(increment: IntNanoseconds ): Instant Return this instant, rounded to the nearest nanosecond that satisfies the increment . If the time is halfway between increments, it will be rounded up. The increment must multiply evenly into a second.","title":"roundedToNearest"},{"location":"api/core/io.islandtime.operators/rounded-to/","text":"core / io.islandtime.operators / roundedTo roundedTo (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Time .roundedTo(unit: TimeUnit ): Time fun OffsetTime .roundedTo(unit: TimeUnit ): OffsetTime Return this time, rounded to match the precision of a given unit . If the time is halfway between whole values of the unit, it will be rounded up. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateTime .roundedTo(unit: TimeUnit ): DateTime fun OffsetDateTime .roundedTo(unit: TimeUnit ): OffsetDateTime Return this date-time, rounded to match the precision of a given unit . If the time is halfway between whole values of the unit, it will be rounded up. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun ZonedDateTime .roundedTo(unit: TimeUnit ): ZonedDateTime Return this date-time, rounded to match the precision of a given unit . If the time is halfway between whole values of the unit, it will be rounded up. Due to daylight savings time transitions, there a few complexities to be aware of. If the new local time falls within a gap (meaning it doesn't exist), it will be adjusted forward by the length of the gap. If it falls within an overlap (meaning the local time exists twice), the offset will be retained if possible. Otherwise, the earlier offset will be used. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Instant .roundedTo(unit: TimeUnit ): Instant Return this instant, rounded to match the precision of a given unit . If the time is halfway between whole values of the unit, it will be rounded up.","title":"Rounded to"},{"location":"api/core/io.islandtime.operators/rounded-to/#roundedto","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Time .roundedTo(unit: TimeUnit ): Time fun OffsetTime .roundedTo(unit: TimeUnit ): OffsetTime Return this time, rounded to match the precision of a given unit . If the time is halfway between whole values of the unit, it will be rounded up. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateTime .roundedTo(unit: TimeUnit ): DateTime fun OffsetDateTime .roundedTo(unit: TimeUnit ): OffsetDateTime Return this date-time, rounded to match the precision of a given unit . If the time is halfway between whole values of the unit, it will be rounded up. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun ZonedDateTime .roundedTo(unit: TimeUnit ): ZonedDateTime Return this date-time, rounded to match the precision of a given unit . If the time is halfway between whole values of the unit, it will be rounded up. Due to daylight savings time transitions, there a few complexities to be aware of. If the new local time falls within a gap (meaning it doesn't exist), it will be adjusted forward by the length of the gap. If it falls within an overlap (meaning the local time exists twice), the offset will be retained if possible. Otherwise, the earlier offset will be used. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Instant .roundedTo(unit: TimeUnit ): Instant Return this instant, rounded to match the precision of a given unit . If the time is halfway between whole values of the unit, it will be rounded up.","title":"roundedTo"},{"location":"api/core/io.islandtime.operators/rounded-up-to-nearest/","text":"core / io.islandtime.operators / roundedUpToNearest roundedUpToNearest (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Time .roundedUpToNearest(increment: IntHours ): Time fun OffsetTime .roundedUpToNearest(increment: IntHours ): OffsetTime Return this time, rounded up to the nearest hour that satisfies the increment . The increment must multiply evenly into a 24-hour day. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Time .roundedUpToNearest(increment: IntMinutes ): Time fun OffsetTime .roundedUpToNearest(increment: IntMinutes ): OffsetTime Return this time, rounded up to the nearest minute that satisfies the increment . The increment must multiply evenly into an hour. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Time .roundedUpToNearest(increment: IntSeconds ): Time fun OffsetTime .roundedUpToNearest(increment: IntSeconds ): OffsetTime Return this time, rounded up to the nearest second that satisfies the increment . The increment must multiply evenly into a minute. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Time .roundedUpToNearest(increment: IntMilliseconds ): Time fun OffsetTime .roundedUpToNearest(increment: IntMilliseconds ): OffsetTime Return this time, rounded up to the nearest millisecond that satisfies the increment . The increment must multiply evenly into a second. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Time .roundedUpToNearest(increment: IntMicroseconds ): Time fun OffsetTime .roundedUpToNearest(increment: IntMicroseconds ): OffsetTime Return this time, rounded up to the nearest microsecond that satisfies the increment . The increment must multiply evenly into a second. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Time .roundedUpToNearest(increment: IntNanoseconds ): Time fun OffsetTime .roundedUpToNearest(increment: IntNanoseconds ): OffsetTime Return this time, rounded up to the nearest nanosecond that satisfies the increment . The increment must multiply evenly into a second. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateTime .roundedUpToNearest(increment: IntHours ): DateTime fun OffsetDateTime .roundedUpToNearest(increment: IntHours ): OffsetDateTime Return this date-time, rounded up to the nearest hour that satisfies the increment . The increment must multiply evenly into a 24-hour day. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateTime .roundedUpToNearest(increment: IntMinutes ): DateTime fun OffsetDateTime .roundedUpToNearest(increment: IntMinutes ): OffsetDateTime Return this date-time, rounded up to the nearest minute that satisfies the increment . The increment must multiply evenly into an hour. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateTime .roundedUpToNearest(increment: IntSeconds ): DateTime fun OffsetDateTime .roundedUpToNearest(increment: IntSeconds ): OffsetDateTime Return this date-time, rounded up to the nearest second that satisfies the increment . The increment must multiply evenly into a minute. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateTime .roundedUpToNearest(increment: IntMilliseconds ): DateTime fun OffsetDateTime .roundedUpToNearest(increment: IntMilliseconds ): OffsetDateTime Return this date-time, rounded up to the nearest millisecond that satisfies the increment . The increment must multiply evenly into a second. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateTime .roundedUpToNearest(increment: IntMicroseconds ): DateTime fun OffsetDateTime .roundedUpToNearest(increment: IntMicroseconds ): OffsetDateTime Return this date-time, rounded up to the nearest microsecond that satisfies the increment . The increment must multiply evenly into a second. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateTime .roundedUpToNearest(increment: IntNanoseconds ): DateTime fun OffsetDateTime .roundedUpToNearest(increment: IntNanoseconds ): OffsetDateTime Return this date-time, rounded up to the nearest nanosecond that satisfies the increment . The increment must multiply evenly into a second. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun ZonedDateTime .roundedUpToNearest(increment: IntHours ): ZonedDateTime Return this date-time, rounded up to the nearest hour that satisfies the increment . The increment must multiply evenly into a 24-hour day. Due to daylight savings time transitions, there a few complexities to be aware of. If the new local time falls within a gap (meaning it doesn't exist), it will be adjusted forward by the length of the gap. If it falls within an overlap (meaning the local time exists twice), the offset will be retained if possible. Otherwise, the earlier offset will be used. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun ZonedDateTime .roundedUpToNearest(increment: IntMinutes ): ZonedDateTime Return this date-time, rounded up to the nearest minute that satisfies the increment . The increment must multiply evenly into an hour. Due to daylight savings time transitions, there a few complexities to be aware of. If the new local time falls within a gap (meaning it doesn't exist), it will be adjusted forward by the length of the gap. If it falls within an overlap (meaning the local time exists twice), the offset will be retained if possible. Otherwise, the earlier offset will be used. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun ZonedDateTime .roundedUpToNearest(increment: IntSeconds ): ZonedDateTime Return this date-time, rounded up to the nearest second that satisfies the increment . The increment must multiply evenly into a minute. Due to daylight savings time transitions, there a few complexities to be aware of. If the new local time falls within a gap (meaning it doesn't exist), it will be adjusted forward by the length of the gap. If it falls within an overlap (meaning the local time exists twice), the offset will be retained if possible. Otherwise, the earlier offset will be used. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun ZonedDateTime .roundedUpToNearest(increment: IntMilliseconds ): ZonedDateTime Return this date-time, rounded up to the nearest millisecond that satisfies the increment . The increment must multiply evenly into a second. Due to daylight savings time transitions, there a few complexities to be aware of. If the new local time falls within a gap (meaning it doesn't exist), it will be adjusted forward by the length of the gap. If it falls within an overlap (meaning the local time exists twice), the offset will be retained if possible. Otherwise, the earlier offset will be used. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun ZonedDateTime .roundedUpToNearest(increment: IntMicroseconds ): ZonedDateTime Return this date-time, rounded up to the nearest microsecond that satisfies the increment . The increment must multiply evenly into a second. Due to daylight savings time transitions, there a few complexities to be aware of. If the new local time falls within a gap (meaning it doesn't exist), it will be adjusted forward by the length of the gap. If it falls within an overlap (meaning the local time exists twice), the offset will be retained if possible. Otherwise, the earlier offset will be used. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun ZonedDateTime .roundedUpToNearest(increment: IntNanoseconds ): ZonedDateTime Return this date-time, rounded up to the nearest nanosecond that satisfies the increment . The increment must multiply evenly into a second. Due to daylight savings time transitions, there a few complexities to be aware of. If the new local time falls within a gap (meaning it doesn't exist), it will be adjusted forward by the length of the gap. If it falls within an overlap (meaning the local time exists twice), the offset will be retained if possible. Otherwise, the earlier offset will be used. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Instant .roundedUpToNearest(increment: IntHours ): Instant Return this instant, rounded up to the nearest hour that satisfies the increment . The increment must multiply evenly into a 24-hour day. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Instant .roundedUpToNearest(increment: IntMinutes ): Instant Return this instant, rounded up to the nearest minute that satisfies the increment . The increment must multiply evenly into an hour. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Instant .roundedUpToNearest(increment: IntSeconds ): Instant Return this instant, rounded up to the nearest second that satisfies the increment . The increment must multiply evenly into a minute. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Instant .roundedUpToNearest(increment: IntMilliseconds ): Instant Return this instant, rounded up to the nearest millisecond that satisfies the increment . The increment must multiply evenly into a second. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Instant .roundedUpToNearest(increment: IntMicroseconds ): Instant Return this instant, rounded up to the nearest microsecond that satisfies the increment . The increment must multiply evenly into a second. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Instant .roundedUpToNearest(increment: IntNanoseconds ): Instant Return this instant, rounded up to the nearest nanosecond that satisfies the increment . The increment must multiply evenly into a second.","title":"Rounded up to nearest"},{"location":"api/core/io.islandtime.operators/rounded-up-to-nearest/#roundeduptonearest","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Time .roundedUpToNearest(increment: IntHours ): Time fun OffsetTime .roundedUpToNearest(increment: IntHours ): OffsetTime Return this time, rounded up to the nearest hour that satisfies the increment . The increment must multiply evenly into a 24-hour day. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Time .roundedUpToNearest(increment: IntMinutes ): Time fun OffsetTime .roundedUpToNearest(increment: IntMinutes ): OffsetTime Return this time, rounded up to the nearest minute that satisfies the increment . The increment must multiply evenly into an hour. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Time .roundedUpToNearest(increment: IntSeconds ): Time fun OffsetTime .roundedUpToNearest(increment: IntSeconds ): OffsetTime Return this time, rounded up to the nearest second that satisfies the increment . The increment must multiply evenly into a minute. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Time .roundedUpToNearest(increment: IntMilliseconds ): Time fun OffsetTime .roundedUpToNearest(increment: IntMilliseconds ): OffsetTime Return this time, rounded up to the nearest millisecond that satisfies the increment . The increment must multiply evenly into a second. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Time .roundedUpToNearest(increment: IntMicroseconds ): Time fun OffsetTime .roundedUpToNearest(increment: IntMicroseconds ): OffsetTime Return this time, rounded up to the nearest microsecond that satisfies the increment . The increment must multiply evenly into a second. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Time .roundedUpToNearest(increment: IntNanoseconds ): Time fun OffsetTime .roundedUpToNearest(increment: IntNanoseconds ): OffsetTime Return this time, rounded up to the nearest nanosecond that satisfies the increment . The increment must multiply evenly into a second. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateTime .roundedUpToNearest(increment: IntHours ): DateTime fun OffsetDateTime .roundedUpToNearest(increment: IntHours ): OffsetDateTime Return this date-time, rounded up to the nearest hour that satisfies the increment . The increment must multiply evenly into a 24-hour day. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateTime .roundedUpToNearest(increment: IntMinutes ): DateTime fun OffsetDateTime .roundedUpToNearest(increment: IntMinutes ): OffsetDateTime Return this date-time, rounded up to the nearest minute that satisfies the increment . The increment must multiply evenly into an hour. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateTime .roundedUpToNearest(increment: IntSeconds ): DateTime fun OffsetDateTime .roundedUpToNearest(increment: IntSeconds ): OffsetDateTime Return this date-time, rounded up to the nearest second that satisfies the increment . The increment must multiply evenly into a minute. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateTime .roundedUpToNearest(increment: IntMilliseconds ): DateTime fun OffsetDateTime .roundedUpToNearest(increment: IntMilliseconds ): OffsetDateTime Return this date-time, rounded up to the nearest millisecond that satisfies the increment . The increment must multiply evenly into a second. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateTime .roundedUpToNearest(increment: IntMicroseconds ): DateTime fun OffsetDateTime .roundedUpToNearest(increment: IntMicroseconds ): OffsetDateTime Return this date-time, rounded up to the nearest microsecond that satisfies the increment . The increment must multiply evenly into a second. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateTime .roundedUpToNearest(increment: IntNanoseconds ): DateTime fun OffsetDateTime .roundedUpToNearest(increment: IntNanoseconds ): OffsetDateTime Return this date-time, rounded up to the nearest nanosecond that satisfies the increment . The increment must multiply evenly into a second. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun ZonedDateTime .roundedUpToNearest(increment: IntHours ): ZonedDateTime Return this date-time, rounded up to the nearest hour that satisfies the increment . The increment must multiply evenly into a 24-hour day. Due to daylight savings time transitions, there a few complexities to be aware of. If the new local time falls within a gap (meaning it doesn't exist), it will be adjusted forward by the length of the gap. If it falls within an overlap (meaning the local time exists twice), the offset will be retained if possible. Otherwise, the earlier offset will be used. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun ZonedDateTime .roundedUpToNearest(increment: IntMinutes ): ZonedDateTime Return this date-time, rounded up to the nearest minute that satisfies the increment . The increment must multiply evenly into an hour. Due to daylight savings time transitions, there a few complexities to be aware of. If the new local time falls within a gap (meaning it doesn't exist), it will be adjusted forward by the length of the gap. If it falls within an overlap (meaning the local time exists twice), the offset will be retained if possible. Otherwise, the earlier offset will be used. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun ZonedDateTime .roundedUpToNearest(increment: IntSeconds ): ZonedDateTime Return this date-time, rounded up to the nearest second that satisfies the increment . The increment must multiply evenly into a minute. Due to daylight savings time transitions, there a few complexities to be aware of. If the new local time falls within a gap (meaning it doesn't exist), it will be adjusted forward by the length of the gap. If it falls within an overlap (meaning the local time exists twice), the offset will be retained if possible. Otherwise, the earlier offset will be used. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun ZonedDateTime .roundedUpToNearest(increment: IntMilliseconds ): ZonedDateTime Return this date-time, rounded up to the nearest millisecond that satisfies the increment . The increment must multiply evenly into a second. Due to daylight savings time transitions, there a few complexities to be aware of. If the new local time falls within a gap (meaning it doesn't exist), it will be adjusted forward by the length of the gap. If it falls within an overlap (meaning the local time exists twice), the offset will be retained if possible. Otherwise, the earlier offset will be used. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun ZonedDateTime .roundedUpToNearest(increment: IntMicroseconds ): ZonedDateTime Return this date-time, rounded up to the nearest microsecond that satisfies the increment . The increment must multiply evenly into a second. Due to daylight savings time transitions, there a few complexities to be aware of. If the new local time falls within a gap (meaning it doesn't exist), it will be adjusted forward by the length of the gap. If it falls within an overlap (meaning the local time exists twice), the offset will be retained if possible. Otherwise, the earlier offset will be used. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun ZonedDateTime .roundedUpToNearest(increment: IntNanoseconds ): ZonedDateTime Return this date-time, rounded up to the nearest nanosecond that satisfies the increment . The increment must multiply evenly into a second. Due to daylight savings time transitions, there a few complexities to be aware of. If the new local time falls within a gap (meaning it doesn't exist), it will be adjusted forward by the length of the gap. If it falls within an overlap (meaning the local time exists twice), the offset will be retained if possible. Otherwise, the earlier offset will be used. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Instant .roundedUpToNearest(increment: IntHours ): Instant Return this instant, rounded up to the nearest hour that satisfies the increment . The increment must multiply evenly into a 24-hour day. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Instant .roundedUpToNearest(increment: IntMinutes ): Instant Return this instant, rounded up to the nearest minute that satisfies the increment . The increment must multiply evenly into an hour. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Instant .roundedUpToNearest(increment: IntSeconds ): Instant Return this instant, rounded up to the nearest second that satisfies the increment . The increment must multiply evenly into a minute. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Instant .roundedUpToNearest(increment: IntMilliseconds ): Instant Return this instant, rounded up to the nearest millisecond that satisfies the increment . The increment must multiply evenly into a second. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Instant .roundedUpToNearest(increment: IntMicroseconds ): Instant Return this instant, rounded up to the nearest microsecond that satisfies the increment . The increment must multiply evenly into a second. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Instant .roundedUpToNearest(increment: IntNanoseconds ): Instant Return this instant, rounded up to the nearest nanosecond that satisfies the increment . The increment must multiply evenly into a second.","title":"roundedUpToNearest"},{"location":"api/core/io.islandtime.operators/rounded-up-to/","text":"core / io.islandtime.operators / roundedUpTo roundedUpTo (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Time .roundedUpTo(unit: TimeUnit ): Time fun OffsetTime .roundedUpTo(unit: TimeUnit ): OffsetTime Return this time, rounded up to match the precision of a given unit . (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateTime .roundedUpTo(unit: TimeUnit ): DateTime fun OffsetDateTime .roundedUpTo(unit: TimeUnit ): OffsetDateTime Return this date-time, rounded up to match the precision of a given unit . The start of the next day will be returned when the resulting time is after midnight. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun ZonedDateTime .roundedUpTo(unit: TimeUnit ): ZonedDateTime Return this date-time, rounded up to match the precision of a given unit . The start of the next day will be returned when the resulting time is after midnight. Due to daylight savings time transitions, there a few complexities to be aware of. If the new local time falls within a gap (meaning it doesn't exist), it will be adjusted forward by the length of the gap. If it falls within an overlap (meaning the local time exists twice), the offset will be retained if possible. Otherwise, the earlier offset will be used. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Instant .roundedUpTo(unit: TimeUnit ): Instant Return this instant, rounded up to match the precision of a given unit .","title":"Rounded up to"},{"location":"api/core/io.islandtime.operators/rounded-up-to/#roundedupto","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Time .roundedUpTo(unit: TimeUnit ): Time fun OffsetTime .roundedUpTo(unit: TimeUnit ): OffsetTime Return this time, rounded up to match the precision of a given unit . (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateTime .roundedUpTo(unit: TimeUnit ): DateTime fun OffsetDateTime .roundedUpTo(unit: TimeUnit ): OffsetDateTime Return this date-time, rounded up to match the precision of a given unit . The start of the next day will be returned when the resulting time is after midnight. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun ZonedDateTime .roundedUpTo(unit: TimeUnit ): ZonedDateTime Return this date-time, rounded up to match the precision of a given unit . The start of the next day will be returned when the resulting time is after midnight. Due to daylight savings time transitions, there a few complexities to be aware of. If the new local time falls within a gap (meaning it doesn't exist), it will be adjusted forward by the length of the gap. If it falls within an overlap (meaning the local time exists twice), the offset will be retained if possible. Otherwise, the earlier offset will be used. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Instant .roundedUpTo(unit: TimeUnit ): Instant Return this instant, rounded up to match the precision of a given unit .","title":"roundedUpTo"},{"location":"api/core/io.islandtime.operators/start-of-month/","text":"core / io.islandtime.operators / startOfMonth startOfMonth (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val Date .startOfMonth: Date The date at the start of the month that this date falls in. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val DateTime .startOfMonth: DateTime val OffsetDateTime .startOfMonth: OffsetDateTime val ZonedDateTime .startOfMonth: ZonedDateTime The date-time at the first instant of the month that this date-time falls in.","title":"Start of month"},{"location":"api/core/io.islandtime.operators/start-of-month/#startofmonth","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val Date .startOfMonth: Date The date at the start of the month that this date falls in. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val DateTime .startOfMonth: DateTime val OffsetDateTime .startOfMonth: OffsetDateTime val ZonedDateTime .startOfMonth: ZonedDateTime The date-time at the first instant of the month that this date-time falls in.","title":"startOfMonth"},{"location":"api/core/io.islandtime.operators/start-of-week/","text":"core / io.islandtime.operators / startOfWeek startOfWeek (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val Date .startOfWeek: Date The date at the start of the ISO week that this date falls in. The ISO week starts on Monday and ends on Sunday. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val DateTime .startOfWeek: DateTime val OffsetDateTime .startOfWeek: OffsetDateTime val ZonedDateTime .startOfWeek: ZonedDateTime The date-time at the first instant of the ISO week that this date-time falls in. The ISO week starts on Monday and ends on Sunday. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Date .startOfWeek(settings: WeekSettings ): Date The date at the start of the week that this date falls in. The first day of the week will be determined by settings . (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Date .startOfWeek(locale: <ERROR CLASS>): Date The date at the start of the week that this date falls in. The first day of the week will be determined by locale . (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateTime .startOfWeek(settings: WeekSettings ): DateTime The date-time at the first instant of the week that this date-time falls in. The first day of the week will be determined by the system settings. This may differ from the first day of the week associated with the default locale on platforms that allow this to be customized. (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateTime .startOfWeek(locale: <ERROR CLASS>): DateTime fun OffsetDateTime .startOfWeek(locale: <ERROR CLASS>): OffsetDateTime fun ZonedDateTime .startOfWeek(locale: <ERROR CLASS>): ZonedDateTime The date-time at the first instant of the week that this date-time falls in. The first day of the week will be determined by locale . (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun OffsetDateTime .startOfWeek(settings: WeekSettings ): OffsetDateTime fun ZonedDateTime .startOfWeek(settings: WeekSettings ): ZonedDateTime The date-time at the first instant of the week that this date-time falls in. The first day of the week will be determined by the user's system settings. This may differ from the first day of the week associated with the default locale on platforms that allow the user to customize this. (jvm) fun Date .startOfWeek(locale: Locale ): Date The date at the start of the week that this date falls in. The first day of the week will be determined by locale . (jvm) fun DateTime .startOfWeek(locale: Locale ): DateTime fun OffsetDateTime .startOfWeek(locale: Locale ): OffsetDateTime fun ZonedDateTime .startOfWeek(locale: Locale ): ZonedDateTime The date-time at the first instant of the week that this date-time falls in. The first day of the week will be determined by locale .","title":"Start of week"},{"location":"api/core/io.islandtime.operators/start-of-week/#startofweek","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val Date .startOfWeek: Date The date at the start of the ISO week that this date falls in. The ISO week starts on Monday and ends on Sunday. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val DateTime .startOfWeek: DateTime val OffsetDateTime .startOfWeek: OffsetDateTime val ZonedDateTime .startOfWeek: ZonedDateTime The date-time at the first instant of the ISO week that this date-time falls in. The ISO week starts on Monday and ends on Sunday. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Date .startOfWeek(settings: WeekSettings ): Date The date at the start of the week that this date falls in. The first day of the week will be determined by settings . (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Date .startOfWeek(locale: <ERROR CLASS>): Date The date at the start of the week that this date falls in. The first day of the week will be determined by locale . (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateTime .startOfWeek(settings: WeekSettings ): DateTime The date-time at the first instant of the week that this date-time falls in. The first day of the week will be determined by the system settings. This may differ from the first day of the week associated with the default locale on platforms that allow this to be customized. (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateTime .startOfWeek(locale: <ERROR CLASS>): DateTime fun OffsetDateTime .startOfWeek(locale: <ERROR CLASS>): OffsetDateTime fun ZonedDateTime .startOfWeek(locale: <ERROR CLASS>): ZonedDateTime The date-time at the first instant of the week that this date-time falls in. The first day of the week will be determined by locale . (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun OffsetDateTime .startOfWeek(settings: WeekSettings ): OffsetDateTime fun ZonedDateTime .startOfWeek(settings: WeekSettings ): ZonedDateTime The date-time at the first instant of the week that this date-time falls in. The first day of the week will be determined by the user's system settings. This may differ from the first day of the week associated with the default locale on platforms that allow the user to customize this. (jvm) fun Date .startOfWeek(locale: Locale ): Date The date at the start of the week that this date falls in. The first day of the week will be determined by locale . (jvm) fun DateTime .startOfWeek(locale: Locale ): DateTime fun OffsetDateTime .startOfWeek(locale: Locale ): OffsetDateTime fun ZonedDateTime .startOfWeek(locale: Locale ): ZonedDateTime The date-time at the first instant of the week that this date-time falls in. The first day of the week will be determined by locale .","title":"startOfWeek"},{"location":"api/core/io.islandtime.operators/start-of-year/","text":"core / io.islandtime.operators / startOfYear startOfYear (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val Date .startOfYear: Date The date at the start of the year that this date falls in. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val DateTime .startOfYear: DateTime val OffsetDateTime .startOfYear: OffsetDateTime val ZonedDateTime .startOfYear: ZonedDateTime The date-time at the first instant of the year that this date-time falls in.","title":"Start of year"},{"location":"api/core/io.islandtime.operators/start-of-year/#startofyear","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val Date .startOfYear: Date The date at the start of the year that this date falls in. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val DateTime .startOfYear: DateTime val OffsetDateTime .startOfYear: OffsetDateTime val ZonedDateTime .startOfYear: ZonedDateTime The date-time at the first instant of the year that this date-time falls in.","title":"startOfYear"},{"location":"api/core/io.islandtime.operators/truncated-to-hours/","text":"core / io.islandtime.operators / truncatedToHours truncatedToHours (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Time .~~truncatedToHours~~(): Time Deprecated: Use truncatedTo() instead. fun OffsetTime .~~truncatedToHours~~(): OffsetTime Deprecated: Use truncatedTo() instead. Return a copy of this time, truncated to the hour value. All smaller components will be replaced with zero. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateTime .~~truncatedToHours~~(): DateTime Deprecated: Use truncatedTo() instead. fun ZonedDateTime .~~truncatedToHours~~(): ZonedDateTime Deprecated: Use truncatedTo() instead. fun OffsetDateTime .~~truncatedToHours~~(): OffsetDateTime Deprecated: Use truncatedTo() instead. Return a copy of this date-time, truncated to the hour value. All smaller components will be replaced with zero.","title":"Truncated to hours"},{"location":"api/core/io.islandtime.operators/truncated-to-hours/#truncatedtohours","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Time .~~truncatedToHours~~(): Time Deprecated: Use truncatedTo() instead. fun OffsetTime .~~truncatedToHours~~(): OffsetTime Deprecated: Use truncatedTo() instead. Return a copy of this time, truncated to the hour value. All smaller components will be replaced with zero. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateTime .~~truncatedToHours~~(): DateTime Deprecated: Use truncatedTo() instead. fun ZonedDateTime .~~truncatedToHours~~(): ZonedDateTime Deprecated: Use truncatedTo() instead. fun OffsetDateTime .~~truncatedToHours~~(): OffsetDateTime Deprecated: Use truncatedTo() instead. Return a copy of this date-time, truncated to the hour value. All smaller components will be replaced with zero.","title":"truncatedToHours"},{"location":"api/core/io.islandtime.operators/truncated-to-microseconds/","text":"core / io.islandtime.operators / truncatedToMicroseconds truncatedToMicroseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Time .~~truncatedToMicroseconds~~(): Time Deprecated: Use truncatedTo() instead. fun OffsetTime .~~truncatedToMicroseconds~~(): OffsetTime Deprecated: Use truncatedTo() instead. Return a copy of this time with the nanosecond value truncated to microseconds. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateTime .~~truncatedToMicroseconds~~(): DateTime Deprecated: Use truncatedTo() instead. fun ZonedDateTime .~~truncatedToMicroseconds~~(): ZonedDateTime Deprecated: Use truncatedTo() instead. fun OffsetDateTime .~~truncatedToMicroseconds~~(): OffsetDateTime Deprecated: Use truncatedTo() instead. Return a copy of this date-time with the nanosecond value truncated to microseconds.","title":"Truncated to microseconds"},{"location":"api/core/io.islandtime.operators/truncated-to-microseconds/#truncatedtomicroseconds","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Time .~~truncatedToMicroseconds~~(): Time Deprecated: Use truncatedTo() instead. fun OffsetTime .~~truncatedToMicroseconds~~(): OffsetTime Deprecated: Use truncatedTo() instead. Return a copy of this time with the nanosecond value truncated to microseconds. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateTime .~~truncatedToMicroseconds~~(): DateTime Deprecated: Use truncatedTo() instead. fun ZonedDateTime .~~truncatedToMicroseconds~~(): ZonedDateTime Deprecated: Use truncatedTo() instead. fun OffsetDateTime .~~truncatedToMicroseconds~~(): OffsetDateTime Deprecated: Use truncatedTo() instead. Return a copy of this date-time with the nanosecond value truncated to microseconds.","title":"truncatedToMicroseconds"},{"location":"api/core/io.islandtime.operators/truncated-to-milliseconds/","text":"core / io.islandtime.operators / truncatedToMilliseconds truncatedToMilliseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Time .~~truncatedToMilliseconds~~(): Time Deprecated: Use truncatedTo() instead. fun OffsetTime .~~truncatedToMilliseconds~~(): OffsetTime Deprecated: Use truncatedTo() instead. Return a copy of this time with the nanosecond value truncated to milliseconds. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateTime .~~truncatedToMilliseconds~~(): DateTime Deprecated: Use truncatedTo() instead. fun ZonedDateTime .~~truncatedToMilliseconds~~(): ZonedDateTime Deprecated: Use truncatedTo() instead. fun OffsetDateTime .~~truncatedToMilliseconds~~(): OffsetDateTime Deprecated: Use truncatedTo() instead. Return a copy of this date-time with the nanosecond value truncated to milliseconds.","title":"Truncated to milliseconds"},{"location":"api/core/io.islandtime.operators/truncated-to-milliseconds/#truncatedtomilliseconds","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Time .~~truncatedToMilliseconds~~(): Time Deprecated: Use truncatedTo() instead. fun OffsetTime .~~truncatedToMilliseconds~~(): OffsetTime Deprecated: Use truncatedTo() instead. Return a copy of this time with the nanosecond value truncated to milliseconds. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateTime .~~truncatedToMilliseconds~~(): DateTime Deprecated: Use truncatedTo() instead. fun ZonedDateTime .~~truncatedToMilliseconds~~(): ZonedDateTime Deprecated: Use truncatedTo() instead. fun OffsetDateTime .~~truncatedToMilliseconds~~(): OffsetDateTime Deprecated: Use truncatedTo() instead. Return a copy of this date-time with the nanosecond value truncated to milliseconds.","title":"truncatedToMilliseconds"},{"location":"api/core/io.islandtime.operators/truncated-to-minutes/","text":"core / io.islandtime.operators / truncatedToMinutes truncatedToMinutes (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Time .~~truncatedToMinutes~~(): Time Deprecated: Use truncatedTo() instead. Return a copy of this time, truncated to the minute value. All smaller components will be replaced with zero. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateTime .~~truncatedToMinutes~~(): DateTime Deprecated: Use truncatedTo() instead. fun OffsetDateTime .~~truncatedToMinutes~~(): OffsetDateTime Deprecated: Use truncatedTo() instead. Return a copy of this date-time, truncated to the minute value. ll smaller components will be replaced with zero. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun ZonedDateTime .~~truncatedToMinutes~~(): ZonedDateTime Deprecated: Use truncatedTo() instead. Return a copy of this date-time, truncated to the minute value. All smaller components will be replaced with zero. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun OffsetTime .~~truncatedToMinutes~~(): OffsetTime Deprecated: Use truncatedTo() instead. Return a copy of this time, truncated to the minute value. ll smaller components will be replaced with zero.","title":"Truncated to minutes"},{"location":"api/core/io.islandtime.operators/truncated-to-minutes/#truncatedtominutes","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Time .~~truncatedToMinutes~~(): Time Deprecated: Use truncatedTo() instead. Return a copy of this time, truncated to the minute value. All smaller components will be replaced with zero. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateTime .~~truncatedToMinutes~~(): DateTime Deprecated: Use truncatedTo() instead. fun OffsetDateTime .~~truncatedToMinutes~~(): OffsetDateTime Deprecated: Use truncatedTo() instead. Return a copy of this date-time, truncated to the minute value. ll smaller components will be replaced with zero. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun ZonedDateTime .~~truncatedToMinutes~~(): ZonedDateTime Deprecated: Use truncatedTo() instead. Return a copy of this date-time, truncated to the minute value. All smaller components will be replaced with zero. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun OffsetTime .~~truncatedToMinutes~~(): OffsetTime Deprecated: Use truncatedTo() instead. Return a copy of this time, truncated to the minute value. ll smaller components will be replaced with zero.","title":"truncatedToMinutes"},{"location":"api/core/io.islandtime.operators/truncated-to-seconds/","text":"core / io.islandtime.operators / truncatedToSeconds truncatedToSeconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Time .~~truncatedToSeconds~~(): Time Deprecated: Use truncatedTo() instead. fun OffsetTime .~~truncatedToSeconds~~(): OffsetTime Deprecated: Use truncatedTo() instead. Return a copy of this time, truncated to the second value. All smaller components will be replaced with zero. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateTime .~~truncatedToSeconds~~(): DateTime Deprecated: Use truncatedTo() instead. fun ZonedDateTime .~~truncatedToSeconds~~(): ZonedDateTime Deprecated: Use truncatedTo() instead. fun OffsetDateTime .~~truncatedToSeconds~~(): OffsetDateTime Deprecated: Use truncatedTo() instead. Return a copy of this date-time, truncated to the second value. All smaller components will be replaced with zero.","title":"Truncated to seconds"},{"location":"api/core/io.islandtime.operators/truncated-to-seconds/#truncatedtoseconds","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Time .~~truncatedToSeconds~~(): Time Deprecated: Use truncatedTo() instead. fun OffsetTime .~~truncatedToSeconds~~(): OffsetTime Deprecated: Use truncatedTo() instead. Return a copy of this time, truncated to the second value. All smaller components will be replaced with zero. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateTime .~~truncatedToSeconds~~(): DateTime Deprecated: Use truncatedTo() instead. fun ZonedDateTime .~~truncatedToSeconds~~(): ZonedDateTime Deprecated: Use truncatedTo() instead. fun OffsetDateTime .~~truncatedToSeconds~~(): OffsetDateTime Deprecated: Use truncatedTo() instead. Return a copy of this date-time, truncated to the second value. All smaller components will be replaced with zero.","title":"truncatedToSeconds"},{"location":"api/core/io.islandtime.operators/truncated-to/","text":"core / io.islandtime.operators / truncatedTo truncatedTo (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Time .truncatedTo(unit: TimeUnit ): Time fun OffsetTime .truncatedTo(unit: TimeUnit ): OffsetTime Return this time, rounded down to match the precision of a given unit . This is equivalent to roundedDownTo . (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateTime .truncatedTo(unit: TimeUnit ): DateTime fun OffsetDateTime .truncatedTo(unit: TimeUnit ): OffsetDateTime fun ZonedDateTime .truncatedTo(unit: TimeUnit ): ZonedDateTime Return this date-time, rounded down to match the precision of a given unit . This is equivalent to roundedDownTo . (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Instant .truncatedTo(unit: TimeUnit ): Instant Return this instant, rounded down to match the precision of a given unit . This is equivalent to roundedDownTo .","title":"Truncated to"},{"location":"api/core/io.islandtime.operators/truncated-to/#truncatedto","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Time .truncatedTo(unit: TimeUnit ): Time fun OffsetTime .truncatedTo(unit: TimeUnit ): OffsetTime Return this time, rounded down to match the precision of a given unit . This is equivalent to roundedDownTo . (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateTime .truncatedTo(unit: TimeUnit ): DateTime fun OffsetDateTime .truncatedTo(unit: TimeUnit ): OffsetDateTime fun ZonedDateTime .truncatedTo(unit: TimeUnit ): ZonedDateTime Return this date-time, rounded down to match the precision of a given unit . This is equivalent to roundedDownTo . (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Instant .truncatedTo(unit: TimeUnit ): Instant Return this instant, rounded down to match the precision of a given unit . This is equivalent to roundedDownTo .","title":"truncatedTo"},{"location":"api/core/io.islandtime.operators/week-interval/","text":"core / io.islandtime.operators / weekInterval weekInterval (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val DateTime .weekInterval: DateTimeInterval The interval of the ISO week that this date-time falls within. The ISO week starts on Monday and ends on Sunday. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val OffsetDateTime .weekInterval: OffsetDateTimeInterval The interval of the ISO week that this date-time falls within. The offset will be preserved in both the start and end date-times The ISO week starts on Monday and ends on Sunday. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val ZonedDateTime .weekInterval: ZonedDateTimeInterval The interval of the ISO week that this date-time falls within. The zone will be preserved in both the start and end date-times. The ISO week starts on Monday and ends on Sunday. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateTime .weekInterval(settings: WeekSettings ): DateTimeInterval The interval of the week that this date-time falls within. The first day of the week will be determined by settings . (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateTime .weekInterval(locale: <ERROR CLASS>): DateTimeInterval The interval of the week that this date falls within. The first day of the week will be determined by locale . (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun OffsetDateTime .weekInterval(settings: WeekSettings ): OffsetDateTimeInterval The interval of the week that this date-time falls within. The first day of the week will be determined by settings . The offset will be preserved in both the start and end date-times. (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun OffsetDateTime .weekInterval(locale: <ERROR CLASS>): OffsetDateTimeInterval The interval of the week that this date falls within. The first day of the week will be determined by locale . The offset will be preserved in both the start and end date-times. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun ZonedDateTime .weekInterval(settings: WeekSettings ): ZonedDateTimeInterval The interval of the week that this date-time falls within. The first day of the week will be determined by settings . The zone will be preserved in both the start and end date-times. (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun ZonedDateTime .weekInterval(locale: <ERROR CLASS>): ZonedDateTimeInterval The interval of the week that this date falls within. The first day of the week will be determined by locale . The zone will be preserved in both the start and end date-times. (jvm) fun DateTime .weekInterval(locale: Locale ): DateTimeInterval The interval of the week that this date falls within. The first day of the week will be determined by locale . (jvm) fun OffsetDateTime .weekInterval(locale: Locale ): OffsetDateTimeInterval The interval of the week that this date falls within. The first day of the week will be determined by locale . The offset will be preserved in both the start and end date-times. (jvm) fun ZonedDateTime .weekInterval(locale: Locale ): ZonedDateTimeInterval The interval of the week that this date falls within. The first day of the week will be determined by locale . The zone will be preserved in both the start and end date-times.","title":"Week interval"},{"location":"api/core/io.islandtime.operators/week-interval/#weekinterval","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val DateTime .weekInterval: DateTimeInterval The interval of the ISO week that this date-time falls within. The ISO week starts on Monday and ends on Sunday. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val OffsetDateTime .weekInterval: OffsetDateTimeInterval The interval of the ISO week that this date-time falls within. The offset will be preserved in both the start and end date-times The ISO week starts on Monday and ends on Sunday. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val ZonedDateTime .weekInterval: ZonedDateTimeInterval The interval of the ISO week that this date-time falls within. The zone will be preserved in both the start and end date-times. The ISO week starts on Monday and ends on Sunday. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateTime .weekInterval(settings: WeekSettings ): DateTimeInterval The interval of the week that this date-time falls within. The first day of the week will be determined by settings . (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateTime .weekInterval(locale: <ERROR CLASS>): DateTimeInterval The interval of the week that this date falls within. The first day of the week will be determined by locale . (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun OffsetDateTime .weekInterval(settings: WeekSettings ): OffsetDateTimeInterval The interval of the week that this date-time falls within. The first day of the week will be determined by settings . The offset will be preserved in both the start and end date-times. (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun OffsetDateTime .weekInterval(locale: <ERROR CLASS>): OffsetDateTimeInterval The interval of the week that this date falls within. The first day of the week will be determined by locale . The offset will be preserved in both the start and end date-times. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun ZonedDateTime .weekInterval(settings: WeekSettings ): ZonedDateTimeInterval The interval of the week that this date-time falls within. The first day of the week will be determined by settings . The zone will be preserved in both the start and end date-times. (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun ZonedDateTime .weekInterval(locale: <ERROR CLASS>): ZonedDateTimeInterval The interval of the week that this date falls within. The first day of the week will be determined by locale . The zone will be preserved in both the start and end date-times. (jvm) fun DateTime .weekInterval(locale: Locale ): DateTimeInterval The interval of the week that this date falls within. The first day of the week will be determined by locale . (jvm) fun OffsetDateTime .weekInterval(locale: Locale ): OffsetDateTimeInterval The interval of the week that this date falls within. The first day of the week will be determined by locale . The offset will be preserved in both the start and end date-times. (jvm) fun ZonedDateTime .weekInterval(locale: Locale ): ZonedDateTimeInterval The interval of the week that this date falls within. The first day of the week will be determined by locale . The zone will be preserved in both the start and end date-times.","title":"weekInterval"},{"location":"api/core/io.islandtime.operators/week-range/","text":"core / io.islandtime.operators / weekRange weekRange (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val Date .weekRange: DateRange The date range of the ISO week that this date falls within. The ISO week starts on Monday and ends on Sunday. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Date .weekRange(settings: WeekSettings ): DateRange The date range of the week that this date falls within. The first day of the week will be determined by settings . (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Date .weekRange(locale: <ERROR CLASS>): DateRange The date range of the week that this date falls within. The first day of the week will be determined by locale . (jvm) fun Date .weekRange(locale: Locale ): DateRange The date range of the week that this date falls within. The first day of the week will be determined by locale .","title":"Week range"},{"location":"api/core/io.islandtime.operators/week-range/#weekrange","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val Date .weekRange: DateRange The date range of the ISO week that this date falls within. The ISO week starts on Monday and ends on Sunday. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Date .weekRange(settings: WeekSettings ): DateRange The date range of the week that this date falls within. The first day of the week will be determined by settings . (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun Date .weekRange(locale: <ERROR CLASS>): DateRange The date range of the week that this date falls within. The first day of the week will be determined by locale . (jvm) fun Date .weekRange(locale: Locale ): DateRange The date range of the week that this date falls within. The first day of the week will be determined by locale .","title":"weekRange"},{"location":"api/core/io.islandtime.parser/","text":"core / io.islandtime.parser Package io.islandtime.parser A set of predefined parsers that can be used to convert strings in various ISO formats into date-time primitives, along with a parsing engine that provides the ability to define custom parsers. Types Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) DateTimeParseException class DateTimeParseException : DateTimeException (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) DateTimeParser A parser that converts text into a collection of date-time fields that are understood throughout Island Time. abstract class DateTimeParser (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) DateTimeParserBuilder interface DateTimeParserBuilder (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) DateTimeParseResult The result of a parsing operation. data class DateTimeParseResult (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) DateTimeParsers A set of predefined parsers. object DateTimeParsers (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) DateTimeParserSettings Settings that control the parsing behavior. data class DateTimeParserSettings (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) DecimalNumberParserBuilder interface DecimalNumberParserBuilder : NumberParserBuilder (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) GroupedDateTimeParser class GroupedDateTimeParser (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) GroupedDateTimeParserBuilder interface GroupedDateTimeParserBuilder (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) LiteralParserBuilder interface LiteralParserBuilder (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) NumberParserBuilder interface NumberParserBuilder (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) SignParserBuilder interface SignParserBuilder (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) SignStyle enum class SignStyle (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) StringParseAction enum class StringParseAction (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) StringParserBuilder interface StringParserBuilder (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) WholeNumberParserBuilder interface WholeNumberParserBuilder : NumberParserBuilder Annotations Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) DateTimeParserDsl annotation class DateTimeParserDsl Functions Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) amPm Parse the AM or PM of the day from its textual representation. fun DateTimeParserBuilder .amPm(): Unit (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) dateTimeParser Define a custom DateTimeParser . fun dateTimeParser(builder: DateTimeParserBuilder .() -> Unit ): DateTimeParser (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) dayOfMonth Parse a day of the month value with a variable number of digits. fun DateTimeParserBuilder .dayOfMonth(length: IntRange = 1..19, builder: WholeNumberParserBuilder .() -> Unit = {}): Unit Parse a day of the month value with a fixed number of digits. fun DateTimeParserBuilder .dayOfMonth(length: Int , builder: WholeNumberParserBuilder .() -> Unit = {}): Unit (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) dayOfWeekNumber Parse a day of week number with a fixed number of digits. fun DateTimeParserBuilder .dayOfWeekNumber(length: Int = 1, builder: WholeNumberParserBuilder .() -> Unit = {}): Unit (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) dayOfYear Parse a day of the year value with a variable number of digits. fun DateTimeParserBuilder .dayOfYear(length: IntRange = 1..19, builder: WholeNumberParserBuilder .() -> Unit = {}): Unit Parse a day of the year value with a fixed number of digits. fun DateTimeParserBuilder .dayOfYear(length: Int , builder: WholeNumberParserBuilder .() -> Unit = {}): Unit (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) durationOfFractionalSeconds Parse a duration of fractional seconds. fun DateTimeParserBuilder .durationOfFractionalSeconds(wholeLength: IntRange = 1..19, fractionLength: IntRange = 0..9, fractionScale: Int = 9, builder: DecimalNumberParserBuilder .() -> Unit = {}): Unit (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) durationOfHours Parse a duration of whole hours. fun DateTimeParserBuilder .durationOfHours(length: IntRange = 1..19, builder: WholeNumberParserBuilder .() -> Unit = {}): Unit (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) durationOfMinutes Parse a duration of whole minutes. fun DateTimeParserBuilder .durationOfMinutes(length: IntRange = 1..19, builder: WholeNumberParserBuilder .() -> Unit = {}): Unit (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) durationOfSeconds Parse a duration of whole seconds. fun DateTimeParserBuilder .durationOfSeconds(length: IntRange = 1..19, builder: WholeNumberParserBuilder .() -> Unit = {}): Unit (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) era Parse an era from its textual representation in any of the specified styles. fun DateTimeParserBuilder .era(styles: Set < TextStyle >): Unit Parse an era from its textual representation in a specific style. fun DateTimeParserBuilder .era(style: TextStyle ): Unit (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fractionalSecondOfMinute Parse a fractional second of the minute. fun DateTimeParserBuilder .fractionalSecondOfMinute(wholeLength: IntRange = 1..2, fractionLength: IntRange = 0..9, fractionScale: Int = 9, builder: DecimalNumberParserBuilder .() -> Unit = {}): Unit Parse a fractional second of the minute with a fixed number of characters representing the whole second. fun DateTimeParserBuilder .fractionalSecondOfMinute(wholeLength: Int , fractionLength: IntRange = 0..9, fractionScale: Int = 9, builder: DecimalNumberParserBuilder .() -> Unit = {}): Unit (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) groupedDateTimeParser Create a GroupedDateTimeParser . fun groupedDateTimeParser(builder: GroupedDateTimeParserBuilder .() -> Unit ): GroupedDateTimeParser (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) hourOfDay Parse an hour of the day with a variable number of digits. fun DateTimeParserBuilder .hourOfDay(length: IntRange = 1..2, builder: WholeNumberParserBuilder .() -> Unit = {}): Unit Parse an hour of the day with a fixed number of digits. fun DateTimeParserBuilder .hourOfDay(length: Int , builder: WholeNumberParserBuilder .() -> Unit = {}): Unit (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) localizedDayOfWeek Parse a day of the week from its textual representation in any of the specified styles. fun DateTimeParserBuilder .localizedDayOfWeek(styles: Set < TextStyle >): Unit Parse a day of the week from its textual representation in a specific style. fun DateTimeParserBuilder .localizedDayOfWeek(style: TextStyle ): Unit (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) localizedMonth Parse a month from its textual representation in any of the specified styles. fun DateTimeParserBuilder .localizedMonth(styles: Set < TextStyle >): Unit Parse a month from its textual representation in a specific style. fun DateTimeParserBuilder .localizedMonth(style: TextStyle ): Unit (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) minuteOfHour Parse a minute of the hour with a variable number of digits. fun DateTimeParserBuilder .minuteOfHour(length: IntRange = 1..2, builder: WholeNumberParserBuilder .() -> Unit = {}): Unit Parse a minute of the hour with a fixed number of digits. fun DateTimeParserBuilder .minuteOfHour(length: Int , builder: WholeNumberParserBuilder .() -> Unit = {}): Unit (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) monthNumber Parse a month of year value with a variable number of digits. fun DateTimeParserBuilder .monthNumber(length: IntRange = 1..19, builder: WholeNumberParserBuilder .() -> Unit = {}): Unit Parse a month of year number with a fixed number of digits. fun DateTimeParserBuilder .monthNumber(length: Int , builder: WholeNumberParserBuilder .() -> Unit = {}): Unit (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) periodOfDays Parse a period of whole days. fun DateTimeParserBuilder .periodOfDays(length: IntRange = 1..10, builder: WholeNumberParserBuilder .() -> Unit = {}): Unit (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) periodOfMonths Parse a period of whole months. fun DateTimeParserBuilder .periodOfMonths(length: IntRange = 1..10, builder: WholeNumberParserBuilder .() -> Unit = {}): Unit (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) periodOfWeeks Parse a period of whole weeks. fun DateTimeParserBuilder .periodOfWeeks(length: IntRange = 1..10, builder: WholeNumberParserBuilder .() -> Unit = {}): Unit (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) periodOfYears Parse a period of whole years. fun DateTimeParserBuilder .periodOfYears(length: IntRange = 1..10, builder: WholeNumberParserBuilder .() -> Unit = {}): Unit (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) periodSign Parses a number's sign and populates DateTimeField.PERIOD_SIGN with -1L , if negative or 1L , if positive. fun DateTimeParserBuilder .periodSign(): Unit (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) secondOfMinute Parse a second of the minute with a variable number of digits. fun DateTimeParserBuilder .secondOfMinute(length: IntRange = 1..2, builder: WholeNumberParserBuilder .() -> Unit = {}): Unit Parse a second of the minute with a fixed number of digits. fun DateTimeParserBuilder .secondOfMinute(length: Int , builder: WholeNumberParserBuilder .() -> Unit = {}): Unit (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) timeZoneId Parse a time zone region ID. fun DateTimeParserBuilder .timeZoneId(): Unit (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) unboundedDesignator Parses the string \"..\" and populates DateTimeField.IS_UNBOUNDED with 1L . fun DateTimeParserBuilder .unboundedDesignator(): Unit (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) utcDesignator Parses the character 'Z' and populates DateTimeField.UTC_OFFSET_TOTAL_SECONDS with 0L . fun DateTimeParserBuilder .utcDesignator(): Unit (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) utcOffsetHours fun DateTimeParserBuilder .utcOffsetHours(length: Int , builder: WholeNumberParserBuilder .() -> Unit = {}): Unit (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) utcOffsetMinutes fun DateTimeParserBuilder .utcOffsetMinutes(length: Int , builder: WholeNumberParserBuilder .() -> Unit = {}): Unit (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) utcOffsetSeconds fun DateTimeParserBuilder .utcOffsetSeconds(length: Int , builder: WholeNumberParserBuilder .() -> Unit = {}): Unit (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) utcOffsetSign Parses a number's sign and populates DateTimeField.UTC_OFFSET_SIGN with -1L , if negative or 1L , if positive. fun DateTimeParserBuilder .utcOffsetSign(): Unit (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) year Parse a year with a variable number of digits. fun DateTimeParserBuilder .year(length: IntRange = 1..19, builder: WholeNumberParserBuilder .() -> Unit = {}): Unit Parse a year with a fixed number of digits. fun DateTimeParserBuilder .year(length: Int , builder: WholeNumberParserBuilder .() -> Unit = {}): Unit (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) yearOfEra Parse a year of era with a variable number of digits. fun DateTimeParserBuilder .yearOfEra(length: IntRange = 1..19, builder: WholeNumberParserBuilder .() -> Unit = {}): Unit Parse a year of era with a fixed number of digits. fun DateTimeParserBuilder .yearOfEra(length: Int , builder: WholeNumberParserBuilder .() -> Unit = {}): Unit","title":"Index"},{"location":"api/core/io.islandtime.parser/#package-ioislandtimeparser","text":"A set of predefined parsers that can be used to convert strings in various ISO formats into date-time primitives, along with a parsing engine that provides the ability to define custom parsers.","title":"Package io.islandtime.parser"},{"location":"api/core/io.islandtime.parser/#types","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) DateTimeParseException class DateTimeParseException : DateTimeException (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) DateTimeParser A parser that converts text into a collection of date-time fields that are understood throughout Island Time. abstract class DateTimeParser (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) DateTimeParserBuilder interface DateTimeParserBuilder (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) DateTimeParseResult The result of a parsing operation. data class DateTimeParseResult (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) DateTimeParsers A set of predefined parsers. object DateTimeParsers (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) DateTimeParserSettings Settings that control the parsing behavior. data class DateTimeParserSettings (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) DecimalNumberParserBuilder interface DecimalNumberParserBuilder : NumberParserBuilder (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) GroupedDateTimeParser class GroupedDateTimeParser (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) GroupedDateTimeParserBuilder interface GroupedDateTimeParserBuilder (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) LiteralParserBuilder interface LiteralParserBuilder (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) NumberParserBuilder interface NumberParserBuilder (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) SignParserBuilder interface SignParserBuilder (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) SignStyle enum class SignStyle (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) StringParseAction enum class StringParseAction (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) StringParserBuilder interface StringParserBuilder (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) WholeNumberParserBuilder interface WholeNumberParserBuilder : NumberParserBuilder","title":"Types"},{"location":"api/core/io.islandtime.parser/#annotations","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) DateTimeParserDsl annotation class DateTimeParserDsl","title":"Annotations"},{"location":"api/core/io.islandtime.parser/#functions","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) amPm Parse the AM or PM of the day from its textual representation. fun DateTimeParserBuilder .amPm(): Unit (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) dateTimeParser Define a custom DateTimeParser . fun dateTimeParser(builder: DateTimeParserBuilder .() -> Unit ): DateTimeParser (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) dayOfMonth Parse a day of the month value with a variable number of digits. fun DateTimeParserBuilder .dayOfMonth(length: IntRange = 1..19, builder: WholeNumberParserBuilder .() -> Unit = {}): Unit Parse a day of the month value with a fixed number of digits. fun DateTimeParserBuilder .dayOfMonth(length: Int , builder: WholeNumberParserBuilder .() -> Unit = {}): Unit (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) dayOfWeekNumber Parse a day of week number with a fixed number of digits. fun DateTimeParserBuilder .dayOfWeekNumber(length: Int = 1, builder: WholeNumberParserBuilder .() -> Unit = {}): Unit (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) dayOfYear Parse a day of the year value with a variable number of digits. fun DateTimeParserBuilder .dayOfYear(length: IntRange = 1..19, builder: WholeNumberParserBuilder .() -> Unit = {}): Unit Parse a day of the year value with a fixed number of digits. fun DateTimeParserBuilder .dayOfYear(length: Int , builder: WholeNumberParserBuilder .() -> Unit = {}): Unit (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) durationOfFractionalSeconds Parse a duration of fractional seconds. fun DateTimeParserBuilder .durationOfFractionalSeconds(wholeLength: IntRange = 1..19, fractionLength: IntRange = 0..9, fractionScale: Int = 9, builder: DecimalNumberParserBuilder .() -> Unit = {}): Unit (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) durationOfHours Parse a duration of whole hours. fun DateTimeParserBuilder .durationOfHours(length: IntRange = 1..19, builder: WholeNumberParserBuilder .() -> Unit = {}): Unit (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) durationOfMinutes Parse a duration of whole minutes. fun DateTimeParserBuilder .durationOfMinutes(length: IntRange = 1..19, builder: WholeNumberParserBuilder .() -> Unit = {}): Unit (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) durationOfSeconds Parse a duration of whole seconds. fun DateTimeParserBuilder .durationOfSeconds(length: IntRange = 1..19, builder: WholeNumberParserBuilder .() -> Unit = {}): Unit (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) era Parse an era from its textual representation in any of the specified styles. fun DateTimeParserBuilder .era(styles: Set < TextStyle >): Unit Parse an era from its textual representation in a specific style. fun DateTimeParserBuilder .era(style: TextStyle ): Unit (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fractionalSecondOfMinute Parse a fractional second of the minute. fun DateTimeParserBuilder .fractionalSecondOfMinute(wholeLength: IntRange = 1..2, fractionLength: IntRange = 0..9, fractionScale: Int = 9, builder: DecimalNumberParserBuilder .() -> Unit = {}): Unit Parse a fractional second of the minute with a fixed number of characters representing the whole second. fun DateTimeParserBuilder .fractionalSecondOfMinute(wholeLength: Int , fractionLength: IntRange = 0..9, fractionScale: Int = 9, builder: DecimalNumberParserBuilder .() -> Unit = {}): Unit (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) groupedDateTimeParser Create a GroupedDateTimeParser . fun groupedDateTimeParser(builder: GroupedDateTimeParserBuilder .() -> Unit ): GroupedDateTimeParser (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) hourOfDay Parse an hour of the day with a variable number of digits. fun DateTimeParserBuilder .hourOfDay(length: IntRange = 1..2, builder: WholeNumberParserBuilder .() -> Unit = {}): Unit Parse an hour of the day with a fixed number of digits. fun DateTimeParserBuilder .hourOfDay(length: Int , builder: WholeNumberParserBuilder .() -> Unit = {}): Unit (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) localizedDayOfWeek Parse a day of the week from its textual representation in any of the specified styles. fun DateTimeParserBuilder .localizedDayOfWeek(styles: Set < TextStyle >): Unit Parse a day of the week from its textual representation in a specific style. fun DateTimeParserBuilder .localizedDayOfWeek(style: TextStyle ): Unit (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) localizedMonth Parse a month from its textual representation in any of the specified styles. fun DateTimeParserBuilder .localizedMonth(styles: Set < TextStyle >): Unit Parse a month from its textual representation in a specific style. fun DateTimeParserBuilder .localizedMonth(style: TextStyle ): Unit (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) minuteOfHour Parse a minute of the hour with a variable number of digits. fun DateTimeParserBuilder .minuteOfHour(length: IntRange = 1..2, builder: WholeNumberParserBuilder .() -> Unit = {}): Unit Parse a minute of the hour with a fixed number of digits. fun DateTimeParserBuilder .minuteOfHour(length: Int , builder: WholeNumberParserBuilder .() -> Unit = {}): Unit (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) monthNumber Parse a month of year value with a variable number of digits. fun DateTimeParserBuilder .monthNumber(length: IntRange = 1..19, builder: WholeNumberParserBuilder .() -> Unit = {}): Unit Parse a month of year number with a fixed number of digits. fun DateTimeParserBuilder .monthNumber(length: Int , builder: WholeNumberParserBuilder .() -> Unit = {}): Unit (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) periodOfDays Parse a period of whole days. fun DateTimeParserBuilder .periodOfDays(length: IntRange = 1..10, builder: WholeNumberParserBuilder .() -> Unit = {}): Unit (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) periodOfMonths Parse a period of whole months. fun DateTimeParserBuilder .periodOfMonths(length: IntRange = 1..10, builder: WholeNumberParserBuilder .() -> Unit = {}): Unit (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) periodOfWeeks Parse a period of whole weeks. fun DateTimeParserBuilder .periodOfWeeks(length: IntRange = 1..10, builder: WholeNumberParserBuilder .() -> Unit = {}): Unit (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) periodOfYears Parse a period of whole years. fun DateTimeParserBuilder .periodOfYears(length: IntRange = 1..10, builder: WholeNumberParserBuilder .() -> Unit = {}): Unit (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) periodSign Parses a number's sign and populates DateTimeField.PERIOD_SIGN with -1L , if negative or 1L , if positive. fun DateTimeParserBuilder .periodSign(): Unit (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) secondOfMinute Parse a second of the minute with a variable number of digits. fun DateTimeParserBuilder .secondOfMinute(length: IntRange = 1..2, builder: WholeNumberParserBuilder .() -> Unit = {}): Unit Parse a second of the minute with a fixed number of digits. fun DateTimeParserBuilder .secondOfMinute(length: Int , builder: WholeNumberParserBuilder .() -> Unit = {}): Unit (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) timeZoneId Parse a time zone region ID. fun DateTimeParserBuilder .timeZoneId(): Unit (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) unboundedDesignator Parses the string \"..\" and populates DateTimeField.IS_UNBOUNDED with 1L . fun DateTimeParserBuilder .unboundedDesignator(): Unit (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) utcDesignator Parses the character 'Z' and populates DateTimeField.UTC_OFFSET_TOTAL_SECONDS with 0L . fun DateTimeParserBuilder .utcDesignator(): Unit (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) utcOffsetHours fun DateTimeParserBuilder .utcOffsetHours(length: Int , builder: WholeNumberParserBuilder .() -> Unit = {}): Unit (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) utcOffsetMinutes fun DateTimeParserBuilder .utcOffsetMinutes(length: Int , builder: WholeNumberParserBuilder .() -> Unit = {}): Unit (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) utcOffsetSeconds fun DateTimeParserBuilder .utcOffsetSeconds(length: Int , builder: WholeNumberParserBuilder .() -> Unit = {}): Unit (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) utcOffsetSign Parses a number's sign and populates DateTimeField.UTC_OFFSET_SIGN with -1L , if negative or 1L , if positive. fun DateTimeParserBuilder .utcOffsetSign(): Unit (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) year Parse a year with a variable number of digits. fun DateTimeParserBuilder .year(length: IntRange = 1..19, builder: WholeNumberParserBuilder .() -> Unit = {}): Unit Parse a year with a fixed number of digits. fun DateTimeParserBuilder .year(length: Int , builder: WholeNumberParserBuilder .() -> Unit = {}): Unit (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) yearOfEra Parse a year of era with a variable number of digits. fun DateTimeParserBuilder .yearOfEra(length: IntRange = 1..19, builder: WholeNumberParserBuilder .() -> Unit = {}): Unit Parse a year of era with a fixed number of digits. fun DateTimeParserBuilder .yearOfEra(length: Int , builder: WholeNumberParserBuilder .() -> Unit = {}): Unit","title":"Functions"},{"location":"api/core/io.islandtime.parser/am-pm/","text":"core / io.islandtime.parser / amPm amPm (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateTimeParserBuilder .amPm(): Unit Parse the AM or PM of the day from its textual representation. The result will be associated with DateTimeField.AM_PM_OF_DAY .","title":"Am pm"},{"location":"api/core/io.islandtime.parser/am-pm/#ampm","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateTimeParserBuilder .amPm(): Unit Parse the AM or PM of the day from its textual representation. The result will be associated with DateTimeField.AM_PM_OF_DAY .","title":"amPm"},{"location":"api/core/io.islandtime.parser/date-time-parser/","text":"core / io.islandtime.parser / dateTimeParser dateTimeParser (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline fun dateTimeParser(builder: DateTimeParserBuilder .() -> Unit ): DateTimeParser Define a custom DateTimeParser . See Also DateTimeParsers","title":"Date time parser"},{"location":"api/core/io.islandtime.parser/date-time-parser/#datetimeparser","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline fun dateTimeParser(builder: DateTimeParserBuilder .() -> Unit ): DateTimeParser Define a custom DateTimeParser . See Also DateTimeParsers","title":"dateTimeParser"},{"location":"api/core/io.islandtime.parser/day-of-month/","text":"core / io.islandtime.parser / dayOfMonth dayOfMonth (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline fun DateTimeParserBuilder .dayOfMonth(length: IntRange = 1..19, crossinline builder: WholeNumberParserBuilder .() -> Unit = {}): Unit Parse a day of the month value with a variable number of digits. The result will be associated with DateTimeField.DAY_OF_MONTH . (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline fun DateTimeParserBuilder .dayOfMonth(length: Int , crossinline builder: WholeNumberParserBuilder .() -> Unit = {}): Unit Parse a day of the month value with a fixed number of digits. The result will be associated with DateTimeField.DAY_OF_MONTH .","title":"Day of month"},{"location":"api/core/io.islandtime.parser/day-of-month/#dayofmonth","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline fun DateTimeParserBuilder .dayOfMonth(length: IntRange = 1..19, crossinline builder: WholeNumberParserBuilder .() -> Unit = {}): Unit Parse a day of the month value with a variable number of digits. The result will be associated with DateTimeField.DAY_OF_MONTH . (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline fun DateTimeParserBuilder .dayOfMonth(length: Int , crossinline builder: WholeNumberParserBuilder .() -> Unit = {}): Unit Parse a day of the month value with a fixed number of digits. The result will be associated with DateTimeField.DAY_OF_MONTH .","title":"dayOfMonth"},{"location":"api/core/io.islandtime.parser/day-of-week-number/","text":"core / io.islandtime.parser / dayOfWeekNumber dayOfWeekNumber (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline fun DateTimeParserBuilder .dayOfWeekNumber(length: Int = 1, crossinline builder: WholeNumberParserBuilder .() -> Unit = {}): Unit Parse a day of week number with a fixed number of digits. The result will be associated with DateTimeField.DAY_OF_WEEK .","title":"Day of week number"},{"location":"api/core/io.islandtime.parser/day-of-week-number/#dayofweeknumber","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline fun DateTimeParserBuilder .dayOfWeekNumber(length: Int = 1, crossinline builder: WholeNumberParserBuilder .() -> Unit = {}): Unit Parse a day of week number with a fixed number of digits. The result will be associated with DateTimeField.DAY_OF_WEEK .","title":"dayOfWeekNumber"},{"location":"api/core/io.islandtime.parser/day-of-year/","text":"core / io.islandtime.parser / dayOfYear dayOfYear (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline fun DateTimeParserBuilder .dayOfYear(length: IntRange = 1..19, crossinline builder: WholeNumberParserBuilder .() -> Unit = {}): Unit Parse a day of the year value with a variable number of digits. The result will be associated with DateTimeField.DAY_OF_YEAR . (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline fun DateTimeParserBuilder .dayOfYear(length: Int , crossinline builder: WholeNumberParserBuilder .() -> Unit = {}): Unit Parse a day of the year value with a fixed number of digits. The result will be associated with DateTimeField.DAY_OF_YEAR .","title":"Day of year"},{"location":"api/core/io.islandtime.parser/day-of-year/#dayofyear","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline fun DateTimeParserBuilder .dayOfYear(length: IntRange = 1..19, crossinline builder: WholeNumberParserBuilder .() -> Unit = {}): Unit Parse a day of the year value with a variable number of digits. The result will be associated with DateTimeField.DAY_OF_YEAR . (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline fun DateTimeParserBuilder .dayOfYear(length: Int , crossinline builder: WholeNumberParserBuilder .() -> Unit = {}): Unit Parse a day of the year value with a fixed number of digits. The result will be associated with DateTimeField.DAY_OF_YEAR .","title":"dayOfYear"},{"location":"api/core/io.islandtime.parser/duration-of-fractional-seconds/","text":"core / io.islandtime.parser / durationOfFractionalSeconds durationOfFractionalSeconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline fun DateTimeParserBuilder .durationOfFractionalSeconds(wholeLength: IntRange = 1..19, fractionLength: IntRange = 0..9, fractionScale: Int = 9, crossinline builder: DecimalNumberParserBuilder .() -> Unit = {}): Unit Parse a duration of fractional seconds. The number of whole seconds will be associated with DateTimeField.DURATION_OF_SECONDS while any fractional part will be associated with DateTimeField.NANOSECOND_OF_SECOND . The decimal separator character will be determined by the DateTimeParserSettings .","title":"Duration of fractional seconds"},{"location":"api/core/io.islandtime.parser/duration-of-fractional-seconds/#durationoffractionalseconds","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline fun DateTimeParserBuilder .durationOfFractionalSeconds(wholeLength: IntRange = 1..19, fractionLength: IntRange = 0..9, fractionScale: Int = 9, crossinline builder: DecimalNumberParserBuilder .() -> Unit = {}): Unit Parse a duration of fractional seconds. The number of whole seconds will be associated with DateTimeField.DURATION_OF_SECONDS while any fractional part will be associated with DateTimeField.NANOSECOND_OF_SECOND . The decimal separator character will be determined by the DateTimeParserSettings .","title":"durationOfFractionalSeconds"},{"location":"api/core/io.islandtime.parser/duration-of-hours/","text":"core / io.islandtime.parser / durationOfHours durationOfHours (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline fun DateTimeParserBuilder .durationOfHours(length: IntRange = 1..19, crossinline builder: WholeNumberParserBuilder .() -> Unit = {}): Unit Parse a duration of whole hours. The number of hours will be associated with DateTimeField.DURATION_OF_HOURS .","title":"Duration of hours"},{"location":"api/core/io.islandtime.parser/duration-of-hours/#durationofhours","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline fun DateTimeParserBuilder .durationOfHours(length: IntRange = 1..19, crossinline builder: WholeNumberParserBuilder .() -> Unit = {}): Unit Parse a duration of whole hours. The number of hours will be associated with DateTimeField.DURATION_OF_HOURS .","title":"durationOfHours"},{"location":"api/core/io.islandtime.parser/duration-of-minutes/","text":"core / io.islandtime.parser / durationOfMinutes durationOfMinutes (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline fun DateTimeParserBuilder .durationOfMinutes(length: IntRange = 1..19, crossinline builder: WholeNumberParserBuilder .() -> Unit = {}): Unit Parse a duration of whole minutes. The number of minutes will be associated with DateTimeField.DURATION_OF_MINUTES .","title":"Duration of minutes"},{"location":"api/core/io.islandtime.parser/duration-of-minutes/#durationofminutes","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline fun DateTimeParserBuilder .durationOfMinutes(length: IntRange = 1..19, crossinline builder: WholeNumberParserBuilder .() -> Unit = {}): Unit Parse a duration of whole minutes. The number of minutes will be associated with DateTimeField.DURATION_OF_MINUTES .","title":"durationOfMinutes"},{"location":"api/core/io.islandtime.parser/duration-of-seconds/","text":"core / io.islandtime.parser / durationOfSeconds durationOfSeconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline fun DateTimeParserBuilder .durationOfSeconds(length: IntRange = 1..19, crossinline builder: WholeNumberParserBuilder .() -> Unit = {}): Unit Parse a duration of whole seconds. The number of seconds will be associated with DateTimeField.DURATION_OF_SECONDS .","title":"Duration of seconds"},{"location":"api/core/io.islandtime.parser/duration-of-seconds/#durationofseconds","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline fun DateTimeParserBuilder .durationOfSeconds(length: IntRange = 1..19, crossinline builder: WholeNumberParserBuilder .() -> Unit = {}): Unit Parse a duration of whole seconds. The number of seconds will be associated with DateTimeField.DURATION_OF_SECONDS .","title":"durationOfSeconds"},{"location":"api/core/io.islandtime.parser/era/","text":"core / io.islandtime.parser / era era (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateTimeParserBuilder .era(styles: Set < TextStyle >): Unit Parse an era from its textual representation in any of the specified styles. The result will be associated with DateTimeField.ERA . (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateTimeParserBuilder .era(style: TextStyle ): Unit Parse an era from its textual representation in a specific style. The result will be associated with DateTimeField.ERA .","title":"Era"},{"location":"api/core/io.islandtime.parser/era/#era","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateTimeParserBuilder .era(styles: Set < TextStyle >): Unit Parse an era from its textual representation in any of the specified styles. The result will be associated with DateTimeField.ERA . (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateTimeParserBuilder .era(style: TextStyle ): Unit Parse an era from its textual representation in a specific style. The result will be associated with DateTimeField.ERA .","title":"era"},{"location":"api/core/io.islandtime.parser/fractional-second-of-minute/","text":"core / io.islandtime.parser / fractionalSecondOfMinute fractionalSecondOfMinute (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline fun DateTimeParserBuilder .fractionalSecondOfMinute(wholeLength: IntRange = 1..2, fractionLength: IntRange = 0..9, fractionScale: Int = 9, crossinline builder: DecimalNumberParserBuilder .() -> Unit = {}): Unit Parse a fractional second of the minute. The number of whole seconds will be associated with DateTimeField.SECOND_OF_MINUTE while any fractional part will be associated with DateTimeField.NANOSECOND_OF_SECOND . The decimal separator character will be determined by the DateTimeParserSettings . (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline fun DateTimeParserBuilder .fractionalSecondOfMinute(wholeLength: Int , fractionLength: IntRange = 0..9, fractionScale: Int = 9, crossinline builder: DecimalNumberParserBuilder .() -> Unit = {}): Unit Parse a fractional second of the minute with a fixed number of characters representing the whole second. The number of whole seconds will be associated with DateTimeField.SECOND_OF_MINUTE while any fractional part will be associated with DateTimeField.NANOSECOND_OF_SECOND . The decimal separator character will be determined by the DateTimeParserSettings .","title":"Fractional second of minute"},{"location":"api/core/io.islandtime.parser/fractional-second-of-minute/#fractionalsecondofminute","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline fun DateTimeParserBuilder .fractionalSecondOfMinute(wholeLength: IntRange = 1..2, fractionLength: IntRange = 0..9, fractionScale: Int = 9, crossinline builder: DecimalNumberParserBuilder .() -> Unit = {}): Unit Parse a fractional second of the minute. The number of whole seconds will be associated with DateTimeField.SECOND_OF_MINUTE while any fractional part will be associated with DateTimeField.NANOSECOND_OF_SECOND . The decimal separator character will be determined by the DateTimeParserSettings . (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline fun DateTimeParserBuilder .fractionalSecondOfMinute(wholeLength: Int , fractionLength: IntRange = 0..9, fractionScale: Int = 9, crossinline builder: DecimalNumberParserBuilder .() -> Unit = {}): Unit Parse a fractional second of the minute with a fixed number of characters representing the whole second. The number of whole seconds will be associated with DateTimeField.SECOND_OF_MINUTE while any fractional part will be associated with DateTimeField.NANOSECOND_OF_SECOND . The decimal separator character will be determined by the DateTimeParserSettings .","title":"fractionalSecondOfMinute"},{"location":"api/core/io.islandtime.parser/grouped-date-time-parser/","text":"core / io.islandtime.parser / groupedDateTimeParser groupedDateTimeParser (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline fun groupedDateTimeParser(builder: GroupedDateTimeParserBuilder .() -> Unit ): GroupedDateTimeParser Create a GroupedDateTimeParser . A grouped parser is capable of grouping the parsed fields into separate results, allowing fields to be reused within the same character sequence.","title":"Grouped date time parser"},{"location":"api/core/io.islandtime.parser/grouped-date-time-parser/#groupeddatetimeparser","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline fun groupedDateTimeParser(builder: GroupedDateTimeParserBuilder .() -> Unit ): GroupedDateTimeParser Create a GroupedDateTimeParser . A grouped parser is capable of grouping the parsed fields into separate results, allowing fields to be reused within the same character sequence.","title":"groupedDateTimeParser"},{"location":"api/core/io.islandtime.parser/hour-of-day/","text":"core / io.islandtime.parser / hourOfDay hourOfDay (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline fun DateTimeParserBuilder .hourOfDay(length: IntRange = 1..2, crossinline builder: WholeNumberParserBuilder .() -> Unit = {}): Unit Parse an hour of the day with a variable number of digits. The result will be associated with DateTimeField.HOUR_OF_DAY . (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline fun DateTimeParserBuilder .hourOfDay(length: Int , crossinline builder: WholeNumberParserBuilder .() -> Unit = {}): Unit Parse an hour of the day with a fixed number of digits. The result will be associated with DateTimeField.HOUR_OF_DAY .","title":"Hour of day"},{"location":"api/core/io.islandtime.parser/hour-of-day/#hourofday","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline fun DateTimeParserBuilder .hourOfDay(length: IntRange = 1..2, crossinline builder: WholeNumberParserBuilder .() -> Unit = {}): Unit Parse an hour of the day with a variable number of digits. The result will be associated with DateTimeField.HOUR_OF_DAY . (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline fun DateTimeParserBuilder .hourOfDay(length: Int , crossinline builder: WholeNumberParserBuilder .() -> Unit = {}): Unit Parse an hour of the day with a fixed number of digits. The result will be associated with DateTimeField.HOUR_OF_DAY .","title":"hourOfDay"},{"location":"api/core/io.islandtime.parser/localized-day-of-week/","text":"core / io.islandtime.parser / localizedDayOfWeek localizedDayOfWeek (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateTimeParserBuilder .localizedDayOfWeek(styles: Set < TextStyle >): Unit Parse a day of the week from its textual representation in any of the specified styles. The result will be associated with DateTimeField.DAY_OF_WEEK . (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateTimeParserBuilder .localizedDayOfWeek(style: TextStyle ): Unit Parse a day of the week from its textual representation in a specific style. The result will be associated with DateTimeField.DAY_OF_WEEK .","title":"Localized day of week"},{"location":"api/core/io.islandtime.parser/localized-day-of-week/#localizeddayofweek","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateTimeParserBuilder .localizedDayOfWeek(styles: Set < TextStyle >): Unit Parse a day of the week from its textual representation in any of the specified styles. The result will be associated with DateTimeField.DAY_OF_WEEK . (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateTimeParserBuilder .localizedDayOfWeek(style: TextStyle ): Unit Parse a day of the week from its textual representation in a specific style. The result will be associated with DateTimeField.DAY_OF_WEEK .","title":"localizedDayOfWeek"},{"location":"api/core/io.islandtime.parser/localized-month/","text":"core / io.islandtime.parser / localizedMonth localizedMonth (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateTimeParserBuilder .localizedMonth(styles: Set < TextStyle >): Unit Parse a month from its textual representation in any of the specified styles. The result will be associated with DateTimeField.MONTH_OF_YEAR . (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateTimeParserBuilder .localizedMonth(style: TextStyle ): Unit Parse a month from its textual representation in a specific style. The result will be associated with DateTimeField.MONTH_OF_YEAR .","title":"Localized month"},{"location":"api/core/io.islandtime.parser/localized-month/#localizedmonth","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateTimeParserBuilder .localizedMonth(styles: Set < TextStyle >): Unit Parse a month from its textual representation in any of the specified styles. The result will be associated with DateTimeField.MONTH_OF_YEAR . (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateTimeParserBuilder .localizedMonth(style: TextStyle ): Unit Parse a month from its textual representation in a specific style. The result will be associated with DateTimeField.MONTH_OF_YEAR .","title":"localizedMonth"},{"location":"api/core/io.islandtime.parser/minute-of-hour/","text":"core / io.islandtime.parser / minuteOfHour minuteOfHour (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline fun DateTimeParserBuilder .minuteOfHour(length: IntRange = 1..2, crossinline builder: WholeNumberParserBuilder .() -> Unit = {}): Unit Parse a minute of the hour with a variable number of digits. The result will be associated with DateTimeField.MINUTE_OF_HOUR . (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline fun DateTimeParserBuilder .minuteOfHour(length: Int , crossinline builder: WholeNumberParserBuilder .() -> Unit = {}): Unit Parse a minute of the hour with a fixed number of digits. The result will be associated with DateTimeField.MINUTE_OF_HOUR .","title":"Minute of hour"},{"location":"api/core/io.islandtime.parser/minute-of-hour/#minuteofhour","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline fun DateTimeParserBuilder .minuteOfHour(length: IntRange = 1..2, crossinline builder: WholeNumberParserBuilder .() -> Unit = {}): Unit Parse a minute of the hour with a variable number of digits. The result will be associated with DateTimeField.MINUTE_OF_HOUR . (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline fun DateTimeParserBuilder .minuteOfHour(length: Int , crossinline builder: WholeNumberParserBuilder .() -> Unit = {}): Unit Parse a minute of the hour with a fixed number of digits. The result will be associated with DateTimeField.MINUTE_OF_HOUR .","title":"minuteOfHour"},{"location":"api/core/io.islandtime.parser/month-number/","text":"core / io.islandtime.parser / monthNumber monthNumber (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline fun DateTimeParserBuilder .monthNumber(length: IntRange = 1..19, crossinline builder: WholeNumberParserBuilder .() -> Unit = {}): Unit Parse a month of year value with a variable number of digits. The result will be associated with DateTimeField.MONTH_OF_YEAR . (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline fun DateTimeParserBuilder .monthNumber(length: Int , crossinline builder: WholeNumberParserBuilder .() -> Unit = {}): Unit Parse a month of year number with a fixed number of digits. The result will be associated with DateTimeField.MONTH_OF_YEAR .","title":"Month number"},{"location":"api/core/io.islandtime.parser/month-number/#monthnumber","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline fun DateTimeParserBuilder .monthNumber(length: IntRange = 1..19, crossinline builder: WholeNumberParserBuilder .() -> Unit = {}): Unit Parse a month of year value with a variable number of digits. The result will be associated with DateTimeField.MONTH_OF_YEAR . (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline fun DateTimeParserBuilder .monthNumber(length: Int , crossinline builder: WholeNumberParserBuilder .() -> Unit = {}): Unit Parse a month of year number with a fixed number of digits. The result will be associated with DateTimeField.MONTH_OF_YEAR .","title":"monthNumber"},{"location":"api/core/io.islandtime.parser/period-of-days/","text":"core / io.islandtime.parser / periodOfDays periodOfDays (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline fun DateTimeParserBuilder .periodOfDays(length: IntRange = 1..10, crossinline builder: WholeNumberParserBuilder .() -> Unit = {}): Unit Parse a period of whole days. The number of days will be associated with DateTimeField.PERIOD_OF_DAYS .","title":"Period of days"},{"location":"api/core/io.islandtime.parser/period-of-days/#periodofdays","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline fun DateTimeParserBuilder .periodOfDays(length: IntRange = 1..10, crossinline builder: WholeNumberParserBuilder .() -> Unit = {}): Unit Parse a period of whole days. The number of days will be associated with DateTimeField.PERIOD_OF_DAYS .","title":"periodOfDays"},{"location":"api/core/io.islandtime.parser/period-of-months/","text":"core / io.islandtime.parser / periodOfMonths periodOfMonths (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline fun DateTimeParserBuilder .periodOfMonths(length: IntRange = 1..10, crossinline builder: WholeNumberParserBuilder .() -> Unit = {}): Unit Parse a period of whole months. The number of months will be associated with DateTimeField.PERIOD_OF_MONTHS .","title":"Period of months"},{"location":"api/core/io.islandtime.parser/period-of-months/#periodofmonths","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline fun DateTimeParserBuilder .periodOfMonths(length: IntRange = 1..10, crossinline builder: WholeNumberParserBuilder .() -> Unit = {}): Unit Parse a period of whole months. The number of months will be associated with DateTimeField.PERIOD_OF_MONTHS .","title":"periodOfMonths"},{"location":"api/core/io.islandtime.parser/period-of-weeks/","text":"core / io.islandtime.parser / periodOfWeeks periodOfWeeks (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline fun DateTimeParserBuilder .periodOfWeeks(length: IntRange = 1..10, crossinline builder: WholeNumberParserBuilder .() -> Unit = {}): Unit Parse a period of whole weeks. The number of weeks will be associated with DateTimeField.PERIOD_OF_WEEKS .","title":"Period of weeks"},{"location":"api/core/io.islandtime.parser/period-of-weeks/#periodofweeks","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline fun DateTimeParserBuilder .periodOfWeeks(length: IntRange = 1..10, crossinline builder: WholeNumberParserBuilder .() -> Unit = {}): Unit Parse a period of whole weeks. The number of weeks will be associated with DateTimeField.PERIOD_OF_WEEKS .","title":"periodOfWeeks"},{"location":"api/core/io.islandtime.parser/period-of-years/","text":"core / io.islandtime.parser / periodOfYears periodOfYears (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline fun DateTimeParserBuilder .periodOfYears(length: IntRange = 1..10, crossinline builder: WholeNumberParserBuilder .() -> Unit = {}): Unit Parse a period of whole years. The number of years will be associated with DateTimeField.PERIOD_OF_YEARS .","title":"Period of years"},{"location":"api/core/io.islandtime.parser/period-of-years/#periodofyears","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline fun DateTimeParserBuilder .periodOfYears(length: IntRange = 1..10, crossinline builder: WholeNumberParserBuilder .() -> Unit = {}): Unit Parse a period of whole years. The number of years will be associated with DateTimeField.PERIOD_OF_YEARS .","title":"periodOfYears"},{"location":"api/core/io.islandtime.parser/period-sign/","text":"core / io.islandtime.parser / periodSign periodSign (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateTimeParserBuilder .periodSign(): Unit Parses a number's sign and populates DateTimeField.PERIOD_SIGN with -1L , if negative or 1L , if positive.","title":"Period sign"},{"location":"api/core/io.islandtime.parser/period-sign/#periodsign","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateTimeParserBuilder .periodSign(): Unit Parses a number's sign and populates DateTimeField.PERIOD_SIGN with -1L , if negative or 1L , if positive.","title":"periodSign"},{"location":"api/core/io.islandtime.parser/second-of-minute/","text":"core / io.islandtime.parser / secondOfMinute secondOfMinute (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline fun DateTimeParserBuilder .secondOfMinute(length: IntRange = 1..2, crossinline builder: WholeNumberParserBuilder .() -> Unit = {}): Unit Parse a second of the minute with a variable number of digits. The result will be associated with DateTimeField.SECOND_OF_MINUTE . (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline fun DateTimeParserBuilder .secondOfMinute(length: Int , crossinline builder: WholeNumberParserBuilder .() -> Unit = {}): Unit Parse a second of the minute with a fixed number of digits. The result will be associated with DateTimeField.SECOND_OF_MINUTE .","title":"Second of minute"},{"location":"api/core/io.islandtime.parser/second-of-minute/#secondofminute","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline fun DateTimeParserBuilder .secondOfMinute(length: IntRange = 1..2, crossinline builder: WholeNumberParserBuilder .() -> Unit = {}): Unit Parse a second of the minute with a variable number of digits. The result will be associated with DateTimeField.SECOND_OF_MINUTE . (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline fun DateTimeParserBuilder .secondOfMinute(length: Int , crossinline builder: WholeNumberParserBuilder .() -> Unit = {}): Unit Parse a second of the minute with a fixed number of digits. The result will be associated with DateTimeField.SECOND_OF_MINUTE .","title":"secondOfMinute"},{"location":"api/core/io.islandtime.parser/time-zone-id/","text":"core / io.islandtime.parser / timeZoneId timeZoneId (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateTimeParserBuilder .timeZoneId(): Unit Parse a time zone region ID. The format should match that defined in the IANA time zone database. The parsed string will be associated with DateTimeParseResult.timeZoneId .","title":"Time zone id"},{"location":"api/core/io.islandtime.parser/time-zone-id/#timezoneid","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateTimeParserBuilder .timeZoneId(): Unit Parse a time zone region ID. The format should match that defined in the IANA time zone database. The parsed string will be associated with DateTimeParseResult.timeZoneId .","title":"timeZoneId"},{"location":"api/core/io.islandtime.parser/unbounded-designator/","text":"core / io.islandtime.parser / unboundedDesignator unboundedDesignator (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateTimeParserBuilder .unboundedDesignator(): Unit Parses the string \"..\" and populates DateTimeField.IS_UNBOUNDED with 1L .","title":"Unbounded designator"},{"location":"api/core/io.islandtime.parser/unbounded-designator/#unboundeddesignator","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateTimeParserBuilder .unboundedDesignator(): Unit Parses the string \"..\" and populates DateTimeField.IS_UNBOUNDED with 1L .","title":"unboundedDesignator"},{"location":"api/core/io.islandtime.parser/utc-designator/","text":"core / io.islandtime.parser / utcDesignator utcDesignator (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateTimeParserBuilder .utcDesignator(): Unit Parses the character 'Z' and populates DateTimeField.UTC_OFFSET_TOTAL_SECONDS with 0L .","title":"Utc designator"},{"location":"api/core/io.islandtime.parser/utc-designator/#utcdesignator","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateTimeParserBuilder .utcDesignator(): Unit Parses the character 'Z' and populates DateTimeField.UTC_OFFSET_TOTAL_SECONDS with 0L .","title":"utcDesignator"},{"location":"api/core/io.islandtime.parser/utc-offset-hours/","text":"core / io.islandtime.parser / utcOffsetHours utcOffsetHours (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline fun DateTimeParserBuilder .utcOffsetHours(length: Int , crossinline builder: WholeNumberParserBuilder .() -> Unit = {}): Unit","title":"Utc offset hours"},{"location":"api/core/io.islandtime.parser/utc-offset-hours/#utcoffsethours","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline fun DateTimeParserBuilder .utcOffsetHours(length: Int , crossinline builder: WholeNumberParserBuilder .() -> Unit = {}): Unit","title":"utcOffsetHours"},{"location":"api/core/io.islandtime.parser/utc-offset-minutes/","text":"core / io.islandtime.parser / utcOffsetMinutes utcOffsetMinutes (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline fun DateTimeParserBuilder .utcOffsetMinutes(length: Int , crossinline builder: WholeNumberParserBuilder .() -> Unit = {}): Unit","title":"Utc offset minutes"},{"location":"api/core/io.islandtime.parser/utc-offset-minutes/#utcoffsetminutes","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline fun DateTimeParserBuilder .utcOffsetMinutes(length: Int , crossinline builder: WholeNumberParserBuilder .() -> Unit = {}): Unit","title":"utcOffsetMinutes"},{"location":"api/core/io.islandtime.parser/utc-offset-seconds/","text":"core / io.islandtime.parser / utcOffsetSeconds utcOffsetSeconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline fun DateTimeParserBuilder .utcOffsetSeconds(length: Int , crossinline builder: WholeNumberParserBuilder .() -> Unit = {}): Unit","title":"Utc offset seconds"},{"location":"api/core/io.islandtime.parser/utc-offset-seconds/#utcoffsetseconds","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline fun DateTimeParserBuilder .utcOffsetSeconds(length: Int , crossinline builder: WholeNumberParserBuilder .() -> Unit = {}): Unit","title":"utcOffsetSeconds"},{"location":"api/core/io.islandtime.parser/utc-offset-sign/","text":"core / io.islandtime.parser / utcOffsetSign utcOffsetSign (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateTimeParserBuilder .utcOffsetSign(): Unit Parses a number's sign and populates DateTimeField.UTC_OFFSET_SIGN with -1L , if negative or 1L , if positive.","title":"Utc offset sign"},{"location":"api/core/io.islandtime.parser/utc-offset-sign/#utcoffsetsign","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateTimeParserBuilder .utcOffsetSign(): Unit Parses a number's sign and populates DateTimeField.UTC_OFFSET_SIGN with -1L , if negative or 1L , if positive.","title":"utcOffsetSign"},{"location":"api/core/io.islandtime.parser/year-of-era/","text":"core / io.islandtime.parser / yearOfEra yearOfEra (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline fun DateTimeParserBuilder .yearOfEra(length: IntRange = 1..19, crossinline builder: WholeNumberParserBuilder .() -> Unit = {}): Unit Parse a year of era with a variable number of digits. The result will be associated with DateTimeField.YEAR_OF_ERA . (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline fun DateTimeParserBuilder .yearOfEra(length: Int , crossinline builder: WholeNumberParserBuilder .() -> Unit = {}): Unit Parse a year of era with a fixed number of digits. The result will be associated with DateTimeField.YEAR_OF_ERA .","title":"Year of era"},{"location":"api/core/io.islandtime.parser/year-of-era/#yearofera","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline fun DateTimeParserBuilder .yearOfEra(length: IntRange = 1..19, crossinline builder: WholeNumberParserBuilder .() -> Unit = {}): Unit Parse a year of era with a variable number of digits. The result will be associated with DateTimeField.YEAR_OF_ERA . (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline fun DateTimeParserBuilder .yearOfEra(length: Int , crossinline builder: WholeNumberParserBuilder .() -> Unit = {}): Unit Parse a year of era with a fixed number of digits. The result will be associated with DateTimeField.YEAR_OF_ERA .","title":"yearOfEra"},{"location":"api/core/io.islandtime.parser/year/","text":"core / io.islandtime.parser / year year (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline fun DateTimeParserBuilder .year(length: IntRange = 1..19, crossinline builder: WholeNumberParserBuilder .() -> Unit = {}): Unit Parse a year with a variable number of digits. The result will be associated with DateTimeField.YEAR . (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline fun DateTimeParserBuilder .year(length: Int , crossinline builder: WholeNumberParserBuilder .() -> Unit = {}): Unit Parse a year with a fixed number of digits. The result will be associated with DateTimeField.YEAR .","title":"Year"},{"location":"api/core/io.islandtime.parser/year/#year","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline fun DateTimeParserBuilder .year(length: IntRange = 1..19, crossinline builder: WholeNumberParserBuilder .() -> Unit = {}): Unit Parse a year with a variable number of digits. The result will be associated with DateTimeField.YEAR . (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) inline fun DateTimeParserBuilder .year(length: Int , crossinline builder: WholeNumberParserBuilder .() -> Unit = {}): Unit Parse a year with a fixed number of digits. The result will be associated with DateTimeField.YEAR .","title":"year"},{"location":"api/core/io.islandtime.parser/-date-time-parse-exception/","text":"core / io.islandtime.parser / DateTimeParseException DateTimeParseException (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) class DateTimeParseException : DateTimeException Constructors Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init> <init>(message: String ? = null, parsedString: String ? = null, errorIndex: Int = 0, cause: Throwable ? = null) Properties Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) errorIndex val errorIndex: Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) parsedString val parsedString: String ?","title":"Index"},{"location":"api/core/io.islandtime.parser/-date-time-parse-exception/#datetimeparseexception","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) class DateTimeParseException : DateTimeException","title":"DateTimeParseException"},{"location":"api/core/io.islandtime.parser/-date-time-parse-exception/#constructors","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init> <init>(message: String ? = null, parsedString: String ? = null, errorIndex: Int = 0, cause: Throwable ? = null)","title":"Constructors"},{"location":"api/core/io.islandtime.parser/-date-time-parse-exception/#properties","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) errorIndex val errorIndex: Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) parsedString val parsedString: String ?","title":"Properties"},{"location":"api/core/io.islandtime.parser/-date-time-parse-exception/-init-/","text":"core / io.islandtime.parser / DateTimeParseException / <init> <init> (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init>(message: String ? = null, parsedString: String ? = null, errorIndex: Int = 0, cause: Throwable ? = null)","title":" init "},{"location":"api/core/io.islandtime.parser/-date-time-parse-exception/-init-/#init","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init>(message: String ? = null, parsedString: String ? = null, errorIndex: Int = 0, cause: Throwable ? = null)","title":"&lt;init&gt;"},{"location":"api/core/io.islandtime.parser/-date-time-parse-exception/error-index/","text":"core / io.islandtime.parser / DateTimeParseException / errorIndex errorIndex (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val errorIndex: Int","title":"Error index"},{"location":"api/core/io.islandtime.parser/-date-time-parse-exception/error-index/#errorindex","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val errorIndex: Int","title":"errorIndex"},{"location":"api/core/io.islandtime.parser/-date-time-parse-exception/parsed-string/","text":"core / io.islandtime.parser / DateTimeParseException / parsedString parsedString (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val parsedString: String ?","title":"Parsed string"},{"location":"api/core/io.islandtime.parser/-date-time-parse-exception/parsed-string/#parsedstring","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val parsedString: String ?","title":"parsedString"},{"location":"api/core/io.islandtime.parser/-date-time-parse-result/","text":"core / io.islandtime.parser / DateTimeParseResult DateTimeParseResult (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) data class DateTimeParseResult The result of a parsing operation. Constructors Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init> The result of a parsing operation. <init>(fields: MutableMap < DateTimeField , Long > = hashMapOf(), timeZoneId: String ? = null) Properties Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fields val fields: MutableMap < DateTimeField , Long > (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) timeZoneId var timeZoneId: String ? Functions Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isEmpty fun isEmpty(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isNotEmpty fun isNotEmpty(): Boolean","title":"Index"},{"location":"api/core/io.islandtime.parser/-date-time-parse-result/#datetimeparseresult","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) data class DateTimeParseResult The result of a parsing operation.","title":"DateTimeParseResult"},{"location":"api/core/io.islandtime.parser/-date-time-parse-result/#constructors","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init> The result of a parsing operation. <init>(fields: MutableMap < DateTimeField , Long > = hashMapOf(), timeZoneId: String ? = null)","title":"Constructors"},{"location":"api/core/io.islandtime.parser/-date-time-parse-result/#properties","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fields val fields: MutableMap < DateTimeField , Long > (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) timeZoneId var timeZoneId: String ?","title":"Properties"},{"location":"api/core/io.islandtime.parser/-date-time-parse-result/#functions","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isEmpty fun isEmpty(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isNotEmpty fun isNotEmpty(): Boolean","title":"Functions"},{"location":"api/core/io.islandtime.parser/-date-time-parse-result/-init-/","text":"core / io.islandtime.parser / DateTimeParseResult / <init> <init> (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init>(fields: MutableMap < DateTimeField , Long > = hashMapOf(), timeZoneId: String ? = null) The result of a parsing operation.","title":" init "},{"location":"api/core/io.islandtime.parser/-date-time-parse-result/-init-/#init","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init>(fields: MutableMap < DateTimeField , Long > = hashMapOf(), timeZoneId: String ? = null) The result of a parsing operation.","title":"&lt;init&gt;"},{"location":"api/core/io.islandtime.parser/-date-time-parse-result/fields/","text":"core / io.islandtime.parser / DateTimeParseResult / fields fields (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val fields: MutableMap < DateTimeField , Long >","title":"Fields"},{"location":"api/core/io.islandtime.parser/-date-time-parse-result/fields/#fields","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val fields: MutableMap < DateTimeField , Long >","title":"fields"},{"location":"api/core/io.islandtime.parser/-date-time-parse-result/is-empty/","text":"core / io.islandtime.parser / DateTimeParseResult / isEmpty isEmpty (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isEmpty(): Boolean","title":"Is empty"},{"location":"api/core/io.islandtime.parser/-date-time-parse-result/is-empty/#isempty","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isEmpty(): Boolean","title":"isEmpty"},{"location":"api/core/io.islandtime.parser/-date-time-parse-result/is-not-empty/","text":"core / io.islandtime.parser / DateTimeParseResult / isNotEmpty isNotEmpty (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isNotEmpty(): Boolean","title":"Is not empty"},{"location":"api/core/io.islandtime.parser/-date-time-parse-result/is-not-empty/#isnotempty","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isNotEmpty(): Boolean","title":"isNotEmpty"},{"location":"api/core/io.islandtime.parser/-date-time-parse-result/time-zone-id/","text":"core / io.islandtime.parser / DateTimeParseResult / timeZoneId timeZoneId (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) var timeZoneId: String ?","title":"Time zone id"},{"location":"api/core/io.islandtime.parser/-date-time-parse-result/time-zone-id/#timezoneid","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) var timeZoneId: String ?","title":"timeZoneId"},{"location":"api/core/io.islandtime.parser/-date-time-parser/","text":"core / io.islandtime.parser / DateTimeParser DateTimeParser (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract class DateTimeParser A parser that converts text into a collection of date-time fields that are understood throughout Island Time. Functions Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) parse Parse text into a DateTimeParseResult containing all parsed fields. fun parse(text: CharSequence , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): DateTimeParseResult","title":"Index"},{"location":"api/core/io.islandtime.parser/-date-time-parser/#datetimeparser","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract class DateTimeParser A parser that converts text into a collection of date-time fields that are understood throughout Island Time.","title":"DateTimeParser"},{"location":"api/core/io.islandtime.parser/-date-time-parser/#functions","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) parse Parse text into a DateTimeParseResult containing all parsed fields. fun parse(text: CharSequence , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): DateTimeParseResult","title":"Functions"},{"location":"api/core/io.islandtime.parser/-date-time-parser/parse/","text":"core / io.islandtime.parser / DateTimeParser / parse parse (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun parse(text: CharSequence , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): DateTimeParseResult Parse text into a DateTimeParseResult containing all parsed fields. Parameters text - text to parse settings - customize parsing behavior Exceptions DateTimeParseException - if parsing failed Return a result containing all of the parsed fields","title":"Parse"},{"location":"api/core/io.islandtime.parser/-date-time-parser/parse/#parse","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun parse(text: CharSequence , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): DateTimeParseResult Parse text into a DateTimeParseResult containing all parsed fields.","title":"parse"},{"location":"api/core/io.islandtime.parser/-date-time-parser/parse/#parameters","text":"text - text to parse settings - customize parsing behavior","title":"Parameters"},{"location":"api/core/io.islandtime.parser/-date-time-parser/parse/#exceptions","text":"DateTimeParseException - if parsing failed Return a result containing all of the parsed fields","title":"Exceptions"},{"location":"api/core/io.islandtime.parser/-date-time-parser-builder/","text":"core / io.islandtime.parser / DateTimeParserBuilder DateTimeParserBuilder (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) interface DateTimeParserBuilder Functions Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) anyOf Try each of the parsers defined by builders until one succeeds. If none succeed, parsing is considered to have failed. abstract fun anyOf(vararg builders: DateTimeParserBuilder .() -> Unit ): Unit Try each of the parsers defined by childParsers until one succeeds. If none succeed, parsing is considered to have failed. abstract fun anyOf(vararg childParsers: DateTimeParser ): Unit (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) caseInsensitive Force parsing to be case-insensitive within this block. abstract fun caseInsensitive(builder: DateTimeParserBuilder .() -> Unit ): Unit (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) caseSensitive Force parsing to be case-sensitive within this block. abstract fun caseSensitive(builder: DateTimeParserBuilder .() -> Unit ): Unit (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) childParser Use a parser that has been defined outside of this builder. abstract fun childParser(childParser: DateTimeParser ): Unit (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) decimalNumber Parse a decimal number. abstract fun decimalNumber(wholeLength: IntRange = 1..19, fractionLength: IntRange = 0..9, fractionScale: Int = 9, builder: DecimalNumberParserBuilder .() -> Unit = {}): Unit (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) literal Parse a Char literal. abstract fun literal(char: Char , builder: LiteralParserBuilder .() -> Unit = {}): Unit Parse a String literal. abstract fun literal(string: String , builder: LiteralParserBuilder .() -> Unit = {}): Unit (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) localizedText Parse localized text associated with a particular DateTimeField in any of the specified styles. If successful, the field's value will be populated. If no text is known for the field or a match can't be found, the parsing operation will return an error. abstract fun localizedText(field: DateTimeField , styles: Set < TextStyle >): Unit (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) optional Make parsing optional within a block. abstract fun optional(builder: DateTimeParserBuilder .() -> Unit ): Unit (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) sign Parse a character indicating the sign of a number. abstract fun sign(builder: SignParserBuilder .() -> Unit = {}): Unit (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) string Parse a variable length string. abstract fun string(length: IntRange = IntRange.EMPTY, builder: StringParserBuilder .() -> Unit ): Unit (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) unaryPlus Parse a Char literal. open operator fun Char .unaryPlus(): Unit Parse a String literal. open operator fun String .unaryPlus(): Unit (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) wholeNumber Parse a whole number of fixed length. abstract fun wholeNumber(length: Int , builder: WholeNumberParserBuilder .() -> Unit = {}): Unit Parse a whole number of variable length. abstract fun wholeNumber(length: IntRange = 1..19, builder: WholeNumberParserBuilder .() -> Unit = {}): Unit","title":"Index"},{"location":"api/core/io.islandtime.parser/-date-time-parser-builder/#datetimeparserbuilder","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) interface DateTimeParserBuilder","title":"DateTimeParserBuilder"},{"location":"api/core/io.islandtime.parser/-date-time-parser-builder/#functions","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) anyOf Try each of the parsers defined by builders until one succeeds. If none succeed, parsing is considered to have failed. abstract fun anyOf(vararg builders: DateTimeParserBuilder .() -> Unit ): Unit Try each of the parsers defined by childParsers until one succeeds. If none succeed, parsing is considered to have failed. abstract fun anyOf(vararg childParsers: DateTimeParser ): Unit (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) caseInsensitive Force parsing to be case-insensitive within this block. abstract fun caseInsensitive(builder: DateTimeParserBuilder .() -> Unit ): Unit (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) caseSensitive Force parsing to be case-sensitive within this block. abstract fun caseSensitive(builder: DateTimeParserBuilder .() -> Unit ): Unit (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) childParser Use a parser that has been defined outside of this builder. abstract fun childParser(childParser: DateTimeParser ): Unit (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) decimalNumber Parse a decimal number. abstract fun decimalNumber(wholeLength: IntRange = 1..19, fractionLength: IntRange = 0..9, fractionScale: Int = 9, builder: DecimalNumberParserBuilder .() -> Unit = {}): Unit (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) literal Parse a Char literal. abstract fun literal(char: Char , builder: LiteralParserBuilder .() -> Unit = {}): Unit Parse a String literal. abstract fun literal(string: String , builder: LiteralParserBuilder .() -> Unit = {}): Unit (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) localizedText Parse localized text associated with a particular DateTimeField in any of the specified styles. If successful, the field's value will be populated. If no text is known for the field or a match can't be found, the parsing operation will return an error. abstract fun localizedText(field: DateTimeField , styles: Set < TextStyle >): Unit (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) optional Make parsing optional within a block. abstract fun optional(builder: DateTimeParserBuilder .() -> Unit ): Unit (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) sign Parse a character indicating the sign of a number. abstract fun sign(builder: SignParserBuilder .() -> Unit = {}): Unit (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) string Parse a variable length string. abstract fun string(length: IntRange = IntRange.EMPTY, builder: StringParserBuilder .() -> Unit ): Unit (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) unaryPlus Parse a Char literal. open operator fun Char .unaryPlus(): Unit Parse a String literal. open operator fun String .unaryPlus(): Unit (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) wholeNumber Parse a whole number of fixed length. abstract fun wholeNumber(length: Int , builder: WholeNumberParserBuilder .() -> Unit = {}): Unit Parse a whole number of variable length. abstract fun wholeNumber(length: IntRange = 1..19, builder: WholeNumberParserBuilder .() -> Unit = {}): Unit","title":"Functions"},{"location":"api/core/io.islandtime.parser/-date-time-parser-builder/any-of/","text":"core / io.islandtime.parser / DateTimeParserBuilder / anyOf anyOf (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract fun anyOf(vararg builders: DateTimeParserBuilder .() -> Unit ): Unit Try each of the parsers defined by builders until one succeeds. If none succeed, parsing is considered to have failed. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract fun anyOf(vararg childParsers: DateTimeParser ): Unit Try each of the parsers defined by childParsers until one succeeds. If none succeed, parsing is considered to have failed.","title":"Any of"},{"location":"api/core/io.islandtime.parser/-date-time-parser-builder/any-of/#anyof","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract fun anyOf(vararg builders: DateTimeParserBuilder .() -> Unit ): Unit Try each of the parsers defined by builders until one succeeds. If none succeed, parsing is considered to have failed. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract fun anyOf(vararg childParsers: DateTimeParser ): Unit Try each of the parsers defined by childParsers until one succeeds. If none succeed, parsing is considered to have failed.","title":"anyOf"},{"location":"api/core/io.islandtime.parser/-date-time-parser-builder/case-insensitive/","text":"core / io.islandtime.parser / DateTimeParserBuilder / caseInsensitive caseInsensitive (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract fun caseInsensitive(builder: DateTimeParserBuilder .() -> Unit ): Unit Force parsing to be case-insensitive within this block.","title":"Case insensitive"},{"location":"api/core/io.islandtime.parser/-date-time-parser-builder/case-insensitive/#caseinsensitive","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract fun caseInsensitive(builder: DateTimeParserBuilder .() -> Unit ): Unit Force parsing to be case-insensitive within this block.","title":"caseInsensitive"},{"location":"api/core/io.islandtime.parser/-date-time-parser-builder/case-sensitive/","text":"core / io.islandtime.parser / DateTimeParserBuilder / caseSensitive caseSensitive (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract fun caseSensitive(builder: DateTimeParserBuilder .() -> Unit ): Unit Force parsing to be case-sensitive within this block.","title":"Case sensitive"},{"location":"api/core/io.islandtime.parser/-date-time-parser-builder/case-sensitive/#casesensitive","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract fun caseSensitive(builder: DateTimeParserBuilder .() -> Unit ): Unit Force parsing to be case-sensitive within this block.","title":"caseSensitive"},{"location":"api/core/io.islandtime.parser/-date-time-parser-builder/child-parser/","text":"core / io.islandtime.parser / DateTimeParserBuilder / childParser childParser (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract fun childParser(childParser: DateTimeParser ): Unit Use a parser that has been defined outside of this builder.","title":"Child parser"},{"location":"api/core/io.islandtime.parser/-date-time-parser-builder/child-parser/#childparser","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract fun childParser(childParser: DateTimeParser ): Unit Use a parser that has been defined outside of this builder.","title":"childParser"},{"location":"api/core/io.islandtime.parser/-date-time-parser-builder/decimal-number/","text":"core / io.islandtime.parser / DateTimeParserBuilder / decimalNumber decimalNumber (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract fun decimalNumber(wholeLength: IntRange = 1..19, fractionLength: IntRange = 0..9, fractionScale: Int = 9, builder: DecimalNumberParserBuilder .() -> Unit = {}): Unit Parse a decimal number. If the minimum fractionLength is zero, a decimal separator isn't required. The characters associated with a decimal separator are controlled by the DateTimeParserSettings . By default, this is '.' or ',' as specified in ISO-8601. The characters may be overridden by using a different NumberStyle . Parameters wholeLength - the number of digits to parse from the whole part, excluding sign fractionLength - the number of digits to parse from the fraction part fractionScale - the number of digits to normalize the fraction to -- by default 9, indicating nanoseconds builder - configure parser behavior See Also NumberStyle","title":"Decimal number"},{"location":"api/core/io.islandtime.parser/-date-time-parser-builder/decimal-number/#decimalnumber","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract fun decimalNumber(wholeLength: IntRange = 1..19, fractionLength: IntRange = 0..9, fractionScale: Int = 9, builder: DecimalNumberParserBuilder .() -> Unit = {}): Unit Parse a decimal number. If the minimum fractionLength is zero, a decimal separator isn't required. The characters associated with a decimal separator are controlled by the DateTimeParserSettings . By default, this is '.' or ',' as specified in ISO-8601. The characters may be overridden by using a different NumberStyle .","title":"decimalNumber"},{"location":"api/core/io.islandtime.parser/-date-time-parser-builder/decimal-number/#parameters","text":"wholeLength - the number of digits to parse from the whole part, excluding sign fractionLength - the number of digits to parse from the fraction part fractionScale - the number of digits to normalize the fraction to -- by default 9, indicating nanoseconds builder - configure parser behavior See Also NumberStyle","title":"Parameters"},{"location":"api/core/io.islandtime.parser/-date-time-parser-builder/literal/","text":"core / io.islandtime.parser / DateTimeParserBuilder / literal literal (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract fun literal(char: Char , builder: LiteralParserBuilder .() -> Unit = {}): Unit Parse a Char literal. Parameters char - the character to match builder - configure the parser behavior(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract fun literal(string: String , builder: LiteralParserBuilder .() -> Unit = {}): Unit Parse a String literal. Parameters string - the string to match builder - configure the parser behavior","title":"Literal"},{"location":"api/core/io.islandtime.parser/-date-time-parser-builder/literal/#literal","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract fun literal(char: Char , builder: LiteralParserBuilder .() -> Unit = {}): Unit Parse a Char literal.","title":"literal"},{"location":"api/core/io.islandtime.parser/-date-time-parser-builder/literal/#parameters","text":"char - the character to match builder - configure the parser behavior(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract fun literal(string: String , builder: LiteralParserBuilder .() -> Unit = {}): Unit Parse a String literal.","title":"Parameters"},{"location":"api/core/io.islandtime.parser/-date-time-parser-builder/literal/#parameters_1","text":"string - the string to match builder - configure the parser behavior","title":"Parameters"},{"location":"api/core/io.islandtime.parser/-date-time-parser-builder/localized-text/","text":"core / io.islandtime.parser / DateTimeParserBuilder / localizedText localizedText (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract fun localizedText(field: DateTimeField , styles: Set < TextStyle >): Unit Parse localized text associated with a particular DateTimeField in any of the specified styles. If successful, the field's value will be populated. If no text is known for the field or a match can't be found, the parsing operation will return an error. The locale used when matching text is determined by the DateTimeParserSettings in use. Text is provided by the configured DateTimeTextProvider . Be mindful that this text may differ between platforms and devices. If at all possible, non-localized representations should be used instead. Parameters field - the field to match text for styles - the styles of text to match See Also DateTimeParserSettings.locale DateTimeTextProvider","title":"Localized text"},{"location":"api/core/io.islandtime.parser/-date-time-parser-builder/localized-text/#localizedtext","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract fun localizedText(field: DateTimeField , styles: Set < TextStyle >): Unit Parse localized text associated with a particular DateTimeField in any of the specified styles. If successful, the field's value will be populated. If no text is known for the field or a match can't be found, the parsing operation will return an error. The locale used when matching text is determined by the DateTimeParserSettings in use. Text is provided by the configured DateTimeTextProvider . Be mindful that this text may differ between platforms and devices. If at all possible, non-localized representations should be used instead.","title":"localizedText"},{"location":"api/core/io.islandtime.parser/-date-time-parser-builder/localized-text/#parameters","text":"field - the field to match text for styles - the styles of text to match See Also DateTimeParserSettings.locale DateTimeTextProvider","title":"Parameters"},{"location":"api/core/io.islandtime.parser/-date-time-parser-builder/optional/","text":"core / io.islandtime.parser / DateTimeParserBuilder / optional optional (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract fun optional(builder: DateTimeParserBuilder .() -> Unit ): Unit Make parsing optional within a block. If any of the parsers defined within builder fail, the parse result will be reset to its state before the block started and parsing will continue on, assuming there are additional parsers remaining. Parameters builder - define the parsers that should be considered 'optional'","title":"Optional"},{"location":"api/core/io.islandtime.parser/-date-time-parser-builder/optional/#optional","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract fun optional(builder: DateTimeParserBuilder .() -> Unit ): Unit Make parsing optional within a block. If any of the parsers defined within builder fail, the parse result will be reset to its state before the block started and parsing will continue on, assuming there are additional parsers remaining.","title":"optional"},{"location":"api/core/io.islandtime.parser/-date-time-parser-builder/optional/#parameters","text":"builder - define the parsers that should be considered 'optional'","title":"Parameters"},{"location":"api/core/io.islandtime.parser/-date-time-parser-builder/sign/","text":"core / io.islandtime.parser / DateTimeParserBuilder / sign sign (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract fun sign(builder: SignParserBuilder .() -> Unit = {}): Unit Parse a character indicating the sign of a number. The characters associated with a number's sign are controlled by the DateTimeParserSettings . By default, this is '+', '-', or '\u2212' as specified in ISO-8601. The characters may be overridden by using a different NumberStyle . Parameters builder - configure parser behavior See Also NumberStyle","title":"Sign"},{"location":"api/core/io.islandtime.parser/-date-time-parser-builder/sign/#sign","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract fun sign(builder: SignParserBuilder .() -> Unit = {}): Unit Parse a character indicating the sign of a number. The characters associated with a number's sign are controlled by the DateTimeParserSettings . By default, this is '+', '-', or '\u2212' as specified in ISO-8601. The characters may be overridden by using a different NumberStyle .","title":"sign"},{"location":"api/core/io.islandtime.parser/-date-time-parser-builder/sign/#parameters","text":"builder - configure parser behavior See Also NumberStyle","title":"Parameters"},{"location":"api/core/io.islandtime.parser/-date-time-parser-builder/string/","text":"core / io.islandtime.parser / DateTimeParserBuilder / string string (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract fun string(length: IntRange = IntRange.EMPTY, builder: StringParserBuilder .() -> Unit ): Unit Parse a variable length string. Each character will be parsed starting from the current position until either the maximum number of characters allowed by length is reached or parsing is stopped by a StringParserBuilder.onEachChar handler. Parameters length - restricts the length of the string to a certain range -- no restrictions if the range is empty builder - configure the parser behavior","title":"String"},{"location":"api/core/io.islandtime.parser/-date-time-parser-builder/string/#string","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract fun string(length: IntRange = IntRange.EMPTY, builder: StringParserBuilder .() -> Unit ): Unit Parse a variable length string. Each character will be parsed starting from the current position until either the maximum number of characters allowed by length is reached or parsing is stopped by a StringParserBuilder.onEachChar handler.","title":"string"},{"location":"api/core/io.islandtime.parser/-date-time-parser-builder/string/#parameters","text":"length - restricts the length of the string to a certain range -- no restrictions if the range is empty builder - configure the parser behavior","title":"Parameters"},{"location":"api/core/io.islandtime.parser/-date-time-parser-builder/unary-plus/","text":"core / io.islandtime.parser / DateTimeParserBuilder / unaryPlus unaryPlus (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) open operator fun Char .unaryPlus(): Unit Parse a Char literal. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) open operator fun String .unaryPlus(): Unit Parse a String literal.","title":"Unary plus"},{"location":"api/core/io.islandtime.parser/-date-time-parser-builder/unary-plus/#unaryplus","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) open operator fun Char .unaryPlus(): Unit Parse a Char literal. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) open operator fun String .unaryPlus(): Unit Parse a String literal.","title":"unaryPlus"},{"location":"api/core/io.islandtime.parser/-date-time-parser-builder/whole-number/","text":"core / io.islandtime.parser / DateTimeParserBuilder / wholeNumber wholeNumber (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract fun wholeNumber(length: Int , builder: WholeNumberParserBuilder .() -> Unit = {}): Unit Parse a whole number of fixed length. Parameters length - the number of characters to parse, excluding any sign builder - configure parser behavior(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract fun wholeNumber(length: IntRange = 1..19, builder: WholeNumberParserBuilder .() -> Unit = {}): Unit Parse a whole number of variable length. Parameters length - the number of characters to parse, excluding any sign builder - configure parser behavior","title":"Whole number"},{"location":"api/core/io.islandtime.parser/-date-time-parser-builder/whole-number/#wholenumber","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract fun wholeNumber(length: Int , builder: WholeNumberParserBuilder .() -> Unit = {}): Unit Parse a whole number of fixed length.","title":"wholeNumber"},{"location":"api/core/io.islandtime.parser/-date-time-parser-builder/whole-number/#parameters","text":"length - the number of characters to parse, excluding any sign builder - configure parser behavior(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract fun wholeNumber(length: IntRange = 1..19, builder: WholeNumberParserBuilder .() -> Unit = {}): Unit Parse a whole number of variable length.","title":"Parameters"},{"location":"api/core/io.islandtime.parser/-date-time-parser-builder/whole-number/#parameters_1","text":"length - the number of characters to parse, excluding any sign builder - configure parser behavior","title":"Parameters"},{"location":"api/core/io.islandtime.parser/-date-time-parser-dsl/","text":"core / io.islandtime.parser / DateTimeParserDsl DateTimeParserDsl (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) @DslMarker annotation class DateTimeParserDsl Constructors Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init> <init>()","title":"Index"},{"location":"api/core/io.islandtime.parser/-date-time-parser-dsl/#datetimeparserdsl","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) @DslMarker annotation class DateTimeParserDsl","title":"DateTimeParserDsl"},{"location":"api/core/io.islandtime.parser/-date-time-parser-dsl/#constructors","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init> <init>()","title":"Constructors"},{"location":"api/core/io.islandtime.parser/-date-time-parser-dsl/-init-/","text":"core / io.islandtime.parser / DateTimeParserDsl / <init> <init> (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init>()","title":" init "},{"location":"api/core/io.islandtime.parser/-date-time-parser-dsl/-init-/#init","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init>()","title":"&lt;init&gt;"},{"location":"api/core/io.islandtime.parser/-date-time-parser-settings/","text":"core / io.islandtime.parser / DateTimeParserSettings DateTimeParserSettings (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) data class DateTimeParserSettings Settings that control the parsing behavior. Constructors Name Summary <init> (jvm) DateTimeParserSettings(numberStyle: NumberStyle = NumberStyle.DEFAULT, locale: Locale , isCaseSensitive: Boolean = true) (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init>(numberStyle: NumberStyle = NumberStyle.DEFAULT, locale: <ERROR CLASS>, isCaseSensitive: Boolean = true) Settings that control the parsing behavior.(jvm) DateTimeParserSettings(numberStyle: NumberStyle = NumberStyle.DEFAULT, locale: () -> Locale = { defaultLocale() }, isCaseSensitive: Boolean = true) (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init>(numberStyle: NumberStyle = NumberStyle.DEFAULT, locale: () -> <ERROR CLASS> = { defaultLocale() }, isCaseSensitive: Boolean = true) Properties Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isCaseSensitive val isCaseSensitive: Boolean locale A function that will be invoked to provide a locale if one is needed during parsing.(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val locale: () -> <ERROR CLASS> (jvm) val locale: () -> Locale (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) numberStyle Defines the set of characters that should be used when parsing numbers. val numberStyle: NumberStyle Companion Object Properties Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) DEFAULT The default parser settings. val DEFAULT: DateTimeParserSettings","title":"Index"},{"location":"api/core/io.islandtime.parser/-date-time-parser-settings/#datetimeparsersettings","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) data class DateTimeParserSettings Settings that control the parsing behavior.","title":"DateTimeParserSettings"},{"location":"api/core/io.islandtime.parser/-date-time-parser-settings/#constructors","text":"Name Summary <init> (jvm) DateTimeParserSettings(numberStyle: NumberStyle = NumberStyle.DEFAULT, locale: Locale , isCaseSensitive: Boolean = true) (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init>(numberStyle: NumberStyle = NumberStyle.DEFAULT, locale: <ERROR CLASS>, isCaseSensitive: Boolean = true) Settings that control the parsing behavior.(jvm) DateTimeParserSettings(numberStyle: NumberStyle = NumberStyle.DEFAULT, locale: () -> Locale = { defaultLocale() }, isCaseSensitive: Boolean = true) (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init>(numberStyle: NumberStyle = NumberStyle.DEFAULT, locale: () -> <ERROR CLASS> = { defaultLocale() }, isCaseSensitive: Boolean = true)","title":"Constructors"},{"location":"api/core/io.islandtime.parser/-date-time-parser-settings/#properties","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isCaseSensitive val isCaseSensitive: Boolean locale A function that will be invoked to provide a locale if one is needed during parsing.(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val locale: () -> <ERROR CLASS> (jvm) val locale: () -> Locale (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) numberStyle Defines the set of characters that should be used when parsing numbers. val numberStyle: NumberStyle","title":"Properties"},{"location":"api/core/io.islandtime.parser/-date-time-parser-settings/#companion-object-properties","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) DEFAULT The default parser settings. val DEFAULT: DateTimeParserSettings","title":"Companion Object Properties"},{"location":"api/core/io.islandtime.parser/-date-time-parser-settings/-d-e-f-a-u-l-t/","text":"core / io.islandtime.parser / DateTimeParserSettings / DEFAULT DEFAULT (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val DEFAULT: DateTimeParserSettings The default parser settings.","title":" d e f a u l t"},{"location":"api/core/io.islandtime.parser/-date-time-parser-settings/-d-e-f-a-u-l-t/#default","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val DEFAULT: DateTimeParserSettings The default parser settings.","title":"DEFAULT"},{"location":"api/core/io.islandtime.parser/-date-time-parser-settings/-init-/","text":"core / io.islandtime.parser / DateTimeParserSettings / <init> <init> (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init>(numberStyle: NumberStyle = NumberStyle.DEFAULT, locale: <ERROR CLASS>, isCaseSensitive: Boolean = true) (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init>(numberStyle: NumberStyle = NumberStyle.DEFAULT, locale: () -> <ERROR CLASS> = { defaultLocale() }, isCaseSensitive: Boolean = true) Settings that control the parsing behavior. (jvm) DateTimeParserSettings(numberStyle: NumberStyle = NumberStyle.DEFAULT, locale: Locale , isCaseSensitive: Boolean = true) (jvm) DateTimeParserSettings(numberStyle: NumberStyle = NumberStyle.DEFAULT, locale: () -> Locale = { defaultLocale() }, isCaseSensitive: Boolean = true) Settings that control the parsing behavior.","title":" init "},{"location":"api/core/io.islandtime.parser/-date-time-parser-settings/-init-/#init","text":"(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init>(numberStyle: NumberStyle = NumberStyle.DEFAULT, locale: <ERROR CLASS>, isCaseSensitive: Boolean = true) (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init>(numberStyle: NumberStyle = NumberStyle.DEFAULT, locale: () -> <ERROR CLASS> = { defaultLocale() }, isCaseSensitive: Boolean = true) Settings that control the parsing behavior. (jvm) DateTimeParserSettings(numberStyle: NumberStyle = NumberStyle.DEFAULT, locale: Locale , isCaseSensitive: Boolean = true) (jvm) DateTimeParserSettings(numberStyle: NumberStyle = NumberStyle.DEFAULT, locale: () -> Locale = { defaultLocale() }, isCaseSensitive: Boolean = true) Settings that control the parsing behavior.","title":"&lt;init&gt;"},{"location":"api/core/io.islandtime.parser/-date-time-parser-settings/is-case-sensitive/","text":"core / io.islandtime.parser / DateTimeParserSettings / isCaseSensitive isCaseSensitive (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val isCaseSensitive: Boolean","title":"Is case sensitive"},{"location":"api/core/io.islandtime.parser/-date-time-parser-settings/is-case-sensitive/#iscasesensitive","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val isCaseSensitive: Boolean","title":"isCaseSensitive"},{"location":"api/core/io.islandtime.parser/-date-time-parser-settings/locale/","text":"core / io.islandtime.parser / DateTimeParserSettings / locale locale (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val locale: () -> <ERROR CLASS> (jvm) val locale: () -> Locale A function that will be invoked to provide a locale if one is needed during parsing. Property locale - A function that will be invoked to provide a locale if one is needed during parsing.","title":"Locale"},{"location":"api/core/io.islandtime.parser/-date-time-parser-settings/locale/#locale","text":"(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val locale: () -> <ERROR CLASS> (jvm) val locale: () -> Locale A function that will be invoked to provide a locale if one is needed during parsing.","title":"locale"},{"location":"api/core/io.islandtime.parser/-date-time-parser-settings/locale/#property","text":"locale - A function that will be invoked to provide a locale if one is needed during parsing.","title":"Property"},{"location":"api/core/io.islandtime.parser/-date-time-parser-settings/number-style/","text":"core / io.islandtime.parser / DateTimeParserSettings / numberStyle numberStyle (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val numberStyle: NumberStyle Defines the set of characters that should be used when parsing numbers. Property numberStyle - Defines the set of characters that should be used when parsing numbers.","title":"Number style"},{"location":"api/core/io.islandtime.parser/-date-time-parser-settings/number-style/#numberstyle","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val numberStyle: NumberStyle Defines the set of characters that should be used when parsing numbers.","title":"numberStyle"},{"location":"api/core/io.islandtime.parser/-date-time-parser-settings/number-style/#property","text":"numberStyle - Defines the set of characters that should be used when parsing numbers.","title":"Property"},{"location":"api/core/io.islandtime.parser/-date-time-parsers/","text":"core / io.islandtime.parser / DateTimeParsers DateTimeParsers (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) object DateTimeParsers A set of predefined parsers. Types Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) Iso ISO-8601 parsers. object Iso","title":"Index"},{"location":"api/core/io.islandtime.parser/-date-time-parsers/#datetimeparsers","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) object DateTimeParsers A set of predefined parsers.","title":"DateTimeParsers"},{"location":"api/core/io.islandtime.parser/-date-time-parsers/#types","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) Iso ISO-8601 parsers. object Iso","title":"Types"},{"location":"api/core/io.islandtime.parser/-date-time-parsers/-iso/","text":"core / io.islandtime.parser / DateTimeParsers / Iso Iso (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) object Iso ISO-8601 parsers. Types Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) Basic object Basic (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) Extended object Extended Properties Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) CALENDAR_DATE Parse ISO-8601 calendar dates in either basic or extended format. val CALENDAR_DATE: DateTimeParser (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) DATE Parse ISO-8601 calendar or ordinal dates in either basic or extended format. val DATE: DateTimeParser (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) DATE_RANGE Parse an ISO-8601 time interval between two dates in either basic or extended format. val DATE_RANGE: GroupedDateTimeParser (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) DATE_TIME Parse an ISO-8601 date and time of day in either basic or extended format. val DATE_TIME: DateTimeParser (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) DATE_TIME_INTERVAL val DATE_TIME_INTERVAL: GroupedDateTimeParser (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) DURATION Parse an ISO-8601 period containing only the day and time components. val DURATION: DateTimeParser (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) INSTANT Parse an ISO-8601 date-time with the zero UTC offset designator in either basic or extended format. val INSTANT: DateTimeParser (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) INSTANT_INTERVAL val INSTANT_INTERVAL: GroupedDateTimeParser (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) OFFSET_DATE_TIME Parse an ISO-8601 date, time of day, and UTC offset in either basic or extended format. val OFFSET_DATE_TIME: DateTimeParser (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) OFFSET_DATE_TIME_INTERVAL val OFFSET_DATE_TIME_INTERVAL: GroupedDateTimeParser (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) OFFSET_TIME Parse an ISO-8601 time of day and UTC offset in either basic or extended format. val OFFSET_TIME: DateTimeParser (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) ORDINAL_DATE Parse ISO-8601 ordinal dates in either basic or extended format. val ORDINAL_DATE: DateTimeParser (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) PERIOD Parse an ISO-8601 period without any time components. val PERIOD: DateTimeParser (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) TIME Parse an ISO-8601 time of day in either basic or extended format. val TIME: DateTimeParser (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) UTC_OFFSET Parse an ISO-8601 UTC offset in either basic or extended format. val UTC_OFFSET: DateTimeParser (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) YEAR Parse an ISO-8601 standalone year. Note that not all formats supported by this parser are valid when a year is combined with other fields. val YEAR: DateTimeParser (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) YEAR_MONTH Parse an ISO-8601 year-month. The standard supports only extended format. val YEAR_MONTH: DateTimeParser (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) ZONED_DATE_TIME Parse an ISO-8601 date, time of day, UTC offset, and optionally, a non-standard region ID in either basic or extended format. val ZONED_DATE_TIME: DateTimeParser (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) ZONED_DATE_TIME_INTERVAL val ZONED_DATE_TIME_INTERVAL: GroupedDateTimeParser","title":"Index"},{"location":"api/core/io.islandtime.parser/-date-time-parsers/-iso/#iso","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) object Iso ISO-8601 parsers.","title":"Iso"},{"location":"api/core/io.islandtime.parser/-date-time-parsers/-iso/#types","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) Basic object Basic (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) Extended object Extended","title":"Types"},{"location":"api/core/io.islandtime.parser/-date-time-parsers/-iso/#properties","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) CALENDAR_DATE Parse ISO-8601 calendar dates in either basic or extended format. val CALENDAR_DATE: DateTimeParser (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) DATE Parse ISO-8601 calendar or ordinal dates in either basic or extended format. val DATE: DateTimeParser (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) DATE_RANGE Parse an ISO-8601 time interval between two dates in either basic or extended format. val DATE_RANGE: GroupedDateTimeParser (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) DATE_TIME Parse an ISO-8601 date and time of day in either basic or extended format. val DATE_TIME: DateTimeParser (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) DATE_TIME_INTERVAL val DATE_TIME_INTERVAL: GroupedDateTimeParser (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) DURATION Parse an ISO-8601 period containing only the day and time components. val DURATION: DateTimeParser (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) INSTANT Parse an ISO-8601 date-time with the zero UTC offset designator in either basic or extended format. val INSTANT: DateTimeParser (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) INSTANT_INTERVAL val INSTANT_INTERVAL: GroupedDateTimeParser (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) OFFSET_DATE_TIME Parse an ISO-8601 date, time of day, and UTC offset in either basic or extended format. val OFFSET_DATE_TIME: DateTimeParser (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) OFFSET_DATE_TIME_INTERVAL val OFFSET_DATE_TIME_INTERVAL: GroupedDateTimeParser (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) OFFSET_TIME Parse an ISO-8601 time of day and UTC offset in either basic or extended format. val OFFSET_TIME: DateTimeParser (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) ORDINAL_DATE Parse ISO-8601 ordinal dates in either basic or extended format. val ORDINAL_DATE: DateTimeParser (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) PERIOD Parse an ISO-8601 period without any time components. val PERIOD: DateTimeParser (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) TIME Parse an ISO-8601 time of day in either basic or extended format. val TIME: DateTimeParser (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) UTC_OFFSET Parse an ISO-8601 UTC offset in either basic or extended format. val UTC_OFFSET: DateTimeParser (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) YEAR Parse an ISO-8601 standalone year. Note that not all formats supported by this parser are valid when a year is combined with other fields. val YEAR: DateTimeParser (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) YEAR_MONTH Parse an ISO-8601 year-month. The standard supports only extended format. val YEAR_MONTH: DateTimeParser (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) ZONED_DATE_TIME Parse an ISO-8601 date, time of day, UTC offset, and optionally, a non-standard region ID in either basic or extended format. val ZONED_DATE_TIME: DateTimeParser (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) ZONED_DATE_TIME_INTERVAL val ZONED_DATE_TIME_INTERVAL: GroupedDateTimeParser","title":"Properties"},{"location":"api/core/io.islandtime.parser/-date-time-parsers/-iso/-c-a-l-e-n-d-a-r_-d-a-t-e/","text":"core / io.islandtime.parser / DateTimeParsers / Iso / CALENDAR_DATE CALENDAR_DATE (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val CALENDAR_DATE: DateTimeParser Parse ISO-8601 calendar dates in either basic or extended format.","title":" c a l e n d a r  d a t e"},{"location":"api/core/io.islandtime.parser/-date-time-parsers/-iso/-c-a-l-e-n-d-a-r_-d-a-t-e/#calendar_date","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val CALENDAR_DATE: DateTimeParser Parse ISO-8601 calendar dates in either basic or extended format.","title":"CALENDAR_DATE"},{"location":"api/core/io.islandtime.parser/-date-time-parsers/-iso/-d-a-t-e/","text":"core / io.islandtime.parser / DateTimeParsers / Iso / DATE DATE (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val DATE: DateTimeParser Parse ISO-8601 calendar or ordinal dates in either basic or extended format.","title":" d a t e"},{"location":"api/core/io.islandtime.parser/-date-time-parsers/-iso/-d-a-t-e/#date","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val DATE: DateTimeParser Parse ISO-8601 calendar or ordinal dates in either basic or extended format.","title":"DATE"},{"location":"api/core/io.islandtime.parser/-date-time-parsers/-iso/-d-a-t-e_-r-a-n-g-e/","text":"core / io.islandtime.parser / DateTimeParsers / Iso / DATE_RANGE DATE_RANGE (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val DATE_RANGE: GroupedDateTimeParser Parse an ISO-8601 time interval between two dates in either basic or extended format. Examples: 1990-01-04/1991-08-30 ../19910830 19900104/.. ../.. (empty string)","title":" d a t e  r a n g e"},{"location":"api/core/io.islandtime.parser/-date-time-parsers/-iso/-d-a-t-e_-r-a-n-g-e/#date_range","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val DATE_RANGE: GroupedDateTimeParser Parse an ISO-8601 time interval between two dates in either basic or extended format. Examples: 1990-01-04/1991-08-30 ../19910830 19900104/.. ../.. (empty string)","title":"DATE_RANGE"},{"location":"api/core/io.islandtime.parser/-date-time-parsers/-iso/-d-a-t-e_-t-i-m-e/","text":"core / io.islandtime.parser / DateTimeParsers / Iso / DATE_TIME DATE_TIME (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val DATE_TIME: DateTimeParser Parse an ISO-8601 date and time of day in either basic or extended format.","title":" d a t e  t i m e"},{"location":"api/core/io.islandtime.parser/-date-time-parsers/-iso/-d-a-t-e_-t-i-m-e/#date_time","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val DATE_TIME: DateTimeParser Parse an ISO-8601 date and time of day in either basic or extended format.","title":"DATE_TIME"},{"location":"api/core/io.islandtime.parser/-date-time-parsers/-iso/-d-a-t-e_-t-i-m-e_-i-n-t-e-r-v-a-l/","text":"core / io.islandtime.parser / DateTimeParsers / Iso / DATE_TIME_INTERVAL DATE_TIME_INTERVAL (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val DATE_TIME_INTERVAL: GroupedDateTimeParser","title":" d a t e  t i m e  i n t e r v a l"},{"location":"api/core/io.islandtime.parser/-date-time-parsers/-iso/-d-a-t-e_-t-i-m-e_-i-n-t-e-r-v-a-l/#date_time_interval","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val DATE_TIME_INTERVAL: GroupedDateTimeParser","title":"DATE_TIME_INTERVAL"},{"location":"api/core/io.islandtime.parser/-date-time-parsers/-iso/-d-u-r-a-t-i-o-n/","text":"core / io.islandtime.parser / DateTimeParsers / Iso / DURATION DURATION (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val DURATION: DateTimeParser Parse an ISO-8601 period containing only the day and time components. Examples: P1DT5H6.123S PT15H20M PT0S -PT1S","title":" d u r a t i o n"},{"location":"api/core/io.islandtime.parser/-date-time-parsers/-iso/-d-u-r-a-t-i-o-n/#duration","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val DURATION: DateTimeParser Parse an ISO-8601 period containing only the day and time components. Examples: P1DT5H6.123S PT15H20M PT0S -PT1S","title":"DURATION"},{"location":"api/core/io.islandtime.parser/-date-time-parsers/-iso/-i-n-s-t-a-n-t/","text":"core / io.islandtime.parser / DateTimeParsers / Iso / INSTANT INSTANT (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val INSTANT: DateTimeParser Parse an ISO-8601 date-time with the zero UTC offset designator in either basic or extended format. Examples: 2001-05-10T00:24:00.00000Z 2001-05-10T00:24Z 20010510 0024Z","title":" i n s t a n t"},{"location":"api/core/io.islandtime.parser/-date-time-parsers/-iso/-i-n-s-t-a-n-t/#instant","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val INSTANT: DateTimeParser Parse an ISO-8601 date-time with the zero UTC offset designator in either basic or extended format. Examples: 2001-05-10T00:24:00.00000Z 2001-05-10T00:24Z 20010510 0024Z","title":"INSTANT"},{"location":"api/core/io.islandtime.parser/-date-time-parsers/-iso/-i-n-s-t-a-n-t_-i-n-t-e-r-v-a-l/","text":"core / io.islandtime.parser / DateTimeParsers / Iso / INSTANT_INTERVAL INSTANT_INTERVAL (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val INSTANT_INTERVAL: GroupedDateTimeParser","title":" i n s t a n t  i n t e r v a l"},{"location":"api/core/io.islandtime.parser/-date-time-parsers/-iso/-i-n-s-t-a-n-t_-i-n-t-e-r-v-a-l/#instant_interval","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val INSTANT_INTERVAL: GroupedDateTimeParser","title":"INSTANT_INTERVAL"},{"location":"api/core/io.islandtime.parser/-date-time-parsers/-iso/-o-f-f-s-e-t_-d-a-t-e_-t-i-m-e/","text":"core / io.islandtime.parser / DateTimeParsers / Iso / OFFSET_DATE_TIME OFFSET_DATE_TIME (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val OFFSET_DATE_TIME: DateTimeParser Parse an ISO-8601 date, time of day, and UTC offset in either basic or extended format. Examples: 2008-09-01T18:30-4:00 2008-09-01 18:30:00Z 20080901 1830-04","title":" o f f s e t  d a t e  t i m e"},{"location":"api/core/io.islandtime.parser/-date-time-parsers/-iso/-o-f-f-s-e-t_-d-a-t-e_-t-i-m-e/#offset_date_time","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val OFFSET_DATE_TIME: DateTimeParser Parse an ISO-8601 date, time of day, and UTC offset in either basic or extended format. Examples: 2008-09-01T18:30-4:00 2008-09-01 18:30:00Z 20080901 1830-04","title":"OFFSET_DATE_TIME"},{"location":"api/core/io.islandtime.parser/-date-time-parsers/-iso/-o-f-f-s-e-t_-d-a-t-e_-t-i-m-e_-i-n-t-e-r-v-a-l/","text":"core / io.islandtime.parser / DateTimeParsers / Iso / OFFSET_DATE_TIME_INTERVAL OFFSET_DATE_TIME_INTERVAL (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val OFFSET_DATE_TIME_INTERVAL: GroupedDateTimeParser","title":" o f f s e t  d a t e  t i m e  i n t e r v a l"},{"location":"api/core/io.islandtime.parser/-date-time-parsers/-iso/-o-f-f-s-e-t_-d-a-t-e_-t-i-m-e_-i-n-t-e-r-v-a-l/#offset_date_time_interval","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val OFFSET_DATE_TIME_INTERVAL: GroupedDateTimeParser","title":"OFFSET_DATE_TIME_INTERVAL"},{"location":"api/core/io.islandtime.parser/-date-time-parsers/-iso/-o-f-f-s-e-t_-t-i-m-e/","text":"core / io.islandtime.parser / DateTimeParsers / Iso / OFFSET_TIME OFFSET_TIME (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val OFFSET_TIME: DateTimeParser Parse an ISO-8601 time of day and UTC offset in either basic or extended format.","title":" o f f s e t  t i m e"},{"location":"api/core/io.islandtime.parser/-date-time-parsers/-iso/-o-f-f-s-e-t_-t-i-m-e/#offset_time","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val OFFSET_TIME: DateTimeParser Parse an ISO-8601 time of day and UTC offset in either basic or extended format.","title":"OFFSET_TIME"},{"location":"api/core/io.islandtime.parser/-date-time-parsers/-iso/-o-r-d-i-n-a-l_-d-a-t-e/","text":"core / io.islandtime.parser / DateTimeParsers / Iso / ORDINAL_DATE ORDINAL_DATE (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val ORDINAL_DATE: DateTimeParser Parse ISO-8601 ordinal dates in either basic or extended format.","title":" o r d i n a l  d a t e"},{"location":"api/core/io.islandtime.parser/-date-time-parsers/-iso/-o-r-d-i-n-a-l_-d-a-t-e/#ordinal_date","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val ORDINAL_DATE: DateTimeParser Parse ISO-8601 ordinal dates in either basic or extended format.","title":"ORDINAL_DATE"},{"location":"api/core/io.islandtime.parser/-date-time-parsers/-iso/-p-e-r-i-o-d/","text":"core / io.islandtime.parser / DateTimeParsers / Iso / PERIOD PERIOD (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val PERIOD: DateTimeParser Parse an ISO-8601 period without any time components. Examples: P5Y16M3D P5M-15D P0D","title":" p e r i o d"},{"location":"api/core/io.islandtime.parser/-date-time-parsers/-iso/-p-e-r-i-o-d/#period","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val PERIOD: DateTimeParser Parse an ISO-8601 period without any time components. Examples: P5Y16M3D P5M-15D P0D","title":"PERIOD"},{"location":"api/core/io.islandtime.parser/-date-time-parsers/-iso/-t-i-m-e/","text":"core / io.islandtime.parser / DateTimeParsers / Iso / TIME TIME (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val TIME: DateTimeParser Parse an ISO-8601 time of day in either basic or extended format.","title":" t i m e"},{"location":"api/core/io.islandtime.parser/-date-time-parsers/-iso/-t-i-m-e/#time","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val TIME: DateTimeParser Parse an ISO-8601 time of day in either basic or extended format.","title":"TIME"},{"location":"api/core/io.islandtime.parser/-date-time-parsers/-iso/-u-t-c_-o-f-f-s-e-t/","text":"core / io.islandtime.parser / DateTimeParsers / Iso / UTC_OFFSET UTC_OFFSET (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val UTC_OFFSET: DateTimeParser Parse an ISO-8601 UTC offset in either basic or extended format.","title":" u t c  o f f s e t"},{"location":"api/core/io.islandtime.parser/-date-time-parsers/-iso/-u-t-c_-o-f-f-s-e-t/#utc_offset","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val UTC_OFFSET: DateTimeParser Parse an ISO-8601 UTC offset in either basic or extended format.","title":"UTC_OFFSET"},{"location":"api/core/io.islandtime.parser/-date-time-parsers/-iso/-y-e-a-r/","text":"core / io.islandtime.parser / DateTimeParsers / Iso / YEAR YEAR (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val YEAR: DateTimeParser Parse an ISO-8601 standalone year. Note that not all formats supported by this parser are valid when a year is combined with other fields. Examples: 2008 '0001` 0000 -0001 +0123456789 Y12345","title":" y e a r"},{"location":"api/core/io.islandtime.parser/-date-time-parsers/-iso/-y-e-a-r/#year","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val YEAR: DateTimeParser Parse an ISO-8601 standalone year. Note that not all formats supported by this parser are valid when a year is combined with other fields. Examples: 2008 '0001` 0000 -0001 +0123456789 Y12345","title":"YEAR"},{"location":"api/core/io.islandtime.parser/-date-time-parsers/-iso/-y-e-a-r_-m-o-n-t-h/","text":"core / io.islandtime.parser / DateTimeParsers / Iso / YEAR_MONTH YEAR_MONTH (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val YEAR_MONTH: DateTimeParser Parse an ISO-8601 year-month. The standard supports only extended format. Example: 2008-09","title":" y e a r  m o n t h"},{"location":"api/core/io.islandtime.parser/-date-time-parsers/-iso/-y-e-a-r_-m-o-n-t-h/#year_month","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val YEAR_MONTH: DateTimeParser Parse an ISO-8601 year-month. The standard supports only extended format. Example: 2008-09","title":"YEAR_MONTH"},{"location":"api/core/io.islandtime.parser/-date-time-parsers/-iso/-z-o-n-e-d_-d-a-t-e_-t-i-m-e/","text":"core / io.islandtime.parser / DateTimeParsers / Iso / ZONED_DATE_TIME ZONED_DATE_TIME (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val ZONED_DATE_TIME: DateTimeParser Parse an ISO-8601 date, time of day, UTC offset, and optionally, a non-standard region ID in either basic or extended format. Examples: 2008-09-01T18:30-4:00[America/New_York] 2008-09-01 18:30:00Z 20080901 1830-04[America/New_York]","title":" z o n e d  d a t e  t i m e"},{"location":"api/core/io.islandtime.parser/-date-time-parsers/-iso/-z-o-n-e-d_-d-a-t-e_-t-i-m-e/#zoned_date_time","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val ZONED_DATE_TIME: DateTimeParser Parse an ISO-8601 date, time of day, UTC offset, and optionally, a non-standard region ID in either basic or extended format. Examples: 2008-09-01T18:30-4:00[America/New_York] 2008-09-01 18:30:00Z 20080901 1830-04[America/New_York]","title":"ZONED_DATE_TIME"},{"location":"api/core/io.islandtime.parser/-date-time-parsers/-iso/-z-o-n-e-d_-d-a-t-e_-t-i-m-e_-i-n-t-e-r-v-a-l/","text":"core / io.islandtime.parser / DateTimeParsers / Iso / ZONED_DATE_TIME_INTERVAL ZONED_DATE_TIME_INTERVAL (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val ZONED_DATE_TIME_INTERVAL: GroupedDateTimeParser","title":" z o n e d  d a t e  t i m e  i n t e r v a l"},{"location":"api/core/io.islandtime.parser/-date-time-parsers/-iso/-z-o-n-e-d_-d-a-t-e_-t-i-m-e_-i-n-t-e-r-v-a-l/#zoned_date_time_interval","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val ZONED_DATE_TIME_INTERVAL: GroupedDateTimeParser","title":"ZONED_DATE_TIME_INTERVAL"},{"location":"api/core/io.islandtime.parser/-date-time-parsers/-iso/-basic/","text":"core / io.islandtime.parser / DateTimeParsers / Iso / Basic Basic (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) object Basic Properties Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) CALENDAR_DATE val CALENDAR_DATE: DateTimeParser (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) DATE val DATE: DateTimeParser (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) DATE_RANGE Parse an ISO-8601 time interval between two dates in basic format. val DATE_RANGE: GroupedDateTimeParser (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) DATE_TIME Parse an ISO-8601 date and time of day in basic format. val DATE_TIME: DateTimeParser (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) DATE_TIME_INTERVAL val DATE_TIME_INTERVAL: GroupedDateTimeParser (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) INSTANT Parse an ISO-8601 date-time with the zero UTC offset designator in basic format. val INSTANT: DateTimeParser (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) INSTANT_INTERVAL val INSTANT_INTERVAL: GroupedDateTimeParser (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) OFFSET_DATE_TIME Parse an ISO-8601 date, time of day, and UTC offset in basic format. val OFFSET_DATE_TIME: DateTimeParser (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) OFFSET_DATE_TIME_INTERVAL val OFFSET_DATE_TIME_INTERVAL: GroupedDateTimeParser (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) OFFSET_TIME val OFFSET_TIME: DateTimeParser (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) ORDINAL_DATE val ORDINAL_DATE: DateTimeParser (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) TIME val TIME: DateTimeParser (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) UTC_OFFSET val UTC_OFFSET: DateTimeParser (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) ZONED_DATE_TIME Parse an ISO-8601 date, time of day, UTC offset, and optionally, a non-standard region ID in basic format. val ZONED_DATE_TIME: DateTimeParser (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) ZONED_DATE_TIME_INTERVAL val ZONED_DATE_TIME_INTERVAL: GroupedDateTimeParser","title":"Index"},{"location":"api/core/io.islandtime.parser/-date-time-parsers/-iso/-basic/#basic","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) object Basic","title":"Basic"},{"location":"api/core/io.islandtime.parser/-date-time-parsers/-iso/-basic/#properties","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) CALENDAR_DATE val CALENDAR_DATE: DateTimeParser (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) DATE val DATE: DateTimeParser (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) DATE_RANGE Parse an ISO-8601 time interval between two dates in basic format. val DATE_RANGE: GroupedDateTimeParser (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) DATE_TIME Parse an ISO-8601 date and time of day in basic format. val DATE_TIME: DateTimeParser (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) DATE_TIME_INTERVAL val DATE_TIME_INTERVAL: GroupedDateTimeParser (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) INSTANT Parse an ISO-8601 date-time with the zero UTC offset designator in basic format. val INSTANT: DateTimeParser (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) INSTANT_INTERVAL val INSTANT_INTERVAL: GroupedDateTimeParser (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) OFFSET_DATE_TIME Parse an ISO-8601 date, time of day, and UTC offset in basic format. val OFFSET_DATE_TIME: DateTimeParser (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) OFFSET_DATE_TIME_INTERVAL val OFFSET_DATE_TIME_INTERVAL: GroupedDateTimeParser (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) OFFSET_TIME val OFFSET_TIME: DateTimeParser (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) ORDINAL_DATE val ORDINAL_DATE: DateTimeParser (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) TIME val TIME: DateTimeParser (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) UTC_OFFSET val UTC_OFFSET: DateTimeParser (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) ZONED_DATE_TIME Parse an ISO-8601 date, time of day, UTC offset, and optionally, a non-standard region ID in basic format. val ZONED_DATE_TIME: DateTimeParser (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) ZONED_DATE_TIME_INTERVAL val ZONED_DATE_TIME_INTERVAL: GroupedDateTimeParser","title":"Properties"},{"location":"api/core/io.islandtime.parser/-date-time-parsers/-iso/-basic/-c-a-l-e-n-d-a-r_-d-a-t-e/","text":"core / io.islandtime.parser / DateTimeParsers / Iso / Basic / CALENDAR_DATE CALENDAR_DATE (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val CALENDAR_DATE: DateTimeParser","title":" c a l e n d a r  d a t e"},{"location":"api/core/io.islandtime.parser/-date-time-parsers/-iso/-basic/-c-a-l-e-n-d-a-r_-d-a-t-e/#calendar_date","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val CALENDAR_DATE: DateTimeParser","title":"CALENDAR_DATE"},{"location":"api/core/io.islandtime.parser/-date-time-parsers/-iso/-basic/-d-a-t-e/","text":"core / io.islandtime.parser / DateTimeParsers / Iso / Basic / DATE DATE (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val DATE: DateTimeParser","title":" d a t e"},{"location":"api/core/io.islandtime.parser/-date-time-parsers/-iso/-basic/-d-a-t-e/#date","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val DATE: DateTimeParser","title":"DATE"},{"location":"api/core/io.islandtime.parser/-date-time-parsers/-iso/-basic/-d-a-t-e_-r-a-n-g-e/","text":"core / io.islandtime.parser / DateTimeParsers / Iso / Basic / DATE_RANGE DATE_RANGE (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val DATE_RANGE: GroupedDateTimeParser Parse an ISO-8601 time interval between two dates in basic format. Examples: 19900104/19910830 ../19910830 19900104/.. ../.. (empty string)","title":" d a t e  r a n g e"},{"location":"api/core/io.islandtime.parser/-date-time-parsers/-iso/-basic/-d-a-t-e_-r-a-n-g-e/#date_range","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val DATE_RANGE: GroupedDateTimeParser Parse an ISO-8601 time interval between two dates in basic format. Examples: 19900104/19910830 ../19910830 19900104/.. ../.. (empty string)","title":"DATE_RANGE"},{"location":"api/core/io.islandtime.parser/-date-time-parsers/-iso/-basic/-d-a-t-e_-t-i-m-e/","text":"core / io.islandtime.parser / DateTimeParsers / Iso / Basic / DATE_TIME DATE_TIME (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val DATE_TIME: DateTimeParser Parse an ISO-8601 date and time of day in basic format. Examples: 20080901T1830 20080901 183000 20080901 1830","title":" d a t e  t i m e"},{"location":"api/core/io.islandtime.parser/-date-time-parsers/-iso/-basic/-d-a-t-e_-t-i-m-e/#date_time","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val DATE_TIME: DateTimeParser Parse an ISO-8601 date and time of day in basic format. Examples: 20080901T1830 20080901 183000 20080901 1830","title":"DATE_TIME"},{"location":"api/core/io.islandtime.parser/-date-time-parsers/-iso/-basic/-d-a-t-e_-t-i-m-e_-i-n-t-e-r-v-a-l/","text":"core / io.islandtime.parser / DateTimeParsers / Iso / Basic / DATE_TIME_INTERVAL DATE_TIME_INTERVAL (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val DATE_TIME_INTERVAL: GroupedDateTimeParser","title":" d a t e  t i m e  i n t e r v a l"},{"location":"api/core/io.islandtime.parser/-date-time-parsers/-iso/-basic/-d-a-t-e_-t-i-m-e_-i-n-t-e-r-v-a-l/#date_time_interval","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val DATE_TIME_INTERVAL: GroupedDateTimeParser","title":"DATE_TIME_INTERVAL"},{"location":"api/core/io.islandtime.parser/-date-time-parsers/-iso/-basic/-i-n-s-t-a-n-t/","text":"core / io.islandtime.parser / DateTimeParsers / Iso / Basic / INSTANT INSTANT (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val INSTANT: DateTimeParser Parse an ISO-8601 date-time with the zero UTC offset designator in basic format. Examples: 20010510T002400.00000Z 20010510T0024Z 20010510 0024Z","title":" i n s t a n t"},{"location":"api/core/io.islandtime.parser/-date-time-parsers/-iso/-basic/-i-n-s-t-a-n-t/#instant","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val INSTANT: DateTimeParser Parse an ISO-8601 date-time with the zero UTC offset designator in basic format. Examples: 20010510T002400.00000Z 20010510T0024Z 20010510 0024Z","title":"INSTANT"},{"location":"api/core/io.islandtime.parser/-date-time-parsers/-iso/-basic/-i-n-s-t-a-n-t_-i-n-t-e-r-v-a-l/","text":"core / io.islandtime.parser / DateTimeParsers / Iso / Basic / INSTANT_INTERVAL INSTANT_INTERVAL (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val INSTANT_INTERVAL: GroupedDateTimeParser","title":" i n s t a n t  i n t e r v a l"},{"location":"api/core/io.islandtime.parser/-date-time-parsers/-iso/-basic/-i-n-s-t-a-n-t_-i-n-t-e-r-v-a-l/#instant_interval","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val INSTANT_INTERVAL: GroupedDateTimeParser","title":"INSTANT_INTERVAL"},{"location":"api/core/io.islandtime.parser/-date-time-parsers/-iso/-basic/-o-f-f-s-e-t_-d-a-t-e_-t-i-m-e/","text":"core / io.islandtime.parser / DateTimeParsers / Iso / Basic / OFFSET_DATE_TIME OFFSET_DATE_TIME (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val OFFSET_DATE_TIME: DateTimeParser Parse an ISO-8601 date, time of day, and UTC offset in basic format. Examples: 20080901T1830-400 20080901 183000Z 20080901 1830-04","title":" o f f s e t  d a t e  t i m e"},{"location":"api/core/io.islandtime.parser/-date-time-parsers/-iso/-basic/-o-f-f-s-e-t_-d-a-t-e_-t-i-m-e/#offset_date_time","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val OFFSET_DATE_TIME: DateTimeParser Parse an ISO-8601 date, time of day, and UTC offset in basic format. Examples: 20080901T1830-400 20080901 183000Z 20080901 1830-04","title":"OFFSET_DATE_TIME"},{"location":"api/core/io.islandtime.parser/-date-time-parsers/-iso/-basic/-o-f-f-s-e-t_-d-a-t-e_-t-i-m-e_-i-n-t-e-r-v-a-l/","text":"core / io.islandtime.parser / DateTimeParsers / Iso / Basic / OFFSET_DATE_TIME_INTERVAL OFFSET_DATE_TIME_INTERVAL (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val OFFSET_DATE_TIME_INTERVAL: GroupedDateTimeParser","title":" o f f s e t  d a t e  t i m e  i n t e r v a l"},{"location":"api/core/io.islandtime.parser/-date-time-parsers/-iso/-basic/-o-f-f-s-e-t_-d-a-t-e_-t-i-m-e_-i-n-t-e-r-v-a-l/#offset_date_time_interval","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val OFFSET_DATE_TIME_INTERVAL: GroupedDateTimeParser","title":"OFFSET_DATE_TIME_INTERVAL"},{"location":"api/core/io.islandtime.parser/-date-time-parsers/-iso/-basic/-o-f-f-s-e-t_-t-i-m-e/","text":"core / io.islandtime.parser / DateTimeParsers / Iso / Basic / OFFSET_TIME OFFSET_TIME (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val OFFSET_TIME: DateTimeParser","title":" o f f s e t  t i m e"},{"location":"api/core/io.islandtime.parser/-date-time-parsers/-iso/-basic/-o-f-f-s-e-t_-t-i-m-e/#offset_time","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val OFFSET_TIME: DateTimeParser","title":"OFFSET_TIME"},{"location":"api/core/io.islandtime.parser/-date-time-parsers/-iso/-basic/-o-r-d-i-n-a-l_-d-a-t-e/","text":"core / io.islandtime.parser / DateTimeParsers / Iso / Basic / ORDINAL_DATE ORDINAL_DATE (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val ORDINAL_DATE: DateTimeParser","title":" o r d i n a l  d a t e"},{"location":"api/core/io.islandtime.parser/-date-time-parsers/-iso/-basic/-o-r-d-i-n-a-l_-d-a-t-e/#ordinal_date","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val ORDINAL_DATE: DateTimeParser","title":"ORDINAL_DATE"},{"location":"api/core/io.islandtime.parser/-date-time-parsers/-iso/-basic/-t-i-m-e/","text":"core / io.islandtime.parser / DateTimeParsers / Iso / Basic / TIME TIME (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val TIME: DateTimeParser","title":" t i m e"},{"location":"api/core/io.islandtime.parser/-date-time-parsers/-iso/-basic/-t-i-m-e/#time","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val TIME: DateTimeParser","title":"TIME"},{"location":"api/core/io.islandtime.parser/-date-time-parsers/-iso/-basic/-u-t-c_-o-f-f-s-e-t/","text":"core / io.islandtime.parser / DateTimeParsers / Iso / Basic / UTC_OFFSET UTC_OFFSET (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val UTC_OFFSET: DateTimeParser","title":" u t c  o f f s e t"},{"location":"api/core/io.islandtime.parser/-date-time-parsers/-iso/-basic/-u-t-c_-o-f-f-s-e-t/#utc_offset","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val UTC_OFFSET: DateTimeParser","title":"UTC_OFFSET"},{"location":"api/core/io.islandtime.parser/-date-time-parsers/-iso/-basic/-z-o-n-e-d_-d-a-t-e_-t-i-m-e/","text":"core / io.islandtime.parser / DateTimeParsers / Iso / Basic / ZONED_DATE_TIME ZONED_DATE_TIME (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val ZONED_DATE_TIME: DateTimeParser Parse an ISO-8601 date, time of day, UTC offset, and optionally, a non-standard region ID in basic format. Examples: 20080901T1830-400[America/New_York] 20080901 183000Z 20080901 1830-04[America/New_York]","title":" z o n e d  d a t e  t i m e"},{"location":"api/core/io.islandtime.parser/-date-time-parsers/-iso/-basic/-z-o-n-e-d_-d-a-t-e_-t-i-m-e/#zoned_date_time","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val ZONED_DATE_TIME: DateTimeParser Parse an ISO-8601 date, time of day, UTC offset, and optionally, a non-standard region ID in basic format. Examples: 20080901T1830-400[America/New_York] 20080901 183000Z 20080901 1830-04[America/New_York]","title":"ZONED_DATE_TIME"},{"location":"api/core/io.islandtime.parser/-date-time-parsers/-iso/-basic/-z-o-n-e-d_-d-a-t-e_-t-i-m-e_-i-n-t-e-r-v-a-l/","text":"core / io.islandtime.parser / DateTimeParsers / Iso / Basic / ZONED_DATE_TIME_INTERVAL ZONED_DATE_TIME_INTERVAL (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val ZONED_DATE_TIME_INTERVAL: GroupedDateTimeParser","title":" z o n e d  d a t e  t i m e  i n t e r v a l"},{"location":"api/core/io.islandtime.parser/-date-time-parsers/-iso/-basic/-z-o-n-e-d_-d-a-t-e_-t-i-m-e_-i-n-t-e-r-v-a-l/#zoned_date_time_interval","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val ZONED_DATE_TIME_INTERVAL: GroupedDateTimeParser","title":"ZONED_DATE_TIME_INTERVAL"},{"location":"api/core/io.islandtime.parser/-date-time-parsers/-iso/-extended/","text":"core / io.islandtime.parser / DateTimeParsers / Iso / Extended Extended (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) object Extended Properties Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) CALENDAR_DATE val CALENDAR_DATE: DateTimeParser (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) DATE val DATE: DateTimeParser (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) DATE_RANGE Parse an ISO-8601 time interval between two dates in extended format. val DATE_RANGE: GroupedDateTimeParser (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) DATE_TIME Parse an ISO-8601 date and time of day in extended format. val DATE_TIME: DateTimeParser (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) DATE_TIME_INTERVAL val DATE_TIME_INTERVAL: GroupedDateTimeParser (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) INSTANT Parse an ISO-8601 date-time with the zero UTC offset designator in extended format. val INSTANT: DateTimeParser (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) INSTANT_INTERVAL val INSTANT_INTERVAL: GroupedDateTimeParser (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) OFFSET_DATE_TIME Parse an ISO-8601 date, time of day, and UTC offset in extended format. val OFFSET_DATE_TIME: DateTimeParser (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) OFFSET_DATE_TIME_INTERVAL val OFFSET_DATE_TIME_INTERVAL: GroupedDateTimeParser (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) OFFSET_TIME val OFFSET_TIME: DateTimeParser (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) ORDINAL_DATE val ORDINAL_DATE: DateTimeParser (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) TIME val TIME: DateTimeParser (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) UTC_OFFSET val UTC_OFFSET: DateTimeParser (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) ZONED_DATE_TIME Parse an ISO-8601 date, time of day, UTC offset, and optionally, a non-standard region ID in extended format. val ZONED_DATE_TIME: DateTimeParser (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) ZONED_DATE_TIME_INTERVAL val ZONED_DATE_TIME_INTERVAL: GroupedDateTimeParser","title":"Index"},{"location":"api/core/io.islandtime.parser/-date-time-parsers/-iso/-extended/#extended","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) object Extended","title":"Extended"},{"location":"api/core/io.islandtime.parser/-date-time-parsers/-iso/-extended/#properties","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) CALENDAR_DATE val CALENDAR_DATE: DateTimeParser (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) DATE val DATE: DateTimeParser (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) DATE_RANGE Parse an ISO-8601 time interval between two dates in extended format. val DATE_RANGE: GroupedDateTimeParser (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) DATE_TIME Parse an ISO-8601 date and time of day in extended format. val DATE_TIME: DateTimeParser (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) DATE_TIME_INTERVAL val DATE_TIME_INTERVAL: GroupedDateTimeParser (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) INSTANT Parse an ISO-8601 date-time with the zero UTC offset designator in extended format. val INSTANT: DateTimeParser (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) INSTANT_INTERVAL val INSTANT_INTERVAL: GroupedDateTimeParser (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) OFFSET_DATE_TIME Parse an ISO-8601 date, time of day, and UTC offset in extended format. val OFFSET_DATE_TIME: DateTimeParser (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) OFFSET_DATE_TIME_INTERVAL val OFFSET_DATE_TIME_INTERVAL: GroupedDateTimeParser (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) OFFSET_TIME val OFFSET_TIME: DateTimeParser (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) ORDINAL_DATE val ORDINAL_DATE: DateTimeParser (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) TIME val TIME: DateTimeParser (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) UTC_OFFSET val UTC_OFFSET: DateTimeParser (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) ZONED_DATE_TIME Parse an ISO-8601 date, time of day, UTC offset, and optionally, a non-standard region ID in extended format. val ZONED_DATE_TIME: DateTimeParser (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) ZONED_DATE_TIME_INTERVAL val ZONED_DATE_TIME_INTERVAL: GroupedDateTimeParser","title":"Properties"},{"location":"api/core/io.islandtime.parser/-date-time-parsers/-iso/-extended/-c-a-l-e-n-d-a-r_-d-a-t-e/","text":"core / io.islandtime.parser / DateTimeParsers / Iso / Extended / CALENDAR_DATE CALENDAR_DATE (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val CALENDAR_DATE: DateTimeParser","title":" c a l e n d a r  d a t e"},{"location":"api/core/io.islandtime.parser/-date-time-parsers/-iso/-extended/-c-a-l-e-n-d-a-r_-d-a-t-e/#calendar_date","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val CALENDAR_DATE: DateTimeParser","title":"CALENDAR_DATE"},{"location":"api/core/io.islandtime.parser/-date-time-parsers/-iso/-extended/-d-a-t-e/","text":"core / io.islandtime.parser / DateTimeParsers / Iso / Extended / DATE DATE (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val DATE: DateTimeParser","title":" d a t e"},{"location":"api/core/io.islandtime.parser/-date-time-parsers/-iso/-extended/-d-a-t-e/#date","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val DATE: DateTimeParser","title":"DATE"},{"location":"api/core/io.islandtime.parser/-date-time-parsers/-iso/-extended/-d-a-t-e_-r-a-n-g-e/","text":"core / io.islandtime.parser / DateTimeParsers / Iso / Extended / DATE_RANGE DATE_RANGE (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val DATE_RANGE: GroupedDateTimeParser Parse an ISO-8601 time interval between two dates in extended format. Examples: 1990-01-04/1991-08-30 ../1991-08-30 1990-01-04/.. ../.. (empty string)","title":" d a t e  r a n g e"},{"location":"api/core/io.islandtime.parser/-date-time-parsers/-iso/-extended/-d-a-t-e_-r-a-n-g-e/#date_range","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val DATE_RANGE: GroupedDateTimeParser Parse an ISO-8601 time interval between two dates in extended format. Examples: 1990-01-04/1991-08-30 ../1991-08-30 1990-01-04/.. ../.. (empty string)","title":"DATE_RANGE"},{"location":"api/core/io.islandtime.parser/-date-time-parsers/-iso/-extended/-d-a-t-e_-t-i-m-e/","text":"core / io.islandtime.parser / DateTimeParsers / Iso / Extended / DATE_TIME DATE_TIME (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val DATE_TIME: DateTimeParser Parse an ISO-8601 date and time of day in extended format. Examples: 2008-09-01T18:30 2008-09-01 18:30:00 2008-09-01 18:30","title":" d a t e  t i m e"},{"location":"api/core/io.islandtime.parser/-date-time-parsers/-iso/-extended/-d-a-t-e_-t-i-m-e/#date_time","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val DATE_TIME: DateTimeParser Parse an ISO-8601 date and time of day in extended format. Examples: 2008-09-01T18:30 2008-09-01 18:30:00 2008-09-01 18:30","title":"DATE_TIME"},{"location":"api/core/io.islandtime.parser/-date-time-parsers/-iso/-extended/-d-a-t-e_-t-i-m-e_-i-n-t-e-r-v-a-l/","text":"core / io.islandtime.parser / DateTimeParsers / Iso / Extended / DATE_TIME_INTERVAL DATE_TIME_INTERVAL (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val DATE_TIME_INTERVAL: GroupedDateTimeParser","title":" d a t e  t i m e  i n t e r v a l"},{"location":"api/core/io.islandtime.parser/-date-time-parsers/-iso/-extended/-d-a-t-e_-t-i-m-e_-i-n-t-e-r-v-a-l/#date_time_interval","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val DATE_TIME_INTERVAL: GroupedDateTimeParser","title":"DATE_TIME_INTERVAL"},{"location":"api/core/io.islandtime.parser/-date-time-parsers/-iso/-extended/-i-n-s-t-a-n-t/","text":"core / io.islandtime.parser / DateTimeParsers / Iso / Extended / INSTANT INSTANT (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val INSTANT: DateTimeParser Parse an ISO-8601 date-time with the zero UTC offset designator in extended format. Examples: 2001-05-10T00:24:00.00000Z 2001-05-10T00:24Z","title":" i n s t a n t"},{"location":"api/core/io.islandtime.parser/-date-time-parsers/-iso/-extended/-i-n-s-t-a-n-t/#instant","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val INSTANT: DateTimeParser Parse an ISO-8601 date-time with the zero UTC offset designator in extended format. Examples: 2001-05-10T00:24:00.00000Z 2001-05-10T00:24Z","title":"INSTANT"},{"location":"api/core/io.islandtime.parser/-date-time-parsers/-iso/-extended/-i-n-s-t-a-n-t_-i-n-t-e-r-v-a-l/","text":"core / io.islandtime.parser / DateTimeParsers / Iso / Extended / INSTANT_INTERVAL INSTANT_INTERVAL (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val INSTANT_INTERVAL: GroupedDateTimeParser","title":" i n s t a n t  i n t e r v a l"},{"location":"api/core/io.islandtime.parser/-date-time-parsers/-iso/-extended/-i-n-s-t-a-n-t_-i-n-t-e-r-v-a-l/#instant_interval","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val INSTANT_INTERVAL: GroupedDateTimeParser","title":"INSTANT_INTERVAL"},{"location":"api/core/io.islandtime.parser/-date-time-parsers/-iso/-extended/-o-f-f-s-e-t_-d-a-t-e_-t-i-m-e/","text":"core / io.islandtime.parser / DateTimeParsers / Iso / Extended / OFFSET_DATE_TIME OFFSET_DATE_TIME (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val OFFSET_DATE_TIME: DateTimeParser Parse an ISO-8601 date, time of day, and UTC offset in extended format. Examples: 2008-09-01T18:30-4:00 2008-09-01 18:30:00Z 2008-09-01 18:30-04","title":" o f f s e t  d a t e  t i m e"},{"location":"api/core/io.islandtime.parser/-date-time-parsers/-iso/-extended/-o-f-f-s-e-t_-d-a-t-e_-t-i-m-e/#offset_date_time","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val OFFSET_DATE_TIME: DateTimeParser Parse an ISO-8601 date, time of day, and UTC offset in extended format. Examples: 2008-09-01T18:30-4:00 2008-09-01 18:30:00Z 2008-09-01 18:30-04","title":"OFFSET_DATE_TIME"},{"location":"api/core/io.islandtime.parser/-date-time-parsers/-iso/-extended/-o-f-f-s-e-t_-d-a-t-e_-t-i-m-e_-i-n-t-e-r-v-a-l/","text":"core / io.islandtime.parser / DateTimeParsers / Iso / Extended / OFFSET_DATE_TIME_INTERVAL OFFSET_DATE_TIME_INTERVAL (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val OFFSET_DATE_TIME_INTERVAL: GroupedDateTimeParser","title":" o f f s e t  d a t e  t i m e  i n t e r v a l"},{"location":"api/core/io.islandtime.parser/-date-time-parsers/-iso/-extended/-o-f-f-s-e-t_-d-a-t-e_-t-i-m-e_-i-n-t-e-r-v-a-l/#offset_date_time_interval","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val OFFSET_DATE_TIME_INTERVAL: GroupedDateTimeParser","title":"OFFSET_DATE_TIME_INTERVAL"},{"location":"api/core/io.islandtime.parser/-date-time-parsers/-iso/-extended/-o-f-f-s-e-t_-t-i-m-e/","text":"core / io.islandtime.parser / DateTimeParsers / Iso / Extended / OFFSET_TIME OFFSET_TIME (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val OFFSET_TIME: DateTimeParser","title":" o f f s e t  t i m e"},{"location":"api/core/io.islandtime.parser/-date-time-parsers/-iso/-extended/-o-f-f-s-e-t_-t-i-m-e/#offset_time","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val OFFSET_TIME: DateTimeParser","title":"OFFSET_TIME"},{"location":"api/core/io.islandtime.parser/-date-time-parsers/-iso/-extended/-o-r-d-i-n-a-l_-d-a-t-e/","text":"core / io.islandtime.parser / DateTimeParsers / Iso / Extended / ORDINAL_DATE ORDINAL_DATE (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val ORDINAL_DATE: DateTimeParser","title":" o r d i n a l  d a t e"},{"location":"api/core/io.islandtime.parser/-date-time-parsers/-iso/-extended/-o-r-d-i-n-a-l_-d-a-t-e/#ordinal_date","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val ORDINAL_DATE: DateTimeParser","title":"ORDINAL_DATE"},{"location":"api/core/io.islandtime.parser/-date-time-parsers/-iso/-extended/-t-i-m-e/","text":"core / io.islandtime.parser / DateTimeParsers / Iso / Extended / TIME TIME (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val TIME: DateTimeParser","title":" t i m e"},{"location":"api/core/io.islandtime.parser/-date-time-parsers/-iso/-extended/-t-i-m-e/#time","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val TIME: DateTimeParser","title":"TIME"},{"location":"api/core/io.islandtime.parser/-date-time-parsers/-iso/-extended/-u-t-c_-o-f-f-s-e-t/","text":"core / io.islandtime.parser / DateTimeParsers / Iso / Extended / UTC_OFFSET UTC_OFFSET (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val UTC_OFFSET: DateTimeParser","title":" u t c  o f f s e t"},{"location":"api/core/io.islandtime.parser/-date-time-parsers/-iso/-extended/-u-t-c_-o-f-f-s-e-t/#utc_offset","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val UTC_OFFSET: DateTimeParser","title":"UTC_OFFSET"},{"location":"api/core/io.islandtime.parser/-date-time-parsers/-iso/-extended/-z-o-n-e-d_-d-a-t-e_-t-i-m-e/","text":"core / io.islandtime.parser / DateTimeParsers / Iso / Extended / ZONED_DATE_TIME ZONED_DATE_TIME (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val ZONED_DATE_TIME: DateTimeParser Parse an ISO-8601 date, time of day, UTC offset, and optionally, a non-standard region ID in extended format. Examples: 2008-09-01T18:30-4:00[America/New_York] 2008-09-01 18:30:00Z","title":" z o n e d  d a t e  t i m e"},{"location":"api/core/io.islandtime.parser/-date-time-parsers/-iso/-extended/-z-o-n-e-d_-d-a-t-e_-t-i-m-e/#zoned_date_time","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val ZONED_DATE_TIME: DateTimeParser Parse an ISO-8601 date, time of day, UTC offset, and optionally, a non-standard region ID in extended format. Examples: 2008-09-01T18:30-4:00[America/New_York] 2008-09-01 18:30:00Z","title":"ZONED_DATE_TIME"},{"location":"api/core/io.islandtime.parser/-date-time-parsers/-iso/-extended/-z-o-n-e-d_-d-a-t-e_-t-i-m-e_-i-n-t-e-r-v-a-l/","text":"core / io.islandtime.parser / DateTimeParsers / Iso / Extended / ZONED_DATE_TIME_INTERVAL ZONED_DATE_TIME_INTERVAL (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val ZONED_DATE_TIME_INTERVAL: GroupedDateTimeParser","title":" z o n e d  d a t e  t i m e  i n t e r v a l"},{"location":"api/core/io.islandtime.parser/-date-time-parsers/-iso/-extended/-z-o-n-e-d_-d-a-t-e_-t-i-m-e_-i-n-t-e-r-v-a-l/#zoned_date_time_interval","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val ZONED_DATE_TIME_INTERVAL: GroupedDateTimeParser","title":"ZONED_DATE_TIME_INTERVAL"},{"location":"api/core/io.islandtime.parser/-decimal-number-parser-builder/","text":"core / io.islandtime.parser / DecimalNumberParserBuilder DecimalNumberParserBuilder (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) interface DecimalNumberParserBuilder : NumberParserBuilder Functions Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) associateWith Associate both the whole and fractional part of the result with a particular DateTimeField , populating their values when parsing succeeds. open fun associateWith(wholeField: DateTimeField , fractionField: DateTimeField ): Unit (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) onParsed Perform an action when parsing succeeds. abstract fun onParsed(action: DateTimeParseResult .(whole: Long , fraction: Long ) -> Unit ): Unit","title":"Index"},{"location":"api/core/io.islandtime.parser/-decimal-number-parser-builder/#decimalnumberparserbuilder","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) interface DecimalNumberParserBuilder : NumberParserBuilder","title":"DecimalNumberParserBuilder"},{"location":"api/core/io.islandtime.parser/-decimal-number-parser-builder/#functions","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) associateWith Associate both the whole and fractional part of the result with a particular DateTimeField , populating their values when parsing succeeds. open fun associateWith(wholeField: DateTimeField , fractionField: DateTimeField ): Unit (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) onParsed Perform an action when parsing succeeds. abstract fun onParsed(action: DateTimeParseResult .(whole: Long , fraction: Long ) -> Unit ): Unit","title":"Functions"},{"location":"api/core/io.islandtime.parser/-decimal-number-parser-builder/associate-with/","text":"core / io.islandtime.parser / DecimalNumberParserBuilder / associateWith associateWith (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) open fun associateWith(wholeField: DateTimeField , fractionField: DateTimeField ): Unit Associate both the whole and fractional part of the result with a particular DateTimeField , populating their values when parsing succeeds.","title":"Associate with"},{"location":"api/core/io.islandtime.parser/-decimal-number-parser-builder/associate-with/#associatewith","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) open fun associateWith(wholeField: DateTimeField , fractionField: DateTimeField ): Unit Associate both the whole and fractional part of the result with a particular DateTimeField , populating their values when parsing succeeds.","title":"associateWith"},{"location":"api/core/io.islandtime.parser/-decimal-number-parser-builder/on-parsed/","text":"core / io.islandtime.parser / DecimalNumberParserBuilder / onParsed onParsed (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract fun onParsed(action: DateTimeParseResult .(whole: Long , fraction: Long ) -> Unit ): Unit Perform an action when parsing succeeds.","title":"On parsed"},{"location":"api/core/io.islandtime.parser/-decimal-number-parser-builder/on-parsed/#onparsed","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract fun onParsed(action: DateTimeParseResult .(whole: Long , fraction: Long ) -> Unit ): Unit Perform an action when parsing succeeds.","title":"onParsed"},{"location":"api/core/io.islandtime.parser/-grouped-date-time-parser/","text":"core / io.islandtime.parser / GroupedDateTimeParser GroupedDateTimeParser (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) class GroupedDateTimeParser Functions Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) parse Parse text into a list of results, each containing the parsed fields associated with a particular group. fun parse(text: CharSequence , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): List < DateTimeParseResult >","title":"Index"},{"location":"api/core/io.islandtime.parser/-grouped-date-time-parser/#groupeddatetimeparser","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) class GroupedDateTimeParser","title":"GroupedDateTimeParser"},{"location":"api/core/io.islandtime.parser/-grouped-date-time-parser/#functions","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) parse Parse text into a list of results, each containing the parsed fields associated with a particular group. fun parse(text: CharSequence , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): List < DateTimeParseResult >","title":"Functions"},{"location":"api/core/io.islandtime.parser/-grouped-date-time-parser/parse/","text":"core / io.islandtime.parser / GroupedDateTimeParser / parse parse (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun parse(text: CharSequence , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): List < DateTimeParseResult > Parse text into a list of results, each containing the parsed fields associated with a particular group. Parameters text - text to parse settings - customize parsing behavior Exceptions DateTimeParseException - if parsing failed Return a list of results, matching the number of groups defined in the parser","title":"Parse"},{"location":"api/core/io.islandtime.parser/-grouped-date-time-parser/parse/#parse","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun parse(text: CharSequence , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): List < DateTimeParseResult > Parse text into a list of results, each containing the parsed fields associated with a particular group.","title":"parse"},{"location":"api/core/io.islandtime.parser/-grouped-date-time-parser/parse/#parameters","text":"text - text to parse settings - customize parsing behavior","title":"Parameters"},{"location":"api/core/io.islandtime.parser/-grouped-date-time-parser/parse/#exceptions","text":"DateTimeParseException - if parsing failed Return a list of results, matching the number of groups defined in the parser","title":"Exceptions"},{"location":"api/core/io.islandtime.parser/-grouped-date-time-parser-builder/","text":"core / io.islandtime.parser / GroupedDateTimeParserBuilder GroupedDateTimeParserBuilder (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) interface GroupedDateTimeParserBuilder Functions Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) anyOf Try each of the parsers defined by builders until one succeeds. If none succeed, parsing is considered to have failed. abstract fun anyOf(vararg builders: GroupedDateTimeParserBuilder .() -> Unit ): Unit Try each of the parsers defined by childParsers until one succeeds and include all of its groups in the parsing results. If none of the parsers succeed, parsing is considered to have failed at the starting index. abstract fun anyOf(vararg childParsers: GroupedDateTimeParser ): Unit (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) group Create a distinct parse result and associate any parsed data with it. abstract fun group(builder: DateTimeParserBuilder .() -> Unit ): Unit (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) literal Parse a Char literal. abstract fun literal(char: Char ): Unit Parse a String literal. abstract fun literal(string: String ): Unit (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) unaryPlus Parse a Char literal. open operator fun Char .unaryPlus(): Unit Parse a String literal. open operator fun String .unaryPlus(): Unit","title":"Index"},{"location":"api/core/io.islandtime.parser/-grouped-date-time-parser-builder/#groupeddatetimeparserbuilder","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) interface GroupedDateTimeParserBuilder","title":"GroupedDateTimeParserBuilder"},{"location":"api/core/io.islandtime.parser/-grouped-date-time-parser-builder/#functions","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) anyOf Try each of the parsers defined by builders until one succeeds. If none succeed, parsing is considered to have failed. abstract fun anyOf(vararg builders: GroupedDateTimeParserBuilder .() -> Unit ): Unit Try each of the parsers defined by childParsers until one succeeds and include all of its groups in the parsing results. If none of the parsers succeed, parsing is considered to have failed at the starting index. abstract fun anyOf(vararg childParsers: GroupedDateTimeParser ): Unit (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) group Create a distinct parse result and associate any parsed data with it. abstract fun group(builder: DateTimeParserBuilder .() -> Unit ): Unit (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) literal Parse a Char literal. abstract fun literal(char: Char ): Unit Parse a String literal. abstract fun literal(string: String ): Unit (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) unaryPlus Parse a Char literal. open operator fun Char .unaryPlus(): Unit Parse a String literal. open operator fun String .unaryPlus(): Unit","title":"Functions"},{"location":"api/core/io.islandtime.parser/-grouped-date-time-parser-builder/any-of/","text":"core / io.islandtime.parser / GroupedDateTimeParserBuilder / anyOf anyOf (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract fun anyOf(vararg builders: GroupedDateTimeParserBuilder .() -> Unit ): Unit Try each of the parsers defined by builders until one succeeds. If none succeed, parsing is considered to have failed. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract fun anyOf(vararg childParsers: GroupedDateTimeParser ): Unit Try each of the parsers defined by childParsers until one succeeds and include all of its groups in the parsing results. If none of the parsers succeed, parsing is considered to have failed at the starting index.","title":"Any of"},{"location":"api/core/io.islandtime.parser/-grouped-date-time-parser-builder/any-of/#anyof","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract fun anyOf(vararg builders: GroupedDateTimeParserBuilder .() -> Unit ): Unit Try each of the parsers defined by builders until one succeeds. If none succeed, parsing is considered to have failed. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract fun anyOf(vararg childParsers: GroupedDateTimeParser ): Unit Try each of the parsers defined by childParsers until one succeeds and include all of its groups in the parsing results. If none of the parsers succeed, parsing is considered to have failed at the starting index.","title":"anyOf"},{"location":"api/core/io.islandtime.parser/-grouped-date-time-parser-builder/group/","text":"core / io.islandtime.parser / GroupedDateTimeParserBuilder / group group (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract fun group(builder: DateTimeParserBuilder .() -> Unit ): Unit Create a distinct parse result and associate any parsed data with it. Parameters builder - define the parsers that should be associated with this result","title":"Group"},{"location":"api/core/io.islandtime.parser/-grouped-date-time-parser-builder/group/#group","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract fun group(builder: DateTimeParserBuilder .() -> Unit ): Unit Create a distinct parse result and associate any parsed data with it.","title":"group"},{"location":"api/core/io.islandtime.parser/-grouped-date-time-parser-builder/group/#parameters","text":"builder - define the parsers that should be associated with this result","title":"Parameters"},{"location":"api/core/io.islandtime.parser/-grouped-date-time-parser-builder/literal/","text":"core / io.islandtime.parser / GroupedDateTimeParserBuilder / literal literal (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract fun literal(char: Char ): Unit Parse a Char literal. Parameters char - the character to match(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract fun literal(string: String ): Unit Parse a String literal. Parameters string - the string to match","title":"Literal"},{"location":"api/core/io.islandtime.parser/-grouped-date-time-parser-builder/literal/#literal","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract fun literal(char: Char ): Unit Parse a Char literal.","title":"literal"},{"location":"api/core/io.islandtime.parser/-grouped-date-time-parser-builder/literal/#parameters","text":"char - the character to match(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract fun literal(string: String ): Unit Parse a String literal.","title":"Parameters"},{"location":"api/core/io.islandtime.parser/-grouped-date-time-parser-builder/literal/#parameters_1","text":"string - the string to match","title":"Parameters"},{"location":"api/core/io.islandtime.parser/-grouped-date-time-parser-builder/unary-plus/","text":"core / io.islandtime.parser / GroupedDateTimeParserBuilder / unaryPlus unaryPlus (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) open operator fun Char .unaryPlus(): Unit Parse a Char literal. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) open operator fun String .unaryPlus(): Unit Parse a String literal.","title":"Unary plus"},{"location":"api/core/io.islandtime.parser/-grouped-date-time-parser-builder/unary-plus/#unaryplus","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) open operator fun Char .unaryPlus(): Unit Parse a Char literal. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) open operator fun String .unaryPlus(): Unit Parse a String literal.","title":"unaryPlus"},{"location":"api/core/io.islandtime.parser/-literal-parser-builder/","text":"core / io.islandtime.parser / LiteralParserBuilder LiteralParserBuilder (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) interface LiteralParserBuilder Functions Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) associateWith Associate the result with a particular DateTimeField , setting its value to 1L when parsing succeeds. open fun associateWith(field: DateTimeField ): Unit (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) onParsed Perform an action when parsing succeeds. abstract fun onParsed(action: DateTimeParseResult .() -> Unit ): Unit","title":"Index"},{"location":"api/core/io.islandtime.parser/-literal-parser-builder/#literalparserbuilder","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) interface LiteralParserBuilder","title":"LiteralParserBuilder"},{"location":"api/core/io.islandtime.parser/-literal-parser-builder/#functions","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) associateWith Associate the result with a particular DateTimeField , setting its value to 1L when parsing succeeds. open fun associateWith(field: DateTimeField ): Unit (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) onParsed Perform an action when parsing succeeds. abstract fun onParsed(action: DateTimeParseResult .() -> Unit ): Unit","title":"Functions"},{"location":"api/core/io.islandtime.parser/-literal-parser-builder/associate-with/","text":"core / io.islandtime.parser / LiteralParserBuilder / associateWith associateWith (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) open fun associateWith(field: DateTimeField ): Unit Associate the result with a particular DateTimeField , setting its value to 1L when parsing succeeds.","title":"Associate with"},{"location":"api/core/io.islandtime.parser/-literal-parser-builder/associate-with/#associatewith","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) open fun associateWith(field: DateTimeField ): Unit Associate the result with a particular DateTimeField , setting its value to 1L when parsing succeeds.","title":"associateWith"},{"location":"api/core/io.islandtime.parser/-literal-parser-builder/on-parsed/","text":"core / io.islandtime.parser / LiteralParserBuilder / onParsed onParsed (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract fun onParsed(action: DateTimeParseResult .() -> Unit ): Unit Perform an action when parsing succeeds.","title":"On parsed"},{"location":"api/core/io.islandtime.parser/-literal-parser-builder/on-parsed/#onparsed","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract fun onParsed(action: DateTimeParseResult .() -> Unit ): Unit Perform an action when parsing succeeds.","title":"onParsed"},{"location":"api/core/io.islandtime.parser/-number-parser-builder/","text":"core / io.islandtime.parser / NumberParserBuilder NumberParserBuilder (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) interface NumberParserBuilder Functions Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) enforceSignStyle Enforce a particular sign style. abstract fun enforceSignStyle(signStyle: SignStyle ): Unit Inheritors Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) DecimalNumberParserBuilder interface DecimalNumberParserBuilder : NumberParserBuilder (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) WholeNumberParserBuilder interface WholeNumberParserBuilder : NumberParserBuilder","title":"Index"},{"location":"api/core/io.islandtime.parser/-number-parser-builder/#numberparserbuilder","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) interface NumberParserBuilder","title":"NumberParserBuilder"},{"location":"api/core/io.islandtime.parser/-number-parser-builder/#functions","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) enforceSignStyle Enforce a particular sign style. abstract fun enforceSignStyle(signStyle: SignStyle ): Unit","title":"Functions"},{"location":"api/core/io.islandtime.parser/-number-parser-builder/#inheritors","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) DecimalNumberParserBuilder interface DecimalNumberParserBuilder : NumberParserBuilder (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) WholeNumberParserBuilder interface WholeNumberParserBuilder : NumberParserBuilder","title":"Inheritors"},{"location":"api/core/io.islandtime.parser/-number-parser-builder/enforce-sign-style/","text":"core / io.islandtime.parser / NumberParserBuilder / enforceSignStyle enforceSignStyle (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract fun enforceSignStyle(signStyle: SignStyle ): Unit Enforce a particular sign style.","title":"Enforce sign style"},{"location":"api/core/io.islandtime.parser/-number-parser-builder/enforce-sign-style/#enforcesignstyle","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract fun enforceSignStyle(signStyle: SignStyle ): Unit Enforce a particular sign style.","title":"enforceSignStyle"},{"location":"api/core/io.islandtime.parser/-sign-parser-builder/","text":"core / io.islandtime.parser / SignParserBuilder SignParserBuilder (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) interface SignParserBuilder Functions Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) associateWith Associate the result with a particular DateTimeField , setting it to -1L when negative or 1L when positive. open fun associateWith(field: DateTimeField ): Unit (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) onParsed Perform an action when a number's sign has been successfully parsed abstract fun onParsed(action: DateTimeParseResult .(parsed: Int ) -> Unit ): Unit","title":"Index"},{"location":"api/core/io.islandtime.parser/-sign-parser-builder/#signparserbuilder","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) interface SignParserBuilder","title":"SignParserBuilder"},{"location":"api/core/io.islandtime.parser/-sign-parser-builder/#functions","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) associateWith Associate the result with a particular DateTimeField , setting it to -1L when negative or 1L when positive. open fun associateWith(field: DateTimeField ): Unit (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) onParsed Perform an action when a number's sign has been successfully parsed abstract fun onParsed(action: DateTimeParseResult .(parsed: Int ) -> Unit ): Unit","title":"Functions"},{"location":"api/core/io.islandtime.parser/-sign-parser-builder/associate-with/","text":"core / io.islandtime.parser / SignParserBuilder / associateWith associateWith (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) open fun associateWith(field: DateTimeField ): Unit Associate the result with a particular DateTimeField , setting it to -1L when negative or 1L when positive.","title":"Associate with"},{"location":"api/core/io.islandtime.parser/-sign-parser-builder/associate-with/#associatewith","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) open fun associateWith(field: DateTimeField ): Unit Associate the result with a particular DateTimeField , setting it to -1L when negative or 1L when positive.","title":"associateWith"},{"location":"api/core/io.islandtime.parser/-sign-parser-builder/on-parsed/","text":"core / io.islandtime.parser / SignParserBuilder / onParsed onParsed (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract fun onParsed(action: DateTimeParseResult .(parsed: Int ) -> Unit ): Unit Perform an action when a number's sign has been successfully parsed","title":"On parsed"},{"location":"api/core/io.islandtime.parser/-sign-parser-builder/on-parsed/#onparsed","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract fun onParsed(action: DateTimeParseResult .(parsed: Int ) -> Unit ): Unit Perform an action when a number's sign has been successfully parsed","title":"onParsed"},{"location":"api/core/io.islandtime.parser/-sign-style/","text":"core / io.islandtime.parser / SignStyle SignStyle (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) enum class SignStyle Enum Values Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) NEGATIVE_ONLY (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) NEVER (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) ALWAYS Inheritors Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) ALWAYS (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) NEGATIVE_ONLY (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) NEVER","title":"Index"},{"location":"api/core/io.islandtime.parser/-sign-style/#signstyle","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) enum class SignStyle","title":"SignStyle"},{"location":"api/core/io.islandtime.parser/-sign-style/#enum-values","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) NEGATIVE_ONLY (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) NEVER (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) ALWAYS","title":"Enum Values"},{"location":"api/core/io.islandtime.parser/-sign-style/#inheritors","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) ALWAYS (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) NEGATIVE_ONLY (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) NEVER","title":"Inheritors"},{"location":"api/core/io.islandtime.parser/-sign-style/-a-l-w-a-y-s/","text":"core / io.islandtime.parser / SignStyle / ALWAYS ALWAYS (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) ALWAYS","title":" a l w a y s"},{"location":"api/core/io.islandtime.parser/-sign-style/-a-l-w-a-y-s/#always","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) ALWAYS","title":"ALWAYS"},{"location":"api/core/io.islandtime.parser/-sign-style/-n-e-g-a-t-i-v-e_-o-n-l-y/","text":"core / io.islandtime.parser / SignStyle / NEGATIVE_ONLY NEGATIVE_ONLY (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) NEGATIVE_ONLY","title":" n e g a t i v e  o n l y"},{"location":"api/core/io.islandtime.parser/-sign-style/-n-e-g-a-t-i-v-e_-o-n-l-y/#negative_only","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) NEGATIVE_ONLY","title":"NEGATIVE_ONLY"},{"location":"api/core/io.islandtime.parser/-sign-style/-n-e-v-e-r/","text":"core / io.islandtime.parser / SignStyle / NEVER NEVER (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) NEVER","title":" n e v e r"},{"location":"api/core/io.islandtime.parser/-sign-style/-n-e-v-e-r/#never","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) NEVER","title":"NEVER"},{"location":"api/core/io.islandtime.parser/-string-parse-action/","text":"core / io.islandtime.parser / StringParseAction StringParseAction (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) enum class StringParseAction Enum Values Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) ACCEPT_AND_CONTINUE (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) REJECT_AND_STOP Inheritors Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) ACCEPT_AND_CONTINUE (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) REJECT_AND_STOP","title":"Index"},{"location":"api/core/io.islandtime.parser/-string-parse-action/#stringparseaction","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) enum class StringParseAction","title":"StringParseAction"},{"location":"api/core/io.islandtime.parser/-string-parse-action/#enum-values","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) ACCEPT_AND_CONTINUE (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) REJECT_AND_STOP","title":"Enum Values"},{"location":"api/core/io.islandtime.parser/-string-parse-action/#inheritors","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) ACCEPT_AND_CONTINUE (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) REJECT_AND_STOP","title":"Inheritors"},{"location":"api/core/io.islandtime.parser/-string-parse-action/-a-c-c-e-p-t_-a-n-d_-c-o-n-t-i-n-u-e/","text":"core / io.islandtime.parser / StringParseAction / ACCEPT_AND_CONTINUE ACCEPT_AND_CONTINUE (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) ACCEPT_AND_CONTINUE","title":" a c c e p t  a n d  c o n t i n u e"},{"location":"api/core/io.islandtime.parser/-string-parse-action/-a-c-c-e-p-t_-a-n-d_-c-o-n-t-i-n-u-e/#accept_and_continue","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) ACCEPT_AND_CONTINUE","title":"ACCEPT_AND_CONTINUE"},{"location":"api/core/io.islandtime.parser/-string-parse-action/-r-e-j-e-c-t_-a-n-d_-s-t-o-p/","text":"core / io.islandtime.parser / StringParseAction / REJECT_AND_STOP REJECT_AND_STOP (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) REJECT_AND_STOP","title":" r e j e c t  a n d  s t o p"},{"location":"api/core/io.islandtime.parser/-string-parse-action/-r-e-j-e-c-t_-a-n-d_-s-t-o-p/#reject_and_stop","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) REJECT_AND_STOP","title":"REJECT_AND_STOP"},{"location":"api/core/io.islandtime.parser/-string-parser-builder/","text":"core / io.islandtime.parser / StringParserBuilder StringParserBuilder (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) interface StringParserBuilder Functions Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) onEachChar Execute a block as each character in the string is encountered during parsing. abstract fun onEachChar(action: DateTimeParseResult .(char: Char , index: Int ) -> StringParseAction ): Unit (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) onParsed Perform an action when parsing succeeds. abstract fun onParsed(action: DateTimeParseResult .(parsed: String ) -> Unit ): Unit","title":"Index"},{"location":"api/core/io.islandtime.parser/-string-parser-builder/#stringparserbuilder","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) interface StringParserBuilder","title":"StringParserBuilder"},{"location":"api/core/io.islandtime.parser/-string-parser-builder/#functions","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) onEachChar Execute a block as each character in the string is encountered during parsing. abstract fun onEachChar(action: DateTimeParseResult .(char: Char , index: Int ) -> StringParseAction ): Unit (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) onParsed Perform an action when parsing succeeds. abstract fun onParsed(action: DateTimeParseResult .(parsed: String ) -> Unit ): Unit","title":"Functions"},{"location":"api/core/io.islandtime.parser/-string-parser-builder/on-each-char/","text":"core / io.islandtime.parser / StringParserBuilder / onEachChar onEachChar (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract fun onEachChar(action: DateTimeParseResult .(char: Char , index: Int ) -> StringParseAction ): Unit Execute a block as each character in the string is encountered during parsing. Return StringParseAction.ACCEPT_AND_CONTINUE to continue parsing or StringParseAction.REJECT_AND_STOP to reject the current character and trigger the end of parsing.","title":"On each char"},{"location":"api/core/io.islandtime.parser/-string-parser-builder/on-each-char/#oneachchar","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract fun onEachChar(action: DateTimeParseResult .(char: Char , index: Int ) -> StringParseAction ): Unit Execute a block as each character in the string is encountered during parsing. Return StringParseAction.ACCEPT_AND_CONTINUE to continue parsing or StringParseAction.REJECT_AND_STOP to reject the current character and trigger the end of parsing.","title":"onEachChar"},{"location":"api/core/io.islandtime.parser/-string-parser-builder/on-parsed/","text":"core / io.islandtime.parser / StringParserBuilder / onParsed onParsed (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract fun onParsed(action: DateTimeParseResult .(parsed: String ) -> Unit ): Unit Perform an action when parsing succeeds.","title":"On parsed"},{"location":"api/core/io.islandtime.parser/-string-parser-builder/on-parsed/#onparsed","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract fun onParsed(action: DateTimeParseResult .(parsed: String ) -> Unit ): Unit Perform an action when parsing succeeds.","title":"onParsed"},{"location":"api/core/io.islandtime.parser/-whole-number-parser-builder/","text":"core / io.islandtime.parser / WholeNumberParserBuilder WholeNumberParserBuilder (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) interface WholeNumberParserBuilder : NumberParserBuilder Functions Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) associateWith Associate the result with a particular DateTimeField , populating its value when parsing succeeds. open fun associateWith(field: DateTimeField ): Unit (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) onParsed Perform an action when parsing succeeds. abstract fun onParsed(action: DateTimeParseResult .(parsed: Long ) -> Unit ): Unit","title":"Index"},{"location":"api/core/io.islandtime.parser/-whole-number-parser-builder/#wholenumberparserbuilder","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) interface WholeNumberParserBuilder : NumberParserBuilder","title":"WholeNumberParserBuilder"},{"location":"api/core/io.islandtime.parser/-whole-number-parser-builder/#functions","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) associateWith Associate the result with a particular DateTimeField , populating its value when parsing succeeds. open fun associateWith(field: DateTimeField ): Unit (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) onParsed Perform an action when parsing succeeds. abstract fun onParsed(action: DateTimeParseResult .(parsed: Long ) -> Unit ): Unit","title":"Functions"},{"location":"api/core/io.islandtime.parser/-whole-number-parser-builder/associate-with/","text":"core / io.islandtime.parser / WholeNumberParserBuilder / associateWith associateWith (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) open fun associateWith(field: DateTimeField ): Unit Associate the result with a particular DateTimeField , populating its value when parsing succeeds.","title":"Associate with"},{"location":"api/core/io.islandtime.parser/-whole-number-parser-builder/associate-with/#associatewith","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) open fun associateWith(field: DateTimeField ): Unit Associate the result with a particular DateTimeField , populating its value when parsing succeeds.","title":"associateWith"},{"location":"api/core/io.islandtime.parser/-whole-number-parser-builder/on-parsed/","text":"core / io.islandtime.parser / WholeNumberParserBuilder / onParsed onParsed (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract fun onParsed(action: DateTimeParseResult .(parsed: Long ) -> Unit ): Unit Perform an action when parsing succeeds.","title":"On parsed"},{"location":"api/core/io.islandtime.parser/-whole-number-parser-builder/on-parsed/#onparsed","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract fun onParsed(action: DateTimeParseResult .(parsed: Long ) -> Unit ): Unit Perform an action when parsing succeeds.","title":"onParsed"},{"location":"api/core/io.islandtime.ranges/","text":"core / io.islandtime.ranges Package io.islandtime.ranges Date ranges, time intervals, and the ability to iterate over them and perform various operations. Types Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) DateDayProgression open class DateDayProgression : Iterable < Date > (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) DateIterator abstract class DateIterator : Iterator < Date > (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) DateMonthProgression class DateMonthProgression : Iterable < Date > (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) DateRange An inclusive range of dates. class DateRange : DateDayProgression , ClosedRange < Date > (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) DateTimeInterval An interval between two arbitrary date-times. class DateTimeInterval : TimeInterval < DateTime > (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) InstantInterval A half-open interval between two instants. class InstantInterval : TimePointInterval < Instant >, TimePointProgressionBuilder < Instant > (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) OffsetDateTimeInterval A half-open interval between two offset date-times based on timeline order. class OffsetDateTimeInterval : TimePointInterval < OffsetDateTime > (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) TimeInterval A half-open time interval. interface TimeInterval<T> (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) TimePointInterval A half-open interval of time points. abstract class TimePointInterval<T : TimePoint <T>> : TimeInterval <T> (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) TimePointIterator abstract class TimePointIterator<T : TimePoint <T>> : Iterator <T> (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) TimePointNanosecondProgression class TimePointNanosecondProgression<T : TimePoint <T>> : TimePointProgressionBuilder <T>, Iterable <T> (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) TimePointProgressionBuilder A time point progression builder. interface TimePointProgressionBuilder<T : TimePoint <T>> (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) TimePointSecondProgression class TimePointSecondProgression<T : TimePoint <T>> : TimePointProgressionBuilder <T>, Iterable <T> (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) ZonedDateTimeInterval A half-open interval of zoned date-times based on timeline order. class ZonedDateTimeInterval : TimePointInterval < ZonedDateTime > Extensions for External Classes Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) kotlin.String Functions Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) asInstantInterval Convert an OffsetDateTimeInterval into an InstantInterval . fun OffsetDateTimeInterval .asInstantInterval(): InstantInterval Convert a ZonedDateTimeInterval until an InstantInterval . fun ZonedDateTimeInterval .asInstantInterval(): InstantInterval (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) daysBetween Get the number of days between two dates. fun daysBetween(start: Date , endExclusive: Date ): LongDays Get the number whole days between two date-times, assuming they're in the same time zone. fun daysBetween(start: DateTime , endExclusive: DateTime ): LongDays Get the number whole days between two date-times, adjusting the offset of endExclusive if necessary to match the starting date-time. fun daysBetween(start: OffsetDateTime , endExclusive: OffsetDateTime ): LongDays Get the number of 24-hour days between two time points. fun <T1, T2> daysBetween(start: TimePoint <T1>, endExclusive: TimePoint <T2>): LongDays Get the number of whole days between two zoned date-times, adjusting the time zone of endExclusive if necessary to match the starting date-time. fun daysBetween(start: ZonedDateTime , endExclusive: ZonedDateTime ): LongDays (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) downTo A get progression of dates in descending order infix fun Date .downTo(to: Date ): DateDayProgression Get a progression of time points in descending order. infix fun <T : TimePoint <T>> T.downTo(to: T): TimePointProgressionBuilder <T> (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) durationBetween Get the Duration between two date-times, assuming they have the same UTC offset. In general, it's more appropriate to calculate duration using Instant or ZonedDateTime as any daylight savings rules won't be taken into account when working with DateTime directly. fun durationBetween(start: DateTime , endExclusive: DateTime ): Duration Get the Duration between two time points. fun <T1, T2> durationBetween(start: TimePoint <T1>, endExclusive: TimePoint <T2>): Duration (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) hoursBetween Get the number of whole hours between two date-times, assuming they have the same UTC offset. In general, it's more appropriate to calculate duration using Instant or ZonedDateTime as any daylight savings rules won't be taken into account when working with DateTime directly. fun hoursBetween(start: DateTime , endExclusive: DateTime ): LongHours Get the number of whole hours between two time points. fun <T1, T2> hoursBetween(start: TimePoint <T1>, endExclusive: TimePoint <T2>): LongHours (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) microsecondsBetween Get the number of whole microseconds between two date-times, assuming they have the same UTC offset. In general, it's more appropriate to calculate duration using Instant or ZonedDateTime as any daylight savings rules won't be taken into account when working with DateTime directly. fun microsecondsBetween(start: DateTime , endExclusive: DateTime ): LongMicroseconds Get the number of whole microseconds between two time points. fun <T1, T2> microsecondsBetween(start: TimePoint <T1>, endExclusive: TimePoint <T2>): LongMicroseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) millisecondsBetween Get the number of whole milliseconds between two date-times, assuming they have the same UTC offset. In general, it's more appropriate to calculate duration using Instant or ZonedDateTime as any daylight savings rules won't be taken into account when working with DateTime directly. fun millisecondsBetween(start: DateTime , endExclusive: DateTime ): LongMilliseconds Get the number of whole milliseconds between two time points. fun <T1, T2> millisecondsBetween(start: TimePoint <T1>, endExclusive: TimePoint <T2>): LongMilliseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) minutesBetween Get the number of whole minutes between two date-times, assuming they have the same UTC offset. In general, it's more appropriate to calculate duration using Instant or ZonedDateTime as any daylight savings rules won't be taken into account when working with DateTime directly. fun minutesBetween(start: DateTime , endExclusive: DateTime ): LongMinutes Get the number of whole minutes between two time points. fun <T1, T2> minutesBetween(start: TimePoint <T1>, endExclusive: TimePoint <T2>): LongMinutes (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) monthsBetween Get the number of whole months between two dates. fun monthsBetween(start: Date , endExclusive: Date ): IntMonths Get the number of whole months between two date-times, assuming they're in the same time zone. fun monthsBetween(start: DateTime , endExclusive: DateTime ): IntMonths Get the number of whole months between two date-times, adjusting the offset of endExclusive if necessary to match the starting date-time. fun monthsBetween(start: OffsetDateTime , endExclusive: OffsetDateTime ): IntMonths Get the number of whole months between two zoned date-times, adjusting the time zone of endExclusive if necessary to match the starting date-time. fun monthsBetween(start: ZonedDateTime , endExclusive: ZonedDateTime ): IntMonths (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) nanosecondsBetween Get the number of nanoseconds between two date-times, assuming they have the same UTC offset. In general, it's more appropriate to calculate duration using Instant or ZonedDateTime as any daylight savings rules won't be taken into account when working with DateTime directly. fun nanosecondsBetween(start: DateTime , endExclusive: DateTime ): LongNanoseconds Get the number of nanoseconds between two time points. fun <T1, T2> nanosecondsBetween(start: TimePoint <T1>, endExclusive: TimePoint <T2>): LongNanoseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) periodBetween Get the Period between two dates. fun periodBetween(start: Date , endExclusive: Date ): Period Get the Period between two date-times, assuming they're in the same time zone. fun periodBetween(start: DateTime , endExclusive: DateTime ): Period Get the Period between two date-times, adjusting the offset of endExclusive if necessary to match the starting date-time. fun periodBetween(start: OffsetDateTime , endExclusive: OffsetDateTime ): Period Get the Period between two zoned date-times, adjusting the time zone of endExclusive if necessary to match the starting date-time. fun periodBetween(start: ZonedDateTime , endExclusive: ZonedDateTime ): Period random Return a random date within the range using the supplied random number generator.(jvm) fun DateRange .random(random: Random ): Date (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateRange .random(random: <ERROR CLASS>): Date Return a random date-time within the interval using the supplied random number generator.(jvm) fun DateTimeInterval .random(random: Random ): DateTime (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateTimeInterval .random(random: <ERROR CLASS>): DateTime Return a random instant within the interval using the supplied random number generator.(jvm) fun InstantInterval .random(random: Random ): Instant (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun InstantInterval .random(random: <ERROR CLASS>): Instant Return a random date-time within the interval using the supplied random number generator. The offset of the start date-time will be used.(jvm) fun OffsetDateTimeInterval .random(random: Random ): OffsetDateTime (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun OffsetDateTimeInterval .random(random: <ERROR CLASS>): OffsetDateTime Return a random date-time within the interval using the supplied random number generator. The zone of the start date-time will be used.(jvm) fun ZonedDateTimeInterval .random(random: Random ): ZonedDateTime (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun ZonedDateTimeInterval .random(random: <ERROR CLASS>): ZonedDateTime Return a random date within the range using the default random number generator.(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateRange .random(): Date Return a random date-time within the interval using the default random number generator.(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateTimeInterval .random(): DateTime Return a random instant within the interval using the default random number generator.(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun InstantInterval .random(): Instant Return a random date-time within the interval using the default random number generator. The offset of the start date-time will be used.(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun OffsetDateTimeInterval .random(): OffsetDateTime Return a random date-time within the interval using the default random number generator. The zone of the start date-time will be used.(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun ZonedDateTimeInterval .random(): ZonedDateTime randomOrNull Return a random date within the range using the supplied random number generator or null if the range is empty or unbounded.(jvm) fun DateRange .randomOrNull(random: Random ): Date ? (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateRange .randomOrNull(random: <ERROR CLASS>): Date ? Return a random date-time within the interval using the supplied random number generator or null if the interval is empty or unbounded.(jvm) fun DateTimeInterval .randomOrNull(random: Random ): DateTime ? (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateTimeInterval .randomOrNull(random: <ERROR CLASS>): DateTime ? Return a random instant within the interval using the supplied random number generator or null if the interval is empty or unbounded.(jvm) fun InstantInterval .randomOrNull(random: Random ): Instant ? (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun InstantInterval .randomOrNull(random: <ERROR CLASS>): Instant ? Return a random date-time within the interval using the supplied random number generator or null if the interval is empty or unbounded. The offset of the start date-time will be used.(jvm) fun OffsetDateTimeInterval .randomOrNull(random: Random ): OffsetDateTime ? (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun OffsetDateTimeInterval .randomOrNull(random: <ERROR CLASS>): OffsetDateTime ? Return a random date-time within the interval using the supplied random number generator or null if the interval is empty or unbounded. The zone of the start date-time will be used.(jvm) fun ZonedDateTimeInterval .randomOrNull(random: Random ): ZonedDateTime ? (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun ZonedDateTimeInterval .randomOrNull(random: <ERROR CLASS>): ZonedDateTime ? Return a random date within the range using the default random number generator or null if the range is empty or unbounded.(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateRange .randomOrNull(): Date ? Return a random date-time within the interval using the default random number generator or null if the interval is empty or unbounded.(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateTimeInterval .randomOrNull(): DateTime ? Return a random instant within the interval using the default random number generator or null if the interval is empty or unbounded.(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun InstantInterval .randomOrNull(): Instant ? Return a random date-time within the interval using the default random number generator or null if the interval is empty or unbounded. The offset of the start date-time will be used.(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun OffsetDateTimeInterval .randomOrNull(): OffsetDateTime ? Return a random date-time within the interval using the default random number generator or null if the interval is empty or unbounded. The zone of the start date-time will be used.(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun ZonedDateTimeInterval .randomOrNull(): ZonedDateTime ? (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) reversed Reverse a progression such that it counts down instead of up, or vice versa fun DateDayProgression .reversed(): DateDayProgression fun DateMonthProgression .reversed(): DateMonthProgression (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) secondsBetween Get the number of whole seconds between two date-times, assuming they have the same UTC offset. In general, it's more appropriate to calculate duration using Instant or ZonedDateTime as any daylight savings rules won't be taken into account when working with DateTime directly. fun secondsBetween(start: DateTime , endExclusive: DateTime ): LongSeconds Get the number of whole seconds between two time points. fun <T1, T2> secondsBetween(start: TimePoint <T1>, endExclusive: TimePoint <T2>): LongSeconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) step Step over dates in increments of days infix fun DateDayProgression .step(step: IntDays ): DateDayProgression infix fun DateDayProgression .step(step: IntWeeks ): DateDayProgression infix fun DateDayProgression .step(step: IntYears ): DateMonthProgression infix fun DateDayProgression .step(step: IntDecades ): DateMonthProgression infix fun DateDayProgression .step(step: IntCenturies ): DateMonthProgression infix fun <T : TimePoint <T>> TimePointProgressionBuilder <T>.step(step: IntDays ): TimePointSecondProgression <T> infix fun <T : TimePoint <T>> TimePointProgressionBuilder <T>.step(step: IntHours ): TimePointSecondProgression <T> infix fun <T : TimePoint <T>> TimePointProgressionBuilder <T>.step(step: IntMinutes ): TimePointSecondProgression <T> infix fun <T : TimePoint <T>> TimePointProgressionBuilder <T>.step(step: IntSeconds ): TimePointSecondProgression <T> infix fun <T : TimePoint <T>> TimePointProgressionBuilder <T>.step(step: IntMilliseconds ): TimePointNanosecondProgression <T> infix fun <T : TimePoint <T>> TimePointProgressionBuilder <T>.step(step: LongMilliseconds ): TimePointNanosecondProgression <T> infix fun <T : TimePoint <T>> TimePointProgressionBuilder <T>.step(step: IntMicroseconds ): TimePointNanosecondProgression <T> infix fun <T : TimePoint <T>> TimePointProgressionBuilder <T>.step(step: LongMicroseconds ): TimePointNanosecondProgression <T> infix fun <T : TimePoint <T>> TimePointProgressionBuilder <T>.step(step: IntNanoseconds ): TimePointNanosecondProgression <T> infix fun <T : TimePoint <T>> TimePointProgressionBuilder <T>.step(step: LongNanoseconds ): TimePointNanosecondProgression <T> Step over dates in increments of months infix fun DateDayProgression .step(step: IntMonths ): DateMonthProgression (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toInstantIntervalAt Convert a range of dates into an InstantInterval between the starting and ending instants in a particular time zone. fun DateRange .toInstantIntervalAt(zone: TimeZone ): InstantInterval (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toZonedDateTimeIntervalAt Convert a range of dates into a ZonedDateTimeInterval between the starting and ending instants in a particular time zone. fun DateRange .toZonedDateTimeIntervalAt(zone: TimeZone ): ZonedDateTimeInterval (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) until Get a range containing all of the days up to, but not including to . infix fun Date .until(to: Date ): DateRange Get an interval containing all of the date-times up to, but not including the nanosecond represented by to . infix fun DateTime .until(to: DateTime ): DateTimeInterval Get an interval containing all of the instants up to, but not including to . infix fun Instant .until(to: Instant ): InstantInterval Create an interval containing all of the representable date-times from up to, but not including to . infix fun OffsetDateTime .until(to: OffsetDateTime ): OffsetDateTimeInterval Get an interval containing all of the representable time points up to, but not including to . infix fun ZonedDateTime .until(to: ZonedDateTime ): ZonedDateTimeInterval (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) weeksBetween Get the number of whole weeks between two dates. fun weeksBetween(start: Date , endExclusive: Date ): LongWeeks Get the number whole weeks between two date-times, assuming they're in the same time zone. fun weeksBetween(start: DateTime , endExclusive: DateTime ): LongWeeks Get the number whole weeks between two date-times, adjusting the offset of endExclusive if necessary to match the starting date-time. fun weeksBetween(start: OffsetDateTime , endExclusive: OffsetDateTime ): LongWeeks Get the number of whole weeks between two zoned date-times, adjusting the time zone of endExclusive if necessary to match the starting date-time. fun weeksBetween(start: ZonedDateTime , endExclusive: ZonedDateTime ): LongWeeks (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) yearsBetween Get the number of whole years between two dates. fun yearsBetween(start: Date , endExclusive: Date ): IntYears Get the number of whole years between two date-times, assuming they're in the same time zone. fun yearsBetween(start: DateTime , endExclusive: DateTime ): IntYears Get the number of whole years between two date-times, adjusting the offset of endExclusive if necessary to match the starting date-time. fun yearsBetween(start: OffsetDateTime , endExclusive: OffsetDateTime ): IntYears Get the number of whole years between two zoned date-times, adjusting the time zone of endExclusive if necessary to match the starting date-time. fun yearsBetween(start: ZonedDateTime , endExclusive: ZonedDateTime ): IntYears","title":"Index"},{"location":"api/core/io.islandtime.ranges/#package-ioislandtimeranges","text":"Date ranges, time intervals, and the ability to iterate over them and perform various operations.","title":"Package io.islandtime.ranges"},{"location":"api/core/io.islandtime.ranges/#types","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) DateDayProgression open class DateDayProgression : Iterable < Date > (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) DateIterator abstract class DateIterator : Iterator < Date > (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) DateMonthProgression class DateMonthProgression : Iterable < Date > (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) DateRange An inclusive range of dates. class DateRange : DateDayProgression , ClosedRange < Date > (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) DateTimeInterval An interval between two arbitrary date-times. class DateTimeInterval : TimeInterval < DateTime > (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) InstantInterval A half-open interval between two instants. class InstantInterval : TimePointInterval < Instant >, TimePointProgressionBuilder < Instant > (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) OffsetDateTimeInterval A half-open interval between two offset date-times based on timeline order. class OffsetDateTimeInterval : TimePointInterval < OffsetDateTime > (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) TimeInterval A half-open time interval. interface TimeInterval<T> (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) TimePointInterval A half-open interval of time points. abstract class TimePointInterval<T : TimePoint <T>> : TimeInterval <T> (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) TimePointIterator abstract class TimePointIterator<T : TimePoint <T>> : Iterator <T> (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) TimePointNanosecondProgression class TimePointNanosecondProgression<T : TimePoint <T>> : TimePointProgressionBuilder <T>, Iterable <T> (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) TimePointProgressionBuilder A time point progression builder. interface TimePointProgressionBuilder<T : TimePoint <T>> (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) TimePointSecondProgression class TimePointSecondProgression<T : TimePoint <T>> : TimePointProgressionBuilder <T>, Iterable <T> (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) ZonedDateTimeInterval A half-open interval of zoned date-times based on timeline order. class ZonedDateTimeInterval : TimePointInterval < ZonedDateTime >","title":"Types"},{"location":"api/core/io.islandtime.ranges/#extensions-for-external-classes","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) kotlin.String","title":"Extensions for External Classes"},{"location":"api/core/io.islandtime.ranges/#functions","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) asInstantInterval Convert an OffsetDateTimeInterval into an InstantInterval . fun OffsetDateTimeInterval .asInstantInterval(): InstantInterval Convert a ZonedDateTimeInterval until an InstantInterval . fun ZonedDateTimeInterval .asInstantInterval(): InstantInterval (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) daysBetween Get the number of days between two dates. fun daysBetween(start: Date , endExclusive: Date ): LongDays Get the number whole days between two date-times, assuming they're in the same time zone. fun daysBetween(start: DateTime , endExclusive: DateTime ): LongDays Get the number whole days between two date-times, adjusting the offset of endExclusive if necessary to match the starting date-time. fun daysBetween(start: OffsetDateTime , endExclusive: OffsetDateTime ): LongDays Get the number of 24-hour days between two time points. fun <T1, T2> daysBetween(start: TimePoint <T1>, endExclusive: TimePoint <T2>): LongDays Get the number of whole days between two zoned date-times, adjusting the time zone of endExclusive if necessary to match the starting date-time. fun daysBetween(start: ZonedDateTime , endExclusive: ZonedDateTime ): LongDays (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) downTo A get progression of dates in descending order infix fun Date .downTo(to: Date ): DateDayProgression Get a progression of time points in descending order. infix fun <T : TimePoint <T>> T.downTo(to: T): TimePointProgressionBuilder <T> (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) durationBetween Get the Duration between two date-times, assuming they have the same UTC offset. In general, it's more appropriate to calculate duration using Instant or ZonedDateTime as any daylight savings rules won't be taken into account when working with DateTime directly. fun durationBetween(start: DateTime , endExclusive: DateTime ): Duration Get the Duration between two time points. fun <T1, T2> durationBetween(start: TimePoint <T1>, endExclusive: TimePoint <T2>): Duration (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) hoursBetween Get the number of whole hours between two date-times, assuming they have the same UTC offset. In general, it's more appropriate to calculate duration using Instant or ZonedDateTime as any daylight savings rules won't be taken into account when working with DateTime directly. fun hoursBetween(start: DateTime , endExclusive: DateTime ): LongHours Get the number of whole hours between two time points. fun <T1, T2> hoursBetween(start: TimePoint <T1>, endExclusive: TimePoint <T2>): LongHours (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) microsecondsBetween Get the number of whole microseconds between two date-times, assuming they have the same UTC offset. In general, it's more appropriate to calculate duration using Instant or ZonedDateTime as any daylight savings rules won't be taken into account when working with DateTime directly. fun microsecondsBetween(start: DateTime , endExclusive: DateTime ): LongMicroseconds Get the number of whole microseconds between two time points. fun <T1, T2> microsecondsBetween(start: TimePoint <T1>, endExclusive: TimePoint <T2>): LongMicroseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) millisecondsBetween Get the number of whole milliseconds between two date-times, assuming they have the same UTC offset. In general, it's more appropriate to calculate duration using Instant or ZonedDateTime as any daylight savings rules won't be taken into account when working with DateTime directly. fun millisecondsBetween(start: DateTime , endExclusive: DateTime ): LongMilliseconds Get the number of whole milliseconds between two time points. fun <T1, T2> millisecondsBetween(start: TimePoint <T1>, endExclusive: TimePoint <T2>): LongMilliseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) minutesBetween Get the number of whole minutes between two date-times, assuming they have the same UTC offset. In general, it's more appropriate to calculate duration using Instant or ZonedDateTime as any daylight savings rules won't be taken into account when working with DateTime directly. fun minutesBetween(start: DateTime , endExclusive: DateTime ): LongMinutes Get the number of whole minutes between two time points. fun <T1, T2> minutesBetween(start: TimePoint <T1>, endExclusive: TimePoint <T2>): LongMinutes (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) monthsBetween Get the number of whole months between two dates. fun monthsBetween(start: Date , endExclusive: Date ): IntMonths Get the number of whole months between two date-times, assuming they're in the same time zone. fun monthsBetween(start: DateTime , endExclusive: DateTime ): IntMonths Get the number of whole months between two date-times, adjusting the offset of endExclusive if necessary to match the starting date-time. fun monthsBetween(start: OffsetDateTime , endExclusive: OffsetDateTime ): IntMonths Get the number of whole months between two zoned date-times, adjusting the time zone of endExclusive if necessary to match the starting date-time. fun monthsBetween(start: ZonedDateTime , endExclusive: ZonedDateTime ): IntMonths (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) nanosecondsBetween Get the number of nanoseconds between two date-times, assuming they have the same UTC offset. In general, it's more appropriate to calculate duration using Instant or ZonedDateTime as any daylight savings rules won't be taken into account when working with DateTime directly. fun nanosecondsBetween(start: DateTime , endExclusive: DateTime ): LongNanoseconds Get the number of nanoseconds between two time points. fun <T1, T2> nanosecondsBetween(start: TimePoint <T1>, endExclusive: TimePoint <T2>): LongNanoseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) periodBetween Get the Period between two dates. fun periodBetween(start: Date , endExclusive: Date ): Period Get the Period between two date-times, assuming they're in the same time zone. fun periodBetween(start: DateTime , endExclusive: DateTime ): Period Get the Period between two date-times, adjusting the offset of endExclusive if necessary to match the starting date-time. fun periodBetween(start: OffsetDateTime , endExclusive: OffsetDateTime ): Period Get the Period between two zoned date-times, adjusting the time zone of endExclusive if necessary to match the starting date-time. fun periodBetween(start: ZonedDateTime , endExclusive: ZonedDateTime ): Period random Return a random date within the range using the supplied random number generator.(jvm) fun DateRange .random(random: Random ): Date (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateRange .random(random: <ERROR CLASS>): Date Return a random date-time within the interval using the supplied random number generator.(jvm) fun DateTimeInterval .random(random: Random ): DateTime (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateTimeInterval .random(random: <ERROR CLASS>): DateTime Return a random instant within the interval using the supplied random number generator.(jvm) fun InstantInterval .random(random: Random ): Instant (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun InstantInterval .random(random: <ERROR CLASS>): Instant Return a random date-time within the interval using the supplied random number generator. The offset of the start date-time will be used.(jvm) fun OffsetDateTimeInterval .random(random: Random ): OffsetDateTime (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun OffsetDateTimeInterval .random(random: <ERROR CLASS>): OffsetDateTime Return a random date-time within the interval using the supplied random number generator. The zone of the start date-time will be used.(jvm) fun ZonedDateTimeInterval .random(random: Random ): ZonedDateTime (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun ZonedDateTimeInterval .random(random: <ERROR CLASS>): ZonedDateTime Return a random date within the range using the default random number generator.(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateRange .random(): Date Return a random date-time within the interval using the default random number generator.(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateTimeInterval .random(): DateTime Return a random instant within the interval using the default random number generator.(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun InstantInterval .random(): Instant Return a random date-time within the interval using the default random number generator. The offset of the start date-time will be used.(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun OffsetDateTimeInterval .random(): OffsetDateTime Return a random date-time within the interval using the default random number generator. The zone of the start date-time will be used.(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun ZonedDateTimeInterval .random(): ZonedDateTime randomOrNull Return a random date within the range using the supplied random number generator or null if the range is empty or unbounded.(jvm) fun DateRange .randomOrNull(random: Random ): Date ? (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateRange .randomOrNull(random: <ERROR CLASS>): Date ? Return a random date-time within the interval using the supplied random number generator or null if the interval is empty or unbounded.(jvm) fun DateTimeInterval .randomOrNull(random: Random ): DateTime ? (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateTimeInterval .randomOrNull(random: <ERROR CLASS>): DateTime ? Return a random instant within the interval using the supplied random number generator or null if the interval is empty or unbounded.(jvm) fun InstantInterval .randomOrNull(random: Random ): Instant ? (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun InstantInterval .randomOrNull(random: <ERROR CLASS>): Instant ? Return a random date-time within the interval using the supplied random number generator or null if the interval is empty or unbounded. The offset of the start date-time will be used.(jvm) fun OffsetDateTimeInterval .randomOrNull(random: Random ): OffsetDateTime ? (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun OffsetDateTimeInterval .randomOrNull(random: <ERROR CLASS>): OffsetDateTime ? Return a random date-time within the interval using the supplied random number generator or null if the interval is empty or unbounded. The zone of the start date-time will be used.(jvm) fun ZonedDateTimeInterval .randomOrNull(random: Random ): ZonedDateTime ? (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun ZonedDateTimeInterval .randomOrNull(random: <ERROR CLASS>): ZonedDateTime ? Return a random date within the range using the default random number generator or null if the range is empty or unbounded.(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateRange .randomOrNull(): Date ? Return a random date-time within the interval using the default random number generator or null if the interval is empty or unbounded.(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateTimeInterval .randomOrNull(): DateTime ? Return a random instant within the interval using the default random number generator or null if the interval is empty or unbounded.(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun InstantInterval .randomOrNull(): Instant ? Return a random date-time within the interval using the default random number generator or null if the interval is empty or unbounded. The offset of the start date-time will be used.(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun OffsetDateTimeInterval .randomOrNull(): OffsetDateTime ? Return a random date-time within the interval using the default random number generator or null if the interval is empty or unbounded. The zone of the start date-time will be used.(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun ZonedDateTimeInterval .randomOrNull(): ZonedDateTime ? (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) reversed Reverse a progression such that it counts down instead of up, or vice versa fun DateDayProgression .reversed(): DateDayProgression fun DateMonthProgression .reversed(): DateMonthProgression (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) secondsBetween Get the number of whole seconds between two date-times, assuming they have the same UTC offset. In general, it's more appropriate to calculate duration using Instant or ZonedDateTime as any daylight savings rules won't be taken into account when working with DateTime directly. fun secondsBetween(start: DateTime , endExclusive: DateTime ): LongSeconds Get the number of whole seconds between two time points. fun <T1, T2> secondsBetween(start: TimePoint <T1>, endExclusive: TimePoint <T2>): LongSeconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) step Step over dates in increments of days infix fun DateDayProgression .step(step: IntDays ): DateDayProgression infix fun DateDayProgression .step(step: IntWeeks ): DateDayProgression infix fun DateDayProgression .step(step: IntYears ): DateMonthProgression infix fun DateDayProgression .step(step: IntDecades ): DateMonthProgression infix fun DateDayProgression .step(step: IntCenturies ): DateMonthProgression infix fun <T : TimePoint <T>> TimePointProgressionBuilder <T>.step(step: IntDays ): TimePointSecondProgression <T> infix fun <T : TimePoint <T>> TimePointProgressionBuilder <T>.step(step: IntHours ): TimePointSecondProgression <T> infix fun <T : TimePoint <T>> TimePointProgressionBuilder <T>.step(step: IntMinutes ): TimePointSecondProgression <T> infix fun <T : TimePoint <T>> TimePointProgressionBuilder <T>.step(step: IntSeconds ): TimePointSecondProgression <T> infix fun <T : TimePoint <T>> TimePointProgressionBuilder <T>.step(step: IntMilliseconds ): TimePointNanosecondProgression <T> infix fun <T : TimePoint <T>> TimePointProgressionBuilder <T>.step(step: LongMilliseconds ): TimePointNanosecondProgression <T> infix fun <T : TimePoint <T>> TimePointProgressionBuilder <T>.step(step: IntMicroseconds ): TimePointNanosecondProgression <T> infix fun <T : TimePoint <T>> TimePointProgressionBuilder <T>.step(step: LongMicroseconds ): TimePointNanosecondProgression <T> infix fun <T : TimePoint <T>> TimePointProgressionBuilder <T>.step(step: IntNanoseconds ): TimePointNanosecondProgression <T> infix fun <T : TimePoint <T>> TimePointProgressionBuilder <T>.step(step: LongNanoseconds ): TimePointNanosecondProgression <T> Step over dates in increments of months infix fun DateDayProgression .step(step: IntMonths ): DateMonthProgression (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toInstantIntervalAt Convert a range of dates into an InstantInterval between the starting and ending instants in a particular time zone. fun DateRange .toInstantIntervalAt(zone: TimeZone ): InstantInterval (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toZonedDateTimeIntervalAt Convert a range of dates into a ZonedDateTimeInterval between the starting and ending instants in a particular time zone. fun DateRange .toZonedDateTimeIntervalAt(zone: TimeZone ): ZonedDateTimeInterval (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) until Get a range containing all of the days up to, but not including to . infix fun Date .until(to: Date ): DateRange Get an interval containing all of the date-times up to, but not including the nanosecond represented by to . infix fun DateTime .until(to: DateTime ): DateTimeInterval Get an interval containing all of the instants up to, but not including to . infix fun Instant .until(to: Instant ): InstantInterval Create an interval containing all of the representable date-times from up to, but not including to . infix fun OffsetDateTime .until(to: OffsetDateTime ): OffsetDateTimeInterval Get an interval containing all of the representable time points up to, but not including to . infix fun ZonedDateTime .until(to: ZonedDateTime ): ZonedDateTimeInterval (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) weeksBetween Get the number of whole weeks between two dates. fun weeksBetween(start: Date , endExclusive: Date ): LongWeeks Get the number whole weeks between two date-times, assuming they're in the same time zone. fun weeksBetween(start: DateTime , endExclusive: DateTime ): LongWeeks Get the number whole weeks between two date-times, adjusting the offset of endExclusive if necessary to match the starting date-time. fun weeksBetween(start: OffsetDateTime , endExclusive: OffsetDateTime ): LongWeeks Get the number of whole weeks between two zoned date-times, adjusting the time zone of endExclusive if necessary to match the starting date-time. fun weeksBetween(start: ZonedDateTime , endExclusive: ZonedDateTime ): LongWeeks (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) yearsBetween Get the number of whole years between two dates. fun yearsBetween(start: Date , endExclusive: Date ): IntYears Get the number of whole years between two date-times, assuming they're in the same time zone. fun yearsBetween(start: DateTime , endExclusive: DateTime ): IntYears Get the number of whole years between two date-times, adjusting the offset of endExclusive if necessary to match the starting date-time. fun yearsBetween(start: OffsetDateTime , endExclusive: OffsetDateTime ): IntYears Get the number of whole years between two zoned date-times, adjusting the time zone of endExclusive if necessary to match the starting date-time. fun yearsBetween(start: ZonedDateTime , endExclusive: ZonedDateTime ): IntYears","title":"Functions"},{"location":"api/core/io.islandtime.ranges/as-instant-interval/","text":"core / io.islandtime.ranges / asInstantInterval asInstantInterval (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun OffsetDateTimeInterval .asInstantInterval(): InstantInterval Convert an OffsetDateTimeInterval into an InstantInterval . (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun ZonedDateTimeInterval .asInstantInterval(): InstantInterval Convert a ZonedDateTimeInterval until an InstantInterval .","title":"As instant interval"},{"location":"api/core/io.islandtime.ranges/as-instant-interval/#asinstantinterval","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun OffsetDateTimeInterval .asInstantInterval(): InstantInterval Convert an OffsetDateTimeInterval into an InstantInterval . (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun ZonedDateTimeInterval .asInstantInterval(): InstantInterval Convert a ZonedDateTimeInterval until an InstantInterval .","title":"asInstantInterval"},{"location":"api/core/io.islandtime.ranges/days-between/","text":"core / io.islandtime.ranges / daysBetween daysBetween (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun daysBetween(start: Date , endExclusive: Date ): LongDays Get the number of days between two dates. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun daysBetween(start: DateTime , endExclusive: DateTime ): LongDays Get the number whole days between two date-times, assuming they're in the same time zone. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun daysBetween(start: OffsetDateTime , endExclusive: OffsetDateTime ): LongDays Get the number whole days between two date-times, adjusting the offset of endExclusive if necessary to match the starting date-time. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun <T1, T2> daysBetween(start: TimePoint <T1>, endExclusive: TimePoint <T2>): LongDays Get the number of 24-hour days between two time points. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun daysBetween(start: ZonedDateTime , endExclusive: ZonedDateTime ): LongDays Get the number of whole days between two zoned date-times, adjusting the time zone of endExclusive if necessary to match the starting date-time.","title":"Days between"},{"location":"api/core/io.islandtime.ranges/days-between/#daysbetween","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun daysBetween(start: Date , endExclusive: Date ): LongDays Get the number of days between two dates. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun daysBetween(start: DateTime , endExclusive: DateTime ): LongDays Get the number whole days between two date-times, assuming they're in the same time zone. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun daysBetween(start: OffsetDateTime , endExclusive: OffsetDateTime ): LongDays Get the number whole days between two date-times, adjusting the offset of endExclusive if necessary to match the starting date-time. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun <T1, T2> daysBetween(start: TimePoint <T1>, endExclusive: TimePoint <T2>): LongDays Get the number of 24-hour days between two time points. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun daysBetween(start: ZonedDateTime , endExclusive: ZonedDateTime ): LongDays Get the number of whole days between two zoned date-times, adjusting the time zone of endExclusive if necessary to match the starting date-time.","title":"daysBetween"},{"location":"api/core/io.islandtime.ranges/down-to/","text":"core / io.islandtime.ranges / downTo downTo (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) infix fun Date .downTo(to: Date ): DateDayProgression A get progression of dates in descending order (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) infix fun <T : TimePoint <T>> T.downTo(to: T): TimePointProgressionBuilder <T> Get a progression of time points in descending order.","title":"Down to"},{"location":"api/core/io.islandtime.ranges/down-to/#downto","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) infix fun Date .downTo(to: Date ): DateDayProgression A get progression of dates in descending order (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) infix fun <T : TimePoint <T>> T.downTo(to: T): TimePointProgressionBuilder <T> Get a progression of time points in descending order.","title":"downTo"},{"location":"api/core/io.islandtime.ranges/duration-between/","text":"core / io.islandtime.ranges / durationBetween durationBetween (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun durationBetween(start: DateTime , endExclusive: DateTime ): Duration Get the Duration between two date-times, assuming they have the same UTC offset. In general, it's more appropriate to calculate duration using Instant or ZonedDateTime as any daylight savings rules won't be taken into account when working with DateTime directly. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun <T1, T2> durationBetween(start: TimePoint <T1>, endExclusive: TimePoint <T2>): Duration Get the Duration between two time points.","title":"Duration between"},{"location":"api/core/io.islandtime.ranges/duration-between/#durationbetween","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun durationBetween(start: DateTime , endExclusive: DateTime ): Duration Get the Duration between two date-times, assuming they have the same UTC offset. In general, it's more appropriate to calculate duration using Instant or ZonedDateTime as any daylight savings rules won't be taken into account when working with DateTime directly. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun <T1, T2> durationBetween(start: TimePoint <T1>, endExclusive: TimePoint <T2>): Duration Get the Duration between two time points.","title":"durationBetween"},{"location":"api/core/io.islandtime.ranges/hours-between/","text":"core / io.islandtime.ranges / hoursBetween hoursBetween (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun hoursBetween(start: DateTime , endExclusive: DateTime ): LongHours Get the number of whole hours between two date-times, assuming they have the same UTC offset. In general, it's more appropriate to calculate duration using Instant or ZonedDateTime as any daylight savings rules won't be taken into account when working with DateTime directly. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun <T1, T2> hoursBetween(start: TimePoint <T1>, endExclusive: TimePoint <T2>): LongHours Get the number of whole hours between two time points.","title":"Hours between"},{"location":"api/core/io.islandtime.ranges/hours-between/#hoursbetween","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun hoursBetween(start: DateTime , endExclusive: DateTime ): LongHours Get the number of whole hours between two date-times, assuming they have the same UTC offset. In general, it's more appropriate to calculate duration using Instant or ZonedDateTime as any daylight savings rules won't be taken into account when working with DateTime directly. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun <T1, T2> hoursBetween(start: TimePoint <T1>, endExclusive: TimePoint <T2>): LongHours Get the number of whole hours between two time points.","title":"hoursBetween"},{"location":"api/core/io.islandtime.ranges/microseconds-between/","text":"core / io.islandtime.ranges / microsecondsBetween microsecondsBetween (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun microsecondsBetween(start: DateTime , endExclusive: DateTime ): LongMicroseconds Get the number of whole microseconds between two date-times, assuming they have the same UTC offset. In general, it's more appropriate to calculate duration using Instant or ZonedDateTime as any daylight savings rules won't be taken into account when working with DateTime directly. Exceptions ArithmeticException - if the result overflows(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun <T1, T2> microsecondsBetween(start: TimePoint <T1>, endExclusive: TimePoint <T2>): LongMicroseconds Get the number of whole microseconds between two time points. Exceptions ArithmeticException - if the result overflows","title":"Microseconds between"},{"location":"api/core/io.islandtime.ranges/microseconds-between/#microsecondsbetween","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun microsecondsBetween(start: DateTime , endExclusive: DateTime ): LongMicroseconds Get the number of whole microseconds between two date-times, assuming they have the same UTC offset. In general, it's more appropriate to calculate duration using Instant or ZonedDateTime as any daylight savings rules won't be taken into account when working with DateTime directly.","title":"microsecondsBetween"},{"location":"api/core/io.islandtime.ranges/microseconds-between/#exceptions","text":"ArithmeticException - if the result overflows(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun <T1, T2> microsecondsBetween(start: TimePoint <T1>, endExclusive: TimePoint <T2>): LongMicroseconds Get the number of whole microseconds between two time points.","title":"Exceptions"},{"location":"api/core/io.islandtime.ranges/microseconds-between/#exceptions_1","text":"ArithmeticException - if the result overflows","title":"Exceptions"},{"location":"api/core/io.islandtime.ranges/milliseconds-between/","text":"core / io.islandtime.ranges / millisecondsBetween millisecondsBetween (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun millisecondsBetween(start: DateTime , endExclusive: DateTime ): LongMilliseconds Get the number of whole milliseconds between two date-times, assuming they have the same UTC offset. In general, it's more appropriate to calculate duration using Instant or ZonedDateTime as any daylight savings rules won't be taken into account when working with DateTime directly. Exceptions ArithmeticException - if the result overflows(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun <T1, T2> millisecondsBetween(start: TimePoint <T1>, endExclusive: TimePoint <T2>): LongMilliseconds Get the number of whole milliseconds between two time points. Exceptions ArithmeticException - if the result overflows","title":"Milliseconds between"},{"location":"api/core/io.islandtime.ranges/milliseconds-between/#millisecondsbetween","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun millisecondsBetween(start: DateTime , endExclusive: DateTime ): LongMilliseconds Get the number of whole milliseconds between two date-times, assuming they have the same UTC offset. In general, it's more appropriate to calculate duration using Instant or ZonedDateTime as any daylight savings rules won't be taken into account when working with DateTime directly.","title":"millisecondsBetween"},{"location":"api/core/io.islandtime.ranges/milliseconds-between/#exceptions","text":"ArithmeticException - if the result overflows(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun <T1, T2> millisecondsBetween(start: TimePoint <T1>, endExclusive: TimePoint <T2>): LongMilliseconds Get the number of whole milliseconds between two time points.","title":"Exceptions"},{"location":"api/core/io.islandtime.ranges/milliseconds-between/#exceptions_1","text":"ArithmeticException - if the result overflows","title":"Exceptions"},{"location":"api/core/io.islandtime.ranges/minutes-between/","text":"core / io.islandtime.ranges / minutesBetween minutesBetween (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun minutesBetween(start: DateTime , endExclusive: DateTime ): LongMinutes Get the number of whole minutes between two date-times, assuming they have the same UTC offset. In general, it's more appropriate to calculate duration using Instant or ZonedDateTime as any daylight savings rules won't be taken into account when working with DateTime directly. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun <T1, T2> minutesBetween(start: TimePoint <T1>, endExclusive: TimePoint <T2>): LongMinutes Get the number of whole minutes between two time points.","title":"Minutes between"},{"location":"api/core/io.islandtime.ranges/minutes-between/#minutesbetween","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun minutesBetween(start: DateTime , endExclusive: DateTime ): LongMinutes Get the number of whole minutes between two date-times, assuming they have the same UTC offset. In general, it's more appropriate to calculate duration using Instant or ZonedDateTime as any daylight savings rules won't be taken into account when working with DateTime directly. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun <T1, T2> minutesBetween(start: TimePoint <T1>, endExclusive: TimePoint <T2>): LongMinutes Get the number of whole minutes between two time points.","title":"minutesBetween"},{"location":"api/core/io.islandtime.ranges/months-between/","text":"core / io.islandtime.ranges / monthsBetween monthsBetween (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun monthsBetween(start: Date , endExclusive: Date ): IntMonths Get the number of whole months between two dates. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun monthsBetween(start: DateTime , endExclusive: DateTime ): IntMonths Get the number of whole months between two date-times, assuming they're in the same time zone. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun monthsBetween(start: OffsetDateTime , endExclusive: OffsetDateTime ): IntMonths Get the number of whole months between two date-times, adjusting the offset of endExclusive if necessary to match the starting date-time. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun monthsBetween(start: ZonedDateTime , endExclusive: ZonedDateTime ): IntMonths Get the number of whole months between two zoned date-times, adjusting the time zone of endExclusive if necessary to match the starting date-time.","title":"Months between"},{"location":"api/core/io.islandtime.ranges/months-between/#monthsbetween","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun monthsBetween(start: Date , endExclusive: Date ): IntMonths Get the number of whole months between two dates. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun monthsBetween(start: DateTime , endExclusive: DateTime ): IntMonths Get the number of whole months between two date-times, assuming they're in the same time zone. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun monthsBetween(start: OffsetDateTime , endExclusive: OffsetDateTime ): IntMonths Get the number of whole months between two date-times, adjusting the offset of endExclusive if necessary to match the starting date-time. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun monthsBetween(start: ZonedDateTime , endExclusive: ZonedDateTime ): IntMonths Get the number of whole months between two zoned date-times, adjusting the time zone of endExclusive if necessary to match the starting date-time.","title":"monthsBetween"},{"location":"api/core/io.islandtime.ranges/nanoseconds-between/","text":"core / io.islandtime.ranges / nanosecondsBetween nanosecondsBetween (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun nanosecondsBetween(start: DateTime , endExclusive: DateTime ): LongNanoseconds Get the number of nanoseconds between two date-times, assuming they have the same UTC offset. In general, it's more appropriate to calculate duration using Instant or ZonedDateTime as any daylight savings rules won't be taken into account when working with DateTime directly. Exceptions ArithmeticException - if the result overflows(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun <T1, T2> nanosecondsBetween(start: TimePoint <T1>, endExclusive: TimePoint <T2>): LongNanoseconds Get the number of nanoseconds between two time points. Exceptions ArithmeticException - if the result overflows","title":"Nanoseconds between"},{"location":"api/core/io.islandtime.ranges/nanoseconds-between/#nanosecondsbetween","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun nanosecondsBetween(start: DateTime , endExclusive: DateTime ): LongNanoseconds Get the number of nanoseconds between two date-times, assuming they have the same UTC offset. In general, it's more appropriate to calculate duration using Instant or ZonedDateTime as any daylight savings rules won't be taken into account when working with DateTime directly.","title":"nanosecondsBetween"},{"location":"api/core/io.islandtime.ranges/nanoseconds-between/#exceptions","text":"ArithmeticException - if the result overflows(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun <T1, T2> nanosecondsBetween(start: TimePoint <T1>, endExclusive: TimePoint <T2>): LongNanoseconds Get the number of nanoseconds between two time points.","title":"Exceptions"},{"location":"api/core/io.islandtime.ranges/nanoseconds-between/#exceptions_1","text":"ArithmeticException - if the result overflows","title":"Exceptions"},{"location":"api/core/io.islandtime.ranges/period-between/","text":"core / io.islandtime.ranges / periodBetween periodBetween (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun periodBetween(start: Date , endExclusive: Date ): Period Get the Period between two dates. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun periodBetween(start: DateTime , endExclusive: DateTime ): Period Get the Period between two date-times, assuming they're in the same time zone. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun periodBetween(start: OffsetDateTime , endExclusive: OffsetDateTime ): Period Get the Period between two date-times, adjusting the offset of endExclusive if necessary to match the starting date-time. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun periodBetween(start: ZonedDateTime , endExclusive: ZonedDateTime ): Period Get the Period between two zoned date-times, adjusting the time zone of endExclusive if necessary to match the starting date-time.","title":"Period between"},{"location":"api/core/io.islandtime.ranges/period-between/#periodbetween","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun periodBetween(start: Date , endExclusive: Date ): Period Get the Period between two dates. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun periodBetween(start: DateTime , endExclusive: DateTime ): Period Get the Period between two date-times, assuming they're in the same time zone. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun periodBetween(start: OffsetDateTime , endExclusive: OffsetDateTime ): Period Get the Period between two date-times, adjusting the offset of endExclusive if necessary to match the starting date-time. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun periodBetween(start: ZonedDateTime , endExclusive: ZonedDateTime ): Period Get the Period between two zoned date-times, adjusting the time zone of endExclusive if necessary to match the starting date-time.","title":"periodBetween"},{"location":"api/core/io.islandtime.ranges/random-or-null/","text":"core / io.islandtime.ranges / randomOrNull randomOrNull (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateRange .randomOrNull(): Date ? Return a random date within the range using the default random number generator or null if the range is empty or unbounded. See Also DateRange.random (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateRange .randomOrNull(random: <ERROR CLASS>): Date ? Return a random date within the range using the supplied random number generator or null if the range is empty or unbounded. See Also DateRange.random (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateTimeInterval .randomOrNull(): DateTime ? Return a random date-time within the interval using the default random number generator or null if the interval is empty or unbounded. See Also DateTimeInterval.random (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateTimeInterval .randomOrNull(random: <ERROR CLASS>): DateTime ? Return a random date-time within the interval using the supplied random number generator or null if the interval is empty or unbounded. See Also DateTimeInterval.random (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun InstantInterval .randomOrNull(): Instant ? Return a random instant within the interval using the default random number generator or null if the interval is empty or unbounded. See Also InstantInterval.random (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun InstantInterval .randomOrNull(random: <ERROR CLASS>): Instant ? Return a random instant within the interval using the supplied random number generator or null if the interval is empty or unbounded. See Also InstantInterval.random (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun OffsetDateTimeInterval .randomOrNull(): OffsetDateTime ? Return a random date-time within the interval using the default random number generator or null if the interval is empty or unbounded. The offset of the start date-time will be used. See Also OffsetDateTimeInterval.random (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun OffsetDateTimeInterval .randomOrNull(random: <ERROR CLASS>): OffsetDateTime ? Return a random date-time within the interval using the supplied random number generator or null if the interval is empty or unbounded. The offset of the start date-time will be used. See Also OffsetDateTimeInterval.random (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun ZonedDateTimeInterval .randomOrNull(): ZonedDateTime ? Return a random date-time within the interval using the default random number generator or null if the interval is empty or unbounded. The zone of the start date-time will be used. See Also ZonedDateTimeInterval.random (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun ZonedDateTimeInterval .randomOrNull(random: <ERROR CLASS>): ZonedDateTime ? Return a random date-time within the interval using the supplied random number generator or null if the interval is empty or unbounded. The zone of the start date-time will be used. See Also ZonedDateTimeInterval.random (jvm) fun DateRange .randomOrNull(random: Random ): Date ? Return a random date within the range using the supplied random number generator or null if the range is empty or unbounded. See Also DateRange.random (jvm) fun DateTimeInterval .randomOrNull(random: Random ): DateTime ? Return a random date-time within the interval using the supplied random number generator or null if the interval is empty or unbounded. See Also DateTimeInterval.random (jvm) fun InstantInterval .randomOrNull(random: Random ): Instant ? Return a random instant within the interval using the supplied random number generator or null if the interval is empty or unbounded. See Also InstantInterval.random (jvm) fun OffsetDateTimeInterval .randomOrNull(random: Random ): OffsetDateTime ? Return a random date-time within the interval using the supplied random number generator or null if the interval is empty or unbounded. The offset of the start date-time will be used. See Also OffsetDateTimeInterval.random (jvm) fun ZonedDateTimeInterval .randomOrNull(random: Random ): ZonedDateTime ? Return a random date-time within the interval using the supplied random number generator or null if the interval is empty or unbounded. The zone of the start date-time will be used. See Also ZonedDateTimeInterval.random","title":"Random or null"},{"location":"api/core/io.islandtime.ranges/random-or-null/#randomornull","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateRange .randomOrNull(): Date ? Return a random date within the range using the default random number generator or null if the range is empty or unbounded. See Also DateRange.random (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateRange .randomOrNull(random: <ERROR CLASS>): Date ? Return a random date within the range using the supplied random number generator or null if the range is empty or unbounded. See Also DateRange.random (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateTimeInterval .randomOrNull(): DateTime ? Return a random date-time within the interval using the default random number generator or null if the interval is empty or unbounded. See Also DateTimeInterval.random (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateTimeInterval .randomOrNull(random: <ERROR CLASS>): DateTime ? Return a random date-time within the interval using the supplied random number generator or null if the interval is empty or unbounded. See Also DateTimeInterval.random (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun InstantInterval .randomOrNull(): Instant ? Return a random instant within the interval using the default random number generator or null if the interval is empty or unbounded. See Also InstantInterval.random (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun InstantInterval .randomOrNull(random: <ERROR CLASS>): Instant ? Return a random instant within the interval using the supplied random number generator or null if the interval is empty or unbounded. See Also InstantInterval.random (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun OffsetDateTimeInterval .randomOrNull(): OffsetDateTime ? Return a random date-time within the interval using the default random number generator or null if the interval is empty or unbounded. The offset of the start date-time will be used. See Also OffsetDateTimeInterval.random (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun OffsetDateTimeInterval .randomOrNull(random: <ERROR CLASS>): OffsetDateTime ? Return a random date-time within the interval using the supplied random number generator or null if the interval is empty or unbounded. The offset of the start date-time will be used. See Also OffsetDateTimeInterval.random (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun ZonedDateTimeInterval .randomOrNull(): ZonedDateTime ? Return a random date-time within the interval using the default random number generator or null if the interval is empty or unbounded. The zone of the start date-time will be used. See Also ZonedDateTimeInterval.random (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun ZonedDateTimeInterval .randomOrNull(random: <ERROR CLASS>): ZonedDateTime ? Return a random date-time within the interval using the supplied random number generator or null if the interval is empty or unbounded. The zone of the start date-time will be used. See Also ZonedDateTimeInterval.random (jvm) fun DateRange .randomOrNull(random: Random ): Date ? Return a random date within the range using the supplied random number generator or null if the range is empty or unbounded. See Also DateRange.random (jvm) fun DateTimeInterval .randomOrNull(random: Random ): DateTime ? Return a random date-time within the interval using the supplied random number generator or null if the interval is empty or unbounded. See Also DateTimeInterval.random (jvm) fun InstantInterval .randomOrNull(random: Random ): Instant ? Return a random instant within the interval using the supplied random number generator or null if the interval is empty or unbounded. See Also InstantInterval.random (jvm) fun OffsetDateTimeInterval .randomOrNull(random: Random ): OffsetDateTime ? Return a random date-time within the interval using the supplied random number generator or null if the interval is empty or unbounded. The offset of the start date-time will be used. See Also OffsetDateTimeInterval.random (jvm) fun ZonedDateTimeInterval .randomOrNull(random: Random ): ZonedDateTime ? Return a random date-time within the interval using the supplied random number generator or null if the interval is empty or unbounded. The zone of the start date-time will be used. See Also ZonedDateTimeInterval.random","title":"randomOrNull"},{"location":"api/core/io.islandtime.ranges/random/","text":"core / io.islandtime.ranges / random random (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateRange .random(): Date Return a random date within the range using the default random number generator. Exceptions NoSuchElementException - if the range is empty UnsupportedOperationException - if the range is unbounded See Also DateRange.randomOrNull (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateRange .random(random: <ERROR CLASS>): Date Return a random date within the range using the supplied random number generator. Exceptions NoSuchElementException - if the range is empty UnsupportedOperationException - if the range is unbounded See Also DateRange.randomOrNull (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateTimeInterval .random(): DateTime Return a random date-time within the interval using the default random number generator. Exceptions NoSuchElementException - if the interval is empty UnsupportedOperationException - if the interval is unbounded See Also DateTimeInterval.randomOrNull (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateTimeInterval .random(random: <ERROR CLASS>): DateTime Return a random date-time within the interval using the supplied random number generator. Exceptions NoSuchElementException - if the interval is empty UnsupportedOperationException - if the interval is unbounded See Also DateTimeInterval.randomOrNull (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun InstantInterval .random(): Instant Return a random instant within the interval using the default random number generator. Exceptions NoSuchElementException - if the interval is empty UnsupportedOperationException - if the interval is unbounded See Also InstantInterval.randomOrNull (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun InstantInterval .random(random: <ERROR CLASS>): Instant Return a random instant within the interval using the supplied random number generator. Exceptions NoSuchElementException - if the interval is empty UnsupportedOperationException - if the interval is unbounded See Also InstantInterval.randomOrNull (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun OffsetDateTimeInterval .random(): OffsetDateTime Return a random date-time within the interval using the default random number generator. The offset of the start date-time will be used. Exceptions NoSuchElementException - if the interval is empty UnsupportedOperationException - if the interval is unbounded See Also OffsetDateTimeInterval.randomOrNull (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun OffsetDateTimeInterval .random(random: <ERROR CLASS>): OffsetDateTime Return a random date-time within the interval using the supplied random number generator. The offset of the start date-time will be used. Exceptions NoSuchElementException - if the interval is empty UnsupportedOperationException - if the interval is unbounded See Also OffsetDateTimeInterval.randomOrNull (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun ZonedDateTimeInterval .random(): ZonedDateTime Return a random date-time within the interval using the default random number generator. The zone of the start date-time will be used. Exceptions NoSuchElementException - if the interval is empty UnsupportedOperationException - if the interval is unbounded See Also ZonedDateTimeInterval.randomOrNull (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun ZonedDateTimeInterval .random(random: <ERROR CLASS>): ZonedDateTime Return a random date-time within the interval using the supplied random number generator. The zone of the start date-time will be used. Exceptions NoSuchElementException - if the interval is empty UnsupportedOperationException - if the interval is unbounded See Also ZonedDateTimeInterval.randomOrNull (jvm) fun DateRange .random(random: Random ): Date Return a random date within the range using the supplied random number generator. Exceptions NoSuchElementException - if the range is empty UnsupportedOperationException - if the range is unbounded See Also DateRange.randomOrNull (jvm) fun DateTimeInterval .random(random: Random ): DateTime Return a random date-time within the interval using the supplied random number generator. Exceptions NoSuchElementException - if the interval is empty UnsupportedOperationException - if the interval is unbounded See Also DateTimeInterval.randomOrNull (jvm) fun InstantInterval .random(random: Random ): Instant Return a random instant within the interval using the supplied random number generator. Exceptions NoSuchElementException - if the interval is empty UnsupportedOperationException - if the interval is unbounded See Also InstantInterval.randomOrNull (jvm) fun OffsetDateTimeInterval .random(random: Random ): OffsetDateTime Return a random date-time within the interval using the supplied random number generator. The offset of the start date-time will be used. Exceptions NoSuchElementException - if the interval is empty UnsupportedOperationException - if the interval is unbounded See Also OffsetDateTimeInterval.randomOrNull (jvm) fun ZonedDateTimeInterval .random(random: Random ): ZonedDateTime Return a random date-time within the interval using the supplied random number generator. The zone of the start date-time will be used. Exceptions NoSuchElementException - if the interval is empty UnsupportedOperationException - if the interval is unbounded See Also ZonedDateTimeInterval.randomOrNull","title":"Random"},{"location":"api/core/io.islandtime.ranges/random/#random","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateRange .random(): Date Return a random date within the range using the default random number generator.","title":"random"},{"location":"api/core/io.islandtime.ranges/random/#exceptions","text":"NoSuchElementException - if the range is empty UnsupportedOperationException - if the range is unbounded See Also DateRange.randomOrNull (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateRange .random(random: <ERROR CLASS>): Date Return a random date within the range using the supplied random number generator.","title":"Exceptions"},{"location":"api/core/io.islandtime.ranges/random/#exceptions_1","text":"NoSuchElementException - if the range is empty UnsupportedOperationException - if the range is unbounded See Also DateRange.randomOrNull (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateTimeInterval .random(): DateTime Return a random date-time within the interval using the default random number generator.","title":"Exceptions"},{"location":"api/core/io.islandtime.ranges/random/#exceptions_2","text":"NoSuchElementException - if the interval is empty UnsupportedOperationException - if the interval is unbounded See Also DateTimeInterval.randomOrNull (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateTimeInterval .random(random: <ERROR CLASS>): DateTime Return a random date-time within the interval using the supplied random number generator.","title":"Exceptions"},{"location":"api/core/io.islandtime.ranges/random/#exceptions_3","text":"NoSuchElementException - if the interval is empty UnsupportedOperationException - if the interval is unbounded See Also DateTimeInterval.randomOrNull (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun InstantInterval .random(): Instant Return a random instant within the interval using the default random number generator.","title":"Exceptions"},{"location":"api/core/io.islandtime.ranges/random/#exceptions_4","text":"NoSuchElementException - if the interval is empty UnsupportedOperationException - if the interval is unbounded See Also InstantInterval.randomOrNull (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun InstantInterval .random(random: <ERROR CLASS>): Instant Return a random instant within the interval using the supplied random number generator.","title":"Exceptions"},{"location":"api/core/io.islandtime.ranges/random/#exceptions_5","text":"NoSuchElementException - if the interval is empty UnsupportedOperationException - if the interval is unbounded See Also InstantInterval.randomOrNull (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun OffsetDateTimeInterval .random(): OffsetDateTime Return a random date-time within the interval using the default random number generator. The offset of the start date-time will be used.","title":"Exceptions"},{"location":"api/core/io.islandtime.ranges/random/#exceptions_6","text":"NoSuchElementException - if the interval is empty UnsupportedOperationException - if the interval is unbounded See Also OffsetDateTimeInterval.randomOrNull (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun OffsetDateTimeInterval .random(random: <ERROR CLASS>): OffsetDateTime Return a random date-time within the interval using the supplied random number generator. The offset of the start date-time will be used.","title":"Exceptions"},{"location":"api/core/io.islandtime.ranges/random/#exceptions_7","text":"NoSuchElementException - if the interval is empty UnsupportedOperationException - if the interval is unbounded See Also OffsetDateTimeInterval.randomOrNull (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun ZonedDateTimeInterval .random(): ZonedDateTime Return a random date-time within the interval using the default random number generator. The zone of the start date-time will be used.","title":"Exceptions"},{"location":"api/core/io.islandtime.ranges/random/#exceptions_8","text":"NoSuchElementException - if the interval is empty UnsupportedOperationException - if the interval is unbounded See Also ZonedDateTimeInterval.randomOrNull (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun ZonedDateTimeInterval .random(random: <ERROR CLASS>): ZonedDateTime Return a random date-time within the interval using the supplied random number generator. The zone of the start date-time will be used.","title":"Exceptions"},{"location":"api/core/io.islandtime.ranges/random/#exceptions_9","text":"NoSuchElementException - if the interval is empty UnsupportedOperationException - if the interval is unbounded See Also ZonedDateTimeInterval.randomOrNull (jvm) fun DateRange .random(random: Random ): Date Return a random date within the range using the supplied random number generator.","title":"Exceptions"},{"location":"api/core/io.islandtime.ranges/random/#exceptions_10","text":"NoSuchElementException - if the range is empty UnsupportedOperationException - if the range is unbounded See Also DateRange.randomOrNull (jvm) fun DateTimeInterval .random(random: Random ): DateTime Return a random date-time within the interval using the supplied random number generator.","title":"Exceptions"},{"location":"api/core/io.islandtime.ranges/random/#exceptions_11","text":"NoSuchElementException - if the interval is empty UnsupportedOperationException - if the interval is unbounded See Also DateTimeInterval.randomOrNull (jvm) fun InstantInterval .random(random: Random ): Instant Return a random instant within the interval using the supplied random number generator.","title":"Exceptions"},{"location":"api/core/io.islandtime.ranges/random/#exceptions_12","text":"NoSuchElementException - if the interval is empty UnsupportedOperationException - if the interval is unbounded See Also InstantInterval.randomOrNull (jvm) fun OffsetDateTimeInterval .random(random: Random ): OffsetDateTime Return a random date-time within the interval using the supplied random number generator. The offset of the start date-time will be used.","title":"Exceptions"},{"location":"api/core/io.islandtime.ranges/random/#exceptions_13","text":"NoSuchElementException - if the interval is empty UnsupportedOperationException - if the interval is unbounded See Also OffsetDateTimeInterval.randomOrNull (jvm) fun ZonedDateTimeInterval .random(random: Random ): ZonedDateTime Return a random date-time within the interval using the supplied random number generator. The zone of the start date-time will be used.","title":"Exceptions"},{"location":"api/core/io.islandtime.ranges/random/#exceptions_14","text":"NoSuchElementException - if the interval is empty UnsupportedOperationException - if the interval is unbounded See Also ZonedDateTimeInterval.randomOrNull","title":"Exceptions"},{"location":"api/core/io.islandtime.ranges/reversed/","text":"core / io.islandtime.ranges / reversed reversed (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateDayProgression .reversed(): DateDayProgression Reverse a progression such that it counts down instead of up, or vice versa (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateMonthProgression .reversed(): DateMonthProgression","title":"Reversed"},{"location":"api/core/io.islandtime.ranges/reversed/#reversed","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateDayProgression .reversed(): DateDayProgression Reverse a progression such that it counts down instead of up, or vice versa (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateMonthProgression .reversed(): DateMonthProgression","title":"reversed"},{"location":"api/core/io.islandtime.ranges/seconds-between/","text":"core / io.islandtime.ranges / secondsBetween secondsBetween (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun secondsBetween(start: DateTime , endExclusive: DateTime ): LongSeconds Get the number of whole seconds between two date-times, assuming they have the same UTC offset. In general, it's more appropriate to calculate duration using Instant or ZonedDateTime as any daylight savings rules won't be taken into account when working with DateTime directly. Exceptions ArithmeticException - if the result overflows(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun <T1, T2> secondsBetween(start: TimePoint <T1>, endExclusive: TimePoint <T2>): LongSeconds Get the number of whole seconds between two time points. Exceptions ArithmeticException - if the result overflows","title":"Seconds between"},{"location":"api/core/io.islandtime.ranges/seconds-between/#secondsbetween","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun secondsBetween(start: DateTime , endExclusive: DateTime ): LongSeconds Get the number of whole seconds between two date-times, assuming they have the same UTC offset. In general, it's more appropriate to calculate duration using Instant or ZonedDateTime as any daylight savings rules won't be taken into account when working with DateTime directly.","title":"secondsBetween"},{"location":"api/core/io.islandtime.ranges/seconds-between/#exceptions","text":"ArithmeticException - if the result overflows(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun <T1, T2> secondsBetween(start: TimePoint <T1>, endExclusive: TimePoint <T2>): LongSeconds Get the number of whole seconds between two time points.","title":"Exceptions"},{"location":"api/core/io.islandtime.ranges/seconds-between/#exceptions_1","text":"ArithmeticException - if the result overflows","title":"Exceptions"},{"location":"api/core/io.islandtime.ranges/step/","text":"core / io.islandtime.ranges / step step (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) infix fun DateDayProgression .step(step: IntDays ): DateDayProgression Step over dates in increments of days (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) infix fun DateDayProgression .step(step: IntWeeks ): DateDayProgression infix fun DateDayProgression .step(step: IntYears ): DateMonthProgression infix fun DateDayProgression .step(step: IntDecades ): DateMonthProgression infix fun DateDayProgression .step(step: IntCenturies ): DateMonthProgression infix fun <T : TimePoint <T>> TimePointProgressionBuilder <T>.step(step: IntDays ): TimePointSecondProgression <T> infix fun <T : TimePoint <T>> TimePointProgressionBuilder <T>.step(step: IntHours ): TimePointSecondProgression <T> infix fun <T : TimePoint <T>> TimePointProgressionBuilder <T>.step(step: IntMinutes ): TimePointSecondProgression <T> infix fun <T : TimePoint <T>> TimePointProgressionBuilder <T>.step(step: IntSeconds ): TimePointSecondProgression <T> infix fun <T : TimePoint <T>> TimePointProgressionBuilder <T>.step(step: IntMilliseconds ): TimePointNanosecondProgression <T> infix fun <T : TimePoint <T>> TimePointProgressionBuilder <T>.step(step: LongMilliseconds ): TimePointNanosecondProgression <T> infix fun <T : TimePoint <T>> TimePointProgressionBuilder <T>.step(step: IntMicroseconds ): TimePointNanosecondProgression <T> infix fun <T : TimePoint <T>> TimePointProgressionBuilder <T>.step(step: LongMicroseconds ): TimePointNanosecondProgression <T> infix fun <T : TimePoint <T>> TimePointProgressionBuilder <T>.step(step: IntNanoseconds ): TimePointNanosecondProgression <T> infix fun <T : TimePoint <T>> TimePointProgressionBuilder <T>.step(step: LongNanoseconds ): TimePointNanosecondProgression <T> (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) infix fun DateDayProgression .step(step: IntMonths ): DateMonthProgression Step over dates in increments of months","title":"Step"},{"location":"api/core/io.islandtime.ranges/step/#step","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) infix fun DateDayProgression .step(step: IntDays ): DateDayProgression Step over dates in increments of days (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) infix fun DateDayProgression .step(step: IntWeeks ): DateDayProgression infix fun DateDayProgression .step(step: IntYears ): DateMonthProgression infix fun DateDayProgression .step(step: IntDecades ): DateMonthProgression infix fun DateDayProgression .step(step: IntCenturies ): DateMonthProgression infix fun <T : TimePoint <T>> TimePointProgressionBuilder <T>.step(step: IntDays ): TimePointSecondProgression <T> infix fun <T : TimePoint <T>> TimePointProgressionBuilder <T>.step(step: IntHours ): TimePointSecondProgression <T> infix fun <T : TimePoint <T>> TimePointProgressionBuilder <T>.step(step: IntMinutes ): TimePointSecondProgression <T> infix fun <T : TimePoint <T>> TimePointProgressionBuilder <T>.step(step: IntSeconds ): TimePointSecondProgression <T> infix fun <T : TimePoint <T>> TimePointProgressionBuilder <T>.step(step: IntMilliseconds ): TimePointNanosecondProgression <T> infix fun <T : TimePoint <T>> TimePointProgressionBuilder <T>.step(step: LongMilliseconds ): TimePointNanosecondProgression <T> infix fun <T : TimePoint <T>> TimePointProgressionBuilder <T>.step(step: IntMicroseconds ): TimePointNanosecondProgression <T> infix fun <T : TimePoint <T>> TimePointProgressionBuilder <T>.step(step: LongMicroseconds ): TimePointNanosecondProgression <T> infix fun <T : TimePoint <T>> TimePointProgressionBuilder <T>.step(step: IntNanoseconds ): TimePointNanosecondProgression <T> infix fun <T : TimePoint <T>> TimePointProgressionBuilder <T>.step(step: LongNanoseconds ): TimePointNanosecondProgression <T> (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) infix fun DateDayProgression .step(step: IntMonths ): DateMonthProgression Step over dates in increments of months","title":"step"},{"location":"api/core/io.islandtime.ranges/to-instant-interval-at/","text":"core / io.islandtime.ranges / toInstantIntervalAt toInstantIntervalAt (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateRange .toInstantIntervalAt(zone: TimeZone ): InstantInterval Convert a range of dates into an InstantInterval between the starting and ending instants in a particular time zone.","title":"To instant interval at"},{"location":"api/core/io.islandtime.ranges/to-instant-interval-at/#toinstantintervalat","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateRange .toInstantIntervalAt(zone: TimeZone ): InstantInterval Convert a range of dates into an InstantInterval between the starting and ending instants in a particular time zone.","title":"toInstantIntervalAt"},{"location":"api/core/io.islandtime.ranges/to-zoned-date-time-interval-at/","text":"core / io.islandtime.ranges / toZonedDateTimeIntervalAt toZonedDateTimeIntervalAt (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateRange .toZonedDateTimeIntervalAt(zone: TimeZone ): ZonedDateTimeInterval Convert a range of dates into a ZonedDateTimeInterval between the starting and ending instants in a particular time zone.","title":"To zoned date time interval at"},{"location":"api/core/io.islandtime.ranges/to-zoned-date-time-interval-at/#tozoneddatetimeintervalat","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun DateRange .toZonedDateTimeIntervalAt(zone: TimeZone ): ZonedDateTimeInterval Convert a range of dates into a ZonedDateTimeInterval between the starting and ending instants in a particular time zone.","title":"toZonedDateTimeIntervalAt"},{"location":"api/core/io.islandtime.ranges/until/","text":"core / io.islandtime.ranges / until until (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) infix fun Date .until(to: Date ): DateRange Get a range containing all of the days up to, but not including to . (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) infix fun DateTime .until(to: DateTime ): DateTimeInterval Get an interval containing all of the date-times up to, but not including the nanosecond represented by to . (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) infix fun Instant .until(to: Instant ): InstantInterval Get an interval containing all of the instants up to, but not including to . (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) infix fun OffsetDateTime .until(to: OffsetDateTime ): OffsetDateTimeInterval Create an interval containing all of the representable date-times from up to, but not including to . (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) infix fun ZonedDateTime .until(to: ZonedDateTime ): ZonedDateTimeInterval Get an interval containing all of the representable time points up to, but not including to .","title":"Until"},{"location":"api/core/io.islandtime.ranges/until/#until","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) infix fun Date .until(to: Date ): DateRange Get a range containing all of the days up to, but not including to . (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) infix fun DateTime .until(to: DateTime ): DateTimeInterval Get an interval containing all of the date-times up to, but not including the nanosecond represented by to . (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) infix fun Instant .until(to: Instant ): InstantInterval Get an interval containing all of the instants up to, but not including to . (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) infix fun OffsetDateTime .until(to: OffsetDateTime ): OffsetDateTimeInterval Create an interval containing all of the representable date-times from up to, but not including to . (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) infix fun ZonedDateTime .until(to: ZonedDateTime ): ZonedDateTimeInterval Get an interval containing all of the representable time points up to, but not including to .","title":"until"},{"location":"api/core/io.islandtime.ranges/weeks-between/","text":"core / io.islandtime.ranges / weeksBetween weeksBetween (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun weeksBetween(start: Date , endExclusive: Date ): LongWeeks Get the number of whole weeks between two dates. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun weeksBetween(start: DateTime , endExclusive: DateTime ): LongWeeks Get the number whole weeks between two date-times, assuming they're in the same time zone. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun weeksBetween(start: OffsetDateTime , endExclusive: OffsetDateTime ): LongWeeks Get the number whole weeks between two date-times, adjusting the offset of endExclusive if necessary to match the starting date-time. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun weeksBetween(start: ZonedDateTime , endExclusive: ZonedDateTime ): LongWeeks Get the number of whole weeks between two zoned date-times, adjusting the time zone of endExclusive if necessary to match the starting date-time.","title":"Weeks between"},{"location":"api/core/io.islandtime.ranges/weeks-between/#weeksbetween","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun weeksBetween(start: Date , endExclusive: Date ): LongWeeks Get the number of whole weeks between two dates. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun weeksBetween(start: DateTime , endExclusive: DateTime ): LongWeeks Get the number whole weeks between two date-times, assuming they're in the same time zone. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun weeksBetween(start: OffsetDateTime , endExclusive: OffsetDateTime ): LongWeeks Get the number whole weeks between two date-times, adjusting the offset of endExclusive if necessary to match the starting date-time. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun weeksBetween(start: ZonedDateTime , endExclusive: ZonedDateTime ): LongWeeks Get the number of whole weeks between two zoned date-times, adjusting the time zone of endExclusive if necessary to match the starting date-time.","title":"weeksBetween"},{"location":"api/core/io.islandtime.ranges/years-between/","text":"core / io.islandtime.ranges / yearsBetween yearsBetween (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun yearsBetween(start: Date , endExclusive: Date ): IntYears Get the number of whole years between two dates. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun yearsBetween(start: DateTime , endExclusive: DateTime ): IntYears Get the number of whole years between two date-times, assuming they're in the same time zone. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun yearsBetween(start: OffsetDateTime , endExclusive: OffsetDateTime ): IntYears Get the number of whole years between two date-times, adjusting the offset of endExclusive if necessary to match the starting date-time. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun yearsBetween(start: ZonedDateTime , endExclusive: ZonedDateTime ): IntYears Get the number of whole years between two zoned date-times, adjusting the time zone of endExclusive if necessary to match the starting date-time.","title":"Years between"},{"location":"api/core/io.islandtime.ranges/years-between/#yearsbetween","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun yearsBetween(start: Date , endExclusive: Date ): IntYears Get the number of whole years between two dates. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun yearsBetween(start: DateTime , endExclusive: DateTime ): IntYears Get the number of whole years between two date-times, assuming they're in the same time zone. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun yearsBetween(start: OffsetDateTime , endExclusive: OffsetDateTime ): IntYears Get the number of whole years between two date-times, adjusting the offset of endExclusive if necessary to match the starting date-time. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun yearsBetween(start: ZonedDateTime , endExclusive: ZonedDateTime ): IntYears Get the number of whole years between two zoned date-times, adjusting the time zone of endExclusive if necessary to match the starting date-time.","title":"yearsBetween"},{"location":"api/core/io.islandtime.ranges/-date-day-progression/","text":"core / io.islandtime.ranges / DateDayProgression DateDayProgression (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) open class DateDayProgression : Iterable < Date > Constructors Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init> <init>(first: Date , endInclusive: Date , step: IntDays ) Properties Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) first val first: Date (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) firstUnixEpochDay val firstUnixEpochDay: LongDays (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) last val last: Date (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) lastUnixEpochDay val lastUnixEpochDay: LongDays (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) step val step: IntDays Functions Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) equals open fun equals(other: Any ?): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) hashCode open fun hashCode(): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isEmpty Is the progression empty? open fun isEmpty(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) iterator open fun iterator(): DateIterator (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toString open fun toString(): String Companion Object Functions Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fromClosedRange fun fromClosedRange(rangeStart: Date , rangeEnd: Date , step: IntDays ): DateDayProgression Inheritors Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) DateRange An inclusive range of dates. class DateRange : DateDayProgression , ClosedRange < Date >","title":"Index"},{"location":"api/core/io.islandtime.ranges/-date-day-progression/#datedayprogression","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) open class DateDayProgression : Iterable < Date >","title":"DateDayProgression"},{"location":"api/core/io.islandtime.ranges/-date-day-progression/#constructors","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init> <init>(first: Date , endInclusive: Date , step: IntDays )","title":"Constructors"},{"location":"api/core/io.islandtime.ranges/-date-day-progression/#properties","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) first val first: Date (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) firstUnixEpochDay val firstUnixEpochDay: LongDays (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) last val last: Date (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) lastUnixEpochDay val lastUnixEpochDay: LongDays (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) step val step: IntDays","title":"Properties"},{"location":"api/core/io.islandtime.ranges/-date-day-progression/#functions","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) equals open fun equals(other: Any ?): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) hashCode open fun hashCode(): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isEmpty Is the progression empty? open fun isEmpty(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) iterator open fun iterator(): DateIterator (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toString open fun toString(): String","title":"Functions"},{"location":"api/core/io.islandtime.ranges/-date-day-progression/#companion-object-functions","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fromClosedRange fun fromClosedRange(rangeStart: Date , rangeEnd: Date , step: IntDays ): DateDayProgression","title":"Companion Object Functions"},{"location":"api/core/io.islandtime.ranges/-date-day-progression/#inheritors","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) DateRange An inclusive range of dates. class DateRange : DateDayProgression , ClosedRange < Date >","title":"Inheritors"},{"location":"api/core/io.islandtime.ranges/-date-day-progression/-init-/","text":"core / io.islandtime.ranges / DateDayProgression / <init> <init> (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) protected <init>(first: Date , endInclusive: Date , step: IntDays )","title":" init "},{"location":"api/core/io.islandtime.ranges/-date-day-progression/-init-/#init","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) protected <init>(first: Date , endInclusive: Date , step: IntDays )","title":"&lt;init&gt;"},{"location":"api/core/io.islandtime.ranges/-date-day-progression/equals/","text":"core / io.islandtime.ranges / DateDayProgression / equals equals (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) open fun equals(other: Any ?): Boolean","title":"Equals"},{"location":"api/core/io.islandtime.ranges/-date-day-progression/equals/#equals","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) open fun equals(other: Any ?): Boolean","title":"equals"},{"location":"api/core/io.islandtime.ranges/-date-day-progression/first-unix-epoch-day/","text":"core / io.islandtime.ranges / DateDayProgression / firstUnixEpochDay firstUnixEpochDay (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) protected val firstUnixEpochDay: LongDays","title":"First unix epoch day"},{"location":"api/core/io.islandtime.ranges/-date-day-progression/first-unix-epoch-day/#firstunixepochday","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) protected val firstUnixEpochDay: LongDays","title":"firstUnixEpochDay"},{"location":"api/core/io.islandtime.ranges/-date-day-progression/first/","text":"core / io.islandtime.ranges / DateDayProgression / first first (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val first: Date","title":"First"},{"location":"api/core/io.islandtime.ranges/-date-day-progression/first/#first","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val first: Date","title":"first"},{"location":"api/core/io.islandtime.ranges/-date-day-progression/from-closed-range/","text":"core / io.islandtime.ranges / DateDayProgression / fromClosedRange fromClosedRange (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun fromClosedRange(rangeStart: Date , rangeEnd: Date , step: IntDays ): DateDayProgression","title":"From closed range"},{"location":"api/core/io.islandtime.ranges/-date-day-progression/from-closed-range/#fromclosedrange","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun fromClosedRange(rangeStart: Date , rangeEnd: Date , step: IntDays ): DateDayProgression","title":"fromClosedRange"},{"location":"api/core/io.islandtime.ranges/-date-day-progression/hash-code/","text":"core / io.islandtime.ranges / DateDayProgression / hashCode hashCode (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) open fun hashCode(): Int","title":"Hash code"},{"location":"api/core/io.islandtime.ranges/-date-day-progression/hash-code/#hashcode","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) open fun hashCode(): Int","title":"hashCode"},{"location":"api/core/io.islandtime.ranges/-date-day-progression/is-empty/","text":"core / io.islandtime.ranges / DateDayProgression / isEmpty isEmpty (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) open fun isEmpty(): Boolean Is the progression empty?","title":"Is empty"},{"location":"api/core/io.islandtime.ranges/-date-day-progression/is-empty/#isempty","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) open fun isEmpty(): Boolean Is the progression empty?","title":"isEmpty"},{"location":"api/core/io.islandtime.ranges/-date-day-progression/iterator/","text":"core / io.islandtime.ranges / DateDayProgression / iterator iterator (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) open fun iterator(): DateIterator","title":"Iterator"},{"location":"api/core/io.islandtime.ranges/-date-day-progression/iterator/#iterator","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) open fun iterator(): DateIterator","title":"iterator"},{"location":"api/core/io.islandtime.ranges/-date-day-progression/last-unix-epoch-day/","text":"core / io.islandtime.ranges / DateDayProgression / lastUnixEpochDay lastUnixEpochDay (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) protected val lastUnixEpochDay: LongDays","title":"Last unix epoch day"},{"location":"api/core/io.islandtime.ranges/-date-day-progression/last-unix-epoch-day/#lastunixepochday","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) protected val lastUnixEpochDay: LongDays","title":"lastUnixEpochDay"},{"location":"api/core/io.islandtime.ranges/-date-day-progression/last/","text":"core / io.islandtime.ranges / DateDayProgression / last last (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val last: Date","title":"Last"},{"location":"api/core/io.islandtime.ranges/-date-day-progression/last/#last","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val last: Date","title":"last"},{"location":"api/core/io.islandtime.ranges/-date-day-progression/step/","text":"core / io.islandtime.ranges / DateDayProgression / step step (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val step: IntDays","title":"Step"},{"location":"api/core/io.islandtime.ranges/-date-day-progression/step/#step","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val step: IntDays","title":"step"},{"location":"api/core/io.islandtime.ranges/-date-day-progression/to-string/","text":"core / io.islandtime.ranges / DateDayProgression / toString toString (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) open fun toString(): String","title":"To string"},{"location":"api/core/io.islandtime.ranges/-date-day-progression/to-string/#tostring","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) open fun toString(): String","title":"toString"},{"location":"api/core/io.islandtime.ranges/-date-iterator/","text":"core / io.islandtime.ranges / DateIterator DateIterator (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract class DateIterator : Iterator < Date > Constructors Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init> <init>() Functions Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) next open fun next(): Date (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) nextDate abstract fun nextDate(): Date","title":"Index"},{"location":"api/core/io.islandtime.ranges/-date-iterator/#dateiterator","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract class DateIterator : Iterator < Date >","title":"DateIterator"},{"location":"api/core/io.islandtime.ranges/-date-iterator/#constructors","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init> <init>()","title":"Constructors"},{"location":"api/core/io.islandtime.ranges/-date-iterator/#functions","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) next open fun next(): Date (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) nextDate abstract fun nextDate(): Date","title":"Functions"},{"location":"api/core/io.islandtime.ranges/-date-iterator/-init-/","text":"core / io.islandtime.ranges / DateIterator / <init> <init> (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init>()","title":" init "},{"location":"api/core/io.islandtime.ranges/-date-iterator/-init-/#init","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init>()","title":"&lt;init&gt;"},{"location":"api/core/io.islandtime.ranges/-date-iterator/next-date/","text":"core / io.islandtime.ranges / DateIterator / nextDate nextDate (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract fun nextDate(): Date","title":"Next date"},{"location":"api/core/io.islandtime.ranges/-date-iterator/next-date/#nextdate","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract fun nextDate(): Date","title":"nextDate"},{"location":"api/core/io.islandtime.ranges/-date-iterator/next/","text":"core / io.islandtime.ranges / DateIterator / next next (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) open fun next(): Date","title":"Next"},{"location":"api/core/io.islandtime.ranges/-date-iterator/next/#next","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) open fun next(): Date","title":"next"},{"location":"api/core/io.islandtime.ranges/-date-month-progression/","text":"core / io.islandtime.ranges / DateMonthProgression DateMonthProgression (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) class DateMonthProgression : Iterable < Date > Properties Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) first val first: Date (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) last val last: Date (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) step val step: IntMonths Functions Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) equals fun equals(other: Any ?): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) hashCode fun hashCode(): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isEmpty Is the progression empty? fun isEmpty(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) iterator fun iterator(): DateIterator (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toString fun toString(): String Companion Object Functions Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fromClosedRange fun fromClosedRange(rangeStart: Date , rangeEnd: Date , step: IntMonths ): DateMonthProgression","title":"Index"},{"location":"api/core/io.islandtime.ranges/-date-month-progression/#datemonthprogression","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) class DateMonthProgression : Iterable < Date >","title":"DateMonthProgression"},{"location":"api/core/io.islandtime.ranges/-date-month-progression/#properties","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) first val first: Date (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) last val last: Date (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) step val step: IntMonths","title":"Properties"},{"location":"api/core/io.islandtime.ranges/-date-month-progression/#functions","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) equals fun equals(other: Any ?): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) hashCode fun hashCode(): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isEmpty Is the progression empty? fun isEmpty(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) iterator fun iterator(): DateIterator (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toString fun toString(): String","title":"Functions"},{"location":"api/core/io.islandtime.ranges/-date-month-progression/#companion-object-functions","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fromClosedRange fun fromClosedRange(rangeStart: Date , rangeEnd: Date , step: IntMonths ): DateMonthProgression","title":"Companion Object Functions"},{"location":"api/core/io.islandtime.ranges/-date-month-progression/equals/","text":"core / io.islandtime.ranges / DateMonthProgression / equals equals (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun equals(other: Any ?): Boolean","title":"Equals"},{"location":"api/core/io.islandtime.ranges/-date-month-progression/equals/#equals","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun equals(other: Any ?): Boolean","title":"equals"},{"location":"api/core/io.islandtime.ranges/-date-month-progression/first/","text":"core / io.islandtime.ranges / DateMonthProgression / first first (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val first: Date","title":"First"},{"location":"api/core/io.islandtime.ranges/-date-month-progression/first/#first","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val first: Date","title":"first"},{"location":"api/core/io.islandtime.ranges/-date-month-progression/from-closed-range/","text":"core / io.islandtime.ranges / DateMonthProgression / fromClosedRange fromClosedRange (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun fromClosedRange(rangeStart: Date , rangeEnd: Date , step: IntMonths ): DateMonthProgression","title":"From closed range"},{"location":"api/core/io.islandtime.ranges/-date-month-progression/from-closed-range/#fromclosedrange","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun fromClosedRange(rangeStart: Date , rangeEnd: Date , step: IntMonths ): DateMonthProgression","title":"fromClosedRange"},{"location":"api/core/io.islandtime.ranges/-date-month-progression/hash-code/","text":"core / io.islandtime.ranges / DateMonthProgression / hashCode hashCode (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun hashCode(): Int","title":"Hash code"},{"location":"api/core/io.islandtime.ranges/-date-month-progression/hash-code/#hashcode","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun hashCode(): Int","title":"hashCode"},{"location":"api/core/io.islandtime.ranges/-date-month-progression/is-empty/","text":"core / io.islandtime.ranges / DateMonthProgression / isEmpty isEmpty (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isEmpty(): Boolean Is the progression empty?","title":"Is empty"},{"location":"api/core/io.islandtime.ranges/-date-month-progression/is-empty/#isempty","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isEmpty(): Boolean Is the progression empty?","title":"isEmpty"},{"location":"api/core/io.islandtime.ranges/-date-month-progression/iterator/","text":"core / io.islandtime.ranges / DateMonthProgression / iterator iterator (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun iterator(): DateIterator","title":"Iterator"},{"location":"api/core/io.islandtime.ranges/-date-month-progression/iterator/#iterator","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun iterator(): DateIterator","title":"iterator"},{"location":"api/core/io.islandtime.ranges/-date-month-progression/last/","text":"core / io.islandtime.ranges / DateMonthProgression / last last (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val last: Date","title":"Last"},{"location":"api/core/io.islandtime.ranges/-date-month-progression/last/#last","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val last: Date","title":"last"},{"location":"api/core/io.islandtime.ranges/-date-month-progression/step/","text":"core / io.islandtime.ranges / DateMonthProgression / step step (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val step: IntMonths","title":"Step"},{"location":"api/core/io.islandtime.ranges/-date-month-progression/step/#step","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val step: IntMonths","title":"step"},{"location":"api/core/io.islandtime.ranges/-date-month-progression/to-string/","text":"core / io.islandtime.ranges / DateMonthProgression / toString toString (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toString(): String","title":"To string"},{"location":"api/core/io.islandtime.ranges/-date-month-progression/to-string/#tostring","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toString(): String","title":"toString"},{"location":"api/core/io.islandtime.ranges/-date-range/","text":"core / io.islandtime.ranges / DateRange DateRange (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) class DateRange : DateDayProgression , ClosedRange < Date > An inclusive range of dates. Date.MIN and Date.MAX are used as sentinels to indicate an unbounded (ie. infinite) start or end. Constructors Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init> An inclusive range of dates. <init>(start: Date = Date.MIN, endInclusive: Date = Date.MAX) Properties Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) endInclusive val endInclusive: Date (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) lengthInDays Get the number of days in the range. As a range is inclusive, if the start and end date are the same, the result will be one day. val lengthInDays: LongDays (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) lengthInMonths Get the number of months in the range. A month is considered to have passed if the day of the end month is greater than or equal to the day of the start month minus one (as a range is inclusive). val lengthInMonths: IntMonths (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) lengthInWeeks Get the number of weeks in the range. val lengthInWeeks: LongWeeks (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) lengthInYears Get the number of years in the range. A year is considered to have passed if twelve full months have passed between the start date and end date, according to the definition of 'month' in lengthInMonths . val lengthInYears: IntYears (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) start val start: Date Functions Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) asPeriod Convert a range of dates into a period containing each day in the range. As a range is inclusive, if the start and end date are the same, the resulting period will contain one day. fun asPeriod(): Period (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) equals fun equals(other: Any ?): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) hasBoundedEnd fun hasBoundedEnd(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) hasBoundedStart fun hasBoundedStart(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) hashCode fun hashCode(): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) hasUnboundedEnd fun hasUnboundedEnd(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) hasUnboundedStart fun hasUnboundedStart(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isBounded fun isBounded(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isEmpty Is the progression empty? fun isEmpty(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isUnbounded fun isUnbounded(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toString Convert this interval to a string in ISO-8601 extended format. fun toString(): String Companion Object Properties Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) EMPTY A range containing zero days. val EMPTY: DateRange (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) UNBOUNDED An unbounded (ie. infinite) range of dates. val UNBOUNDED: DateRange Extension Functions Name Summary (jvm) random Return a random date within the range using the supplied random number generator. fun DateRange .random(random: Random ): Date (jvm) randomOrNull Return a random date within the range using the supplied random number generator or null if the range is empty or unbounded. fun DateRange .randomOrNull(random: Random ): Date ?","title":"Index"},{"location":"api/core/io.islandtime.ranges/-date-range/#daterange","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) class DateRange : DateDayProgression , ClosedRange < Date > An inclusive range of dates. Date.MIN and Date.MAX are used as sentinels to indicate an unbounded (ie. infinite) start or end.","title":"DateRange"},{"location":"api/core/io.islandtime.ranges/-date-range/#constructors","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init> An inclusive range of dates. <init>(start: Date = Date.MIN, endInclusive: Date = Date.MAX)","title":"Constructors"},{"location":"api/core/io.islandtime.ranges/-date-range/#properties","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) endInclusive val endInclusive: Date (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) lengthInDays Get the number of days in the range. As a range is inclusive, if the start and end date are the same, the result will be one day. val lengthInDays: LongDays (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) lengthInMonths Get the number of months in the range. A month is considered to have passed if the day of the end month is greater than or equal to the day of the start month minus one (as a range is inclusive). val lengthInMonths: IntMonths (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) lengthInWeeks Get the number of weeks in the range. val lengthInWeeks: LongWeeks (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) lengthInYears Get the number of years in the range. A year is considered to have passed if twelve full months have passed between the start date and end date, according to the definition of 'month' in lengthInMonths . val lengthInYears: IntYears (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) start val start: Date","title":"Properties"},{"location":"api/core/io.islandtime.ranges/-date-range/#functions","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) asPeriod Convert a range of dates into a period containing each day in the range. As a range is inclusive, if the start and end date are the same, the resulting period will contain one day. fun asPeriod(): Period (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) equals fun equals(other: Any ?): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) hasBoundedEnd fun hasBoundedEnd(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) hasBoundedStart fun hasBoundedStart(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) hashCode fun hashCode(): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) hasUnboundedEnd fun hasUnboundedEnd(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) hasUnboundedStart fun hasUnboundedStart(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isBounded fun isBounded(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isEmpty Is the progression empty? fun isEmpty(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isUnbounded fun isUnbounded(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toString Convert this interval to a string in ISO-8601 extended format. fun toString(): String","title":"Functions"},{"location":"api/core/io.islandtime.ranges/-date-range/#companion-object-properties","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) EMPTY A range containing zero days. val EMPTY: DateRange (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) UNBOUNDED An unbounded (ie. infinite) range of dates. val UNBOUNDED: DateRange","title":"Companion Object Properties"},{"location":"api/core/io.islandtime.ranges/-date-range/#extension-functions","text":"Name Summary (jvm) random Return a random date within the range using the supplied random number generator. fun DateRange .random(random: Random ): Date (jvm) randomOrNull Return a random date within the range using the supplied random number generator or null if the range is empty or unbounded. fun DateRange .randomOrNull(random: Random ): Date ?","title":"Extension Functions"},{"location":"api/core/io.islandtime.ranges/-date-range/-e-m-p-t-y/","text":"core / io.islandtime.ranges / DateRange / EMPTY EMPTY (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val EMPTY: DateRange A range containing zero days.","title":" e m p t y"},{"location":"api/core/io.islandtime.ranges/-date-range/-e-m-p-t-y/#empty","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val EMPTY: DateRange A range containing zero days.","title":"EMPTY"},{"location":"api/core/io.islandtime.ranges/-date-range/-init-/","text":"core / io.islandtime.ranges / DateRange / <init> <init> (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init>(start: Date = Date.MIN, endInclusive: Date = Date.MAX) An inclusive range of dates. Date.MIN and Date.MAX are used as sentinels to indicate an unbounded (ie. infinite) start or end.","title":" init "},{"location":"api/core/io.islandtime.ranges/-date-range/-init-/#init","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init>(start: Date = Date.MIN, endInclusive: Date = Date.MAX) An inclusive range of dates. Date.MIN and Date.MAX are used as sentinels to indicate an unbounded (ie. infinite) start or end.","title":"&lt;init&gt;"},{"location":"api/core/io.islandtime.ranges/-date-range/-u-n-b-o-u-n-d-e-d/","text":"core / io.islandtime.ranges / DateRange / UNBOUNDED UNBOUNDED (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val UNBOUNDED: DateRange An unbounded (ie. infinite) range of dates.","title":" u n b o u n d e d"},{"location":"api/core/io.islandtime.ranges/-date-range/-u-n-b-o-u-n-d-e-d/#unbounded","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val UNBOUNDED: DateRange An unbounded (ie. infinite) range of dates.","title":"UNBOUNDED"},{"location":"api/core/io.islandtime.ranges/-date-range/as-period/","text":"core / io.islandtime.ranges / DateRange / asPeriod asPeriod (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun asPeriod(): Period Convert a range of dates into a period containing each day in the range. As a range is inclusive, if the start and end date are the same, the resulting period will contain one day. Exceptions UnsupportedOperationException - if the range isn't bounded","title":"As period"},{"location":"api/core/io.islandtime.ranges/-date-range/as-period/#asperiod","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun asPeriod(): Period Convert a range of dates into a period containing each day in the range. As a range is inclusive, if the start and end date are the same, the resulting period will contain one day.","title":"asPeriod"},{"location":"api/core/io.islandtime.ranges/-date-range/as-period/#exceptions","text":"UnsupportedOperationException - if the range isn't bounded","title":"Exceptions"},{"location":"api/core/io.islandtime.ranges/-date-range/end-inclusive/","text":"core / io.islandtime.ranges / DateRange / endInclusive endInclusive (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val endInclusive: Date","title":"End inclusive"},{"location":"api/core/io.islandtime.ranges/-date-range/end-inclusive/#endinclusive","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val endInclusive: Date","title":"endInclusive"},{"location":"api/core/io.islandtime.ranges/-date-range/equals/","text":"core / io.islandtime.ranges / DateRange / equals equals (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun equals(other: Any ?): Boolean","title":"Equals"},{"location":"api/core/io.islandtime.ranges/-date-range/equals/#equals","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun equals(other: Any ?): Boolean","title":"equals"},{"location":"api/core/io.islandtime.ranges/-date-range/has-bounded-end/","text":"core / io.islandtime.ranges / DateRange / hasBoundedEnd hasBoundedEnd (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun hasBoundedEnd(): Boolean","title":"Has bounded end"},{"location":"api/core/io.islandtime.ranges/-date-range/has-bounded-end/#hasboundedend","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun hasBoundedEnd(): Boolean","title":"hasBoundedEnd"},{"location":"api/core/io.islandtime.ranges/-date-range/has-bounded-start/","text":"core / io.islandtime.ranges / DateRange / hasBoundedStart hasBoundedStart (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun hasBoundedStart(): Boolean","title":"Has bounded start"},{"location":"api/core/io.islandtime.ranges/-date-range/has-bounded-start/#hasboundedstart","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun hasBoundedStart(): Boolean","title":"hasBoundedStart"},{"location":"api/core/io.islandtime.ranges/-date-range/has-unbounded-end/","text":"core / io.islandtime.ranges / DateRange / hasUnboundedEnd hasUnboundedEnd (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun hasUnboundedEnd(): Boolean","title":"Has unbounded end"},{"location":"api/core/io.islandtime.ranges/-date-range/has-unbounded-end/#hasunboundedend","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun hasUnboundedEnd(): Boolean","title":"hasUnboundedEnd"},{"location":"api/core/io.islandtime.ranges/-date-range/has-unbounded-start/","text":"core / io.islandtime.ranges / DateRange / hasUnboundedStart hasUnboundedStart (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun hasUnboundedStart(): Boolean","title":"Has unbounded start"},{"location":"api/core/io.islandtime.ranges/-date-range/has-unbounded-start/#hasunboundedstart","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun hasUnboundedStart(): Boolean","title":"hasUnboundedStart"},{"location":"api/core/io.islandtime.ranges/-date-range/hash-code/","text":"core / io.islandtime.ranges / DateRange / hashCode hashCode (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun hashCode(): Int","title":"Hash code"},{"location":"api/core/io.islandtime.ranges/-date-range/hash-code/#hashcode","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun hashCode(): Int","title":"hashCode"},{"location":"api/core/io.islandtime.ranges/-date-range/is-bounded/","text":"core / io.islandtime.ranges / DateRange / isBounded isBounded (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isBounded(): Boolean","title":"Is bounded"},{"location":"api/core/io.islandtime.ranges/-date-range/is-bounded/#isbounded","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isBounded(): Boolean","title":"isBounded"},{"location":"api/core/io.islandtime.ranges/-date-range/is-empty/","text":"core / io.islandtime.ranges / DateRange / isEmpty isEmpty (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isEmpty(): Boolean Is the progression empty?","title":"Is empty"},{"location":"api/core/io.islandtime.ranges/-date-range/is-empty/#isempty","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isEmpty(): Boolean Is the progression empty?","title":"isEmpty"},{"location":"api/core/io.islandtime.ranges/-date-range/is-unbounded/","text":"core / io.islandtime.ranges / DateRange / isUnbounded isUnbounded (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isUnbounded(): Boolean","title":"Is unbounded"},{"location":"api/core/io.islandtime.ranges/-date-range/is-unbounded/#isunbounded","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isUnbounded(): Boolean","title":"isUnbounded"},{"location":"api/core/io.islandtime.ranges/-date-range/length-in-days/","text":"core / io.islandtime.ranges / DateRange / lengthInDays lengthInDays (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val lengthInDays: LongDays Get the number of days in the range. As a range is inclusive, if the start and end date are the same, the result will be one day. Exceptions UnsupportedOperationException - if the range isn't bounded","title":"Length in days"},{"location":"api/core/io.islandtime.ranges/-date-range/length-in-days/#lengthindays","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val lengthInDays: LongDays Get the number of days in the range. As a range is inclusive, if the start and end date are the same, the result will be one day.","title":"lengthInDays"},{"location":"api/core/io.islandtime.ranges/-date-range/length-in-days/#exceptions","text":"UnsupportedOperationException - if the range isn't bounded","title":"Exceptions"},{"location":"api/core/io.islandtime.ranges/-date-range/length-in-months/","text":"core / io.islandtime.ranges / DateRange / lengthInMonths lengthInMonths (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val lengthInMonths: IntMonths Get the number of months in the range. A month is considered to have passed if the day of the end month is greater than or equal to the day of the start month minus one (as a range is inclusive). Exceptions UnsupportedOperationException - if the range isn't bounded","title":"Length in months"},{"location":"api/core/io.islandtime.ranges/-date-range/length-in-months/#lengthinmonths","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val lengthInMonths: IntMonths Get the number of months in the range. A month is considered to have passed if the day of the end month is greater than or equal to the day of the start month minus one (as a range is inclusive).","title":"lengthInMonths"},{"location":"api/core/io.islandtime.ranges/-date-range/length-in-months/#exceptions","text":"UnsupportedOperationException - if the range isn't bounded","title":"Exceptions"},{"location":"api/core/io.islandtime.ranges/-date-range/length-in-weeks/","text":"core / io.islandtime.ranges / DateRange / lengthInWeeks lengthInWeeks (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val lengthInWeeks: LongWeeks Get the number of weeks in the range. Exceptions UnsupportedOperationException - if the range isn't bounded","title":"Length in weeks"},{"location":"api/core/io.islandtime.ranges/-date-range/length-in-weeks/#lengthinweeks","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val lengthInWeeks: LongWeeks Get the number of weeks in the range.","title":"lengthInWeeks"},{"location":"api/core/io.islandtime.ranges/-date-range/length-in-weeks/#exceptions","text":"UnsupportedOperationException - if the range isn't bounded","title":"Exceptions"},{"location":"api/core/io.islandtime.ranges/-date-range/length-in-years/","text":"core / io.islandtime.ranges / DateRange / lengthInYears lengthInYears (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val lengthInYears: IntYears Get the number of years in the range. A year is considered to have passed if twelve full months have passed between the start date and end date, according to the definition of 'month' in lengthInMonths . Exceptions UnsupportedOperationException - if the range isn't bounded","title":"Length in years"},{"location":"api/core/io.islandtime.ranges/-date-range/length-in-years/#lengthinyears","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val lengthInYears: IntYears Get the number of years in the range. A year is considered to have passed if twelve full months have passed between the start date and end date, according to the definition of 'month' in lengthInMonths .","title":"lengthInYears"},{"location":"api/core/io.islandtime.ranges/-date-range/length-in-years/#exceptions","text":"UnsupportedOperationException - if the range isn't bounded","title":"Exceptions"},{"location":"api/core/io.islandtime.ranges/-date-range/start/","text":"core / io.islandtime.ranges / DateRange / start start (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val start: Date","title":"Start"},{"location":"api/core/io.islandtime.ranges/-date-range/start/#start","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val start: Date","title":"start"},{"location":"api/core/io.islandtime.ranges/-date-range/to-string/","text":"core / io.islandtime.ranges / DateRange / toString toString (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toString(): String Convert this interval to a string in ISO-8601 extended format.","title":"To string"},{"location":"api/core/io.islandtime.ranges/-date-range/to-string/#tostring","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toString(): String Convert this interval to a string in ISO-8601 extended format.","title":"toString"},{"location":"api/core/io.islandtime.ranges/-date-time-interval/","text":"core / io.islandtime.ranges / DateTimeInterval DateTimeInterval (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) class DateTimeInterval : TimeInterval < DateTime > An interval between two arbitrary date-times. As no UTC offset or time zone is associated with either date-time, it's up to the application to interpret the meaning. DateTime.MIN and DateTime.MAX are used as sentinels to indicate an unbounded (ie. infinite) start or end. Constructors Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init> An interval between two arbitrary date-times. <init>(start: DateTime = UNBOUNDED.start, endExclusive: DateTime = UNBOUNDED.endExclusive) Properties Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) endExclusive The end of the interval, exclusive. val endExclusive: DateTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) lengthInDays Get the number of whole days in the interval. val lengthInDays: LongDays (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) lengthInHours Get the number of whole hours in the interval. val lengthInHours: LongHours (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) lengthInMicroseconds Get the number of whole microseconds in the interval. val lengthInMicroseconds: LongMicroseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) lengthInMilliseconds Get the number of whole milliseconds in the interval. val lengthInMilliseconds: LongMilliseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) lengthInMinutes Get the number of whole minutes in the interval. val lengthInMinutes: LongMinutes (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) lengthInMonths Get the number of whole months in the interval. val lengthInMonths: IntMonths (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) lengthInNanoseconds Get the number of nanoseconds in the interval. val lengthInNanoseconds: LongNanoseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) lengthInSeconds Get the number of whole seconds in the interval. val lengthInSeconds: LongSeconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) lengthInWeeks Get the number of whole weeks in the interval. val lengthInWeeks: LongWeeks (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) lengthInYears Get the number of whole years in the interval. val lengthInYears: IntYears (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) start The start of the interval, inclusive. val start: DateTime Functions Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) asDuration Get the Duration between the start and end date-time, assuming they're in the same time zone. In general, it's more appropriate to calculate duration using Instant or ZonedDateTime as any daylight savings rules won't be taken into account when working with DateTime directly. fun asDuration(): Duration (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) asPeriod Convert the interval into a Period of the same length. fun asPeriod(): Period (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) contains Check if this interval contains the given value. fun contains(value: DateTime ): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) equals fun equals(other: Any ?): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) hashCode fun hashCode(): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) hasUnboundedEnd Check if the interval's end is unbounded. In ISO-8601 terminology, this is an \"open\" end. fun hasUnboundedEnd(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) hasUnboundedStart Check if the interval's start is unbounded. In ISO-8601 terminology, this is an \"open\" start. fun hasUnboundedStart(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isEmpty Check if the interval is empty. fun isEmpty(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toString Convert this interval to a string in ISO-8601 extended format. fun toString(): String Companion Object Properties Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) EMPTY An empty interval. val EMPTY: DateTimeInterval (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) UNBOUNDED An unbounded (ie. infinite) interval. val UNBOUNDED: DateTimeInterval Extension Functions Name Summary (jvm) random Return a random date-time within the interval using the supplied random number generator. fun DateTimeInterval .random(random: Random ): DateTime (jvm) randomOrNull Return a random date-time within the interval using the supplied random number generator or null if the interval is empty or unbounded. fun DateTimeInterval .randomOrNull(random: Random ): DateTime ?","title":"Index"},{"location":"api/core/io.islandtime.ranges/-date-time-interval/#datetimeinterval","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) class DateTimeInterval : TimeInterval < DateTime > An interval between two arbitrary date-times. As no UTC offset or time zone is associated with either date-time, it's up to the application to interpret the meaning. DateTime.MIN and DateTime.MAX are used as sentinels to indicate an unbounded (ie. infinite) start or end.","title":"DateTimeInterval"},{"location":"api/core/io.islandtime.ranges/-date-time-interval/#constructors","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init> An interval between two arbitrary date-times. <init>(start: DateTime = UNBOUNDED.start, endExclusive: DateTime = UNBOUNDED.endExclusive)","title":"Constructors"},{"location":"api/core/io.islandtime.ranges/-date-time-interval/#properties","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) endExclusive The end of the interval, exclusive. val endExclusive: DateTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) lengthInDays Get the number of whole days in the interval. val lengthInDays: LongDays (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) lengthInHours Get the number of whole hours in the interval. val lengthInHours: LongHours (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) lengthInMicroseconds Get the number of whole microseconds in the interval. val lengthInMicroseconds: LongMicroseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) lengthInMilliseconds Get the number of whole milliseconds in the interval. val lengthInMilliseconds: LongMilliseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) lengthInMinutes Get the number of whole minutes in the interval. val lengthInMinutes: LongMinutes (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) lengthInMonths Get the number of whole months in the interval. val lengthInMonths: IntMonths (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) lengthInNanoseconds Get the number of nanoseconds in the interval. val lengthInNanoseconds: LongNanoseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) lengthInSeconds Get the number of whole seconds in the interval. val lengthInSeconds: LongSeconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) lengthInWeeks Get the number of whole weeks in the interval. val lengthInWeeks: LongWeeks (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) lengthInYears Get the number of whole years in the interval. val lengthInYears: IntYears (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) start The start of the interval, inclusive. val start: DateTime","title":"Properties"},{"location":"api/core/io.islandtime.ranges/-date-time-interval/#functions","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) asDuration Get the Duration between the start and end date-time, assuming they're in the same time zone. In general, it's more appropriate to calculate duration using Instant or ZonedDateTime as any daylight savings rules won't be taken into account when working with DateTime directly. fun asDuration(): Duration (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) asPeriod Convert the interval into a Period of the same length. fun asPeriod(): Period (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) contains Check if this interval contains the given value. fun contains(value: DateTime ): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) equals fun equals(other: Any ?): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) hashCode fun hashCode(): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) hasUnboundedEnd Check if the interval's end is unbounded. In ISO-8601 terminology, this is an \"open\" end. fun hasUnboundedEnd(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) hasUnboundedStart Check if the interval's start is unbounded. In ISO-8601 terminology, this is an \"open\" start. fun hasUnboundedStart(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isEmpty Check if the interval is empty. fun isEmpty(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toString Convert this interval to a string in ISO-8601 extended format. fun toString(): String","title":"Functions"},{"location":"api/core/io.islandtime.ranges/-date-time-interval/#companion-object-properties","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) EMPTY An empty interval. val EMPTY: DateTimeInterval (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) UNBOUNDED An unbounded (ie. infinite) interval. val UNBOUNDED: DateTimeInterval","title":"Companion Object Properties"},{"location":"api/core/io.islandtime.ranges/-date-time-interval/#extension-functions","text":"Name Summary (jvm) random Return a random date-time within the interval using the supplied random number generator. fun DateTimeInterval .random(random: Random ): DateTime (jvm) randomOrNull Return a random date-time within the interval using the supplied random number generator or null if the interval is empty or unbounded. fun DateTimeInterval .randomOrNull(random: Random ): DateTime ?","title":"Extension Functions"},{"location":"api/core/io.islandtime.ranges/-date-time-interval/-e-m-p-t-y/","text":"core / io.islandtime.ranges / DateTimeInterval / EMPTY EMPTY (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val EMPTY: DateTimeInterval An empty interval.","title":" e m p t y"},{"location":"api/core/io.islandtime.ranges/-date-time-interval/-e-m-p-t-y/#empty","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val EMPTY: DateTimeInterval An empty interval.","title":"EMPTY"},{"location":"api/core/io.islandtime.ranges/-date-time-interval/-init-/","text":"core / io.islandtime.ranges / DateTimeInterval / <init> <init> (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init>(start: DateTime = UNBOUNDED.start, endExclusive: DateTime = UNBOUNDED.endExclusive) An interval between two arbitrary date-times. As no UTC offset or time zone is associated with either date-time, it's up to the application to interpret the meaning. DateTime.MIN and DateTime.MAX are used as sentinels to indicate an unbounded (ie. infinite) start or end.","title":" init "},{"location":"api/core/io.islandtime.ranges/-date-time-interval/-init-/#init","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init>(start: DateTime = UNBOUNDED.start, endExclusive: DateTime = UNBOUNDED.endExclusive) An interval between two arbitrary date-times. As no UTC offset or time zone is associated with either date-time, it's up to the application to interpret the meaning. DateTime.MIN and DateTime.MAX are used as sentinels to indicate an unbounded (ie. infinite) start or end.","title":"&lt;init&gt;"},{"location":"api/core/io.islandtime.ranges/-date-time-interval/-u-n-b-o-u-n-d-e-d/","text":"core / io.islandtime.ranges / DateTimeInterval / UNBOUNDED UNBOUNDED (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val UNBOUNDED: DateTimeInterval An unbounded (ie. infinite) interval.","title":" u n b o u n d e d"},{"location":"api/core/io.islandtime.ranges/-date-time-interval/-u-n-b-o-u-n-d-e-d/#unbounded","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val UNBOUNDED: DateTimeInterval An unbounded (ie. infinite) interval.","title":"UNBOUNDED"},{"location":"api/core/io.islandtime.ranges/-date-time-interval/as-duration/","text":"core / io.islandtime.ranges / DateTimeInterval / asDuration asDuration (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun asDuration(): Duration Get the Duration between the start and end date-time, assuming they're in the same time zone. In general, it's more appropriate to calculate duration using Instant or ZonedDateTime as any daylight savings rules won't be taken into account when working with DateTime directly. Exceptions UnsupportedOperationException - if the interval isn't bounded","title":"As duration"},{"location":"api/core/io.islandtime.ranges/-date-time-interval/as-duration/#asduration","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun asDuration(): Duration Get the Duration between the start and end date-time, assuming they're in the same time zone. In general, it's more appropriate to calculate duration using Instant or ZonedDateTime as any daylight savings rules won't be taken into account when working with DateTime directly.","title":"asDuration"},{"location":"api/core/io.islandtime.ranges/-date-time-interval/as-duration/#exceptions","text":"UnsupportedOperationException - if the interval isn't bounded","title":"Exceptions"},{"location":"api/core/io.islandtime.ranges/-date-time-interval/as-period/","text":"core / io.islandtime.ranges / DateTimeInterval / asPeriod asPeriod (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun asPeriod(): Period Convert the interval into a Period of the same length. Exceptions UnsupportedOperationException - if the interval isn't bounded","title":"As period"},{"location":"api/core/io.islandtime.ranges/-date-time-interval/as-period/#asperiod","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun asPeriod(): Period Convert the interval into a Period of the same length.","title":"asPeriod"},{"location":"api/core/io.islandtime.ranges/-date-time-interval/as-period/#exceptions","text":"UnsupportedOperationException - if the interval isn't bounded","title":"Exceptions"},{"location":"api/core/io.islandtime.ranges/-date-time-interval/contains/","text":"core / io.islandtime.ranges / DateTimeInterval / contains contains (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun contains(value: DateTime ): Boolean Check if this interval contains the given value. Parameters value - a date-time, assumed to be in the same time zone","title":"Contains"},{"location":"api/core/io.islandtime.ranges/-date-time-interval/contains/#contains","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun contains(value: DateTime ): Boolean Check if this interval contains the given value.","title":"contains"},{"location":"api/core/io.islandtime.ranges/-date-time-interval/contains/#parameters","text":"value - a date-time, assumed to be in the same time zone","title":"Parameters"},{"location":"api/core/io.islandtime.ranges/-date-time-interval/end-exclusive/","text":"core / io.islandtime.ranges / DateTimeInterval / endExclusive endExclusive (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val endExclusive: DateTime The end of the interval, exclusive.","title":"End exclusive"},{"location":"api/core/io.islandtime.ranges/-date-time-interval/end-exclusive/#endexclusive","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val endExclusive: DateTime The end of the interval, exclusive.","title":"endExclusive"},{"location":"api/core/io.islandtime.ranges/-date-time-interval/equals/","text":"core / io.islandtime.ranges / DateTimeInterval / equals equals (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun equals(other: Any ?): Boolean","title":"Equals"},{"location":"api/core/io.islandtime.ranges/-date-time-interval/equals/#equals","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun equals(other: Any ?): Boolean","title":"equals"},{"location":"api/core/io.islandtime.ranges/-date-time-interval/has-unbounded-end/","text":"core / io.islandtime.ranges / DateTimeInterval / hasUnboundedEnd hasUnboundedEnd (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun hasUnboundedEnd(): Boolean Check if the interval's end is unbounded. In ISO-8601 terminology, this is an \"open\" end.","title":"Has unbounded end"},{"location":"api/core/io.islandtime.ranges/-date-time-interval/has-unbounded-end/#hasunboundedend","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun hasUnboundedEnd(): Boolean Check if the interval's end is unbounded. In ISO-8601 terminology, this is an \"open\" end.","title":"hasUnboundedEnd"},{"location":"api/core/io.islandtime.ranges/-date-time-interval/has-unbounded-start/","text":"core / io.islandtime.ranges / DateTimeInterval / hasUnboundedStart hasUnboundedStart (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun hasUnboundedStart(): Boolean Check if the interval's start is unbounded. In ISO-8601 terminology, this is an \"open\" start.","title":"Has unbounded start"},{"location":"api/core/io.islandtime.ranges/-date-time-interval/has-unbounded-start/#hasunboundedstart","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun hasUnboundedStart(): Boolean Check if the interval's start is unbounded. In ISO-8601 terminology, this is an \"open\" start.","title":"hasUnboundedStart"},{"location":"api/core/io.islandtime.ranges/-date-time-interval/hash-code/","text":"core / io.islandtime.ranges / DateTimeInterval / hashCode hashCode (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun hashCode(): Int","title":"Hash code"},{"location":"api/core/io.islandtime.ranges/-date-time-interval/hash-code/#hashcode","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun hashCode(): Int","title":"hashCode"},{"location":"api/core/io.islandtime.ranges/-date-time-interval/is-empty/","text":"core / io.islandtime.ranges / DateTimeInterval / isEmpty isEmpty (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isEmpty(): Boolean Check if the interval is empty.","title":"Is empty"},{"location":"api/core/io.islandtime.ranges/-date-time-interval/is-empty/#isempty","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isEmpty(): Boolean Check if the interval is empty.","title":"isEmpty"},{"location":"api/core/io.islandtime.ranges/-date-time-interval/length-in-days/","text":"core / io.islandtime.ranges / DateTimeInterval / lengthInDays lengthInDays (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val lengthInDays: LongDays Get the number of whole days in the interval. Exceptions UnsupportedOperationException - if the interval isn't bounded","title":"Length in days"},{"location":"api/core/io.islandtime.ranges/-date-time-interval/length-in-days/#lengthindays","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val lengthInDays: LongDays Get the number of whole days in the interval.","title":"lengthInDays"},{"location":"api/core/io.islandtime.ranges/-date-time-interval/length-in-days/#exceptions","text":"UnsupportedOperationException - if the interval isn't bounded","title":"Exceptions"},{"location":"api/core/io.islandtime.ranges/-date-time-interval/length-in-hours/","text":"core / io.islandtime.ranges / DateTimeInterval / lengthInHours lengthInHours (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val lengthInHours: LongHours Get the number of whole hours in the interval. Exceptions UnsupportedOperationException - if the interval isn't bounded","title":"Length in hours"},{"location":"api/core/io.islandtime.ranges/-date-time-interval/length-in-hours/#lengthinhours","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val lengthInHours: LongHours Get the number of whole hours in the interval.","title":"lengthInHours"},{"location":"api/core/io.islandtime.ranges/-date-time-interval/length-in-hours/#exceptions","text":"UnsupportedOperationException - if the interval isn't bounded","title":"Exceptions"},{"location":"api/core/io.islandtime.ranges/-date-time-interval/length-in-microseconds/","text":"core / io.islandtime.ranges / DateTimeInterval / lengthInMicroseconds lengthInMicroseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val lengthInMicroseconds: LongMicroseconds Get the number of whole microseconds in the interval. Exceptions UnsupportedOperationException - if the interval isn't bounded","title":"Length in microseconds"},{"location":"api/core/io.islandtime.ranges/-date-time-interval/length-in-microseconds/#lengthinmicroseconds","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val lengthInMicroseconds: LongMicroseconds Get the number of whole microseconds in the interval.","title":"lengthInMicroseconds"},{"location":"api/core/io.islandtime.ranges/-date-time-interval/length-in-microseconds/#exceptions","text":"UnsupportedOperationException - if the interval isn't bounded","title":"Exceptions"},{"location":"api/core/io.islandtime.ranges/-date-time-interval/length-in-milliseconds/","text":"core / io.islandtime.ranges / DateTimeInterval / lengthInMilliseconds lengthInMilliseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val lengthInMilliseconds: LongMilliseconds Get the number of whole milliseconds in the interval. Exceptions UnsupportedOperationException - if the interval isn't bounded","title":"Length in milliseconds"},{"location":"api/core/io.islandtime.ranges/-date-time-interval/length-in-milliseconds/#lengthinmilliseconds","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val lengthInMilliseconds: LongMilliseconds Get the number of whole milliseconds in the interval.","title":"lengthInMilliseconds"},{"location":"api/core/io.islandtime.ranges/-date-time-interval/length-in-milliseconds/#exceptions","text":"UnsupportedOperationException - if the interval isn't bounded","title":"Exceptions"},{"location":"api/core/io.islandtime.ranges/-date-time-interval/length-in-minutes/","text":"core / io.islandtime.ranges / DateTimeInterval / lengthInMinutes lengthInMinutes (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val lengthInMinutes: LongMinutes Get the number of whole minutes in the interval. Exceptions UnsupportedOperationException - if the interval isn't bounded","title":"Length in minutes"},{"location":"api/core/io.islandtime.ranges/-date-time-interval/length-in-minutes/#lengthinminutes","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val lengthInMinutes: LongMinutes Get the number of whole minutes in the interval.","title":"lengthInMinutes"},{"location":"api/core/io.islandtime.ranges/-date-time-interval/length-in-minutes/#exceptions","text":"UnsupportedOperationException - if the interval isn't bounded","title":"Exceptions"},{"location":"api/core/io.islandtime.ranges/-date-time-interval/length-in-months/","text":"core / io.islandtime.ranges / DateTimeInterval / lengthInMonths lengthInMonths (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val lengthInMonths: IntMonths Get the number of whole months in the interval. A month is considered to have passed if the day of the end month is greater than or equal to the day of the start month and the time of day of the end date-time is greater than or equal to that of the start date-time. Exceptions UnsupportedOperationException - if the interval isn't bounded","title":"Length in months"},{"location":"api/core/io.islandtime.ranges/-date-time-interval/length-in-months/#lengthinmonths","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val lengthInMonths: IntMonths Get the number of whole months in the interval. A month is considered to have passed if the day of the end month is greater than or equal to the day of the start month and the time of day of the end date-time is greater than or equal to that of the start date-time.","title":"lengthInMonths"},{"location":"api/core/io.islandtime.ranges/-date-time-interval/length-in-months/#exceptions","text":"UnsupportedOperationException - if the interval isn't bounded","title":"Exceptions"},{"location":"api/core/io.islandtime.ranges/-date-time-interval/length-in-nanoseconds/","text":"core / io.islandtime.ranges / DateTimeInterval / lengthInNanoseconds lengthInNanoseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val lengthInNanoseconds: LongNanoseconds Get the number of nanoseconds in the interval. Exceptions UnsupportedOperationException - if the interval isn't bounded","title":"Length in nanoseconds"},{"location":"api/core/io.islandtime.ranges/-date-time-interval/length-in-nanoseconds/#lengthinnanoseconds","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val lengthInNanoseconds: LongNanoseconds Get the number of nanoseconds in the interval.","title":"lengthInNanoseconds"},{"location":"api/core/io.islandtime.ranges/-date-time-interval/length-in-nanoseconds/#exceptions","text":"UnsupportedOperationException - if the interval isn't bounded","title":"Exceptions"},{"location":"api/core/io.islandtime.ranges/-date-time-interval/length-in-seconds/","text":"core / io.islandtime.ranges / DateTimeInterval / lengthInSeconds lengthInSeconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val lengthInSeconds: LongSeconds Get the number of whole seconds in the interval. Exceptions UnsupportedOperationException - if the interval isn't bounded","title":"Length in seconds"},{"location":"api/core/io.islandtime.ranges/-date-time-interval/length-in-seconds/#lengthinseconds","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val lengthInSeconds: LongSeconds Get the number of whole seconds in the interval.","title":"lengthInSeconds"},{"location":"api/core/io.islandtime.ranges/-date-time-interval/length-in-seconds/#exceptions","text":"UnsupportedOperationException - if the interval isn't bounded","title":"Exceptions"},{"location":"api/core/io.islandtime.ranges/-date-time-interval/length-in-weeks/","text":"core / io.islandtime.ranges / DateTimeInterval / lengthInWeeks lengthInWeeks (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val lengthInWeeks: LongWeeks Get the number of whole weeks in the interval. Exceptions UnsupportedOperationException - if the interval isn't bounded","title":"Length in weeks"},{"location":"api/core/io.islandtime.ranges/-date-time-interval/length-in-weeks/#lengthinweeks","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val lengthInWeeks: LongWeeks Get the number of whole weeks in the interval.","title":"lengthInWeeks"},{"location":"api/core/io.islandtime.ranges/-date-time-interval/length-in-weeks/#exceptions","text":"UnsupportedOperationException - if the interval isn't bounded","title":"Exceptions"},{"location":"api/core/io.islandtime.ranges/-date-time-interval/length-in-years/","text":"core / io.islandtime.ranges / DateTimeInterval / lengthInYears lengthInYears (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val lengthInYears: IntYears Get the number of whole years in the interval. Exceptions UnsupportedOperationException - if the interval isn't bounded","title":"Length in years"},{"location":"api/core/io.islandtime.ranges/-date-time-interval/length-in-years/#lengthinyears","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val lengthInYears: IntYears Get the number of whole years in the interval.","title":"lengthInYears"},{"location":"api/core/io.islandtime.ranges/-date-time-interval/length-in-years/#exceptions","text":"UnsupportedOperationException - if the interval isn't bounded","title":"Exceptions"},{"location":"api/core/io.islandtime.ranges/-date-time-interval/start/","text":"core / io.islandtime.ranges / DateTimeInterval / start start (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val start: DateTime The start of the interval, inclusive.","title":"Start"},{"location":"api/core/io.islandtime.ranges/-date-time-interval/start/#start","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val start: DateTime The start of the interval, inclusive.","title":"start"},{"location":"api/core/io.islandtime.ranges/-date-time-interval/to-string/","text":"core / io.islandtime.ranges / DateTimeInterval / toString toString (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toString(): String Convert this interval to a string in ISO-8601 extended format.","title":"To string"},{"location":"api/core/io.islandtime.ranges/-date-time-interval/to-string/#tostring","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toString(): String Convert this interval to a string in ISO-8601 extended format.","title":"toString"},{"location":"api/core/io.islandtime.ranges/-instant-interval/","text":"core / io.islandtime.ranges / InstantInterval InstantInterval (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) class InstantInterval : TimePointInterval < Instant >, TimePointProgressionBuilder < Instant > A half-open interval between two instants. Instant.MIN and Instant.MAX are used as sentinels to indicate an unbounded (ie. infinite) start or end. Constructors Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init> A half-open interval between two instants. <init>(start: Instant = Instant.MIN, endExclusive: Instant = Instant.MAX) Properties Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) first val first: Instant (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) last val last: Instant Functions Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) hasUnboundedEnd Check if the interval's end is unbounded. In ISO-8601 terminology, this is an \"open\" end. fun hasUnboundedEnd(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) hasUnboundedStart Check if the interval's start is unbounded. In ISO-8601 terminology, this is an \"open\" start. fun hasUnboundedStart(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toString Convert this interval to a string in ISO-8601 extended format. fun toString(): String Companion Object Properties Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) EMPTY An empty interval. val EMPTY: InstantInterval (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) UNBOUNDED An unbounded (ie. infinite) interval. val UNBOUNDED: InstantInterval Extension Functions Name Summary (jvm) random Return a random instant within the interval using the supplied random number generator. fun InstantInterval .random(random: Random ): Instant (jvm) randomOrNull Return a random instant within the interval using the supplied random number generator or null if the interval is empty or unbounded. fun InstantInterval .randomOrNull(random: Random ): Instant ?","title":"Index"},{"location":"api/core/io.islandtime.ranges/-instant-interval/#instantinterval","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) class InstantInterval : TimePointInterval < Instant >, TimePointProgressionBuilder < Instant > A half-open interval between two instants. Instant.MIN and Instant.MAX are used as sentinels to indicate an unbounded (ie. infinite) start or end.","title":"InstantInterval"},{"location":"api/core/io.islandtime.ranges/-instant-interval/#constructors","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init> A half-open interval between two instants. <init>(start: Instant = Instant.MIN, endExclusive: Instant = Instant.MAX)","title":"Constructors"},{"location":"api/core/io.islandtime.ranges/-instant-interval/#properties","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) first val first: Instant (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) last val last: Instant","title":"Properties"},{"location":"api/core/io.islandtime.ranges/-instant-interval/#functions","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) hasUnboundedEnd Check if the interval's end is unbounded. In ISO-8601 terminology, this is an \"open\" end. fun hasUnboundedEnd(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) hasUnboundedStart Check if the interval's start is unbounded. In ISO-8601 terminology, this is an \"open\" start. fun hasUnboundedStart(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toString Convert this interval to a string in ISO-8601 extended format. fun toString(): String","title":"Functions"},{"location":"api/core/io.islandtime.ranges/-instant-interval/#companion-object-properties","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) EMPTY An empty interval. val EMPTY: InstantInterval (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) UNBOUNDED An unbounded (ie. infinite) interval. val UNBOUNDED: InstantInterval","title":"Companion Object Properties"},{"location":"api/core/io.islandtime.ranges/-instant-interval/#extension-functions","text":"Name Summary (jvm) random Return a random instant within the interval using the supplied random number generator. fun InstantInterval .random(random: Random ): Instant (jvm) randomOrNull Return a random instant within the interval using the supplied random number generator or null if the interval is empty or unbounded. fun InstantInterval .randomOrNull(random: Random ): Instant ?","title":"Extension Functions"},{"location":"api/core/io.islandtime.ranges/-instant-interval/-e-m-p-t-y/","text":"core / io.islandtime.ranges / InstantInterval / EMPTY EMPTY (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val EMPTY: InstantInterval An empty interval.","title":" e m p t y"},{"location":"api/core/io.islandtime.ranges/-instant-interval/-e-m-p-t-y/#empty","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val EMPTY: InstantInterval An empty interval.","title":"EMPTY"},{"location":"api/core/io.islandtime.ranges/-instant-interval/-init-/","text":"core / io.islandtime.ranges / InstantInterval / <init> <init> (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init>(start: Instant = Instant.MIN, endExclusive: Instant = Instant.MAX) A half-open interval between two instants. Instant.MIN and Instant.MAX are used as sentinels to indicate an unbounded (ie. infinite) start or end.","title":" init "},{"location":"api/core/io.islandtime.ranges/-instant-interval/-init-/#init","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init>(start: Instant = Instant.MIN, endExclusive: Instant = Instant.MAX) A half-open interval between two instants. Instant.MIN and Instant.MAX are used as sentinels to indicate an unbounded (ie. infinite) start or end.","title":"&lt;init&gt;"},{"location":"api/core/io.islandtime.ranges/-instant-interval/-u-n-b-o-u-n-d-e-d/","text":"core / io.islandtime.ranges / InstantInterval / UNBOUNDED UNBOUNDED (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val UNBOUNDED: InstantInterval An unbounded (ie. infinite) interval.","title":" u n b o u n d e d"},{"location":"api/core/io.islandtime.ranges/-instant-interval/-u-n-b-o-u-n-d-e-d/#unbounded","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val UNBOUNDED: InstantInterval An unbounded (ie. infinite) interval.","title":"UNBOUNDED"},{"location":"api/core/io.islandtime.ranges/-instant-interval/first/","text":"core / io.islandtime.ranges / InstantInterval / first first (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val first: Instant","title":"First"},{"location":"api/core/io.islandtime.ranges/-instant-interval/first/#first","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val first: Instant","title":"first"},{"location":"api/core/io.islandtime.ranges/-instant-interval/has-unbounded-end/","text":"core / io.islandtime.ranges / InstantInterval / hasUnboundedEnd hasUnboundedEnd (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun hasUnboundedEnd(): Boolean Check if the interval's end is unbounded. In ISO-8601 terminology, this is an \"open\" end.","title":"Has unbounded end"},{"location":"api/core/io.islandtime.ranges/-instant-interval/has-unbounded-end/#hasunboundedend","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun hasUnboundedEnd(): Boolean Check if the interval's end is unbounded. In ISO-8601 terminology, this is an \"open\" end.","title":"hasUnboundedEnd"},{"location":"api/core/io.islandtime.ranges/-instant-interval/has-unbounded-start/","text":"core / io.islandtime.ranges / InstantInterval / hasUnboundedStart hasUnboundedStart (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun hasUnboundedStart(): Boolean Check if the interval's start is unbounded. In ISO-8601 terminology, this is an \"open\" start.","title":"Has unbounded start"},{"location":"api/core/io.islandtime.ranges/-instant-interval/has-unbounded-start/#hasunboundedstart","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun hasUnboundedStart(): Boolean Check if the interval's start is unbounded. In ISO-8601 terminology, this is an \"open\" start.","title":"hasUnboundedStart"},{"location":"api/core/io.islandtime.ranges/-instant-interval/last/","text":"core / io.islandtime.ranges / InstantInterval / last last (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val last: Instant","title":"Last"},{"location":"api/core/io.islandtime.ranges/-instant-interval/last/#last","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val last: Instant","title":"last"},{"location":"api/core/io.islandtime.ranges/-instant-interval/to-string/","text":"core / io.islandtime.ranges / InstantInterval / toString toString (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toString(): String Convert this interval to a string in ISO-8601 extended format.","title":"To string"},{"location":"api/core/io.islandtime.ranges/-instant-interval/to-string/#tostring","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toString(): String Convert this interval to a string in ISO-8601 extended format.","title":"toString"},{"location":"api/core/io.islandtime.ranges/-offset-date-time-interval/","text":"core / io.islandtime.ranges / OffsetDateTimeInterval OffsetDateTimeInterval (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) class OffsetDateTimeInterval : TimePointInterval < OffsetDateTime > A half-open interval between two offset date-times based on timeline order. DateTime.MIN and DateTime.MAX are used as sentinels to indicate an unbounded (ie. infinite) start or end. An OffsetDateTime with either as the date-time component will be treated accordingly, regardless of the offset. Constructors Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init> A half-open interval between two offset date-times based on timeline order. <init>(start: OffsetDateTime = UNBOUNDED.start, endExclusive: OffsetDateTime = UNBOUNDED.endExclusive) Properties Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) lengthInMonths Get the number of months between the start and end of the interval. A month is considered to have passed if the day of the end month is greater than or equal to the day of the start month. val lengthInMonths: IntMonths (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) lengthInWeeks Get the number of whole weeks in the interval. val lengthInWeeks: LongWeeks (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) lengthInYears Get the number of years between the start and end of the interval. A year is considered to have passed if twelve full months have passed between the start date and end date. val lengthInYears: IntYears Functions Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) asPeriod Convert the interval into a Period of the same length. fun asPeriod(): Period (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) hasUnboundedEnd Check if the interval's end is unbounded. In ISO-8601 terminology, this is an \"open\" end. fun hasUnboundedEnd(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) hasUnboundedStart Check if the interval's start is unbounded. In ISO-8601 terminology, this is an \"open\" start. fun hasUnboundedStart(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toString Convert this interval to a string in ISO-8601 extended format. fun toString(): String Companion Object Properties Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) EMPTY An empty interval. val EMPTY: OffsetDateTimeInterval (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) UNBOUNDED An unbounded (ie. infinite) interval. val UNBOUNDED: OffsetDateTimeInterval Extension Functions Name Summary (jvm) random Return a random date-time within the interval using the supplied random number generator. The offset of the start date-time will be used. fun OffsetDateTimeInterval .random(random: Random ): OffsetDateTime (jvm) randomOrNull Return a random date-time within the interval using the supplied random number generator or null if the interval is empty or unbounded. The offset of the start date-time will be used. fun OffsetDateTimeInterval .randomOrNull(random: Random ): OffsetDateTime ?","title":"Index"},{"location":"api/core/io.islandtime.ranges/-offset-date-time-interval/#offsetdatetimeinterval","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) class OffsetDateTimeInterval : TimePointInterval < OffsetDateTime > A half-open interval between two offset date-times based on timeline order. DateTime.MIN and DateTime.MAX are used as sentinels to indicate an unbounded (ie. infinite) start or end. An OffsetDateTime with either as the date-time component will be treated accordingly, regardless of the offset.","title":"OffsetDateTimeInterval"},{"location":"api/core/io.islandtime.ranges/-offset-date-time-interval/#constructors","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init> A half-open interval between two offset date-times based on timeline order. <init>(start: OffsetDateTime = UNBOUNDED.start, endExclusive: OffsetDateTime = UNBOUNDED.endExclusive)","title":"Constructors"},{"location":"api/core/io.islandtime.ranges/-offset-date-time-interval/#properties","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) lengthInMonths Get the number of months between the start and end of the interval. A month is considered to have passed if the day of the end month is greater than or equal to the day of the start month. val lengthInMonths: IntMonths (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) lengthInWeeks Get the number of whole weeks in the interval. val lengthInWeeks: LongWeeks (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) lengthInYears Get the number of years between the start and end of the interval. A year is considered to have passed if twelve full months have passed between the start date and end date. val lengthInYears: IntYears","title":"Properties"},{"location":"api/core/io.islandtime.ranges/-offset-date-time-interval/#functions","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) asPeriod Convert the interval into a Period of the same length. fun asPeriod(): Period (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) hasUnboundedEnd Check if the interval's end is unbounded. In ISO-8601 terminology, this is an \"open\" end. fun hasUnboundedEnd(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) hasUnboundedStart Check if the interval's start is unbounded. In ISO-8601 terminology, this is an \"open\" start. fun hasUnboundedStart(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toString Convert this interval to a string in ISO-8601 extended format. fun toString(): String","title":"Functions"},{"location":"api/core/io.islandtime.ranges/-offset-date-time-interval/#companion-object-properties","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) EMPTY An empty interval. val EMPTY: OffsetDateTimeInterval (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) UNBOUNDED An unbounded (ie. infinite) interval. val UNBOUNDED: OffsetDateTimeInterval","title":"Companion Object Properties"},{"location":"api/core/io.islandtime.ranges/-offset-date-time-interval/#extension-functions","text":"Name Summary (jvm) random Return a random date-time within the interval using the supplied random number generator. The offset of the start date-time will be used. fun OffsetDateTimeInterval .random(random: Random ): OffsetDateTime (jvm) randomOrNull Return a random date-time within the interval using the supplied random number generator or null if the interval is empty or unbounded. The offset of the start date-time will be used. fun OffsetDateTimeInterval .randomOrNull(random: Random ): OffsetDateTime ?","title":"Extension Functions"},{"location":"api/core/io.islandtime.ranges/-offset-date-time-interval/-e-m-p-t-y/","text":"core / io.islandtime.ranges / OffsetDateTimeInterval / EMPTY EMPTY (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val EMPTY: OffsetDateTimeInterval An empty interval.","title":" e m p t y"},{"location":"api/core/io.islandtime.ranges/-offset-date-time-interval/-e-m-p-t-y/#empty","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val EMPTY: OffsetDateTimeInterval An empty interval.","title":"EMPTY"},{"location":"api/core/io.islandtime.ranges/-offset-date-time-interval/-init-/","text":"core / io.islandtime.ranges / OffsetDateTimeInterval / <init> <init> (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init>(start: OffsetDateTime = UNBOUNDED.start, endExclusive: OffsetDateTime = UNBOUNDED.endExclusive) A half-open interval between two offset date-times based on timeline order. DateTime.MIN and DateTime.MAX are used as sentinels to indicate an unbounded (ie. infinite) start or end. An OffsetDateTime with either as the date-time component will be treated accordingly, regardless of the offset.","title":" init "},{"location":"api/core/io.islandtime.ranges/-offset-date-time-interval/-init-/#init","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init>(start: OffsetDateTime = UNBOUNDED.start, endExclusive: OffsetDateTime = UNBOUNDED.endExclusive) A half-open interval between two offset date-times based on timeline order. DateTime.MIN and DateTime.MAX are used as sentinels to indicate an unbounded (ie. infinite) start or end. An OffsetDateTime with either as the date-time component will be treated accordingly, regardless of the offset.","title":"&lt;init&gt;"},{"location":"api/core/io.islandtime.ranges/-offset-date-time-interval/-u-n-b-o-u-n-d-e-d/","text":"core / io.islandtime.ranges / OffsetDateTimeInterval / UNBOUNDED UNBOUNDED (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val UNBOUNDED: OffsetDateTimeInterval An unbounded (ie. infinite) interval.","title":" u n b o u n d e d"},{"location":"api/core/io.islandtime.ranges/-offset-date-time-interval/-u-n-b-o-u-n-d-e-d/#unbounded","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val UNBOUNDED: OffsetDateTimeInterval An unbounded (ie. infinite) interval.","title":"UNBOUNDED"},{"location":"api/core/io.islandtime.ranges/-offset-date-time-interval/as-period/","text":"core / io.islandtime.ranges / OffsetDateTimeInterval / asPeriod asPeriod (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun asPeriod(): Period Convert the interval into a Period of the same length. Exceptions UnsupportedOperationException - if the interval isn't bounded","title":"As period"},{"location":"api/core/io.islandtime.ranges/-offset-date-time-interval/as-period/#asperiod","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun asPeriod(): Period Convert the interval into a Period of the same length.","title":"asPeriod"},{"location":"api/core/io.islandtime.ranges/-offset-date-time-interval/as-period/#exceptions","text":"UnsupportedOperationException - if the interval isn't bounded","title":"Exceptions"},{"location":"api/core/io.islandtime.ranges/-offset-date-time-interval/has-unbounded-end/","text":"core / io.islandtime.ranges / OffsetDateTimeInterval / hasUnboundedEnd hasUnboundedEnd (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun hasUnboundedEnd(): Boolean Check if the interval's end is unbounded. In ISO-8601 terminology, this is an \"open\" end.","title":"Has unbounded end"},{"location":"api/core/io.islandtime.ranges/-offset-date-time-interval/has-unbounded-end/#hasunboundedend","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun hasUnboundedEnd(): Boolean Check if the interval's end is unbounded. In ISO-8601 terminology, this is an \"open\" end.","title":"hasUnboundedEnd"},{"location":"api/core/io.islandtime.ranges/-offset-date-time-interval/has-unbounded-start/","text":"core / io.islandtime.ranges / OffsetDateTimeInterval / hasUnboundedStart hasUnboundedStart (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun hasUnboundedStart(): Boolean Check if the interval's start is unbounded. In ISO-8601 terminology, this is an \"open\" start.","title":"Has unbounded start"},{"location":"api/core/io.islandtime.ranges/-offset-date-time-interval/has-unbounded-start/#hasunboundedstart","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun hasUnboundedStart(): Boolean Check if the interval's start is unbounded. In ISO-8601 terminology, this is an \"open\" start.","title":"hasUnboundedStart"},{"location":"api/core/io.islandtime.ranges/-offset-date-time-interval/length-in-months/","text":"core / io.islandtime.ranges / OffsetDateTimeInterval / lengthInMonths lengthInMonths (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val lengthInMonths: IntMonths Get the number of months between the start and end of the interval. A month is considered to have passed if the day of the end month is greater than or equal to the day of the start month. Exceptions UnsupportedOperationException - if the interval isn't bounded","title":"Length in months"},{"location":"api/core/io.islandtime.ranges/-offset-date-time-interval/length-in-months/#lengthinmonths","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val lengthInMonths: IntMonths Get the number of months between the start and end of the interval. A month is considered to have passed if the day of the end month is greater than or equal to the day of the start month.","title":"lengthInMonths"},{"location":"api/core/io.islandtime.ranges/-offset-date-time-interval/length-in-months/#exceptions","text":"UnsupportedOperationException - if the interval isn't bounded","title":"Exceptions"},{"location":"api/core/io.islandtime.ranges/-offset-date-time-interval/length-in-weeks/","text":"core / io.islandtime.ranges / OffsetDateTimeInterval / lengthInWeeks lengthInWeeks (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val lengthInWeeks: LongWeeks Get the number of whole weeks in the interval. Exceptions UnsupportedOperationException - if the interval isn't bounded","title":"Length in weeks"},{"location":"api/core/io.islandtime.ranges/-offset-date-time-interval/length-in-weeks/#lengthinweeks","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val lengthInWeeks: LongWeeks Get the number of whole weeks in the interval.","title":"lengthInWeeks"},{"location":"api/core/io.islandtime.ranges/-offset-date-time-interval/length-in-weeks/#exceptions","text":"UnsupportedOperationException - if the interval isn't bounded","title":"Exceptions"},{"location":"api/core/io.islandtime.ranges/-offset-date-time-interval/length-in-years/","text":"core / io.islandtime.ranges / OffsetDateTimeInterval / lengthInYears lengthInYears (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val lengthInYears: IntYears Get the number of years between the start and end of the interval. A year is considered to have passed if twelve full months have passed between the start date and end date. Exceptions UnsupportedOperationException - if the interval isn't bounded","title":"Length in years"},{"location":"api/core/io.islandtime.ranges/-offset-date-time-interval/length-in-years/#lengthinyears","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val lengthInYears: IntYears Get the number of years between the start and end of the interval. A year is considered to have passed if twelve full months have passed between the start date and end date.","title":"lengthInYears"},{"location":"api/core/io.islandtime.ranges/-offset-date-time-interval/length-in-years/#exceptions","text":"UnsupportedOperationException - if the interval isn't bounded","title":"Exceptions"},{"location":"api/core/io.islandtime.ranges/-offset-date-time-interval/to-string/","text":"core / io.islandtime.ranges / OffsetDateTimeInterval / toString toString (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toString(): String Convert this interval to a string in ISO-8601 extended format.","title":"To string"},{"location":"api/core/io.islandtime.ranges/-offset-date-time-interval/to-string/#tostring","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toString(): String Convert this interval to a string in ISO-8601 extended format.","title":"toString"},{"location":"api/core/io.islandtime.ranges/-time-interval/","text":"core / io.islandtime.ranges / TimeInterval TimeInterval (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) interface TimeInterval<T> A half-open time interval. Properties Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) endExclusive The end of the interval, exclusive. abstract val endExclusive: T (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) start The start of the interval, inclusive. abstract val start: T Functions Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) contains Check if value is within the interval based on timeline order. abstract operator fun contains(value: T): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) hasBoundedEnd Check if the interval's end is bounded, meaning it has a finite value. open fun hasBoundedEnd(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) hasBoundedStart Check if the interval's start is bounded, meaning it has a finite value. open fun hasBoundedStart(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) hasUnboundedEnd Check if the interval's end is unbounded. In ISO-8601 terminology, this is an \"open\" end. abstract fun hasUnboundedEnd(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) hasUnboundedStart Check if the interval's start is unbounded. In ISO-8601 terminology, this is an \"open\" start. abstract fun hasUnboundedStart(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isBounded Check if both the start and end of the interval are bounded, meaning it has a finite range. open fun isBounded(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isEmpty Check if the interval is empty. abstract fun isEmpty(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isUnbounded Check if both the start and end of the interval are unbounded, meaning this is an infinite time period in both directions. open fun isUnbounded(): Boolean Inheritors Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) DateTimeInterval An interval between two arbitrary date-times. class DateTimeInterval : TimeInterval < DateTime > (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) TimePointInterval A half-open interval of time points. abstract class TimePointInterval<T : TimePoint <T>> : TimeInterval <T>","title":"Index"},{"location":"api/core/io.islandtime.ranges/-time-interval/#timeinterval","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) interface TimeInterval<T> A half-open time interval.","title":"TimeInterval"},{"location":"api/core/io.islandtime.ranges/-time-interval/#properties","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) endExclusive The end of the interval, exclusive. abstract val endExclusive: T (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) start The start of the interval, inclusive. abstract val start: T","title":"Properties"},{"location":"api/core/io.islandtime.ranges/-time-interval/#functions","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) contains Check if value is within the interval based on timeline order. abstract operator fun contains(value: T): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) hasBoundedEnd Check if the interval's end is bounded, meaning it has a finite value. open fun hasBoundedEnd(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) hasBoundedStart Check if the interval's start is bounded, meaning it has a finite value. open fun hasBoundedStart(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) hasUnboundedEnd Check if the interval's end is unbounded. In ISO-8601 terminology, this is an \"open\" end. abstract fun hasUnboundedEnd(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) hasUnboundedStart Check if the interval's start is unbounded. In ISO-8601 terminology, this is an \"open\" start. abstract fun hasUnboundedStart(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isBounded Check if both the start and end of the interval are bounded, meaning it has a finite range. open fun isBounded(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isEmpty Check if the interval is empty. abstract fun isEmpty(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isUnbounded Check if both the start and end of the interval are unbounded, meaning this is an infinite time period in both directions. open fun isUnbounded(): Boolean","title":"Functions"},{"location":"api/core/io.islandtime.ranges/-time-interval/#inheritors","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) DateTimeInterval An interval between two arbitrary date-times. class DateTimeInterval : TimeInterval < DateTime > (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) TimePointInterval A half-open interval of time points. abstract class TimePointInterval<T : TimePoint <T>> : TimeInterval <T>","title":"Inheritors"},{"location":"api/core/io.islandtime.ranges/-time-interval/contains/","text":"core / io.islandtime.ranges / TimeInterval / contains contains (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract operator fun contains(value: T): Boolean Check if value is within the interval based on timeline order.","title":"Contains"},{"location":"api/core/io.islandtime.ranges/-time-interval/contains/#contains","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract operator fun contains(value: T): Boolean Check if value is within the interval based on timeline order.","title":"contains"},{"location":"api/core/io.islandtime.ranges/-time-interval/end-exclusive/","text":"core / io.islandtime.ranges / TimeInterval / endExclusive endExclusive (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract val endExclusive: T The end of the interval, exclusive.","title":"End exclusive"},{"location":"api/core/io.islandtime.ranges/-time-interval/end-exclusive/#endexclusive","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract val endExclusive: T The end of the interval, exclusive.","title":"endExclusive"},{"location":"api/core/io.islandtime.ranges/-time-interval/has-bounded-end/","text":"core / io.islandtime.ranges / TimeInterval / hasBoundedEnd hasBoundedEnd (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) open fun hasBoundedEnd(): Boolean Check if the interval's end is bounded, meaning it has a finite value.","title":"Has bounded end"},{"location":"api/core/io.islandtime.ranges/-time-interval/has-bounded-end/#hasboundedend","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) open fun hasBoundedEnd(): Boolean Check if the interval's end is bounded, meaning it has a finite value.","title":"hasBoundedEnd"},{"location":"api/core/io.islandtime.ranges/-time-interval/has-bounded-start/","text":"core / io.islandtime.ranges / TimeInterval / hasBoundedStart hasBoundedStart (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) open fun hasBoundedStart(): Boolean Check if the interval's start is bounded, meaning it has a finite value.","title":"Has bounded start"},{"location":"api/core/io.islandtime.ranges/-time-interval/has-bounded-start/#hasboundedstart","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) open fun hasBoundedStart(): Boolean Check if the interval's start is bounded, meaning it has a finite value.","title":"hasBoundedStart"},{"location":"api/core/io.islandtime.ranges/-time-interval/has-unbounded-end/","text":"core / io.islandtime.ranges / TimeInterval / hasUnboundedEnd hasUnboundedEnd (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract fun hasUnboundedEnd(): Boolean Check if the interval's end is unbounded. In ISO-8601 terminology, this is an \"open\" end.","title":"Has unbounded end"},{"location":"api/core/io.islandtime.ranges/-time-interval/has-unbounded-end/#hasunboundedend","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract fun hasUnboundedEnd(): Boolean Check if the interval's end is unbounded. In ISO-8601 terminology, this is an \"open\" end.","title":"hasUnboundedEnd"},{"location":"api/core/io.islandtime.ranges/-time-interval/has-unbounded-start/","text":"core / io.islandtime.ranges / TimeInterval / hasUnboundedStart hasUnboundedStart (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract fun hasUnboundedStart(): Boolean Check if the interval's start is unbounded. In ISO-8601 terminology, this is an \"open\" start.","title":"Has unbounded start"},{"location":"api/core/io.islandtime.ranges/-time-interval/has-unbounded-start/#hasunboundedstart","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract fun hasUnboundedStart(): Boolean Check if the interval's start is unbounded. In ISO-8601 terminology, this is an \"open\" start.","title":"hasUnboundedStart"},{"location":"api/core/io.islandtime.ranges/-time-interval/is-bounded/","text":"core / io.islandtime.ranges / TimeInterval / isBounded isBounded (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) open fun isBounded(): Boolean Check if both the start and end of the interval are bounded, meaning it has a finite range.","title":"Is bounded"},{"location":"api/core/io.islandtime.ranges/-time-interval/is-bounded/#isbounded","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) open fun isBounded(): Boolean Check if both the start and end of the interval are bounded, meaning it has a finite range.","title":"isBounded"},{"location":"api/core/io.islandtime.ranges/-time-interval/is-empty/","text":"core / io.islandtime.ranges / TimeInterval / isEmpty isEmpty (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract fun isEmpty(): Boolean Check if the interval is empty.","title":"Is empty"},{"location":"api/core/io.islandtime.ranges/-time-interval/is-empty/#isempty","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract fun isEmpty(): Boolean Check if the interval is empty.","title":"isEmpty"},{"location":"api/core/io.islandtime.ranges/-time-interval/is-unbounded/","text":"core / io.islandtime.ranges / TimeInterval / isUnbounded isUnbounded (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) open fun isUnbounded(): Boolean Check if both the start and end of the interval are unbounded, meaning this is an infinite time period in both directions.","title":"Is unbounded"},{"location":"api/core/io.islandtime.ranges/-time-interval/is-unbounded/#isunbounded","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) open fun isUnbounded(): Boolean Check if both the start and end of the interval are unbounded, meaning this is an infinite time period in both directions.","title":"isUnbounded"},{"location":"api/core/io.islandtime.ranges/-time-interval/start/","text":"core / io.islandtime.ranges / TimeInterval / start start (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract val start: T The start of the interval, inclusive.","title":"Start"},{"location":"api/core/io.islandtime.ranges/-time-interval/start/#start","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract val start: T The start of the interval, inclusive.","title":"start"},{"location":"api/core/io.islandtime.ranges/-time-point-interval/","text":"core / io.islandtime.ranges / TimePointInterval TimePointInterval (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract class TimePointInterval<T : TimePoint <T>> : TimeInterval <T> A half-open interval of time points. Properties Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) endExclusive The end of the interval, exclusive. open val endExclusive: T (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) endInclusive The last representable time point within the interval. val endInclusive: T (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) lengthInDays Get the number of 24-hour days in the interval. open val lengthInDays: LongDays (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) lengthInHours Get the number of whole hours in the interval. val lengthInHours: LongHours (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) lengthInMicroseconds Get the number of whole microseconds in the interval. val lengthInMicroseconds: LongMicroseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) lengthInMilliseconds Get the number of whole milliseconds in the interval. val lengthInMilliseconds: LongMilliseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) lengthInMinutes Get the number of whole minutes in the interval. val lengthInMinutes: LongMinutes (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) lengthInNanoseconds Get the number of whole nanoseconds in the interval. val lengthInNanoseconds: LongNanoseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) lengthInSeconds Get the number of whole seconds in the interval. val lengthInSeconds: LongSeconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) start The start of the interval, inclusive. open val start: T Functions Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) asDuration Convert the interval into a Duration of the same length. fun asDuration(): Duration (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) contains Check if value is within the interval based on timeline order. open fun contains(value: T): Boolean operator fun contains(value: TimePoint <*>): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) equals open fun equals(other: Any ?): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) hashCode open fun hashCode(): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isEmpty Check if the interval is empty. open fun isEmpty(): Boolean Inheritors Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) InstantInterval A half-open interval between two instants. class InstantInterval : TimePointInterval < Instant >, TimePointProgressionBuilder < Instant > (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) OffsetDateTimeInterval A half-open interval between two offset date-times based on timeline order. class OffsetDateTimeInterval : TimePointInterval < OffsetDateTime > (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) ZonedDateTimeInterval A half-open interval of zoned date-times based on timeline order. class ZonedDateTimeInterval : TimePointInterval < ZonedDateTime >","title":"Index"},{"location":"api/core/io.islandtime.ranges/-time-point-interval/#timepointinterval","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract class TimePointInterval<T : TimePoint <T>> : TimeInterval <T> A half-open interval of time points.","title":"TimePointInterval"},{"location":"api/core/io.islandtime.ranges/-time-point-interval/#properties","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) endExclusive The end of the interval, exclusive. open val endExclusive: T (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) endInclusive The last representable time point within the interval. val endInclusive: T (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) lengthInDays Get the number of 24-hour days in the interval. open val lengthInDays: LongDays (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) lengthInHours Get the number of whole hours in the interval. val lengthInHours: LongHours (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) lengthInMicroseconds Get the number of whole microseconds in the interval. val lengthInMicroseconds: LongMicroseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) lengthInMilliseconds Get the number of whole milliseconds in the interval. val lengthInMilliseconds: LongMilliseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) lengthInMinutes Get the number of whole minutes in the interval. val lengthInMinutes: LongMinutes (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) lengthInNanoseconds Get the number of whole nanoseconds in the interval. val lengthInNanoseconds: LongNanoseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) lengthInSeconds Get the number of whole seconds in the interval. val lengthInSeconds: LongSeconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) start The start of the interval, inclusive. open val start: T","title":"Properties"},{"location":"api/core/io.islandtime.ranges/-time-point-interval/#functions","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) asDuration Convert the interval into a Duration of the same length. fun asDuration(): Duration (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) contains Check if value is within the interval based on timeline order. open fun contains(value: T): Boolean operator fun contains(value: TimePoint <*>): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) equals open fun equals(other: Any ?): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) hashCode open fun hashCode(): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isEmpty Check if the interval is empty. open fun isEmpty(): Boolean","title":"Functions"},{"location":"api/core/io.islandtime.ranges/-time-point-interval/#inheritors","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) InstantInterval A half-open interval between two instants. class InstantInterval : TimePointInterval < Instant >, TimePointProgressionBuilder < Instant > (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) OffsetDateTimeInterval A half-open interval between two offset date-times based on timeline order. class OffsetDateTimeInterval : TimePointInterval < OffsetDateTime > (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) ZonedDateTimeInterval A half-open interval of zoned date-times based on timeline order. class ZonedDateTimeInterval : TimePointInterval < ZonedDateTime >","title":"Inheritors"},{"location":"api/core/io.islandtime.ranges/-time-point-interval/as-duration/","text":"core / io.islandtime.ranges / TimePointInterval / asDuration asDuration (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun asDuration(): Duration Convert the interval into a Duration of the same length. Exceptions UnsupportedOperationException - if the interval isn't bounded","title":"As duration"},{"location":"api/core/io.islandtime.ranges/-time-point-interval/as-duration/#asduration","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun asDuration(): Duration Convert the interval into a Duration of the same length.","title":"asDuration"},{"location":"api/core/io.islandtime.ranges/-time-point-interval/as-duration/#exceptions","text":"UnsupportedOperationException - if the interval isn't bounded","title":"Exceptions"},{"location":"api/core/io.islandtime.ranges/-time-point-interval/contains/","text":"core / io.islandtime.ranges / TimePointInterval / contains contains (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) open fun contains(value: T): Boolean Check if value is within the interval based on timeline order. (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun contains(value: TimePoint <*>): Boolean (jvm) @JvmName(\"containsOther\") operator fun contains(value: TimePoint <*>): Boolean","title":"Contains"},{"location":"api/core/io.islandtime.ranges/-time-point-interval/contains/#contains","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) open fun contains(value: T): Boolean Check if value is within the interval based on timeline order. (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) operator fun contains(value: TimePoint <*>): Boolean (jvm) @JvmName(\"containsOther\") operator fun contains(value: TimePoint <*>): Boolean","title":"contains"},{"location":"api/core/io.islandtime.ranges/-time-point-interval/end-exclusive/","text":"core / io.islandtime.ranges / TimePointInterval / endExclusive endExclusive (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) open val endExclusive: T The end of the interval, exclusive.","title":"End exclusive"},{"location":"api/core/io.islandtime.ranges/-time-point-interval/end-exclusive/#endexclusive","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) open val endExclusive: T The end of the interval, exclusive.","title":"endExclusive"},{"location":"api/core/io.islandtime.ranges/-time-point-interval/end-inclusive/","text":"core / io.islandtime.ranges / TimePointInterval / endInclusive endInclusive (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val endInclusive: T The last representable time point within the interval.","title":"End inclusive"},{"location":"api/core/io.islandtime.ranges/-time-point-interval/end-inclusive/#endinclusive","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val endInclusive: T The last representable time point within the interval.","title":"endInclusive"},{"location":"api/core/io.islandtime.ranges/-time-point-interval/equals/","text":"core / io.islandtime.ranges / TimePointInterval / equals equals (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) open fun equals(other: Any ?): Boolean","title":"Equals"},{"location":"api/core/io.islandtime.ranges/-time-point-interval/equals/#equals","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) open fun equals(other: Any ?): Boolean","title":"equals"},{"location":"api/core/io.islandtime.ranges/-time-point-interval/hash-code/","text":"core / io.islandtime.ranges / TimePointInterval / hashCode hashCode (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) open fun hashCode(): Int","title":"Hash code"},{"location":"api/core/io.islandtime.ranges/-time-point-interval/hash-code/#hashcode","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) open fun hashCode(): Int","title":"hashCode"},{"location":"api/core/io.islandtime.ranges/-time-point-interval/is-empty/","text":"core / io.islandtime.ranges / TimePointInterval / isEmpty isEmpty (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) open fun isEmpty(): Boolean Check if the interval is empty.","title":"Is empty"},{"location":"api/core/io.islandtime.ranges/-time-point-interval/is-empty/#isempty","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) open fun isEmpty(): Boolean Check if the interval is empty.","title":"isEmpty"},{"location":"api/core/io.islandtime.ranges/-time-point-interval/length-in-days/","text":"core / io.islandtime.ranges / TimePointInterval / lengthInDays lengthInDays (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) open val lengthInDays: LongDays Get the number of 24-hour days in the interval. Exceptions UnsupportedOperationException - if the interval isn't bounded","title":"Length in days"},{"location":"api/core/io.islandtime.ranges/-time-point-interval/length-in-days/#lengthindays","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) open val lengthInDays: LongDays Get the number of 24-hour days in the interval.","title":"lengthInDays"},{"location":"api/core/io.islandtime.ranges/-time-point-interval/length-in-days/#exceptions","text":"UnsupportedOperationException - if the interval isn't bounded","title":"Exceptions"},{"location":"api/core/io.islandtime.ranges/-time-point-interval/length-in-hours/","text":"core / io.islandtime.ranges / TimePointInterval / lengthInHours lengthInHours (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val lengthInHours: LongHours Get the number of whole hours in the interval. Exceptions UnsupportedOperationException - if the interval isn't bounded","title":"Length in hours"},{"location":"api/core/io.islandtime.ranges/-time-point-interval/length-in-hours/#lengthinhours","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val lengthInHours: LongHours Get the number of whole hours in the interval.","title":"lengthInHours"},{"location":"api/core/io.islandtime.ranges/-time-point-interval/length-in-hours/#exceptions","text":"UnsupportedOperationException - if the interval isn't bounded","title":"Exceptions"},{"location":"api/core/io.islandtime.ranges/-time-point-interval/length-in-microseconds/","text":"core / io.islandtime.ranges / TimePointInterval / lengthInMicroseconds lengthInMicroseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val lengthInMicroseconds: LongMicroseconds Get the number of whole microseconds in the interval. Exceptions UnsupportedOperationException - if the interval isn't bounded","title":"Length in microseconds"},{"location":"api/core/io.islandtime.ranges/-time-point-interval/length-in-microseconds/#lengthinmicroseconds","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val lengthInMicroseconds: LongMicroseconds Get the number of whole microseconds in the interval.","title":"lengthInMicroseconds"},{"location":"api/core/io.islandtime.ranges/-time-point-interval/length-in-microseconds/#exceptions","text":"UnsupportedOperationException - if the interval isn't bounded","title":"Exceptions"},{"location":"api/core/io.islandtime.ranges/-time-point-interval/length-in-milliseconds/","text":"core / io.islandtime.ranges / TimePointInterval / lengthInMilliseconds lengthInMilliseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val lengthInMilliseconds: LongMilliseconds Get the number of whole milliseconds in the interval. Exceptions UnsupportedOperationException - if the interval isn't bounded","title":"Length in milliseconds"},{"location":"api/core/io.islandtime.ranges/-time-point-interval/length-in-milliseconds/#lengthinmilliseconds","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val lengthInMilliseconds: LongMilliseconds Get the number of whole milliseconds in the interval.","title":"lengthInMilliseconds"},{"location":"api/core/io.islandtime.ranges/-time-point-interval/length-in-milliseconds/#exceptions","text":"UnsupportedOperationException - if the interval isn't bounded","title":"Exceptions"},{"location":"api/core/io.islandtime.ranges/-time-point-interval/length-in-minutes/","text":"core / io.islandtime.ranges / TimePointInterval / lengthInMinutes lengthInMinutes (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val lengthInMinutes: LongMinutes Get the number of whole minutes in the interval. Exceptions UnsupportedOperationException - if the interval isn't bounded","title":"Length in minutes"},{"location":"api/core/io.islandtime.ranges/-time-point-interval/length-in-minutes/#lengthinminutes","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val lengthInMinutes: LongMinutes Get the number of whole minutes in the interval.","title":"lengthInMinutes"},{"location":"api/core/io.islandtime.ranges/-time-point-interval/length-in-minutes/#exceptions","text":"UnsupportedOperationException - if the interval isn't bounded","title":"Exceptions"},{"location":"api/core/io.islandtime.ranges/-time-point-interval/length-in-nanoseconds/","text":"core / io.islandtime.ranges / TimePointInterval / lengthInNanoseconds lengthInNanoseconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val lengthInNanoseconds: LongNanoseconds Get the number of whole nanoseconds in the interval. Exceptions UnsupportedOperationException - if the interval isn't bounded","title":"Length in nanoseconds"},{"location":"api/core/io.islandtime.ranges/-time-point-interval/length-in-nanoseconds/#lengthinnanoseconds","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val lengthInNanoseconds: LongNanoseconds Get the number of whole nanoseconds in the interval.","title":"lengthInNanoseconds"},{"location":"api/core/io.islandtime.ranges/-time-point-interval/length-in-nanoseconds/#exceptions","text":"UnsupportedOperationException - if the interval isn't bounded","title":"Exceptions"},{"location":"api/core/io.islandtime.ranges/-time-point-interval/length-in-seconds/","text":"core / io.islandtime.ranges / TimePointInterval / lengthInSeconds lengthInSeconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val lengthInSeconds: LongSeconds Get the number of whole seconds in the interval. Exceptions UnsupportedOperationException - if the interval isn't bounded","title":"Length in seconds"},{"location":"api/core/io.islandtime.ranges/-time-point-interval/length-in-seconds/#lengthinseconds","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val lengthInSeconds: LongSeconds Get the number of whole seconds in the interval.","title":"lengthInSeconds"},{"location":"api/core/io.islandtime.ranges/-time-point-interval/length-in-seconds/#exceptions","text":"UnsupportedOperationException - if the interval isn't bounded","title":"Exceptions"},{"location":"api/core/io.islandtime.ranges/-time-point-interval/start/","text":"core / io.islandtime.ranges / TimePointInterval / start start (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) open val start: T The start of the interval, inclusive.","title":"Start"},{"location":"api/core/io.islandtime.ranges/-time-point-interval/start/#start","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) open val start: T The start of the interval, inclusive.","title":"start"},{"location":"api/core/io.islandtime.ranges/-time-point-iterator/","text":"core / io.islandtime.ranges / TimePointIterator TimePointIterator (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract class TimePointIterator<T : TimePoint <T>> : Iterator <T> Constructors Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init> <init>() Functions Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) next open fun next(): T (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) nextTimePoint abstract fun nextTimePoint(): T","title":"Index"},{"location":"api/core/io.islandtime.ranges/-time-point-iterator/#timepointiterator","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract class TimePointIterator<T : TimePoint <T>> : Iterator <T>","title":"TimePointIterator"},{"location":"api/core/io.islandtime.ranges/-time-point-iterator/#constructors","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init> <init>()","title":"Constructors"},{"location":"api/core/io.islandtime.ranges/-time-point-iterator/#functions","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) next open fun next(): T (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) nextTimePoint abstract fun nextTimePoint(): T","title":"Functions"},{"location":"api/core/io.islandtime.ranges/-time-point-iterator/-init-/","text":"core / io.islandtime.ranges / TimePointIterator / <init> <init> (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init>()","title":" init "},{"location":"api/core/io.islandtime.ranges/-time-point-iterator/-init-/#init","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init>()","title":"&lt;init&gt;"},{"location":"api/core/io.islandtime.ranges/-time-point-iterator/next-time-point/","text":"core / io.islandtime.ranges / TimePointIterator / nextTimePoint nextTimePoint (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract fun nextTimePoint(): T","title":"Next time point"},{"location":"api/core/io.islandtime.ranges/-time-point-iterator/next-time-point/#nexttimepoint","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract fun nextTimePoint(): T","title":"nextTimePoint"},{"location":"api/core/io.islandtime.ranges/-time-point-iterator/next/","text":"core / io.islandtime.ranges / TimePointIterator / next next (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) open fun next(): T","title":"Next"},{"location":"api/core/io.islandtime.ranges/-time-point-iterator/next/#next","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) open fun next(): T","title":"next"},{"location":"api/core/io.islandtime.ranges/-time-point-nanosecond-progression/","text":"core / io.islandtime.ranges / TimePointNanosecondProgression TimePointNanosecondProgression (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) class TimePointNanosecondProgression<T : TimePoint <T>> : TimePointProgressionBuilder <T>, Iterable <T> Properties Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) first val first: T (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) last val last: T (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) step val step: LongNanoseconds Functions Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) equals fun equals(other: Any ?): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) hashCode fun hashCode(): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isEmpty fun isEmpty(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) iterator fun iterator(): TimePointIterator <T> (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) reversed Reverse a progression such that it counts down instead of up, or vice versa fun reversed(): TimePointNanosecondProgression <T> (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toString fun toString(): String Companion Object Functions Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fromClosedRange fun <T : TimePoint <T>> fromClosedRange(rangeStart: T, rangeEnd: T, step: LongNanoseconds ): TimePointNanosecondProgression <T>","title":"Index"},{"location":"api/core/io.islandtime.ranges/-time-point-nanosecond-progression/#timepointnanosecondprogression","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) class TimePointNanosecondProgression<T : TimePoint <T>> : TimePointProgressionBuilder <T>, Iterable <T>","title":"TimePointNanosecondProgression"},{"location":"api/core/io.islandtime.ranges/-time-point-nanosecond-progression/#properties","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) first val first: T (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) last val last: T (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) step val step: LongNanoseconds","title":"Properties"},{"location":"api/core/io.islandtime.ranges/-time-point-nanosecond-progression/#functions","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) equals fun equals(other: Any ?): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) hashCode fun hashCode(): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isEmpty fun isEmpty(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) iterator fun iterator(): TimePointIterator <T> (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) reversed Reverse a progression such that it counts down instead of up, or vice versa fun reversed(): TimePointNanosecondProgression <T> (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toString fun toString(): String","title":"Functions"},{"location":"api/core/io.islandtime.ranges/-time-point-nanosecond-progression/#companion-object-functions","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fromClosedRange fun <T : TimePoint <T>> fromClosedRange(rangeStart: T, rangeEnd: T, step: LongNanoseconds ): TimePointNanosecondProgression <T>","title":"Companion Object Functions"},{"location":"api/core/io.islandtime.ranges/-time-point-nanosecond-progression/equals/","text":"core / io.islandtime.ranges / TimePointNanosecondProgression / equals equals (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun equals(other: Any ?): Boolean","title":"Equals"},{"location":"api/core/io.islandtime.ranges/-time-point-nanosecond-progression/equals/#equals","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun equals(other: Any ?): Boolean","title":"equals"},{"location":"api/core/io.islandtime.ranges/-time-point-nanosecond-progression/first/","text":"core / io.islandtime.ranges / TimePointNanosecondProgression / first first (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val first: T","title":"First"},{"location":"api/core/io.islandtime.ranges/-time-point-nanosecond-progression/first/#first","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val first: T","title":"first"},{"location":"api/core/io.islandtime.ranges/-time-point-nanosecond-progression/from-closed-range/","text":"core / io.islandtime.ranges / TimePointNanosecondProgression / fromClosedRange fromClosedRange (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun <T : TimePoint <T>> fromClosedRange(rangeStart: T, rangeEnd: T, step: LongNanoseconds ): TimePointNanosecondProgression <T>","title":"From closed range"},{"location":"api/core/io.islandtime.ranges/-time-point-nanosecond-progression/from-closed-range/#fromclosedrange","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun <T : TimePoint <T>> fromClosedRange(rangeStart: T, rangeEnd: T, step: LongNanoseconds ): TimePointNanosecondProgression <T>","title":"fromClosedRange"},{"location":"api/core/io.islandtime.ranges/-time-point-nanosecond-progression/hash-code/","text":"core / io.islandtime.ranges / TimePointNanosecondProgression / hashCode hashCode (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun hashCode(): Int","title":"Hash code"},{"location":"api/core/io.islandtime.ranges/-time-point-nanosecond-progression/hash-code/#hashcode","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun hashCode(): Int","title":"hashCode"},{"location":"api/core/io.islandtime.ranges/-time-point-nanosecond-progression/is-empty/","text":"core / io.islandtime.ranges / TimePointNanosecondProgression / isEmpty isEmpty (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isEmpty(): Boolean","title":"Is empty"},{"location":"api/core/io.islandtime.ranges/-time-point-nanosecond-progression/is-empty/#isempty","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isEmpty(): Boolean","title":"isEmpty"},{"location":"api/core/io.islandtime.ranges/-time-point-nanosecond-progression/iterator/","text":"core / io.islandtime.ranges / TimePointNanosecondProgression / iterator iterator (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun iterator(): TimePointIterator <T>","title":"Iterator"},{"location":"api/core/io.islandtime.ranges/-time-point-nanosecond-progression/iterator/#iterator","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun iterator(): TimePointIterator <T>","title":"iterator"},{"location":"api/core/io.islandtime.ranges/-time-point-nanosecond-progression/last/","text":"core / io.islandtime.ranges / TimePointNanosecondProgression / last last (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val last: T","title":"Last"},{"location":"api/core/io.islandtime.ranges/-time-point-nanosecond-progression/last/#last","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val last: T","title":"last"},{"location":"api/core/io.islandtime.ranges/-time-point-nanosecond-progression/reversed/","text":"core / io.islandtime.ranges / TimePointNanosecondProgression / reversed reversed (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun reversed(): TimePointNanosecondProgression <T> Reverse a progression such that it counts down instead of up, or vice versa","title":"Reversed"},{"location":"api/core/io.islandtime.ranges/-time-point-nanosecond-progression/reversed/#reversed","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun reversed(): TimePointNanosecondProgression <T> Reverse a progression such that it counts down instead of up, or vice versa","title":"reversed"},{"location":"api/core/io.islandtime.ranges/-time-point-nanosecond-progression/step/","text":"core / io.islandtime.ranges / TimePointNanosecondProgression / step step (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val step: LongNanoseconds","title":"Step"},{"location":"api/core/io.islandtime.ranges/-time-point-nanosecond-progression/step/#step","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val step: LongNanoseconds","title":"step"},{"location":"api/core/io.islandtime.ranges/-time-point-nanosecond-progression/to-string/","text":"core / io.islandtime.ranges / TimePointNanosecondProgression / toString toString (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toString(): String","title":"To string"},{"location":"api/core/io.islandtime.ranges/-time-point-nanosecond-progression/to-string/#tostring","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toString(): String","title":"toString"},{"location":"api/core/io.islandtime.ranges/-time-point-progression-builder/","text":"core / io.islandtime.ranges / TimePointProgressionBuilder TimePointProgressionBuilder (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) interface TimePointProgressionBuilder<T : TimePoint <T>> A time point progression builder. Without a step, a time-based progression can't be created. This interface represents an intermediate state in the process of creating a time point progression. Properties Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) first abstract val first: T (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) last abstract val last: T Inheritors Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) InstantInterval A half-open interval between two instants. class InstantInterval : TimePointInterval < Instant >, TimePointProgressionBuilder < Instant > (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) TimePointNanosecondProgression class TimePointNanosecondProgression<T : TimePoint <T>> : TimePointProgressionBuilder <T>, Iterable <T> (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) TimePointSecondProgression class TimePointSecondProgression<T : TimePoint <T>> : TimePointProgressionBuilder <T>, Iterable <T>","title":"Index"},{"location":"api/core/io.islandtime.ranges/-time-point-progression-builder/#timepointprogressionbuilder","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) interface TimePointProgressionBuilder<T : TimePoint <T>> A time point progression builder. Without a step, a time-based progression can't be created. This interface represents an intermediate state in the process of creating a time point progression.","title":"TimePointProgressionBuilder"},{"location":"api/core/io.islandtime.ranges/-time-point-progression-builder/#properties","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) first abstract val first: T (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) last abstract val last: T","title":"Properties"},{"location":"api/core/io.islandtime.ranges/-time-point-progression-builder/#inheritors","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) InstantInterval A half-open interval between two instants. class InstantInterval : TimePointInterval < Instant >, TimePointProgressionBuilder < Instant > (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) TimePointNanosecondProgression class TimePointNanosecondProgression<T : TimePoint <T>> : TimePointProgressionBuilder <T>, Iterable <T> (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) TimePointSecondProgression class TimePointSecondProgression<T : TimePoint <T>> : TimePointProgressionBuilder <T>, Iterable <T>","title":"Inheritors"},{"location":"api/core/io.islandtime.ranges/-time-point-progression-builder/first/","text":"core / io.islandtime.ranges / TimePointProgressionBuilder / first first (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract val first: T","title":"First"},{"location":"api/core/io.islandtime.ranges/-time-point-progression-builder/first/#first","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract val first: T","title":"first"},{"location":"api/core/io.islandtime.ranges/-time-point-progression-builder/last/","text":"core / io.islandtime.ranges / TimePointProgressionBuilder / last last (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract val last: T","title":"Last"},{"location":"api/core/io.islandtime.ranges/-time-point-progression-builder/last/#last","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract val last: T","title":"last"},{"location":"api/core/io.islandtime.ranges/-time-point-second-progression/","text":"core / io.islandtime.ranges / TimePointSecondProgression TimePointSecondProgression (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) class TimePointSecondProgression<T : TimePoint <T>> : TimePointProgressionBuilder <T>, Iterable <T> Properties Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) first val first: T (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) last val last: T (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) step val step: LongSeconds Functions Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) equals fun equals(other: Any ?): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) hashCode fun hashCode(): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isEmpty fun isEmpty(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) iterator fun iterator(): TimePointIterator <T> (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) reversed Reverse a progression such that it counts down instead of up, or vice versa fun reversed(): TimePointSecondProgression <T> (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toString fun toString(): String Companion Object Functions Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fromClosedRange fun <T : TimePoint <T>> fromClosedRange(rangeStart: T, rangeEnd: T, step: LongSeconds ): TimePointSecondProgression <T>","title":"Index"},{"location":"api/core/io.islandtime.ranges/-time-point-second-progression/#timepointsecondprogression","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) class TimePointSecondProgression<T : TimePoint <T>> : TimePointProgressionBuilder <T>, Iterable <T>","title":"TimePointSecondProgression"},{"location":"api/core/io.islandtime.ranges/-time-point-second-progression/#properties","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) first val first: T (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) last val last: T (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) step val step: LongSeconds","title":"Properties"},{"location":"api/core/io.islandtime.ranges/-time-point-second-progression/#functions","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) equals fun equals(other: Any ?): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) hashCode fun hashCode(): Int (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isEmpty fun isEmpty(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) iterator fun iterator(): TimePointIterator <T> (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) reversed Reverse a progression such that it counts down instead of up, or vice versa fun reversed(): TimePointSecondProgression <T> (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toString fun toString(): String","title":"Functions"},{"location":"api/core/io.islandtime.ranges/-time-point-second-progression/#companion-object-functions","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fromClosedRange fun <T : TimePoint <T>> fromClosedRange(rangeStart: T, rangeEnd: T, step: LongSeconds ): TimePointSecondProgression <T>","title":"Companion Object Functions"},{"location":"api/core/io.islandtime.ranges/-time-point-second-progression/equals/","text":"core / io.islandtime.ranges / TimePointSecondProgression / equals equals (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun equals(other: Any ?): Boolean","title":"Equals"},{"location":"api/core/io.islandtime.ranges/-time-point-second-progression/equals/#equals","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun equals(other: Any ?): Boolean","title":"equals"},{"location":"api/core/io.islandtime.ranges/-time-point-second-progression/first/","text":"core / io.islandtime.ranges / TimePointSecondProgression / first first (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val first: T","title":"First"},{"location":"api/core/io.islandtime.ranges/-time-point-second-progression/first/#first","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val first: T","title":"first"},{"location":"api/core/io.islandtime.ranges/-time-point-second-progression/from-closed-range/","text":"core / io.islandtime.ranges / TimePointSecondProgression / fromClosedRange fromClosedRange (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun <T : TimePoint <T>> fromClosedRange(rangeStart: T, rangeEnd: T, step: LongSeconds ): TimePointSecondProgression <T>","title":"From closed range"},{"location":"api/core/io.islandtime.ranges/-time-point-second-progression/from-closed-range/#fromclosedrange","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun <T : TimePoint <T>> fromClosedRange(rangeStart: T, rangeEnd: T, step: LongSeconds ): TimePointSecondProgression <T>","title":"fromClosedRange"},{"location":"api/core/io.islandtime.ranges/-time-point-second-progression/hash-code/","text":"core / io.islandtime.ranges / TimePointSecondProgression / hashCode hashCode (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun hashCode(): Int","title":"Hash code"},{"location":"api/core/io.islandtime.ranges/-time-point-second-progression/hash-code/#hashcode","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun hashCode(): Int","title":"hashCode"},{"location":"api/core/io.islandtime.ranges/-time-point-second-progression/is-empty/","text":"core / io.islandtime.ranges / TimePointSecondProgression / isEmpty isEmpty (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isEmpty(): Boolean","title":"Is empty"},{"location":"api/core/io.islandtime.ranges/-time-point-second-progression/is-empty/#isempty","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun isEmpty(): Boolean","title":"isEmpty"},{"location":"api/core/io.islandtime.ranges/-time-point-second-progression/iterator/","text":"core / io.islandtime.ranges / TimePointSecondProgression / iterator iterator (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun iterator(): TimePointIterator <T>","title":"Iterator"},{"location":"api/core/io.islandtime.ranges/-time-point-second-progression/iterator/#iterator","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun iterator(): TimePointIterator <T>","title":"iterator"},{"location":"api/core/io.islandtime.ranges/-time-point-second-progression/last/","text":"core / io.islandtime.ranges / TimePointSecondProgression / last last (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val last: T","title":"Last"},{"location":"api/core/io.islandtime.ranges/-time-point-second-progression/last/#last","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val last: T","title":"last"},{"location":"api/core/io.islandtime.ranges/-time-point-second-progression/reversed/","text":"core / io.islandtime.ranges / TimePointSecondProgression / reversed reversed (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun reversed(): TimePointSecondProgression <T> Reverse a progression such that it counts down instead of up, or vice versa","title":"Reversed"},{"location":"api/core/io.islandtime.ranges/-time-point-second-progression/reversed/#reversed","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun reversed(): TimePointSecondProgression <T> Reverse a progression such that it counts down instead of up, or vice versa","title":"reversed"},{"location":"api/core/io.islandtime.ranges/-time-point-second-progression/step/","text":"core / io.islandtime.ranges / TimePointSecondProgression / step step (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val step: LongSeconds","title":"Step"},{"location":"api/core/io.islandtime.ranges/-time-point-second-progression/step/#step","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val step: LongSeconds","title":"step"},{"location":"api/core/io.islandtime.ranges/-time-point-second-progression/to-string/","text":"core / io.islandtime.ranges / TimePointSecondProgression / toString toString (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toString(): String","title":"To string"},{"location":"api/core/io.islandtime.ranges/-time-point-second-progression/to-string/#tostring","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toString(): String","title":"toString"},{"location":"api/core/io.islandtime.ranges/-zoned-date-time-interval/","text":"core / io.islandtime.ranges / ZonedDateTimeInterval ZonedDateTimeInterval (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) class ZonedDateTimeInterval : TimePointInterval < ZonedDateTime > A half-open interval of zoned date-times based on timeline order. DateTime.MIN and DateTime.MAX are used as sentinels to indicate an unbounded (ie. infinite) start or end. A ZonedDateTime with either as the date-time component will be treated accordingly, regardless of the offset or time zone. Constructors Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init> A half-open interval of zoned date-times based on timeline order. <init>(start: ZonedDateTime = UNBOUNDED.start, endExclusive: ZonedDateTime = UNBOUNDED.endExclusive) Properties Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) lengthInDays Get the number of whole days in the interval. val lengthInDays: LongDays (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) lengthInMonths Get the number of months between the start and end of the interval. A month is considered to have passed if the day of the end month is greater than or equal to the day of the start month. val lengthInMonths: IntMonths (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) lengthInWeeks Get the number of whole weeks in the interval. val lengthInWeeks: LongWeeks (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) lengthInYears Get the number of years between the start and end of the interval. A year is considered to have passed if twelve full months have passed between the start date and end date. val lengthInYears: IntYears Functions Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) asPeriod Convert the interval into a Period of the same length. fun asPeriod(): Period (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) hasUnboundedEnd Check if the interval's end is unbounded. In ISO-8601 terminology, this is an \"open\" end. fun hasUnboundedEnd(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) hasUnboundedStart Check if the interval's start is unbounded. In ISO-8601 terminology, this is an \"open\" start. fun hasUnboundedStart(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toString Convert this interval to a string in ISO-8601 extended format. fun toString(): String Companion Object Properties Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) EMPTY An empty interval. val EMPTY: ZonedDateTimeInterval (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) UNBOUNDED An unbounded (ie. infinite) interval. val UNBOUNDED: ZonedDateTimeInterval Extension Functions Name Summary (jvm) random Return a random date-time within the interval using the supplied random number generator. The zone of the start date-time will be used. fun ZonedDateTimeInterval .random(random: Random ): ZonedDateTime (jvm) randomOrNull Return a random date-time within the interval using the supplied random number generator or null if the interval is empty or unbounded. The zone of the start date-time will be used. fun ZonedDateTimeInterval .randomOrNull(random: Random ): ZonedDateTime ?","title":"Index"},{"location":"api/core/io.islandtime.ranges/-zoned-date-time-interval/#zoneddatetimeinterval","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) class ZonedDateTimeInterval : TimePointInterval < ZonedDateTime > A half-open interval of zoned date-times based on timeline order. DateTime.MIN and DateTime.MAX are used as sentinels to indicate an unbounded (ie. infinite) start or end. A ZonedDateTime with either as the date-time component will be treated accordingly, regardless of the offset or time zone.","title":"ZonedDateTimeInterval"},{"location":"api/core/io.islandtime.ranges/-zoned-date-time-interval/#constructors","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init> A half-open interval of zoned date-times based on timeline order. <init>(start: ZonedDateTime = UNBOUNDED.start, endExclusive: ZonedDateTime = UNBOUNDED.endExclusive)","title":"Constructors"},{"location":"api/core/io.islandtime.ranges/-zoned-date-time-interval/#properties","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) lengthInDays Get the number of whole days in the interval. val lengthInDays: LongDays (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) lengthInMonths Get the number of months between the start and end of the interval. A month is considered to have passed if the day of the end month is greater than or equal to the day of the start month. val lengthInMonths: IntMonths (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) lengthInWeeks Get the number of whole weeks in the interval. val lengthInWeeks: LongWeeks (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) lengthInYears Get the number of years between the start and end of the interval. A year is considered to have passed if twelve full months have passed between the start date and end date. val lengthInYears: IntYears","title":"Properties"},{"location":"api/core/io.islandtime.ranges/-zoned-date-time-interval/#functions","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) asPeriod Convert the interval into a Period of the same length. fun asPeriod(): Period (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) hasUnboundedEnd Check if the interval's end is unbounded. In ISO-8601 terminology, this is an \"open\" end. fun hasUnboundedEnd(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) hasUnboundedStart Check if the interval's start is unbounded. In ISO-8601 terminology, this is an \"open\" start. fun hasUnboundedStart(): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toString Convert this interval to a string in ISO-8601 extended format. fun toString(): String","title":"Functions"},{"location":"api/core/io.islandtime.ranges/-zoned-date-time-interval/#companion-object-properties","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) EMPTY An empty interval. val EMPTY: ZonedDateTimeInterval (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) UNBOUNDED An unbounded (ie. infinite) interval. val UNBOUNDED: ZonedDateTimeInterval","title":"Companion Object Properties"},{"location":"api/core/io.islandtime.ranges/-zoned-date-time-interval/#extension-functions","text":"Name Summary (jvm) random Return a random date-time within the interval using the supplied random number generator. The zone of the start date-time will be used. fun ZonedDateTimeInterval .random(random: Random ): ZonedDateTime (jvm) randomOrNull Return a random date-time within the interval using the supplied random number generator or null if the interval is empty or unbounded. The zone of the start date-time will be used. fun ZonedDateTimeInterval .randomOrNull(random: Random ): ZonedDateTime ?","title":"Extension Functions"},{"location":"api/core/io.islandtime.ranges/-zoned-date-time-interval/-e-m-p-t-y/","text":"core / io.islandtime.ranges / ZonedDateTimeInterval / EMPTY EMPTY (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val EMPTY: ZonedDateTimeInterval An empty interval.","title":" e m p t y"},{"location":"api/core/io.islandtime.ranges/-zoned-date-time-interval/-e-m-p-t-y/#empty","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val EMPTY: ZonedDateTimeInterval An empty interval.","title":"EMPTY"},{"location":"api/core/io.islandtime.ranges/-zoned-date-time-interval/-init-/","text":"core / io.islandtime.ranges / ZonedDateTimeInterval / <init> <init> (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init>(start: ZonedDateTime = UNBOUNDED.start, endExclusive: ZonedDateTime = UNBOUNDED.endExclusive) A half-open interval of zoned date-times based on timeline order. DateTime.MIN and DateTime.MAX are used as sentinels to indicate an unbounded (ie. infinite) start or end. A ZonedDateTime with either as the date-time component will be treated accordingly, regardless of the offset or time zone.","title":" init "},{"location":"api/core/io.islandtime.ranges/-zoned-date-time-interval/-init-/#init","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init>(start: ZonedDateTime = UNBOUNDED.start, endExclusive: ZonedDateTime = UNBOUNDED.endExclusive) A half-open interval of zoned date-times based on timeline order. DateTime.MIN and DateTime.MAX are used as sentinels to indicate an unbounded (ie. infinite) start or end. A ZonedDateTime with either as the date-time component will be treated accordingly, regardless of the offset or time zone.","title":"&lt;init&gt;"},{"location":"api/core/io.islandtime.ranges/-zoned-date-time-interval/-u-n-b-o-u-n-d-e-d/","text":"core / io.islandtime.ranges / ZonedDateTimeInterval / UNBOUNDED UNBOUNDED (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val UNBOUNDED: ZonedDateTimeInterval An unbounded (ie. infinite) interval.","title":" u n b o u n d e d"},{"location":"api/core/io.islandtime.ranges/-zoned-date-time-interval/-u-n-b-o-u-n-d-e-d/#unbounded","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val UNBOUNDED: ZonedDateTimeInterval An unbounded (ie. infinite) interval.","title":"UNBOUNDED"},{"location":"api/core/io.islandtime.ranges/-zoned-date-time-interval/as-period/","text":"core / io.islandtime.ranges / ZonedDateTimeInterval / asPeriod asPeriod (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun asPeriod(): Period Convert the interval into a Period of the same length. Exceptions UnsupportedOperationException - if the interval isn't bounded","title":"As period"},{"location":"api/core/io.islandtime.ranges/-zoned-date-time-interval/as-period/#asperiod","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun asPeriod(): Period Convert the interval into a Period of the same length.","title":"asPeriod"},{"location":"api/core/io.islandtime.ranges/-zoned-date-time-interval/as-period/#exceptions","text":"UnsupportedOperationException - if the interval isn't bounded","title":"Exceptions"},{"location":"api/core/io.islandtime.ranges/-zoned-date-time-interval/has-unbounded-end/","text":"core / io.islandtime.ranges / ZonedDateTimeInterval / hasUnboundedEnd hasUnboundedEnd (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun hasUnboundedEnd(): Boolean Check if the interval's end is unbounded. In ISO-8601 terminology, this is an \"open\" end.","title":"Has unbounded end"},{"location":"api/core/io.islandtime.ranges/-zoned-date-time-interval/has-unbounded-end/#hasunboundedend","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun hasUnboundedEnd(): Boolean Check if the interval's end is unbounded. In ISO-8601 terminology, this is an \"open\" end.","title":"hasUnboundedEnd"},{"location":"api/core/io.islandtime.ranges/-zoned-date-time-interval/has-unbounded-start/","text":"core / io.islandtime.ranges / ZonedDateTimeInterval / hasUnboundedStart hasUnboundedStart (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun hasUnboundedStart(): Boolean Check if the interval's start is unbounded. In ISO-8601 terminology, this is an \"open\" start.","title":"Has unbounded start"},{"location":"api/core/io.islandtime.ranges/-zoned-date-time-interval/has-unbounded-start/#hasunboundedstart","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun hasUnboundedStart(): Boolean Check if the interval's start is unbounded. In ISO-8601 terminology, this is an \"open\" start.","title":"hasUnboundedStart"},{"location":"api/core/io.islandtime.ranges/-zoned-date-time-interval/length-in-days/","text":"core / io.islandtime.ranges / ZonedDateTimeInterval / lengthInDays lengthInDays (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val lengthInDays: LongDays Get the number of whole days in the interval. Exceptions UnsupportedOperationException - if the interval isn't bounded","title":"Length in days"},{"location":"api/core/io.islandtime.ranges/-zoned-date-time-interval/length-in-days/#lengthindays","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val lengthInDays: LongDays Get the number of whole days in the interval.","title":"lengthInDays"},{"location":"api/core/io.islandtime.ranges/-zoned-date-time-interval/length-in-days/#exceptions","text":"UnsupportedOperationException - if the interval isn't bounded","title":"Exceptions"},{"location":"api/core/io.islandtime.ranges/-zoned-date-time-interval/length-in-months/","text":"core / io.islandtime.ranges / ZonedDateTimeInterval / lengthInMonths lengthInMonths (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val lengthInMonths: IntMonths Get the number of months between the start and end of the interval. A month is considered to have passed if the day of the end month is greater than or equal to the day of the start month. Exceptions UnsupportedOperationException - if the interval isn't bounded","title":"Length in months"},{"location":"api/core/io.islandtime.ranges/-zoned-date-time-interval/length-in-months/#lengthinmonths","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val lengthInMonths: IntMonths Get the number of months between the start and end of the interval. A month is considered to have passed if the day of the end month is greater than or equal to the day of the start month.","title":"lengthInMonths"},{"location":"api/core/io.islandtime.ranges/-zoned-date-time-interval/length-in-months/#exceptions","text":"UnsupportedOperationException - if the interval isn't bounded","title":"Exceptions"},{"location":"api/core/io.islandtime.ranges/-zoned-date-time-interval/length-in-weeks/","text":"core / io.islandtime.ranges / ZonedDateTimeInterval / lengthInWeeks lengthInWeeks (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val lengthInWeeks: LongWeeks Get the number of whole weeks in the interval. Exceptions UnsupportedOperationException - if the interval isn't bounded","title":"Length in weeks"},{"location":"api/core/io.islandtime.ranges/-zoned-date-time-interval/length-in-weeks/#lengthinweeks","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val lengthInWeeks: LongWeeks Get the number of whole weeks in the interval.","title":"lengthInWeeks"},{"location":"api/core/io.islandtime.ranges/-zoned-date-time-interval/length-in-weeks/#exceptions","text":"UnsupportedOperationException - if the interval isn't bounded","title":"Exceptions"},{"location":"api/core/io.islandtime.ranges/-zoned-date-time-interval/length-in-years/","text":"core / io.islandtime.ranges / ZonedDateTimeInterval / lengthInYears lengthInYears (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val lengthInYears: IntYears Get the number of years between the start and end of the interval. A year is considered to have passed if twelve full months have passed between the start date and end date. Exceptions UnsupportedOperationException - if the interval isn't bounded","title":"Length in years"},{"location":"api/core/io.islandtime.ranges/-zoned-date-time-interval/length-in-years/#lengthinyears","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val lengthInYears: IntYears Get the number of years between the start and end of the interval. A year is considered to have passed if twelve full months have passed between the start date and end date.","title":"lengthInYears"},{"location":"api/core/io.islandtime.ranges/-zoned-date-time-interval/length-in-years/#exceptions","text":"UnsupportedOperationException - if the interval isn't bounded","title":"Exceptions"},{"location":"api/core/io.islandtime.ranges/-zoned-date-time-interval/to-string/","text":"core / io.islandtime.ranges / ZonedDateTimeInterval / toString toString (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toString(): String Convert this interval to a string in ISO-8601 extended format.","title":"To string"},{"location":"api/core/io.islandtime.ranges/-zoned-date-time-interval/to-string/#tostring","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun toString(): String Convert this interval to a string in ISO-8601 extended format.","title":"toString"},{"location":"api/core/io.islandtime.ranges/kotlin.-string/","text":"core / io.islandtime.ranges / kotlin.String Extensions for kotlin.String Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toDateRange Convert a string to a DateRange . fun String .toDateRange(): DateRange Convert a string to a DateRange using a specific parser. fun String .toDateRange(parser: GroupedDateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): DateRange (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toDateTimeInterval Convert a string to a DateTimeInterval . fun String .toDateTimeInterval(): DateTimeInterval Convert a string to a DateTimeInterval using a specific parser. fun String .toDateTimeInterval(parser: GroupedDateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): DateTimeInterval (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toInstantInterval Convert a string to an InstantInterval . fun String .toInstantInterval(): InstantInterval Convert a string to an InstantInterval using a specific parser. fun String .toInstantInterval(parser: GroupedDateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): InstantInterval (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toOffsetDateTimeInterval Convert a string to an OffsetDateTimeInterval . fun String .toOffsetDateTimeInterval(): OffsetDateTimeInterval Convert a string to an OffsetDateTimeInterval using a specific parser. fun String .toOffsetDateTimeInterval(parser: GroupedDateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): OffsetDateTimeInterval (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toZonedDateTimeInterval Convert a string to a ZonedDateTimeInterval . fun String .toZonedDateTimeInterval(): ZonedDateTimeInterval Convert a string to a ZonedDateTimeInterval using a specific parser. fun String .toZonedDateTimeInterval(parser: GroupedDateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): ZonedDateTimeInterval","title":"Index"},{"location":"api/core/io.islandtime.ranges/kotlin.-string/#extensions-for-kotlinstring","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toDateRange Convert a string to a DateRange . fun String .toDateRange(): DateRange Convert a string to a DateRange using a specific parser. fun String .toDateRange(parser: GroupedDateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): DateRange (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toDateTimeInterval Convert a string to a DateTimeInterval . fun String .toDateTimeInterval(): DateTimeInterval Convert a string to a DateTimeInterval using a specific parser. fun String .toDateTimeInterval(parser: GroupedDateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): DateTimeInterval (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toInstantInterval Convert a string to an InstantInterval . fun String .toInstantInterval(): InstantInterval Convert a string to an InstantInterval using a specific parser. fun String .toInstantInterval(parser: GroupedDateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): InstantInterval (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toOffsetDateTimeInterval Convert a string to an OffsetDateTimeInterval . fun String .toOffsetDateTimeInterval(): OffsetDateTimeInterval Convert a string to an OffsetDateTimeInterval using a specific parser. fun String .toOffsetDateTimeInterval(parser: GroupedDateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): OffsetDateTimeInterval (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) toZonedDateTimeInterval Convert a string to a ZonedDateTimeInterval . fun String .toZonedDateTimeInterval(): ZonedDateTimeInterval Convert a string to a ZonedDateTimeInterval using a specific parser. fun String .toZonedDateTimeInterval(parser: GroupedDateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): ZonedDateTimeInterval","title":"Extensions for kotlin.String"},{"location":"api/core/io.islandtime.ranges/kotlin.-string/to-date-range/","text":"core / io.islandtime.ranges / kotlin.String / toDateRange toDateRange (iosArm64) fun String .toDateRange(): DateRange (iosX64) fun String .toDateRange(): DateRange (jvm) fun String .toDateRange(): DateRange (macosX64) fun String .toDateRange(): DateRange (tvosArm64) fun String .toDateRange(): DateRange (tvosX64) fun String .toDateRange(): DateRange (watchosArm64) fun String .toDateRange(): DateRange (watchosX86) fun String .toDateRange(): DateRange Convert a string to a DateRange . The string is assumed to be an ISO-8601 time interval representation in extended format. The output of DateRange.toString can be safely parsed using this method. Examples: 1990-01-04/1991-08-30 ../1991-08-30 1990-01-04/.. ../.. (empty string) Exceptions DateTimeParseException - if parsing fails DateTimeException - if the parsed time is invalid(iosArm64) fun String .toDateRange(parser: GroupedDateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): DateRange (iosX64) fun String .toDateRange(parser: GroupedDateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): DateRange (jvm) fun String .toDateRange(parser: GroupedDateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): DateRange (macosX64) fun String .toDateRange(parser: GroupedDateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): DateRange (tvosArm64) fun String .toDateRange(parser: GroupedDateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): DateRange (tvosX64) fun String .toDateRange(parser: GroupedDateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): DateRange (watchosArm64) fun String .toDateRange(parser: GroupedDateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): DateRange (watchosX86) fun String .toDateRange(parser: GroupedDateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): DateRange Convert a string to a DateRange using a specific parser. A set of predefined parsers can be found in DateTimeParsers . Exceptions DateTimeParseException - if parsing fails DateTimeException - if the parsed range is invalid","title":"To date range"},{"location":"api/core/io.islandtime.ranges/kotlin.-string/to-date-range/#todaterange","text":"(iosArm64) fun String .toDateRange(): DateRange (iosX64) fun String .toDateRange(): DateRange (jvm) fun String .toDateRange(): DateRange (macosX64) fun String .toDateRange(): DateRange (tvosArm64) fun String .toDateRange(): DateRange (tvosX64) fun String .toDateRange(): DateRange (watchosArm64) fun String .toDateRange(): DateRange (watchosX86) fun String .toDateRange(): DateRange Convert a string to a DateRange . The string is assumed to be an ISO-8601 time interval representation in extended format. The output of DateRange.toString can be safely parsed using this method. Examples: 1990-01-04/1991-08-30 ../1991-08-30 1990-01-04/.. ../.. (empty string)","title":"toDateRange"},{"location":"api/core/io.islandtime.ranges/kotlin.-string/to-date-range/#exceptions","text":"DateTimeParseException - if parsing fails DateTimeException - if the parsed time is invalid(iosArm64) fun String .toDateRange(parser: GroupedDateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): DateRange (iosX64) fun String .toDateRange(parser: GroupedDateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): DateRange (jvm) fun String .toDateRange(parser: GroupedDateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): DateRange (macosX64) fun String .toDateRange(parser: GroupedDateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): DateRange (tvosArm64) fun String .toDateRange(parser: GroupedDateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): DateRange (tvosX64) fun String .toDateRange(parser: GroupedDateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): DateRange (watchosArm64) fun String .toDateRange(parser: GroupedDateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): DateRange (watchosX86) fun String .toDateRange(parser: GroupedDateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): DateRange Convert a string to a DateRange using a specific parser. A set of predefined parsers can be found in DateTimeParsers .","title":"Exceptions"},{"location":"api/core/io.islandtime.ranges/kotlin.-string/to-date-range/#exceptions_1","text":"DateTimeParseException - if parsing fails DateTimeException - if the parsed range is invalid","title":"Exceptions"},{"location":"api/core/io.islandtime.ranges/kotlin.-string/to-date-time-interval/","text":"core / io.islandtime.ranges / kotlin.String / toDateTimeInterval toDateTimeInterval (iosArm64) fun String .toDateTimeInterval(): DateTimeInterval (iosX64) fun String .toDateTimeInterval(): DateTimeInterval (jvm) fun String .toDateTimeInterval(): DateTimeInterval (macosX64) fun String .toDateTimeInterval(): DateTimeInterval (tvosArm64) fun String .toDateTimeInterval(): DateTimeInterval (tvosX64) fun String .toDateTimeInterval(): DateTimeInterval (watchosArm64) fun String .toDateTimeInterval(): DateTimeInterval (watchosX86) fun String .toDateTimeInterval(): DateTimeInterval Convert a string to a DateTimeInterval . The string is assumed to be an ISO-8601 time interval representation in extended format. The output of DateTimeInterval.toString can be safely parsed using this method. Examples: 1990-01-04T03/1991-08-30T15:30:05.123 ../1991-08-30T15:30:05.123 1990-01-04T03/.. ../.. (empty string) Exceptions DateTimeParseException - if parsing fails DateTimeException - if the parsed time is invalid(iosArm64) fun String .toDateTimeInterval(parser: GroupedDateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): DateTimeInterval (iosX64) fun String .toDateTimeInterval(parser: GroupedDateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): DateTimeInterval (jvm) fun String .toDateTimeInterval(parser: GroupedDateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): DateTimeInterval (macosX64) fun String .toDateTimeInterval(parser: GroupedDateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): DateTimeInterval (tvosArm64) fun String .toDateTimeInterval(parser: GroupedDateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): DateTimeInterval (tvosX64) fun String .toDateTimeInterval(parser: GroupedDateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): DateTimeInterval (watchosArm64) fun String .toDateTimeInterval(parser: GroupedDateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): DateTimeInterval (watchosX86) fun String .toDateTimeInterval(parser: GroupedDateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): DateTimeInterval Convert a string to a DateTimeInterval using a specific parser. A set of predefined parsers can be found in DateTimeParsers . Exceptions DateTimeParseException - if parsing fails DateTimeException - if the parsed interval is invalid","title":"To date time interval"},{"location":"api/core/io.islandtime.ranges/kotlin.-string/to-date-time-interval/#todatetimeinterval","text":"(iosArm64) fun String .toDateTimeInterval(): DateTimeInterval (iosX64) fun String .toDateTimeInterval(): DateTimeInterval (jvm) fun String .toDateTimeInterval(): DateTimeInterval (macosX64) fun String .toDateTimeInterval(): DateTimeInterval (tvosArm64) fun String .toDateTimeInterval(): DateTimeInterval (tvosX64) fun String .toDateTimeInterval(): DateTimeInterval (watchosArm64) fun String .toDateTimeInterval(): DateTimeInterval (watchosX86) fun String .toDateTimeInterval(): DateTimeInterval Convert a string to a DateTimeInterval . The string is assumed to be an ISO-8601 time interval representation in extended format. The output of DateTimeInterval.toString can be safely parsed using this method. Examples: 1990-01-04T03/1991-08-30T15:30:05.123 ../1991-08-30T15:30:05.123 1990-01-04T03/.. ../.. (empty string)","title":"toDateTimeInterval"},{"location":"api/core/io.islandtime.ranges/kotlin.-string/to-date-time-interval/#exceptions","text":"DateTimeParseException - if parsing fails DateTimeException - if the parsed time is invalid(iosArm64) fun String .toDateTimeInterval(parser: GroupedDateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): DateTimeInterval (iosX64) fun String .toDateTimeInterval(parser: GroupedDateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): DateTimeInterval (jvm) fun String .toDateTimeInterval(parser: GroupedDateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): DateTimeInterval (macosX64) fun String .toDateTimeInterval(parser: GroupedDateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): DateTimeInterval (tvosArm64) fun String .toDateTimeInterval(parser: GroupedDateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): DateTimeInterval (tvosX64) fun String .toDateTimeInterval(parser: GroupedDateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): DateTimeInterval (watchosArm64) fun String .toDateTimeInterval(parser: GroupedDateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): DateTimeInterval (watchosX86) fun String .toDateTimeInterval(parser: GroupedDateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): DateTimeInterval Convert a string to a DateTimeInterval using a specific parser. A set of predefined parsers can be found in DateTimeParsers .","title":"Exceptions"},{"location":"api/core/io.islandtime.ranges/kotlin.-string/to-date-time-interval/#exceptions_1","text":"DateTimeParseException - if parsing fails DateTimeException - if the parsed interval is invalid","title":"Exceptions"},{"location":"api/core/io.islandtime.ranges/kotlin.-string/to-instant-interval/","text":"core / io.islandtime.ranges / kotlin.String / toInstantInterval toInstantInterval (iosArm64) fun String .toInstantInterval(): InstantInterval (iosX64) fun String .toInstantInterval(): InstantInterval (jvm) fun String .toInstantInterval(): InstantInterval (macosX64) fun String .toInstantInterval(): InstantInterval (tvosArm64) fun String .toInstantInterval(): InstantInterval (tvosX64) fun String .toInstantInterval(): InstantInterval (watchosArm64) fun String .toInstantInterval(): InstantInterval (watchosX86) fun String .toInstantInterval(): InstantInterval Convert a string to an InstantInterval . The string is assumed to be an ISO-8601 time interval representation in extended format. The output of InstantInterval.toString can be safely parsed using this method. Examples: 1990-01-04T03Z/1991-08-30T15:30:05.123Z ../1991-08-30T15:30:05.123Z 1990-01-04T03Z/.. ../.. (empty string) Exceptions DateTimeParseException - if parsing fails DateTimeException - if the parsed time is invalid(iosArm64) fun String .toInstantInterval(parser: GroupedDateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): InstantInterval (iosX64) fun String .toInstantInterval(parser: GroupedDateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): InstantInterval (jvm) fun String .toInstantInterval(parser: GroupedDateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): InstantInterval (macosX64) fun String .toInstantInterval(parser: GroupedDateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): InstantInterval (tvosArm64) fun String .toInstantInterval(parser: GroupedDateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): InstantInterval (tvosX64) fun String .toInstantInterval(parser: GroupedDateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): InstantInterval (watchosArm64) fun String .toInstantInterval(parser: GroupedDateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): InstantInterval (watchosX86) fun String .toInstantInterval(parser: GroupedDateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): InstantInterval Convert a string to an InstantInterval using a specific parser. A set of predefined parsers can be found in DateTimeParsers . Exceptions DateTimeParseException - if parsing fails DateTimeException - if the parsed interval is invalid","title":"To instant interval"},{"location":"api/core/io.islandtime.ranges/kotlin.-string/to-instant-interval/#toinstantinterval","text":"(iosArm64) fun String .toInstantInterval(): InstantInterval (iosX64) fun String .toInstantInterval(): InstantInterval (jvm) fun String .toInstantInterval(): InstantInterval (macosX64) fun String .toInstantInterval(): InstantInterval (tvosArm64) fun String .toInstantInterval(): InstantInterval (tvosX64) fun String .toInstantInterval(): InstantInterval (watchosArm64) fun String .toInstantInterval(): InstantInterval (watchosX86) fun String .toInstantInterval(): InstantInterval Convert a string to an InstantInterval . The string is assumed to be an ISO-8601 time interval representation in extended format. The output of InstantInterval.toString can be safely parsed using this method. Examples: 1990-01-04T03Z/1991-08-30T15:30:05.123Z ../1991-08-30T15:30:05.123Z 1990-01-04T03Z/.. ../.. (empty string)","title":"toInstantInterval"},{"location":"api/core/io.islandtime.ranges/kotlin.-string/to-instant-interval/#exceptions","text":"DateTimeParseException - if parsing fails DateTimeException - if the parsed time is invalid(iosArm64) fun String .toInstantInterval(parser: GroupedDateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): InstantInterval (iosX64) fun String .toInstantInterval(parser: GroupedDateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): InstantInterval (jvm) fun String .toInstantInterval(parser: GroupedDateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): InstantInterval (macosX64) fun String .toInstantInterval(parser: GroupedDateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): InstantInterval (tvosArm64) fun String .toInstantInterval(parser: GroupedDateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): InstantInterval (tvosX64) fun String .toInstantInterval(parser: GroupedDateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): InstantInterval (watchosArm64) fun String .toInstantInterval(parser: GroupedDateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): InstantInterval (watchosX86) fun String .toInstantInterval(parser: GroupedDateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): InstantInterval Convert a string to an InstantInterval using a specific parser. A set of predefined parsers can be found in DateTimeParsers .","title":"Exceptions"},{"location":"api/core/io.islandtime.ranges/kotlin.-string/to-instant-interval/#exceptions_1","text":"DateTimeParseException - if parsing fails DateTimeException - if the parsed interval is invalid","title":"Exceptions"},{"location":"api/core/io.islandtime.ranges/kotlin.-string/to-offset-date-time-interval/","text":"core / io.islandtime.ranges / kotlin.String / toOffsetDateTimeInterval toOffsetDateTimeInterval (iosArm64) fun String .toOffsetDateTimeInterval(): OffsetDateTimeInterval (iosX64) fun String .toOffsetDateTimeInterval(): OffsetDateTimeInterval (jvm) fun String .toOffsetDateTimeInterval(): OffsetDateTimeInterval (macosX64) fun String .toOffsetDateTimeInterval(): OffsetDateTimeInterval (tvosArm64) fun String .toOffsetDateTimeInterval(): OffsetDateTimeInterval (tvosX64) fun String .toOffsetDateTimeInterval(): OffsetDateTimeInterval (watchosArm64) fun String .toOffsetDateTimeInterval(): OffsetDateTimeInterval (watchosX86) fun String .toOffsetDateTimeInterval(): OffsetDateTimeInterval Convert a string to an OffsetDateTimeInterval . The string is assumed to be an ISO-8601 time interval representation in extended format. The output of OffsetDateTimeInterval.toString can be safely parsed using this method. Examples: 1990-01-04T03-05/1991-08-30T15:30:05.123-04:00 ../1991-08-30T15:30:05.123-04:00 1990-01-04T03-05/.. ../.. (empty string) Exceptions DateTimeParseException - if parsing fails DateTimeException - if the parsed time is invalid(iosArm64) fun String .toOffsetDateTimeInterval(parser: GroupedDateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): OffsetDateTimeInterval (iosX64) fun String .toOffsetDateTimeInterval(parser: GroupedDateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): OffsetDateTimeInterval (jvm) fun String .toOffsetDateTimeInterval(parser: GroupedDateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): OffsetDateTimeInterval (macosX64) fun String .toOffsetDateTimeInterval(parser: GroupedDateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): OffsetDateTimeInterval (tvosArm64) fun String .toOffsetDateTimeInterval(parser: GroupedDateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): OffsetDateTimeInterval (tvosX64) fun String .toOffsetDateTimeInterval(parser: GroupedDateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): OffsetDateTimeInterval (watchosArm64) fun String .toOffsetDateTimeInterval(parser: GroupedDateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): OffsetDateTimeInterval (watchosX86) fun String .toOffsetDateTimeInterval(parser: GroupedDateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): OffsetDateTimeInterval Convert a string to an OffsetDateTimeInterval using a specific parser. A set of predefined parsers can be found in DateTimeParsers . Exceptions DateTimeParseException - if parsing fails DateTimeException - if the parsed interval is invalid","title":"To offset date time interval"},{"location":"api/core/io.islandtime.ranges/kotlin.-string/to-offset-date-time-interval/#tooffsetdatetimeinterval","text":"(iosArm64) fun String .toOffsetDateTimeInterval(): OffsetDateTimeInterval (iosX64) fun String .toOffsetDateTimeInterval(): OffsetDateTimeInterval (jvm) fun String .toOffsetDateTimeInterval(): OffsetDateTimeInterval (macosX64) fun String .toOffsetDateTimeInterval(): OffsetDateTimeInterval (tvosArm64) fun String .toOffsetDateTimeInterval(): OffsetDateTimeInterval (tvosX64) fun String .toOffsetDateTimeInterval(): OffsetDateTimeInterval (watchosArm64) fun String .toOffsetDateTimeInterval(): OffsetDateTimeInterval (watchosX86) fun String .toOffsetDateTimeInterval(): OffsetDateTimeInterval Convert a string to an OffsetDateTimeInterval . The string is assumed to be an ISO-8601 time interval representation in extended format. The output of OffsetDateTimeInterval.toString can be safely parsed using this method. Examples: 1990-01-04T03-05/1991-08-30T15:30:05.123-04:00 ../1991-08-30T15:30:05.123-04:00 1990-01-04T03-05/.. ../.. (empty string)","title":"toOffsetDateTimeInterval"},{"location":"api/core/io.islandtime.ranges/kotlin.-string/to-offset-date-time-interval/#exceptions","text":"DateTimeParseException - if parsing fails DateTimeException - if the parsed time is invalid(iosArm64) fun String .toOffsetDateTimeInterval(parser: GroupedDateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): OffsetDateTimeInterval (iosX64) fun String .toOffsetDateTimeInterval(parser: GroupedDateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): OffsetDateTimeInterval (jvm) fun String .toOffsetDateTimeInterval(parser: GroupedDateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): OffsetDateTimeInterval (macosX64) fun String .toOffsetDateTimeInterval(parser: GroupedDateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): OffsetDateTimeInterval (tvosArm64) fun String .toOffsetDateTimeInterval(parser: GroupedDateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): OffsetDateTimeInterval (tvosX64) fun String .toOffsetDateTimeInterval(parser: GroupedDateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): OffsetDateTimeInterval (watchosArm64) fun String .toOffsetDateTimeInterval(parser: GroupedDateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): OffsetDateTimeInterval (watchosX86) fun String .toOffsetDateTimeInterval(parser: GroupedDateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): OffsetDateTimeInterval Convert a string to an OffsetDateTimeInterval using a specific parser. A set of predefined parsers can be found in DateTimeParsers .","title":"Exceptions"},{"location":"api/core/io.islandtime.ranges/kotlin.-string/to-offset-date-time-interval/#exceptions_1","text":"DateTimeParseException - if parsing fails DateTimeException - if the parsed interval is invalid","title":"Exceptions"},{"location":"api/core/io.islandtime.ranges/kotlin.-string/to-zoned-date-time-interval/","text":"core / io.islandtime.ranges / kotlin.String / toZonedDateTimeInterval toZonedDateTimeInterval (iosArm64) fun String .toZonedDateTimeInterval(): ZonedDateTimeInterval (iosX64) fun String .toZonedDateTimeInterval(): ZonedDateTimeInterval (jvm) fun String .toZonedDateTimeInterval(): ZonedDateTimeInterval (macosX64) fun String .toZonedDateTimeInterval(): ZonedDateTimeInterval (tvosArm64) fun String .toZonedDateTimeInterval(): ZonedDateTimeInterval (tvosX64) fun String .toZonedDateTimeInterval(): ZonedDateTimeInterval (watchosArm64) fun String .toZonedDateTimeInterval(): ZonedDateTimeInterval (watchosX86) fun String .toZonedDateTimeInterval(): ZonedDateTimeInterval Convert a string to a ZonedDateTimeInterval . The string is assumed to be an ISO-8601 time interval representation in extended format. The output of ZonedDateTimeInterval.toString can be safely parsed using this method. Examples: 1990-01-04T03-05[America/New_York]/1991-08-30T15:30:05.123-04:00 ../1991-08-30T15:30:05.123-04:00 1990-01-04T03-05[Europe/London]/.. ../.. (empty string) Exceptions DateTimeParseException - if parsing fails DateTimeException - if the parsed time is invalid(iosArm64) fun String .toZonedDateTimeInterval(parser: GroupedDateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): ZonedDateTimeInterval (iosX64) fun String .toZonedDateTimeInterval(parser: GroupedDateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): ZonedDateTimeInterval (jvm) fun String .toZonedDateTimeInterval(parser: GroupedDateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): ZonedDateTimeInterval (macosX64) fun String .toZonedDateTimeInterval(parser: GroupedDateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): ZonedDateTimeInterval (tvosArm64) fun String .toZonedDateTimeInterval(parser: GroupedDateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): ZonedDateTimeInterval (tvosX64) fun String .toZonedDateTimeInterval(parser: GroupedDateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): ZonedDateTimeInterval (watchosArm64) fun String .toZonedDateTimeInterval(parser: GroupedDateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): ZonedDateTimeInterval (watchosX86) fun String .toZonedDateTimeInterval(parser: GroupedDateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): ZonedDateTimeInterval Convert a string to a ZonedDateTimeInterval using a specific parser. A set of predefined parsers can be found in DateTimeParsers . Exceptions DateTimeParseException - if parsing fails DateTimeException - if the parsed interval is invalid","title":"To zoned date time interval"},{"location":"api/core/io.islandtime.ranges/kotlin.-string/to-zoned-date-time-interval/#tozoneddatetimeinterval","text":"(iosArm64) fun String .toZonedDateTimeInterval(): ZonedDateTimeInterval (iosX64) fun String .toZonedDateTimeInterval(): ZonedDateTimeInterval (jvm) fun String .toZonedDateTimeInterval(): ZonedDateTimeInterval (macosX64) fun String .toZonedDateTimeInterval(): ZonedDateTimeInterval (tvosArm64) fun String .toZonedDateTimeInterval(): ZonedDateTimeInterval (tvosX64) fun String .toZonedDateTimeInterval(): ZonedDateTimeInterval (watchosArm64) fun String .toZonedDateTimeInterval(): ZonedDateTimeInterval (watchosX86) fun String .toZonedDateTimeInterval(): ZonedDateTimeInterval Convert a string to a ZonedDateTimeInterval . The string is assumed to be an ISO-8601 time interval representation in extended format. The output of ZonedDateTimeInterval.toString can be safely parsed using this method. Examples: 1990-01-04T03-05[America/New_York]/1991-08-30T15:30:05.123-04:00 ../1991-08-30T15:30:05.123-04:00 1990-01-04T03-05[Europe/London]/.. ../.. (empty string)","title":"toZonedDateTimeInterval"},{"location":"api/core/io.islandtime.ranges/kotlin.-string/to-zoned-date-time-interval/#exceptions","text":"DateTimeParseException - if parsing fails DateTimeException - if the parsed time is invalid(iosArm64) fun String .toZonedDateTimeInterval(parser: GroupedDateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): ZonedDateTimeInterval (iosX64) fun String .toZonedDateTimeInterval(parser: GroupedDateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): ZonedDateTimeInterval (jvm) fun String .toZonedDateTimeInterval(parser: GroupedDateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): ZonedDateTimeInterval (macosX64) fun String .toZonedDateTimeInterval(parser: GroupedDateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): ZonedDateTimeInterval (tvosArm64) fun String .toZonedDateTimeInterval(parser: GroupedDateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): ZonedDateTimeInterval (tvosX64) fun String .toZonedDateTimeInterval(parser: GroupedDateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): ZonedDateTimeInterval (watchosArm64) fun String .toZonedDateTimeInterval(parser: GroupedDateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): ZonedDateTimeInterval (watchosX86) fun String .toZonedDateTimeInterval(parser: GroupedDateTimeParser , settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): ZonedDateTimeInterval Convert a string to a ZonedDateTimeInterval using a specific parser. A set of predefined parsers can be found in DateTimeParsers .","title":"Exceptions"},{"location":"api/core/io.islandtime.ranges/kotlin.-string/to-zoned-date-time-interval/#exceptions_1","text":"DateTimeParseException - if parsing fails DateTimeException - if the parsed interval is invalid","title":"Exceptions"},{"location":"api/core/io.islandtime.zone/","text":"core / io.islandtime.zone Package io.islandtime.zone Time zone database support. Types Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) PlatformTimeZoneRulesProvider The default time zone rules provider implementation for the current platform. object PlatformTimeZoneRulesProvider : TimeZoneRulesProvider (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) TimeZoneOffsetTransition A discontinuity in the local timeline, usually caused by daylight savings time changes. interface TimeZoneOffsetTransition (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) TimeZoneRules The set of rules for a particular time zone. interface TimeZoneRules (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) TimeZoneRulesException class TimeZoneRulesException : DateTimeException (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) TimeZoneRulesProvider An abstraction that allows time zone rules to be supplied from any data source. interface TimeZoneRulesProvider","title":"Index"},{"location":"api/core/io.islandtime.zone/#package-ioislandtimezone","text":"Time zone database support.","title":"Package io.islandtime.zone"},{"location":"api/core/io.islandtime.zone/#types","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) PlatformTimeZoneRulesProvider The default time zone rules provider implementation for the current platform. object PlatformTimeZoneRulesProvider : TimeZoneRulesProvider (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) TimeZoneOffsetTransition A discontinuity in the local timeline, usually caused by daylight savings time changes. interface TimeZoneOffsetTransition (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) TimeZoneRules The set of rules for a particular time zone. interface TimeZoneRules (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) TimeZoneRulesException class TimeZoneRulesException : DateTimeException (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) TimeZoneRulesProvider An abstraction that allows time zone rules to be supplied from any data source. interface TimeZoneRulesProvider","title":"Types"},{"location":"api/core/io.islandtime.zone/-platform-time-zone-rules-provider/","text":"core / io.islandtime.zone / PlatformTimeZoneRulesProvider PlatformTimeZoneRulesProvider (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) object PlatformTimeZoneRulesProvider : TimeZoneRulesProvider The default time zone rules provider implementation for the current platform. Properties Name Summary availableRegionIds The available time zone region IDs as reported by the underlying provider.(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val availableRegionIds: <ERROR CLASS> (jvm) val availableRegionIds: Set < String > (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) databaseVersion The time zone database version or an empty string if unavailable. val databaseVersion: String Functions Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) hasRulesFor Check if regionId has rules associated with it. fun hasRulesFor(regionId: String ): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) rulesFor Get the rules associated with a particular region ID. fun rulesFor(regionId: String ): TimeZoneRules","title":"Index"},{"location":"api/core/io.islandtime.zone/-platform-time-zone-rules-provider/#platformtimezonerulesprovider","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) object PlatformTimeZoneRulesProvider : TimeZoneRulesProvider The default time zone rules provider implementation for the current platform.","title":"PlatformTimeZoneRulesProvider"},{"location":"api/core/io.islandtime.zone/-platform-time-zone-rules-provider/#properties","text":"Name Summary availableRegionIds The available time zone region IDs as reported by the underlying provider.(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val availableRegionIds: <ERROR CLASS> (jvm) val availableRegionIds: Set < String > (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) databaseVersion The time zone database version or an empty string if unavailable. val databaseVersion: String","title":"Properties"},{"location":"api/core/io.islandtime.zone/-platform-time-zone-rules-provider/#functions","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) hasRulesFor Check if regionId has rules associated with it. fun hasRulesFor(regionId: String ): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) rulesFor Get the rules associated with a particular region ID. fun rulesFor(regionId: String ): TimeZoneRules","title":"Functions"},{"location":"api/core/io.islandtime.zone/-platform-time-zone-rules-provider/available-region-ids/","text":"core / io.islandtime.zone / PlatformTimeZoneRulesProvider / availableRegionIds availableRegionIds (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val availableRegionIds: <ERROR CLASS> (jvm) val availableRegionIds: Set < String > The available time zone region IDs as reported by the underlying provider. In some cases, this may be only a subset of those actually supported. To check if a particular region ID can be handled, use hasRulesFor . See Also hasRulesFor","title":"Available region ids"},{"location":"api/core/io.islandtime.zone/-platform-time-zone-rules-provider/available-region-ids/#availableregionids","text":"(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val availableRegionIds: <ERROR CLASS> (jvm) val availableRegionIds: Set < String > The available time zone region IDs as reported by the underlying provider. In some cases, this may be only a subset of those actually supported. To check if a particular region ID can be handled, use hasRulesFor . See Also hasRulesFor","title":"availableRegionIds"},{"location":"api/core/io.islandtime.zone/-platform-time-zone-rules-provider/database-version/","text":"core / io.islandtime.zone / PlatformTimeZoneRulesProvider / databaseVersion databaseVersion (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val databaseVersion: String The time zone database version or an empty string if unavailable.","title":"Database version"},{"location":"api/core/io.islandtime.zone/-platform-time-zone-rules-provider/database-version/#databaseversion","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val databaseVersion: String The time zone database version or an empty string if unavailable.","title":"databaseVersion"},{"location":"api/core/io.islandtime.zone/-platform-time-zone-rules-provider/has-rules-for/","text":"core / io.islandtime.zone / PlatformTimeZoneRulesProvider / hasRulesFor hasRulesFor (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun hasRulesFor(regionId: String ): Boolean Check if regionId has rules associated with it.","title":"Has rules for"},{"location":"api/core/io.islandtime.zone/-platform-time-zone-rules-provider/has-rules-for/#hasrulesfor","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun hasRulesFor(regionId: String ): Boolean Check if regionId has rules associated with it.","title":"hasRulesFor"},{"location":"api/core/io.islandtime.zone/-platform-time-zone-rules-provider/rules-for/","text":"core / io.islandtime.zone / PlatformTimeZoneRulesProvider / rulesFor rulesFor (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun rulesFor(regionId: String ): TimeZoneRules Get the rules associated with a particular region ID. Exceptions TimeZoneRulesException - if the region ID isn't supported","title":"Rules for"},{"location":"api/core/io.islandtime.zone/-platform-time-zone-rules-provider/rules-for/#rulesfor","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun rulesFor(regionId: String ): TimeZoneRules Get the rules associated with a particular region ID.","title":"rulesFor"},{"location":"api/core/io.islandtime.zone/-platform-time-zone-rules-provider/rules-for/#exceptions","text":"TimeZoneRulesException - if the region ID isn't supported","title":"Exceptions"},{"location":"api/core/io.islandtime.zone/-time-zone-offset-transition/","text":"core / io.islandtime.zone / TimeZoneOffsetTransition TimeZoneOffsetTransition (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) interface TimeZoneOffsetTransition A discontinuity in the local timeline, usually caused by daylight savings time changes. Properties Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) dateTimeAfter The date and time of day at the end of the transition. abstract val dateTimeAfter: DateTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) dateTimeBefore The date and time of day at the start of the transition. abstract val dateTimeBefore: DateTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) duration The duration of the transition period in seconds. abstract val duration: IntSeconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isGap Check if this is a gap, meaning that there are clock times that go \"missing\". abstract val isGap: Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isOverlap Check if this is an overlap, meaning that there are clock times that exist twice. abstract val isOverlap: Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) offsetAfter The UTC offset after the transition. abstract val offsetAfter: UtcOffset (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) offsetBefore The UTC offset before the transition. abstract val offsetBefore: UtcOffset (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) validOffsets Get a list of the valid offsets during this transition. If this is gap, the list will be empty. If this is an overlap, the list will contain both the earlier and later offsets. open val validOffsets: List < UtcOffset >","title":"Index"},{"location":"api/core/io.islandtime.zone/-time-zone-offset-transition/#timezoneoffsettransition","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) interface TimeZoneOffsetTransition A discontinuity in the local timeline, usually caused by daylight savings time changes.","title":"TimeZoneOffsetTransition"},{"location":"api/core/io.islandtime.zone/-time-zone-offset-transition/#properties","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) dateTimeAfter The date and time of day at the end of the transition. abstract val dateTimeAfter: DateTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) dateTimeBefore The date and time of day at the start of the transition. abstract val dateTimeBefore: DateTime (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) duration The duration of the transition period in seconds. abstract val duration: IntSeconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isGap Check if this is a gap, meaning that there are clock times that go \"missing\". abstract val isGap: Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isOverlap Check if this is an overlap, meaning that there are clock times that exist twice. abstract val isOverlap: Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) offsetAfter The UTC offset after the transition. abstract val offsetAfter: UtcOffset (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) offsetBefore The UTC offset before the transition. abstract val offsetBefore: UtcOffset (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) validOffsets Get a list of the valid offsets during this transition. If this is gap, the list will be empty. If this is an overlap, the list will contain both the earlier and later offsets. open val validOffsets: List < UtcOffset >","title":"Properties"},{"location":"api/core/io.islandtime.zone/-time-zone-offset-transition/date-time-after/","text":"core / io.islandtime.zone / TimeZoneOffsetTransition / dateTimeAfter dateTimeAfter (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract val dateTimeAfter: DateTime The date and time of day at the end of the transition.","title":"Date time after"},{"location":"api/core/io.islandtime.zone/-time-zone-offset-transition/date-time-after/#datetimeafter","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract val dateTimeAfter: DateTime The date and time of day at the end of the transition.","title":"dateTimeAfter"},{"location":"api/core/io.islandtime.zone/-time-zone-offset-transition/date-time-before/","text":"core / io.islandtime.zone / TimeZoneOffsetTransition / dateTimeBefore dateTimeBefore (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract val dateTimeBefore: DateTime The date and time of day at the start of the transition.","title":"Date time before"},{"location":"api/core/io.islandtime.zone/-time-zone-offset-transition/date-time-before/#datetimebefore","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract val dateTimeBefore: DateTime The date and time of day at the start of the transition.","title":"dateTimeBefore"},{"location":"api/core/io.islandtime.zone/-time-zone-offset-transition/duration/","text":"core / io.islandtime.zone / TimeZoneOffsetTransition / duration duration (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract val duration: IntSeconds The duration of the transition period in seconds.","title":"Duration"},{"location":"api/core/io.islandtime.zone/-time-zone-offset-transition/duration/#duration","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract val duration: IntSeconds The duration of the transition period in seconds.","title":"duration"},{"location":"api/core/io.islandtime.zone/-time-zone-offset-transition/is-gap/","text":"core / io.islandtime.zone / TimeZoneOffsetTransition / isGap isGap (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract val isGap: Boolean Check if this is a gap, meaning that there are clock times that go \"missing\".","title":"Is gap"},{"location":"api/core/io.islandtime.zone/-time-zone-offset-transition/is-gap/#isgap","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract val isGap: Boolean Check if this is a gap, meaning that there are clock times that go \"missing\".","title":"isGap"},{"location":"api/core/io.islandtime.zone/-time-zone-offset-transition/is-overlap/","text":"core / io.islandtime.zone / TimeZoneOffsetTransition / isOverlap isOverlap (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract val isOverlap: Boolean Check if this is an overlap, meaning that there are clock times that exist twice.","title":"Is overlap"},{"location":"api/core/io.islandtime.zone/-time-zone-offset-transition/is-overlap/#isoverlap","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract val isOverlap: Boolean Check if this is an overlap, meaning that there are clock times that exist twice.","title":"isOverlap"},{"location":"api/core/io.islandtime.zone/-time-zone-offset-transition/offset-after/","text":"core / io.islandtime.zone / TimeZoneOffsetTransition / offsetAfter offsetAfter (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract val offsetAfter: UtcOffset The UTC offset after the transition.","title":"Offset after"},{"location":"api/core/io.islandtime.zone/-time-zone-offset-transition/offset-after/#offsetafter","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract val offsetAfter: UtcOffset The UTC offset after the transition.","title":"offsetAfter"},{"location":"api/core/io.islandtime.zone/-time-zone-offset-transition/offset-before/","text":"core / io.islandtime.zone / TimeZoneOffsetTransition / offsetBefore offsetBefore (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract val offsetBefore: UtcOffset The UTC offset before the transition.","title":"Offset before"},{"location":"api/core/io.islandtime.zone/-time-zone-offset-transition/offset-before/#offsetbefore","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract val offsetBefore: UtcOffset The UTC offset before the transition.","title":"offsetBefore"},{"location":"api/core/io.islandtime.zone/-time-zone-offset-transition/valid-offsets/","text":"core / io.islandtime.zone / TimeZoneOffsetTransition / validOffsets validOffsets (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) open val validOffsets: List < UtcOffset > Get a list of the valid offsets during this transition. If this is gap, the list will be empty. If this is an overlap, the list will contain both the earlier and later offsets.","title":"Valid offsets"},{"location":"api/core/io.islandtime.zone/-time-zone-offset-transition/valid-offsets/#validoffsets","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) open val validOffsets: List < UtcOffset > Get a list of the valid offsets during this transition. If this is gap, the list will be empty. If this is an overlap, the list will contain both the earlier and later offsets.","title":"validOffsets"},{"location":"api/core/io.islandtime.zone/-time-zone-rules/","text":"core / io.islandtime.zone / TimeZoneRules TimeZoneRules (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) interface TimeZoneRules The set of rules for a particular time zone. Properties Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) hasFixedOffset Check if the time zone has a fixed offset from UTC. abstract val hasFixedOffset: Boolean Functions Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) daylightSavingsAt Get the amount of daylight savings time in effect at a particular instant. This is the amount of time added to the standard offset. abstract fun daylightSavingsAt(instant: Instant ): IntSeconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isDaylightSavingsAt Check if daylight savings time is in effect at a particular instant. abstract fun isDaylightSavingsAt(instant: Instant ): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isValidOffset Check if offset is valid at particular date and time. open fun isValidOffset(dateTime: DateTime , offset: UtcOffset ): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) offsetAt Get the offset in effect at a certain number of milliseconds since the Unix epoch. abstract fun offsetAt(millisecondsSinceUnixEpoch: LongMilliseconds ): UtcOffset Get the offset in effect at a certain number of seconds since the Unix epoch. abstract fun offsetAt(secondsSinceUnixEpoch: LongSeconds , nanoOfSeconds: IntNanoseconds ): UtcOffset Get the offset in effect at a particular instant. abstract fun offsetAt(instant: Instant ): UtcOffset Get the offset in effect at a particular date and time. abstract fun offsetAt(dateTime: DateTime ): UtcOffset (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) transitionAt Get the transition at a particular date and time, if one exists. abstract fun transitionAt(dateTime: DateTime ): TimeZoneOffsetTransition ? (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) validOffsetsAt Get a list of the valid offsets at a particular date and time. abstract fun validOffsetsAt(dateTime: DateTime ): List < UtcOffset >","title":"Index"},{"location":"api/core/io.islandtime.zone/-time-zone-rules/#timezonerules","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) interface TimeZoneRules The set of rules for a particular time zone.","title":"TimeZoneRules"},{"location":"api/core/io.islandtime.zone/-time-zone-rules/#properties","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) hasFixedOffset Check if the time zone has a fixed offset from UTC. abstract val hasFixedOffset: Boolean","title":"Properties"},{"location":"api/core/io.islandtime.zone/-time-zone-rules/#functions","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) daylightSavingsAt Get the amount of daylight savings time in effect at a particular instant. This is the amount of time added to the standard offset. abstract fun daylightSavingsAt(instant: Instant ): IntSeconds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isDaylightSavingsAt Check if daylight savings time is in effect at a particular instant. abstract fun isDaylightSavingsAt(instant: Instant ): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) isValidOffset Check if offset is valid at particular date and time. open fun isValidOffset(dateTime: DateTime , offset: UtcOffset ): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) offsetAt Get the offset in effect at a certain number of milliseconds since the Unix epoch. abstract fun offsetAt(millisecondsSinceUnixEpoch: LongMilliseconds ): UtcOffset Get the offset in effect at a certain number of seconds since the Unix epoch. abstract fun offsetAt(secondsSinceUnixEpoch: LongSeconds , nanoOfSeconds: IntNanoseconds ): UtcOffset Get the offset in effect at a particular instant. abstract fun offsetAt(instant: Instant ): UtcOffset Get the offset in effect at a particular date and time. abstract fun offsetAt(dateTime: DateTime ): UtcOffset (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) transitionAt Get the transition at a particular date and time, if one exists. abstract fun transitionAt(dateTime: DateTime ): TimeZoneOffsetTransition ? (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) validOffsetsAt Get a list of the valid offsets at a particular date and time. abstract fun validOffsetsAt(dateTime: DateTime ): List < UtcOffset >","title":"Functions"},{"location":"api/core/io.islandtime.zone/-time-zone-rules/daylight-savings-at/","text":"core / io.islandtime.zone / TimeZoneRules / daylightSavingsAt daylightSavingsAt (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract fun daylightSavingsAt(instant: Instant ): IntSeconds Get the amount of daylight savings time in effect at a particular instant. This is the amount of time added to the standard offset.","title":"Daylight savings at"},{"location":"api/core/io.islandtime.zone/-time-zone-rules/daylight-savings-at/#daylightsavingsat","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract fun daylightSavingsAt(instant: Instant ): IntSeconds Get the amount of daylight savings time in effect at a particular instant. This is the amount of time added to the standard offset.","title":"daylightSavingsAt"},{"location":"api/core/io.islandtime.zone/-time-zone-rules/has-fixed-offset/","text":"core / io.islandtime.zone / TimeZoneRules / hasFixedOffset hasFixedOffset (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract val hasFixedOffset: Boolean Check if the time zone has a fixed offset from UTC.","title":"Has fixed offset"},{"location":"api/core/io.islandtime.zone/-time-zone-rules/has-fixed-offset/#hasfixedoffset","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract val hasFixedOffset: Boolean Check if the time zone has a fixed offset from UTC.","title":"hasFixedOffset"},{"location":"api/core/io.islandtime.zone/-time-zone-rules/is-daylight-savings-at/","text":"core / io.islandtime.zone / TimeZoneRules / isDaylightSavingsAt isDaylightSavingsAt (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract fun isDaylightSavingsAt(instant: Instant ): Boolean Check if daylight savings time is in effect at a particular instant.","title":"Is daylight savings at"},{"location":"api/core/io.islandtime.zone/-time-zone-rules/is-daylight-savings-at/#isdaylightsavingsat","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract fun isDaylightSavingsAt(instant: Instant ): Boolean Check if daylight savings time is in effect at a particular instant.","title":"isDaylightSavingsAt"},{"location":"api/core/io.islandtime.zone/-time-zone-rules/is-valid-offset/","text":"core / io.islandtime.zone / TimeZoneRules / isValidOffset isValidOffset (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) open fun isValidOffset(dateTime: DateTime , offset: UtcOffset ): Boolean Check if offset is valid at particular date and time.","title":"Is valid offset"},{"location":"api/core/io.islandtime.zone/-time-zone-rules/is-valid-offset/#isvalidoffset","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) open fun isValidOffset(dateTime: DateTime , offset: UtcOffset ): Boolean Check if offset is valid at particular date and time.","title":"isValidOffset"},{"location":"api/core/io.islandtime.zone/-time-zone-rules/offset-at/","text":"core / io.islandtime.zone / TimeZoneRules / offsetAt offsetAt (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract fun offsetAt(millisecondsSinceUnixEpoch: LongMilliseconds ): UtcOffset Get the offset in effect at a certain number of milliseconds since the Unix epoch. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract fun offsetAt(secondsSinceUnixEpoch: LongSeconds , nanoOfSeconds: IntNanoseconds ): UtcOffset Get the offset in effect at a certain number of seconds since the Unix epoch. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract fun offsetAt(instant: Instant ): UtcOffset Get the offset in effect at a particular instant. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract fun offsetAt(dateTime: DateTime ): UtcOffset Get the offset in effect at a particular date and time.","title":"Offset at"},{"location":"api/core/io.islandtime.zone/-time-zone-rules/offset-at/#offsetat","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract fun offsetAt(millisecondsSinceUnixEpoch: LongMilliseconds ): UtcOffset Get the offset in effect at a certain number of milliseconds since the Unix epoch. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract fun offsetAt(secondsSinceUnixEpoch: LongSeconds , nanoOfSeconds: IntNanoseconds ): UtcOffset Get the offset in effect at a certain number of seconds since the Unix epoch. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract fun offsetAt(instant: Instant ): UtcOffset Get the offset in effect at a particular instant. (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract fun offsetAt(dateTime: DateTime ): UtcOffset Get the offset in effect at a particular date and time.","title":"offsetAt"},{"location":"api/core/io.islandtime.zone/-time-zone-rules/transition-at/","text":"core / io.islandtime.zone / TimeZoneRules / transitionAt transitionAt (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract fun transitionAt(dateTime: DateTime ): TimeZoneOffsetTransition ? Get the transition at a particular date and time, if one exists.","title":"Transition at"},{"location":"api/core/io.islandtime.zone/-time-zone-rules/transition-at/#transitionat","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract fun transitionAt(dateTime: DateTime ): TimeZoneOffsetTransition ? Get the transition at a particular date and time, if one exists.","title":"transitionAt"},{"location":"api/core/io.islandtime.zone/-time-zone-rules/valid-offsets-at/","text":"core / io.islandtime.zone / TimeZoneRules / validOffsetsAt validOffsetsAt (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract fun validOffsetsAt(dateTime: DateTime ): List < UtcOffset > Get a list of the valid offsets at a particular date and time.","title":"Valid offsets at"},{"location":"api/core/io.islandtime.zone/-time-zone-rules/valid-offsets-at/#validoffsetsat","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract fun validOffsetsAt(dateTime: DateTime ): List < UtcOffset > Get a list of the valid offsets at a particular date and time.","title":"validOffsetsAt"},{"location":"api/core/io.islandtime.zone/-time-zone-rules-exception/","text":"core / io.islandtime.zone / TimeZoneRulesException TimeZoneRulesException (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) class TimeZoneRulesException : DateTimeException Constructors Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init> <init>(message: String ? = null, cause: Throwable ? = null)","title":"Index"},{"location":"api/core/io.islandtime.zone/-time-zone-rules-exception/#timezonerulesexception","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) class TimeZoneRulesException : DateTimeException","title":"TimeZoneRulesException"},{"location":"api/core/io.islandtime.zone/-time-zone-rules-exception/#constructors","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init> <init>(message: String ? = null, cause: Throwable ? = null)","title":"Constructors"},{"location":"api/core/io.islandtime.zone/-time-zone-rules-exception/-init-/","text":"core / io.islandtime.zone / TimeZoneRulesException / <init> <init> (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init>(message: String ? = null, cause: Throwable ? = null)","title":" init "},{"location":"api/core/io.islandtime.zone/-time-zone-rules-exception/-init-/#init","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) <init>(message: String ? = null, cause: Throwable ? = null)","title":"&lt;init&gt;"},{"location":"api/core/io.islandtime.zone/-time-zone-rules-provider/","text":"core / io.islandtime.zone / TimeZoneRulesProvider TimeZoneRulesProvider (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) interface TimeZoneRulesProvider An abstraction that allows time zone rules to be supplied from any data source. The set of supported identifiers is expected to vary depending on the source, but should typically represent regions defined in the IANA Time Zone Database. Types Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) Companion companion object Companion : TimeZoneRulesProvider Properties Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) availableRegionIds The available time zone region IDs as reported by the underlying provider. abstract val availableRegionIds: Set < String > (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) databaseVersion The time zone database version or an empty string if unavailable. open val databaseVersion: String Functions Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) hasRulesFor Check if regionId has rules associated with it. abstract fun hasRulesFor(regionId: String ): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) rulesFor Get the rules associated with a particular region ID. abstract fun rulesFor(regionId: String ): TimeZoneRules Inheritors Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) Companion companion object Companion : TimeZoneRulesProvider (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) PlatformTimeZoneRulesProvider The default time zone rules provider implementation for the current platform. object PlatformTimeZoneRulesProvider : TimeZoneRulesProvider","title":"Index"},{"location":"api/core/io.islandtime.zone/-time-zone-rules-provider/#timezonerulesprovider","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) interface TimeZoneRulesProvider An abstraction that allows time zone rules to be supplied from any data source. The set of supported identifiers is expected to vary depending on the source, but should typically represent regions defined in the IANA Time Zone Database.","title":"TimeZoneRulesProvider"},{"location":"api/core/io.islandtime.zone/-time-zone-rules-provider/#types","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) Companion companion object Companion : TimeZoneRulesProvider","title":"Types"},{"location":"api/core/io.islandtime.zone/-time-zone-rules-provider/#properties","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) availableRegionIds The available time zone region IDs as reported by the underlying provider. abstract val availableRegionIds: Set < String > (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) databaseVersion The time zone database version or an empty string if unavailable. open val databaseVersion: String","title":"Properties"},{"location":"api/core/io.islandtime.zone/-time-zone-rules-provider/#functions","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) hasRulesFor Check if regionId has rules associated with it. abstract fun hasRulesFor(regionId: String ): Boolean (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) rulesFor Get the rules associated with a particular region ID. abstract fun rulesFor(regionId: String ): TimeZoneRules","title":"Functions"},{"location":"api/core/io.islandtime.zone/-time-zone-rules-provider/#inheritors","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) Companion companion object Companion : TimeZoneRulesProvider (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) PlatformTimeZoneRulesProvider The default time zone rules provider implementation for the current platform. object PlatformTimeZoneRulesProvider : TimeZoneRulesProvider","title":"Inheritors"},{"location":"api/core/io.islandtime.zone/-time-zone-rules-provider/-companion/","text":"core / io.islandtime.zone / TimeZoneRulesProvider / Companion Companion (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) companion object Companion : TimeZoneRulesProvider","title":" companion"},{"location":"api/core/io.islandtime.zone/-time-zone-rules-provider/-companion/#companion","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) companion object Companion : TimeZoneRulesProvider","title":"Companion"},{"location":"api/core/io.islandtime.zone/-time-zone-rules-provider/available-region-ids/","text":"core / io.islandtime.zone / TimeZoneRulesProvider / availableRegionIds availableRegionIds (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract val availableRegionIds: Set < String > The available time zone region IDs as reported by the underlying provider. In some cases, this may be only a subset of those actually supported. To check if a particular region ID can be handled, use hasRulesFor . See Also hasRulesFor","title":"Available region ids"},{"location":"api/core/io.islandtime.zone/-time-zone-rules-provider/available-region-ids/#availableregionids","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract val availableRegionIds: Set < String > The available time zone region IDs as reported by the underlying provider. In some cases, this may be only a subset of those actually supported. To check if a particular region ID can be handled, use hasRulesFor . See Also hasRulesFor","title":"availableRegionIds"},{"location":"api/core/io.islandtime.zone/-time-zone-rules-provider/database-version/","text":"core / io.islandtime.zone / TimeZoneRulesProvider / databaseVersion databaseVersion (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) open val databaseVersion: String The time zone database version or an empty string if unavailable.","title":"Database version"},{"location":"api/core/io.islandtime.zone/-time-zone-rules-provider/database-version/#databaseversion","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) open val databaseVersion: String The time zone database version or an empty string if unavailable.","title":"databaseVersion"},{"location":"api/core/io.islandtime.zone/-time-zone-rules-provider/has-rules-for/","text":"core / io.islandtime.zone / TimeZoneRulesProvider / hasRulesFor hasRulesFor (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract fun hasRulesFor(regionId: String ): Boolean Check if regionId has rules associated with it.","title":"Has rules for"},{"location":"api/core/io.islandtime.zone/-time-zone-rules-provider/has-rules-for/#hasrulesfor","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract fun hasRulesFor(regionId: String ): Boolean Check if regionId has rules associated with it.","title":"hasRulesFor"},{"location":"api/core/io.islandtime.zone/-time-zone-rules-provider/rules-for/","text":"core / io.islandtime.zone / TimeZoneRulesProvider / rulesFor rulesFor (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract fun rulesFor(regionId: String ): TimeZoneRules Get the rules associated with a particular region ID. Exceptions TimeZoneRulesException - if the region ID isn't supported","title":"Rules for"},{"location":"api/core/io.islandtime.zone/-time-zone-rules-provider/rules-for/#rulesfor","text":"(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) abstract fun rulesFor(regionId: String ): TimeZoneRules Get the rules associated with a particular region ID.","title":"rulesFor"},{"location":"api/core/io.islandtime.zone/-time-zone-rules-provider/rules-for/#exceptions","text":"TimeZoneRulesException - if the region ID isn't supported","title":"Exceptions"},{"location":"api/parcelize/","text":"parcelize Packages Name Summary io.islandtime.extensions.parcelize io.islandtime.extensions.parcelize.measures io.islandtime.extensions.parcelize.ranges Index All Types","title":"parcelize-extensions"},{"location":"api/parcelize/#packages","text":"Name Summary io.islandtime.extensions.parcelize io.islandtime.extensions.parcelize.measures io.islandtime.extensions.parcelize.ranges","title":"Packages"},{"location":"api/parcelize/#index","text":"All Types","title":"Index"},{"location":"api/parcelize/alltypes/","text":"All Types Name Summary io.islandtime.extensions.parcelize.DateParceler | io.islandtime.extensions.parcelize.ranges.DateRangeParceler | io.islandtime.extensions.parcelize.ranges.DateTimeIntervalParceler | io.islandtime.extensions.parcelize.DateTimeParceler | io.islandtime.extensions.parcelize.measures.DurationParceler | io.islandtime.extensions.parcelize.ranges.InstantIntervalParceler | io.islandtime.extensions.parcelize.InstantParceler | io.islandtime.extensions.parcelize.NullableDateParceler | io.islandtime.extensions.parcelize.NullableDateTimeParceler | io.islandtime.extensions.parcelize.measures.NullableDurationParceler | io.islandtime.extensions.parcelize.NullableInstantParceler | io.islandtime.extensions.parcelize.NullableOffsetDateTimeParceler | io.islandtime.extensions.parcelize.NullableOffsetTimeParceler | io.islandtime.extensions.parcelize.measures.NullablePeriodParceler | io.islandtime.extensions.parcelize.NullableTimeParceler | io.islandtime.extensions.parcelize.NullableTimeZoneParceler | io.islandtime.extensions.parcelize.NullableYearMonthParceler | io.islandtime.extensions.parcelize.NullableZonedDateTimeParceler | io.islandtime.extensions.parcelize.ranges.OffsetDateTimeIntervalParceler | io.islandtime.extensions.parcelize.OffsetDateTimeParceler | io.islandtime.extensions.parcelize.OffsetTimeParceler | io.islandtime.extensions.parcelize.measures.PeriodParceler | io.islandtime.extensions.parcelize.TimeParceler | io.islandtime.extensions.parcelize.TimeZoneParceler | io.islandtime.extensions.parcelize.YearMonthParceler | io.islandtime.extensions.parcelize.ranges.ZonedDateTimeIntervalParceler | io.islandtime.extensions.parcelize.ZonedDateTimeParceler","title":"Index"},{"location":"api/parcelize/alltypes/#all-types","text":"Name Summary","title":"All Types"},{"location":"api/parcelize/alltypes/#ioislandtimeextensionsparcelizedateparceler","text":"|","title":"io.islandtime.extensions.parcelize.DateParceler"},{"location":"api/parcelize/alltypes/#ioislandtimeextensionsparcelizerangesdaterangeparceler","text":"|","title":"io.islandtime.extensions.parcelize.ranges.DateRangeParceler"},{"location":"api/parcelize/alltypes/#ioislandtimeextensionsparcelizerangesdatetimeintervalparceler","text":"|","title":"io.islandtime.extensions.parcelize.ranges.DateTimeIntervalParceler"},{"location":"api/parcelize/alltypes/#ioislandtimeextensionsparcelizedatetimeparceler","text":"|","title":"io.islandtime.extensions.parcelize.DateTimeParceler"},{"location":"api/parcelize/alltypes/#ioislandtimeextensionsparcelizemeasuresdurationparceler","text":"|","title":"io.islandtime.extensions.parcelize.measures.DurationParceler"},{"location":"api/parcelize/alltypes/#ioislandtimeextensionsparcelizerangesinstantintervalparceler","text":"|","title":"io.islandtime.extensions.parcelize.ranges.InstantIntervalParceler"},{"location":"api/parcelize/alltypes/#ioislandtimeextensionsparcelizeinstantparceler","text":"|","title":"io.islandtime.extensions.parcelize.InstantParceler"},{"location":"api/parcelize/alltypes/#ioislandtimeextensionsparcelizenullabledateparceler","text":"|","title":"io.islandtime.extensions.parcelize.NullableDateParceler"},{"location":"api/parcelize/alltypes/#ioislandtimeextensionsparcelizenullabledatetimeparceler","text":"|","title":"io.islandtime.extensions.parcelize.NullableDateTimeParceler"},{"location":"api/parcelize/alltypes/#ioislandtimeextensionsparcelizemeasuresnullabledurationparceler","text":"|","title":"io.islandtime.extensions.parcelize.measures.NullableDurationParceler"},{"location":"api/parcelize/alltypes/#ioislandtimeextensionsparcelizenullableinstantparceler","text":"|","title":"io.islandtime.extensions.parcelize.NullableInstantParceler"},{"location":"api/parcelize/alltypes/#ioislandtimeextensionsparcelizenullableoffsetdatetimeparceler","text":"|","title":"io.islandtime.extensions.parcelize.NullableOffsetDateTimeParceler"},{"location":"api/parcelize/alltypes/#ioislandtimeextensionsparcelizenullableoffsettimeparceler","text":"|","title":"io.islandtime.extensions.parcelize.NullableOffsetTimeParceler"},{"location":"api/parcelize/alltypes/#ioislandtimeextensionsparcelizemeasuresnullableperiodparceler","text":"|","title":"io.islandtime.extensions.parcelize.measures.NullablePeriodParceler"},{"location":"api/parcelize/alltypes/#ioislandtimeextensionsparcelizenullabletimeparceler","text":"|","title":"io.islandtime.extensions.parcelize.NullableTimeParceler"},{"location":"api/parcelize/alltypes/#ioislandtimeextensionsparcelizenullabletimezoneparceler","text":"|","title":"io.islandtime.extensions.parcelize.NullableTimeZoneParceler"},{"location":"api/parcelize/alltypes/#ioislandtimeextensionsparcelizenullableyearmonthparceler","text":"|","title":"io.islandtime.extensions.parcelize.NullableYearMonthParceler"},{"location":"api/parcelize/alltypes/#ioislandtimeextensionsparcelizenullablezoneddatetimeparceler","text":"|","title":"io.islandtime.extensions.parcelize.NullableZonedDateTimeParceler"},{"location":"api/parcelize/alltypes/#ioislandtimeextensionsparcelizerangesoffsetdatetimeintervalparceler","text":"|","title":"io.islandtime.extensions.parcelize.ranges.OffsetDateTimeIntervalParceler"},{"location":"api/parcelize/alltypes/#ioislandtimeextensionsparcelizeoffsetdatetimeparceler","text":"|","title":"io.islandtime.extensions.parcelize.OffsetDateTimeParceler"},{"location":"api/parcelize/alltypes/#ioislandtimeextensionsparcelizeoffsettimeparceler","text":"|","title":"io.islandtime.extensions.parcelize.OffsetTimeParceler"},{"location":"api/parcelize/alltypes/#ioislandtimeextensionsparcelizemeasuresperiodparceler","text":"|","title":"io.islandtime.extensions.parcelize.measures.PeriodParceler"},{"location":"api/parcelize/alltypes/#ioislandtimeextensionsparcelizetimeparceler","text":"|","title":"io.islandtime.extensions.parcelize.TimeParceler"},{"location":"api/parcelize/alltypes/#ioislandtimeextensionsparcelizetimezoneparceler","text":"|","title":"io.islandtime.extensions.parcelize.TimeZoneParceler"},{"location":"api/parcelize/alltypes/#ioislandtimeextensionsparcelizeyearmonthparceler","text":"|","title":"io.islandtime.extensions.parcelize.YearMonthParceler"},{"location":"api/parcelize/alltypes/#ioislandtimeextensionsparcelizerangeszoneddatetimeintervalparceler","text":"|","title":"io.islandtime.extensions.parcelize.ranges.ZonedDateTimeIntervalParceler"},{"location":"api/parcelize/alltypes/#ioislandtimeextensionsparcelizezoneddatetimeparceler","text":"","title":"io.islandtime.extensions.parcelize.ZonedDateTimeParceler"},{"location":"api/parcelize/io.islandtime.extensions.parcelize/","text":"parcelize / io.islandtime.extensions.parcelize Package io.islandtime.extensions.parcelize Types Name Summary DateParceler object DateParceler : Parceler<Date> DateTimeParceler object DateTimeParceler : Parceler<DateTime> InstantParceler object InstantParceler : Parceler<Instant> NullableDateParceler object NullableDateParceler : Parceler<Date?> NullableDateTimeParceler object NullableDateTimeParceler : Parceler<DateTime?> NullableInstantParceler object NullableInstantParceler : Parceler<Instant?> NullableOffsetDateTimeParceler object NullableOffsetDateTimeParceler : Parceler<OffsetDateTime?> NullableOffsetTimeParceler object NullableOffsetTimeParceler : Parceler<OffsetTime?> NullableTimeParceler object NullableTimeParceler : Parceler<Time?> NullableTimeZoneParceler object NullableTimeZoneParceler : Parceler<TimeZone?> NullableYearMonthParceler object NullableYearMonthParceler : Parceler<YearMonth?> NullableZonedDateTimeParceler object NullableZonedDateTimeParceler : Parceler<ZonedDateTime?> OffsetDateTimeParceler object OffsetDateTimeParceler : Parceler<OffsetDateTime> OffsetTimeParceler object OffsetTimeParceler : Parceler<OffsetTime> TimeParceler object TimeParceler : Parceler<Time> TimeZoneParceler object TimeZoneParceler : Parceler<TimeZone> YearMonthParceler object YearMonthParceler : Parceler<YearMonth> ZonedDateTimeParceler object ZonedDateTimeParceler : Parceler<ZonedDateTime>","title":"Index"},{"location":"api/parcelize/io.islandtime.extensions.parcelize/#package-ioislandtimeextensionsparcelize","text":"","title":"Package io.islandtime.extensions.parcelize"},{"location":"api/parcelize/io.islandtime.extensions.parcelize/#types","text":"Name Summary DateParceler object DateParceler : Parceler<Date> DateTimeParceler object DateTimeParceler : Parceler<DateTime> InstantParceler object InstantParceler : Parceler<Instant> NullableDateParceler object NullableDateParceler : Parceler<Date?> NullableDateTimeParceler object NullableDateTimeParceler : Parceler<DateTime?> NullableInstantParceler object NullableInstantParceler : Parceler<Instant?> NullableOffsetDateTimeParceler object NullableOffsetDateTimeParceler : Parceler<OffsetDateTime?> NullableOffsetTimeParceler object NullableOffsetTimeParceler : Parceler<OffsetTime?> NullableTimeParceler object NullableTimeParceler : Parceler<Time?> NullableTimeZoneParceler object NullableTimeZoneParceler : Parceler<TimeZone?> NullableYearMonthParceler object NullableYearMonthParceler : Parceler<YearMonth?> NullableZonedDateTimeParceler object NullableZonedDateTimeParceler : Parceler<ZonedDateTime?> OffsetDateTimeParceler object OffsetDateTimeParceler : Parceler<OffsetDateTime> OffsetTimeParceler object OffsetTimeParceler : Parceler<OffsetTime> TimeParceler object TimeParceler : Parceler<Time> TimeZoneParceler object TimeZoneParceler : Parceler<TimeZone> YearMonthParceler object YearMonthParceler : Parceler<YearMonth> ZonedDateTimeParceler object ZonedDateTimeParceler : Parceler<ZonedDateTime>","title":"Types"},{"location":"api/parcelize/io.islandtime.extensions.parcelize/-date-parceler/","text":"parcelize / io.islandtime.extensions.parcelize / DateParceler DateParceler object DateParceler : Parceler<Date> Functions Name Summary create fun create(parcel: Parcel ): Date write fun Date.write(parcel: Parcel , flags: Int ): Unit","title":"Index"},{"location":"api/parcelize/io.islandtime.extensions.parcelize/-date-parceler/#dateparceler","text":"object DateParceler : Parceler<Date>","title":"DateParceler"},{"location":"api/parcelize/io.islandtime.extensions.parcelize/-date-parceler/#functions","text":"Name Summary create fun create(parcel: Parcel ): Date write fun Date.write(parcel: Parcel , flags: Int ): Unit","title":"Functions"},{"location":"api/parcelize/io.islandtime.extensions.parcelize/-date-parceler/create/","text":"parcelize / io.islandtime.extensions.parcelize / DateParceler / create create fun create(parcel: Parcel ): Date","title":"Create"},{"location":"api/parcelize/io.islandtime.extensions.parcelize/-date-parceler/create/#create","text":"fun create(parcel: Parcel ): Date","title":"create"},{"location":"api/parcelize/io.islandtime.extensions.parcelize/-date-parceler/write/","text":"parcelize / io.islandtime.extensions.parcelize / DateParceler / write write fun Date.write(parcel: Parcel , flags: Int ): Unit","title":"Write"},{"location":"api/parcelize/io.islandtime.extensions.parcelize/-date-parceler/write/#write","text":"fun Date.write(parcel: Parcel , flags: Int ): Unit","title":"write"},{"location":"api/parcelize/io.islandtime.extensions.parcelize/-date-time-parceler/","text":"parcelize / io.islandtime.extensions.parcelize / DateTimeParceler DateTimeParceler object DateTimeParceler : Parceler<DateTime> Functions Name Summary create fun create(parcel: Parcel ): DateTime write fun DateTime.write(parcel: Parcel , flags: Int ): Unit","title":"Index"},{"location":"api/parcelize/io.islandtime.extensions.parcelize/-date-time-parceler/#datetimeparceler","text":"object DateTimeParceler : Parceler<DateTime>","title":"DateTimeParceler"},{"location":"api/parcelize/io.islandtime.extensions.parcelize/-date-time-parceler/#functions","text":"Name Summary create fun create(parcel: Parcel ): DateTime write fun DateTime.write(parcel: Parcel , flags: Int ): Unit","title":"Functions"},{"location":"api/parcelize/io.islandtime.extensions.parcelize/-date-time-parceler/create/","text":"parcelize / io.islandtime.extensions.parcelize / DateTimeParceler / create create fun create(parcel: Parcel ): DateTime","title":"Create"},{"location":"api/parcelize/io.islandtime.extensions.parcelize/-date-time-parceler/create/#create","text":"fun create(parcel: Parcel ): DateTime","title":"create"},{"location":"api/parcelize/io.islandtime.extensions.parcelize/-date-time-parceler/write/","text":"parcelize / io.islandtime.extensions.parcelize / DateTimeParceler / write write fun DateTime.write(parcel: Parcel , flags: Int ): Unit","title":"Write"},{"location":"api/parcelize/io.islandtime.extensions.parcelize/-date-time-parceler/write/#write","text":"fun DateTime.write(parcel: Parcel , flags: Int ): Unit","title":"write"},{"location":"api/parcelize/io.islandtime.extensions.parcelize/-instant-parceler/","text":"parcelize / io.islandtime.extensions.parcelize / InstantParceler InstantParceler object InstantParceler : Parceler<Instant> Functions Name Summary create fun create(parcel: Parcel ): Instant write fun Instant.write(parcel: Parcel , flags: Int ): Unit","title":"Index"},{"location":"api/parcelize/io.islandtime.extensions.parcelize/-instant-parceler/#instantparceler","text":"object InstantParceler : Parceler<Instant>","title":"InstantParceler"},{"location":"api/parcelize/io.islandtime.extensions.parcelize/-instant-parceler/#functions","text":"Name Summary create fun create(parcel: Parcel ): Instant write fun Instant.write(parcel: Parcel , flags: Int ): Unit","title":"Functions"},{"location":"api/parcelize/io.islandtime.extensions.parcelize/-instant-parceler/create/","text":"parcelize / io.islandtime.extensions.parcelize / InstantParceler / create create fun create(parcel: Parcel ): Instant","title":"Create"},{"location":"api/parcelize/io.islandtime.extensions.parcelize/-instant-parceler/create/#create","text":"fun create(parcel: Parcel ): Instant","title":"create"},{"location":"api/parcelize/io.islandtime.extensions.parcelize/-instant-parceler/write/","text":"parcelize / io.islandtime.extensions.parcelize / InstantParceler / write write fun Instant.write(parcel: Parcel , flags: Int ): Unit","title":"Write"},{"location":"api/parcelize/io.islandtime.extensions.parcelize/-instant-parceler/write/#write","text":"fun Instant.write(parcel: Parcel , flags: Int ): Unit","title":"write"},{"location":"api/parcelize/io.islandtime.extensions.parcelize/-nullable-date-parceler/","text":"parcelize / io.islandtime.extensions.parcelize / NullableDateParceler NullableDateParceler object NullableDateParceler : Parceler<Date?> Functions Name Summary create fun create(parcel: Parcel ): Date? write fun Date?.write(parcel: Parcel , flags: Int ): Unit","title":"Index"},{"location":"api/parcelize/io.islandtime.extensions.parcelize/-nullable-date-parceler/#nullabledateparceler","text":"object NullableDateParceler : Parceler<Date?>","title":"NullableDateParceler"},{"location":"api/parcelize/io.islandtime.extensions.parcelize/-nullable-date-parceler/#functions","text":"Name Summary create fun create(parcel: Parcel ): Date? write fun Date?.write(parcel: Parcel , flags: Int ): Unit","title":"Functions"},{"location":"api/parcelize/io.islandtime.extensions.parcelize/-nullable-date-parceler/create/","text":"parcelize / io.islandtime.extensions.parcelize / NullableDateParceler / create create fun create(parcel: Parcel ): Date?","title":"Create"},{"location":"api/parcelize/io.islandtime.extensions.parcelize/-nullable-date-parceler/create/#create","text":"fun create(parcel: Parcel ): Date?","title":"create"},{"location":"api/parcelize/io.islandtime.extensions.parcelize/-nullable-date-parceler/write/","text":"parcelize / io.islandtime.extensions.parcelize / NullableDateParceler / write write fun Date?.write(parcel: Parcel , flags: Int ): Unit","title":"Write"},{"location":"api/parcelize/io.islandtime.extensions.parcelize/-nullable-date-parceler/write/#write","text":"fun Date?.write(parcel: Parcel , flags: Int ): Unit","title":"write"},{"location":"api/parcelize/io.islandtime.extensions.parcelize/-nullable-date-time-parceler/","text":"parcelize / io.islandtime.extensions.parcelize / NullableDateTimeParceler NullableDateTimeParceler object NullableDateTimeParceler : Parceler<DateTime?> Functions Name Summary create fun create(parcel: Parcel ): DateTime? write fun DateTime?.write(parcel: Parcel , flags: Int ): Unit","title":"Index"},{"location":"api/parcelize/io.islandtime.extensions.parcelize/-nullable-date-time-parceler/#nullabledatetimeparceler","text":"object NullableDateTimeParceler : Parceler<DateTime?>","title":"NullableDateTimeParceler"},{"location":"api/parcelize/io.islandtime.extensions.parcelize/-nullable-date-time-parceler/#functions","text":"Name Summary create fun create(parcel: Parcel ): DateTime? write fun DateTime?.write(parcel: Parcel , flags: Int ): Unit","title":"Functions"},{"location":"api/parcelize/io.islandtime.extensions.parcelize/-nullable-date-time-parceler/create/","text":"parcelize / io.islandtime.extensions.parcelize / NullableDateTimeParceler / create create fun create(parcel: Parcel ): DateTime?","title":"Create"},{"location":"api/parcelize/io.islandtime.extensions.parcelize/-nullable-date-time-parceler/create/#create","text":"fun create(parcel: Parcel ): DateTime?","title":"create"},{"location":"api/parcelize/io.islandtime.extensions.parcelize/-nullable-date-time-parceler/write/","text":"parcelize / io.islandtime.extensions.parcelize / NullableDateTimeParceler / write write fun DateTime?.write(parcel: Parcel , flags: Int ): Unit","title":"Write"},{"location":"api/parcelize/io.islandtime.extensions.parcelize/-nullable-date-time-parceler/write/#write","text":"fun DateTime?.write(parcel: Parcel , flags: Int ): Unit","title":"write"},{"location":"api/parcelize/io.islandtime.extensions.parcelize/-nullable-instant-parceler/","text":"parcelize / io.islandtime.extensions.parcelize / NullableInstantParceler NullableInstantParceler object NullableInstantParceler : Parceler<Instant?> Functions Name Summary create fun create(parcel: Parcel ): Instant? write fun Instant?.write(parcel: Parcel , flags: Int ): Unit","title":"Index"},{"location":"api/parcelize/io.islandtime.extensions.parcelize/-nullable-instant-parceler/#nullableinstantparceler","text":"object NullableInstantParceler : Parceler<Instant?>","title":"NullableInstantParceler"},{"location":"api/parcelize/io.islandtime.extensions.parcelize/-nullable-instant-parceler/#functions","text":"Name Summary create fun create(parcel: Parcel ): Instant? write fun Instant?.write(parcel: Parcel , flags: Int ): Unit","title":"Functions"},{"location":"api/parcelize/io.islandtime.extensions.parcelize/-nullable-instant-parceler/create/","text":"parcelize / io.islandtime.extensions.parcelize / NullableInstantParceler / create create fun create(parcel: Parcel ): Instant?","title":"Create"},{"location":"api/parcelize/io.islandtime.extensions.parcelize/-nullable-instant-parceler/create/#create","text":"fun create(parcel: Parcel ): Instant?","title":"create"},{"location":"api/parcelize/io.islandtime.extensions.parcelize/-nullable-instant-parceler/write/","text":"parcelize / io.islandtime.extensions.parcelize / NullableInstantParceler / write write fun Instant?.write(parcel: Parcel , flags: Int ): Unit","title":"Write"},{"location":"api/parcelize/io.islandtime.extensions.parcelize/-nullable-instant-parceler/write/#write","text":"fun Instant?.write(parcel: Parcel , flags: Int ): Unit","title":"write"},{"location":"api/parcelize/io.islandtime.extensions.parcelize/-nullable-offset-date-time-parceler/","text":"parcelize / io.islandtime.extensions.parcelize / NullableOffsetDateTimeParceler NullableOffsetDateTimeParceler object NullableOffsetDateTimeParceler : Parceler<OffsetDateTime?> Functions Name Summary create fun create(parcel: Parcel ): OffsetDateTime? write fun OffsetDateTime?.write(parcel: Parcel , flags: Int ): Unit","title":"Index"},{"location":"api/parcelize/io.islandtime.extensions.parcelize/-nullable-offset-date-time-parceler/#nullableoffsetdatetimeparceler","text":"object NullableOffsetDateTimeParceler : Parceler<OffsetDateTime?>","title":"NullableOffsetDateTimeParceler"},{"location":"api/parcelize/io.islandtime.extensions.parcelize/-nullable-offset-date-time-parceler/#functions","text":"Name Summary create fun create(parcel: Parcel ): OffsetDateTime? write fun OffsetDateTime?.write(parcel: Parcel , flags: Int ): Unit","title":"Functions"},{"location":"api/parcelize/io.islandtime.extensions.parcelize/-nullable-offset-date-time-parceler/create/","text":"parcelize / io.islandtime.extensions.parcelize / NullableOffsetDateTimeParceler / create create fun create(parcel: Parcel ): OffsetDateTime?","title":"Create"},{"location":"api/parcelize/io.islandtime.extensions.parcelize/-nullable-offset-date-time-parceler/create/#create","text":"fun create(parcel: Parcel ): OffsetDateTime?","title":"create"},{"location":"api/parcelize/io.islandtime.extensions.parcelize/-nullable-offset-date-time-parceler/write/","text":"parcelize / io.islandtime.extensions.parcelize / NullableOffsetDateTimeParceler / write write fun OffsetDateTime?.write(parcel: Parcel , flags: Int ): Unit","title":"Write"},{"location":"api/parcelize/io.islandtime.extensions.parcelize/-nullable-offset-date-time-parceler/write/#write","text":"fun OffsetDateTime?.write(parcel: Parcel , flags: Int ): Unit","title":"write"},{"location":"api/parcelize/io.islandtime.extensions.parcelize/-nullable-offset-time-parceler/","text":"parcelize / io.islandtime.extensions.parcelize / NullableOffsetTimeParceler NullableOffsetTimeParceler object NullableOffsetTimeParceler : Parceler<OffsetTime?> Functions Name Summary create fun create(parcel: Parcel ): OffsetTime? write fun OffsetTime?.write(parcel: Parcel , flags: Int ): Unit","title":"Index"},{"location":"api/parcelize/io.islandtime.extensions.parcelize/-nullable-offset-time-parceler/#nullableoffsettimeparceler","text":"object NullableOffsetTimeParceler : Parceler<OffsetTime?>","title":"NullableOffsetTimeParceler"},{"location":"api/parcelize/io.islandtime.extensions.parcelize/-nullable-offset-time-parceler/#functions","text":"Name Summary create fun create(parcel: Parcel ): OffsetTime? write fun OffsetTime?.write(parcel: Parcel , flags: Int ): Unit","title":"Functions"},{"location":"api/parcelize/io.islandtime.extensions.parcelize/-nullable-offset-time-parceler/create/","text":"parcelize / io.islandtime.extensions.parcelize / NullableOffsetTimeParceler / create create fun create(parcel: Parcel ): OffsetTime?","title":"Create"},{"location":"api/parcelize/io.islandtime.extensions.parcelize/-nullable-offset-time-parceler/create/#create","text":"fun create(parcel: Parcel ): OffsetTime?","title":"create"},{"location":"api/parcelize/io.islandtime.extensions.parcelize/-nullable-offset-time-parceler/write/","text":"parcelize / io.islandtime.extensions.parcelize / NullableOffsetTimeParceler / write write fun OffsetTime?.write(parcel: Parcel , flags: Int ): Unit","title":"Write"},{"location":"api/parcelize/io.islandtime.extensions.parcelize/-nullable-offset-time-parceler/write/#write","text":"fun OffsetTime?.write(parcel: Parcel , flags: Int ): Unit","title":"write"},{"location":"api/parcelize/io.islandtime.extensions.parcelize/-nullable-time-parceler/","text":"parcelize / io.islandtime.extensions.parcelize / NullableTimeParceler NullableTimeParceler object NullableTimeParceler : Parceler<Time?> Functions Name Summary create fun create(parcel: Parcel ): Time? write fun Time?.write(parcel: Parcel , flags: Int ): Unit","title":"Index"},{"location":"api/parcelize/io.islandtime.extensions.parcelize/-nullable-time-parceler/#nullabletimeparceler","text":"object NullableTimeParceler : Parceler<Time?>","title":"NullableTimeParceler"},{"location":"api/parcelize/io.islandtime.extensions.parcelize/-nullable-time-parceler/#functions","text":"Name Summary create fun create(parcel: Parcel ): Time? write fun Time?.write(parcel: Parcel , flags: Int ): Unit","title":"Functions"},{"location":"api/parcelize/io.islandtime.extensions.parcelize/-nullable-time-parceler/create/","text":"parcelize / io.islandtime.extensions.parcelize / NullableTimeParceler / create create fun create(parcel: Parcel ): Time?","title":"Create"},{"location":"api/parcelize/io.islandtime.extensions.parcelize/-nullable-time-parceler/create/#create","text":"fun create(parcel: Parcel ): Time?","title":"create"},{"location":"api/parcelize/io.islandtime.extensions.parcelize/-nullable-time-parceler/write/","text":"parcelize / io.islandtime.extensions.parcelize / NullableTimeParceler / write write fun Time?.write(parcel: Parcel , flags: Int ): Unit","title":"Write"},{"location":"api/parcelize/io.islandtime.extensions.parcelize/-nullable-time-parceler/write/#write","text":"fun Time?.write(parcel: Parcel , flags: Int ): Unit","title":"write"},{"location":"api/parcelize/io.islandtime.extensions.parcelize/-nullable-time-zone-parceler/","text":"parcelize / io.islandtime.extensions.parcelize / NullableTimeZoneParceler NullableTimeZoneParceler object NullableTimeZoneParceler : Parceler<TimeZone?> Functions Name Summary create fun create(parcel: Parcel ): TimeZone? write fun TimeZone?.write(parcel: Parcel , flags: Int ): Unit","title":"Index"},{"location":"api/parcelize/io.islandtime.extensions.parcelize/-nullable-time-zone-parceler/#nullabletimezoneparceler","text":"object NullableTimeZoneParceler : Parceler<TimeZone?>","title":"NullableTimeZoneParceler"},{"location":"api/parcelize/io.islandtime.extensions.parcelize/-nullable-time-zone-parceler/#functions","text":"Name Summary create fun create(parcel: Parcel ): TimeZone? write fun TimeZone?.write(parcel: Parcel , flags: Int ): Unit","title":"Functions"},{"location":"api/parcelize/io.islandtime.extensions.parcelize/-nullable-time-zone-parceler/create/","text":"parcelize / io.islandtime.extensions.parcelize / NullableTimeZoneParceler / create create fun create(parcel: Parcel ): TimeZone?","title":"Create"},{"location":"api/parcelize/io.islandtime.extensions.parcelize/-nullable-time-zone-parceler/create/#create","text":"fun create(parcel: Parcel ): TimeZone?","title":"create"},{"location":"api/parcelize/io.islandtime.extensions.parcelize/-nullable-time-zone-parceler/write/","text":"parcelize / io.islandtime.extensions.parcelize / NullableTimeZoneParceler / write write fun TimeZone?.write(parcel: Parcel , flags: Int ): Unit","title":"Write"},{"location":"api/parcelize/io.islandtime.extensions.parcelize/-nullable-time-zone-parceler/write/#write","text":"fun TimeZone?.write(parcel: Parcel , flags: Int ): Unit","title":"write"},{"location":"api/parcelize/io.islandtime.extensions.parcelize/-nullable-year-month-parceler/","text":"parcelize / io.islandtime.extensions.parcelize / NullableYearMonthParceler NullableYearMonthParceler object NullableYearMonthParceler : Parceler<YearMonth?> Functions Name Summary create fun create(parcel: Parcel ): YearMonth? write fun YearMonth?.write(parcel: Parcel , flags: Int ): Unit","title":"Index"},{"location":"api/parcelize/io.islandtime.extensions.parcelize/-nullable-year-month-parceler/#nullableyearmonthparceler","text":"object NullableYearMonthParceler : Parceler<YearMonth?>","title":"NullableYearMonthParceler"},{"location":"api/parcelize/io.islandtime.extensions.parcelize/-nullable-year-month-parceler/#functions","text":"Name Summary create fun create(parcel: Parcel ): YearMonth? write fun YearMonth?.write(parcel: Parcel , flags: Int ): Unit","title":"Functions"},{"location":"api/parcelize/io.islandtime.extensions.parcelize/-nullable-year-month-parceler/create/","text":"parcelize / io.islandtime.extensions.parcelize / NullableYearMonthParceler / create create fun create(parcel: Parcel ): YearMonth?","title":"Create"},{"location":"api/parcelize/io.islandtime.extensions.parcelize/-nullable-year-month-parceler/create/#create","text":"fun create(parcel: Parcel ): YearMonth?","title":"create"},{"location":"api/parcelize/io.islandtime.extensions.parcelize/-nullable-year-month-parceler/write/","text":"parcelize / io.islandtime.extensions.parcelize / NullableYearMonthParceler / write write fun YearMonth?.write(parcel: Parcel , flags: Int ): Unit","title":"Write"},{"location":"api/parcelize/io.islandtime.extensions.parcelize/-nullable-year-month-parceler/write/#write","text":"fun YearMonth?.write(parcel: Parcel , flags: Int ): Unit","title":"write"},{"location":"api/parcelize/io.islandtime.extensions.parcelize/-nullable-zoned-date-time-parceler/","text":"parcelize / io.islandtime.extensions.parcelize / NullableZonedDateTimeParceler NullableZonedDateTimeParceler object NullableZonedDateTimeParceler : Parceler<ZonedDateTime?> Functions Name Summary create fun create(parcel: Parcel ): ZonedDateTime? write fun ZonedDateTime?.write(parcel: Parcel , flags: Int ): Unit","title":"Index"},{"location":"api/parcelize/io.islandtime.extensions.parcelize/-nullable-zoned-date-time-parceler/#nullablezoneddatetimeparceler","text":"object NullableZonedDateTimeParceler : Parceler<ZonedDateTime?>","title":"NullableZonedDateTimeParceler"},{"location":"api/parcelize/io.islandtime.extensions.parcelize/-nullable-zoned-date-time-parceler/#functions","text":"Name Summary create fun create(parcel: Parcel ): ZonedDateTime? write fun ZonedDateTime?.write(parcel: Parcel , flags: Int ): Unit","title":"Functions"},{"location":"api/parcelize/io.islandtime.extensions.parcelize/-nullable-zoned-date-time-parceler/create/","text":"parcelize / io.islandtime.extensions.parcelize / NullableZonedDateTimeParceler / create create fun create(parcel: Parcel ): ZonedDateTime?","title":"Create"},{"location":"api/parcelize/io.islandtime.extensions.parcelize/-nullable-zoned-date-time-parceler/create/#create","text":"fun create(parcel: Parcel ): ZonedDateTime?","title":"create"},{"location":"api/parcelize/io.islandtime.extensions.parcelize/-nullable-zoned-date-time-parceler/write/","text":"parcelize / io.islandtime.extensions.parcelize / NullableZonedDateTimeParceler / write write fun ZonedDateTime?.write(parcel: Parcel , flags: Int ): Unit","title":"Write"},{"location":"api/parcelize/io.islandtime.extensions.parcelize/-nullable-zoned-date-time-parceler/write/#write","text":"fun ZonedDateTime?.write(parcel: Parcel , flags: Int ): Unit","title":"write"},{"location":"api/parcelize/io.islandtime.extensions.parcelize/-offset-date-time-parceler/","text":"parcelize / io.islandtime.extensions.parcelize / OffsetDateTimeParceler OffsetDateTimeParceler object OffsetDateTimeParceler : Parceler<OffsetDateTime> Functions Name Summary create fun create(parcel: Parcel ): OffsetDateTime write fun OffsetDateTime.write(parcel: Parcel , flags: Int ): Unit","title":"Index"},{"location":"api/parcelize/io.islandtime.extensions.parcelize/-offset-date-time-parceler/#offsetdatetimeparceler","text":"object OffsetDateTimeParceler : Parceler<OffsetDateTime>","title":"OffsetDateTimeParceler"},{"location":"api/parcelize/io.islandtime.extensions.parcelize/-offset-date-time-parceler/#functions","text":"Name Summary create fun create(parcel: Parcel ): OffsetDateTime write fun OffsetDateTime.write(parcel: Parcel , flags: Int ): Unit","title":"Functions"},{"location":"api/parcelize/io.islandtime.extensions.parcelize/-offset-date-time-parceler/create/","text":"parcelize / io.islandtime.extensions.parcelize / OffsetDateTimeParceler / create create fun create(parcel: Parcel ): OffsetDateTime","title":"Create"},{"location":"api/parcelize/io.islandtime.extensions.parcelize/-offset-date-time-parceler/create/#create","text":"fun create(parcel: Parcel ): OffsetDateTime","title":"create"},{"location":"api/parcelize/io.islandtime.extensions.parcelize/-offset-date-time-parceler/write/","text":"parcelize / io.islandtime.extensions.parcelize / OffsetDateTimeParceler / write write fun OffsetDateTime.write(parcel: Parcel , flags: Int ): Unit","title":"Write"},{"location":"api/parcelize/io.islandtime.extensions.parcelize/-offset-date-time-parceler/write/#write","text":"fun OffsetDateTime.write(parcel: Parcel , flags: Int ): Unit","title":"write"},{"location":"api/parcelize/io.islandtime.extensions.parcelize/-offset-time-parceler/","text":"parcelize / io.islandtime.extensions.parcelize / OffsetTimeParceler OffsetTimeParceler object OffsetTimeParceler : Parceler<OffsetTime> Functions Name Summary create fun create(parcel: Parcel ): OffsetTime write fun OffsetTime.write(parcel: Parcel , flags: Int ): Unit","title":"Index"},{"location":"api/parcelize/io.islandtime.extensions.parcelize/-offset-time-parceler/#offsettimeparceler","text":"object OffsetTimeParceler : Parceler<OffsetTime>","title":"OffsetTimeParceler"},{"location":"api/parcelize/io.islandtime.extensions.parcelize/-offset-time-parceler/#functions","text":"Name Summary create fun create(parcel: Parcel ): OffsetTime write fun OffsetTime.write(parcel: Parcel , flags: Int ): Unit","title":"Functions"},{"location":"api/parcelize/io.islandtime.extensions.parcelize/-offset-time-parceler/create/","text":"parcelize / io.islandtime.extensions.parcelize / OffsetTimeParceler / create create fun create(parcel: Parcel ): OffsetTime","title":"Create"},{"location":"api/parcelize/io.islandtime.extensions.parcelize/-offset-time-parceler/create/#create","text":"fun create(parcel: Parcel ): OffsetTime","title":"create"},{"location":"api/parcelize/io.islandtime.extensions.parcelize/-offset-time-parceler/write/","text":"parcelize / io.islandtime.extensions.parcelize / OffsetTimeParceler / write write fun OffsetTime.write(parcel: Parcel , flags: Int ): Unit","title":"Write"},{"location":"api/parcelize/io.islandtime.extensions.parcelize/-offset-time-parceler/write/#write","text":"fun OffsetTime.write(parcel: Parcel , flags: Int ): Unit","title":"write"},{"location":"api/parcelize/io.islandtime.extensions.parcelize/-time-parceler/","text":"parcelize / io.islandtime.extensions.parcelize / TimeParceler TimeParceler object TimeParceler : Parceler<Time> Functions Name Summary create fun create(parcel: Parcel ): Time write fun Time.write(parcel: Parcel , flags: Int ): Unit","title":"Index"},{"location":"api/parcelize/io.islandtime.extensions.parcelize/-time-parceler/#timeparceler","text":"object TimeParceler : Parceler<Time>","title":"TimeParceler"},{"location":"api/parcelize/io.islandtime.extensions.parcelize/-time-parceler/#functions","text":"Name Summary create fun create(parcel: Parcel ): Time write fun Time.write(parcel: Parcel , flags: Int ): Unit","title":"Functions"},{"location":"api/parcelize/io.islandtime.extensions.parcelize/-time-parceler/create/","text":"parcelize / io.islandtime.extensions.parcelize / TimeParceler / create create fun create(parcel: Parcel ): Time","title":"Create"},{"location":"api/parcelize/io.islandtime.extensions.parcelize/-time-parceler/create/#create","text":"fun create(parcel: Parcel ): Time","title":"create"},{"location":"api/parcelize/io.islandtime.extensions.parcelize/-time-parceler/write/","text":"parcelize / io.islandtime.extensions.parcelize / TimeParceler / write write fun Time.write(parcel: Parcel , flags: Int ): Unit","title":"Write"},{"location":"api/parcelize/io.islandtime.extensions.parcelize/-time-parceler/write/#write","text":"fun Time.write(parcel: Parcel , flags: Int ): Unit","title":"write"},{"location":"api/parcelize/io.islandtime.extensions.parcelize/-time-zone-parceler/","text":"parcelize / io.islandtime.extensions.parcelize / TimeZoneParceler TimeZoneParceler object TimeZoneParceler : Parceler<TimeZone> Functions Name Summary create fun create(parcel: Parcel ): TimeZone write fun TimeZone.write(parcel: Parcel , flags: Int ): Unit","title":"Index"},{"location":"api/parcelize/io.islandtime.extensions.parcelize/-time-zone-parceler/#timezoneparceler","text":"object TimeZoneParceler : Parceler<TimeZone>","title":"TimeZoneParceler"},{"location":"api/parcelize/io.islandtime.extensions.parcelize/-time-zone-parceler/#functions","text":"Name Summary create fun create(parcel: Parcel ): TimeZone write fun TimeZone.write(parcel: Parcel , flags: Int ): Unit","title":"Functions"},{"location":"api/parcelize/io.islandtime.extensions.parcelize/-time-zone-parceler/create/","text":"parcelize / io.islandtime.extensions.parcelize / TimeZoneParceler / create create fun create(parcel: Parcel ): TimeZone","title":"Create"},{"location":"api/parcelize/io.islandtime.extensions.parcelize/-time-zone-parceler/create/#create","text":"fun create(parcel: Parcel ): TimeZone","title":"create"},{"location":"api/parcelize/io.islandtime.extensions.parcelize/-time-zone-parceler/write/","text":"parcelize / io.islandtime.extensions.parcelize / TimeZoneParceler / write write fun TimeZone.write(parcel: Parcel , flags: Int ): Unit","title":"Write"},{"location":"api/parcelize/io.islandtime.extensions.parcelize/-time-zone-parceler/write/#write","text":"fun TimeZone.write(parcel: Parcel , flags: Int ): Unit","title":"write"},{"location":"api/parcelize/io.islandtime.extensions.parcelize/-year-month-parceler/","text":"parcelize / io.islandtime.extensions.parcelize / YearMonthParceler YearMonthParceler object YearMonthParceler : Parceler<YearMonth> Functions Name Summary create fun create(parcel: Parcel ): YearMonth write fun YearMonth.write(parcel: Parcel , flags: Int ): Unit","title":"Index"},{"location":"api/parcelize/io.islandtime.extensions.parcelize/-year-month-parceler/#yearmonthparceler","text":"object YearMonthParceler : Parceler<YearMonth>","title":"YearMonthParceler"},{"location":"api/parcelize/io.islandtime.extensions.parcelize/-year-month-parceler/#functions","text":"Name Summary create fun create(parcel: Parcel ): YearMonth write fun YearMonth.write(parcel: Parcel , flags: Int ): Unit","title":"Functions"},{"location":"api/parcelize/io.islandtime.extensions.parcelize/-year-month-parceler/create/","text":"parcelize / io.islandtime.extensions.parcelize / YearMonthParceler / create create fun create(parcel: Parcel ): YearMonth","title":"Create"},{"location":"api/parcelize/io.islandtime.extensions.parcelize/-year-month-parceler/create/#create","text":"fun create(parcel: Parcel ): YearMonth","title":"create"},{"location":"api/parcelize/io.islandtime.extensions.parcelize/-year-month-parceler/write/","text":"parcelize / io.islandtime.extensions.parcelize / YearMonthParceler / write write fun YearMonth.write(parcel: Parcel , flags: Int ): Unit","title":"Write"},{"location":"api/parcelize/io.islandtime.extensions.parcelize/-year-month-parceler/write/#write","text":"fun YearMonth.write(parcel: Parcel , flags: Int ): Unit","title":"write"},{"location":"api/parcelize/io.islandtime.extensions.parcelize/-zoned-date-time-parceler/","text":"parcelize / io.islandtime.extensions.parcelize / ZonedDateTimeParceler ZonedDateTimeParceler object ZonedDateTimeParceler : Parceler<ZonedDateTime> Functions Name Summary create fun create(parcel: Parcel ): ZonedDateTime write fun ZonedDateTime.write(parcel: Parcel , flags: Int ): Unit","title":"Index"},{"location":"api/parcelize/io.islandtime.extensions.parcelize/-zoned-date-time-parceler/#zoneddatetimeparceler","text":"object ZonedDateTimeParceler : Parceler<ZonedDateTime>","title":"ZonedDateTimeParceler"},{"location":"api/parcelize/io.islandtime.extensions.parcelize/-zoned-date-time-parceler/#functions","text":"Name Summary create fun create(parcel: Parcel ): ZonedDateTime write fun ZonedDateTime.write(parcel: Parcel , flags: Int ): Unit","title":"Functions"},{"location":"api/parcelize/io.islandtime.extensions.parcelize/-zoned-date-time-parceler/create/","text":"parcelize / io.islandtime.extensions.parcelize / ZonedDateTimeParceler / create create fun create(parcel: Parcel ): ZonedDateTime","title":"Create"},{"location":"api/parcelize/io.islandtime.extensions.parcelize/-zoned-date-time-parceler/create/#create","text":"fun create(parcel: Parcel ): ZonedDateTime","title":"create"},{"location":"api/parcelize/io.islandtime.extensions.parcelize/-zoned-date-time-parceler/write/","text":"parcelize / io.islandtime.extensions.parcelize / ZonedDateTimeParceler / write write fun ZonedDateTime.write(parcel: Parcel , flags: Int ): Unit","title":"Write"},{"location":"api/parcelize/io.islandtime.extensions.parcelize/-zoned-date-time-parceler/write/#write","text":"fun ZonedDateTime.write(parcel: Parcel , flags: Int ): Unit","title":"write"},{"location":"api/parcelize/io.islandtime.extensions.parcelize.measures/","text":"parcelize / io.islandtime.extensions.parcelize.measures Package io.islandtime.extensions.parcelize.measures Types Name Summary DurationParceler object DurationParceler : Parceler<Duration> NullableDurationParceler object NullableDurationParceler : Parceler<Duration?> NullablePeriodParceler object NullablePeriodParceler : Parceler<Period?> PeriodParceler object PeriodParceler : Parceler<Period>","title":"Index"},{"location":"api/parcelize/io.islandtime.extensions.parcelize.measures/#package-ioislandtimeextensionsparcelizemeasures","text":"","title":"Package io.islandtime.extensions.parcelize.measures"},{"location":"api/parcelize/io.islandtime.extensions.parcelize.measures/#types","text":"Name Summary DurationParceler object DurationParceler : Parceler<Duration> NullableDurationParceler object NullableDurationParceler : Parceler<Duration?> NullablePeriodParceler object NullablePeriodParceler : Parceler<Period?> PeriodParceler object PeriodParceler : Parceler<Period>","title":"Types"},{"location":"api/parcelize/io.islandtime.extensions.parcelize.measures/-duration-parceler/","text":"parcelize / io.islandtime.extensions.parcelize.measures / DurationParceler DurationParceler object DurationParceler : Parceler<Duration> Functions Name Summary create fun create(parcel: Parcel ): Duration write fun Duration.write(parcel: Parcel , flags: Int ): Unit","title":"Index"},{"location":"api/parcelize/io.islandtime.extensions.parcelize.measures/-duration-parceler/#durationparceler","text":"object DurationParceler : Parceler<Duration>","title":"DurationParceler"},{"location":"api/parcelize/io.islandtime.extensions.parcelize.measures/-duration-parceler/#functions","text":"Name Summary create fun create(parcel: Parcel ): Duration write fun Duration.write(parcel: Parcel , flags: Int ): Unit","title":"Functions"},{"location":"api/parcelize/io.islandtime.extensions.parcelize.measures/-duration-parceler/create/","text":"parcelize / io.islandtime.extensions.parcelize.measures / DurationParceler / create create fun create(parcel: Parcel ): Duration","title":"Create"},{"location":"api/parcelize/io.islandtime.extensions.parcelize.measures/-duration-parceler/create/#create","text":"fun create(parcel: Parcel ): Duration","title":"create"},{"location":"api/parcelize/io.islandtime.extensions.parcelize.measures/-duration-parceler/write/","text":"parcelize / io.islandtime.extensions.parcelize.measures / DurationParceler / write write fun Duration.write(parcel: Parcel , flags: Int ): Unit","title":"Write"},{"location":"api/parcelize/io.islandtime.extensions.parcelize.measures/-duration-parceler/write/#write","text":"fun Duration.write(parcel: Parcel , flags: Int ): Unit","title":"write"},{"location":"api/parcelize/io.islandtime.extensions.parcelize.measures/-nullable-duration-parceler/","text":"parcelize / io.islandtime.extensions.parcelize.measures / NullableDurationParceler NullableDurationParceler object NullableDurationParceler : Parceler<Duration?> Functions Name Summary create fun create(parcel: Parcel ): Duration? write fun Duration?.write(parcel: Parcel , flags: Int ): Unit","title":"Index"},{"location":"api/parcelize/io.islandtime.extensions.parcelize.measures/-nullable-duration-parceler/#nullabledurationparceler","text":"object NullableDurationParceler : Parceler<Duration?>","title":"NullableDurationParceler"},{"location":"api/parcelize/io.islandtime.extensions.parcelize.measures/-nullable-duration-parceler/#functions","text":"Name Summary create fun create(parcel: Parcel ): Duration? write fun Duration?.write(parcel: Parcel , flags: Int ): Unit","title":"Functions"},{"location":"api/parcelize/io.islandtime.extensions.parcelize.measures/-nullable-duration-parceler/create/","text":"parcelize / io.islandtime.extensions.parcelize.measures / NullableDurationParceler / create create fun create(parcel: Parcel ): Duration?","title":"Create"},{"location":"api/parcelize/io.islandtime.extensions.parcelize.measures/-nullable-duration-parceler/create/#create","text":"fun create(parcel: Parcel ): Duration?","title":"create"},{"location":"api/parcelize/io.islandtime.extensions.parcelize.measures/-nullable-duration-parceler/write/","text":"parcelize / io.islandtime.extensions.parcelize.measures / NullableDurationParceler / write write fun Duration?.write(parcel: Parcel , flags: Int ): Unit","title":"Write"},{"location":"api/parcelize/io.islandtime.extensions.parcelize.measures/-nullable-duration-parceler/write/#write","text":"fun Duration?.write(parcel: Parcel , flags: Int ): Unit","title":"write"},{"location":"api/parcelize/io.islandtime.extensions.parcelize.measures/-nullable-period-parceler/","text":"parcelize / io.islandtime.extensions.parcelize.measures / NullablePeriodParceler NullablePeriodParceler object NullablePeriodParceler : Parceler<Period?> Functions Name Summary create fun create(parcel: Parcel ): Period? write fun Period?.write(parcel: Parcel , flags: Int ): Unit","title":"Index"},{"location":"api/parcelize/io.islandtime.extensions.parcelize.measures/-nullable-period-parceler/#nullableperiodparceler","text":"object NullablePeriodParceler : Parceler<Period?>","title":"NullablePeriodParceler"},{"location":"api/parcelize/io.islandtime.extensions.parcelize.measures/-nullable-period-parceler/#functions","text":"Name Summary create fun create(parcel: Parcel ): Period? write fun Period?.write(parcel: Parcel , flags: Int ): Unit","title":"Functions"},{"location":"api/parcelize/io.islandtime.extensions.parcelize.measures/-nullable-period-parceler/create/","text":"parcelize / io.islandtime.extensions.parcelize.measures / NullablePeriodParceler / create create fun create(parcel: Parcel ): Period?","title":"Create"},{"location":"api/parcelize/io.islandtime.extensions.parcelize.measures/-nullable-period-parceler/create/#create","text":"fun create(parcel: Parcel ): Period?","title":"create"},{"location":"api/parcelize/io.islandtime.extensions.parcelize.measures/-nullable-period-parceler/write/","text":"parcelize / io.islandtime.extensions.parcelize.measures / NullablePeriodParceler / write write fun Period?.write(parcel: Parcel , flags: Int ): Unit","title":"Write"},{"location":"api/parcelize/io.islandtime.extensions.parcelize.measures/-nullable-period-parceler/write/#write","text":"fun Period?.write(parcel: Parcel , flags: Int ): Unit","title":"write"},{"location":"api/parcelize/io.islandtime.extensions.parcelize.measures/-period-parceler/","text":"parcelize / io.islandtime.extensions.parcelize.measures / PeriodParceler PeriodParceler object PeriodParceler : Parceler<Period> Functions Name Summary create fun create(parcel: Parcel ): Period write fun Period.write(parcel: Parcel , flags: Int ): Unit","title":"Index"},{"location":"api/parcelize/io.islandtime.extensions.parcelize.measures/-period-parceler/#periodparceler","text":"object PeriodParceler : Parceler<Period>","title":"PeriodParceler"},{"location":"api/parcelize/io.islandtime.extensions.parcelize.measures/-period-parceler/#functions","text":"Name Summary create fun create(parcel: Parcel ): Period write fun Period.write(parcel: Parcel , flags: Int ): Unit","title":"Functions"},{"location":"api/parcelize/io.islandtime.extensions.parcelize.measures/-period-parceler/create/","text":"parcelize / io.islandtime.extensions.parcelize.measures / PeriodParceler / create create fun create(parcel: Parcel ): Period","title":"Create"},{"location":"api/parcelize/io.islandtime.extensions.parcelize.measures/-period-parceler/create/#create","text":"fun create(parcel: Parcel ): Period","title":"create"},{"location":"api/parcelize/io.islandtime.extensions.parcelize.measures/-period-parceler/write/","text":"parcelize / io.islandtime.extensions.parcelize.measures / PeriodParceler / write write fun Period.write(parcel: Parcel , flags: Int ): Unit","title":"Write"},{"location":"api/parcelize/io.islandtime.extensions.parcelize.measures/-period-parceler/write/#write","text":"fun Period.write(parcel: Parcel , flags: Int ): Unit","title":"write"},{"location":"api/parcelize/io.islandtime.extensions.parcelize.ranges/","text":"parcelize / io.islandtime.extensions.parcelize.ranges Package io.islandtime.extensions.parcelize.ranges Types Name Summary DateRangeParceler object DateRangeParceler : Parceler<DateRange> DateTimeIntervalParceler object DateTimeIntervalParceler : Parceler<DateTimeInterval> InstantIntervalParceler object InstantIntervalParceler : Parceler<InstantInterval> OffsetDateTimeIntervalParceler object OffsetDateTimeIntervalParceler : Parceler<OffsetDateTimeInterval> ZonedDateTimeIntervalParceler object ZonedDateTimeIntervalParceler : Parceler<ZonedDateTimeInterval>","title":"Index"},{"location":"api/parcelize/io.islandtime.extensions.parcelize.ranges/#package-ioislandtimeextensionsparcelizeranges","text":"","title":"Package io.islandtime.extensions.parcelize.ranges"},{"location":"api/parcelize/io.islandtime.extensions.parcelize.ranges/#types","text":"Name Summary DateRangeParceler object DateRangeParceler : Parceler<DateRange> DateTimeIntervalParceler object DateTimeIntervalParceler : Parceler<DateTimeInterval> InstantIntervalParceler object InstantIntervalParceler : Parceler<InstantInterval> OffsetDateTimeIntervalParceler object OffsetDateTimeIntervalParceler : Parceler<OffsetDateTimeInterval> ZonedDateTimeIntervalParceler object ZonedDateTimeIntervalParceler : Parceler<ZonedDateTimeInterval>","title":"Types"},{"location":"api/parcelize/io.islandtime.extensions.parcelize.ranges/-date-range-parceler/","text":"parcelize / io.islandtime.extensions.parcelize.ranges / DateRangeParceler DateRangeParceler object DateRangeParceler : Parceler<DateRange> Functions Name Summary create fun create(parcel: Parcel ): DateRange write fun DateRange.write(parcel: Parcel , flags: Int ): Unit","title":"Index"},{"location":"api/parcelize/io.islandtime.extensions.parcelize.ranges/-date-range-parceler/#daterangeparceler","text":"object DateRangeParceler : Parceler<DateRange>","title":"DateRangeParceler"},{"location":"api/parcelize/io.islandtime.extensions.parcelize.ranges/-date-range-parceler/#functions","text":"Name Summary create fun create(parcel: Parcel ): DateRange write fun DateRange.write(parcel: Parcel , flags: Int ): Unit","title":"Functions"},{"location":"api/parcelize/io.islandtime.extensions.parcelize.ranges/-date-range-parceler/create/","text":"parcelize / io.islandtime.extensions.parcelize.ranges / DateRangeParceler / create create fun create(parcel: Parcel ): DateRange","title":"Create"},{"location":"api/parcelize/io.islandtime.extensions.parcelize.ranges/-date-range-parceler/create/#create","text":"fun create(parcel: Parcel ): DateRange","title":"create"},{"location":"api/parcelize/io.islandtime.extensions.parcelize.ranges/-date-range-parceler/write/","text":"parcelize / io.islandtime.extensions.parcelize.ranges / DateRangeParceler / write write fun DateRange.write(parcel: Parcel , flags: Int ): Unit","title":"Write"},{"location":"api/parcelize/io.islandtime.extensions.parcelize.ranges/-date-range-parceler/write/#write","text":"fun DateRange.write(parcel: Parcel , flags: Int ): Unit","title":"write"},{"location":"api/parcelize/io.islandtime.extensions.parcelize.ranges/-date-time-interval-parceler/","text":"parcelize / io.islandtime.extensions.parcelize.ranges / DateTimeIntervalParceler DateTimeIntervalParceler object DateTimeIntervalParceler : Parceler<DateTimeInterval> Functions Name Summary create fun create(parcel: Parcel ): DateTimeInterval write fun DateTimeInterval.write(parcel: Parcel , flags: Int ): Unit","title":"Index"},{"location":"api/parcelize/io.islandtime.extensions.parcelize.ranges/-date-time-interval-parceler/#datetimeintervalparceler","text":"object DateTimeIntervalParceler : Parceler<DateTimeInterval>","title":"DateTimeIntervalParceler"},{"location":"api/parcelize/io.islandtime.extensions.parcelize.ranges/-date-time-interval-parceler/#functions","text":"Name Summary create fun create(parcel: Parcel ): DateTimeInterval write fun DateTimeInterval.write(parcel: Parcel , flags: Int ): Unit","title":"Functions"},{"location":"api/parcelize/io.islandtime.extensions.parcelize.ranges/-date-time-interval-parceler/create/","text":"parcelize / io.islandtime.extensions.parcelize.ranges / DateTimeIntervalParceler / create create fun create(parcel: Parcel ): DateTimeInterval","title":"Create"},{"location":"api/parcelize/io.islandtime.extensions.parcelize.ranges/-date-time-interval-parceler/create/#create","text":"fun create(parcel: Parcel ): DateTimeInterval","title":"create"},{"location":"api/parcelize/io.islandtime.extensions.parcelize.ranges/-date-time-interval-parceler/write/","text":"parcelize / io.islandtime.extensions.parcelize.ranges / DateTimeIntervalParceler / write write fun DateTimeInterval.write(parcel: Parcel , flags: Int ): Unit","title":"Write"},{"location":"api/parcelize/io.islandtime.extensions.parcelize.ranges/-date-time-interval-parceler/write/#write","text":"fun DateTimeInterval.write(parcel: Parcel , flags: Int ): Unit","title":"write"},{"location":"api/parcelize/io.islandtime.extensions.parcelize.ranges/-instant-interval-parceler/","text":"parcelize / io.islandtime.extensions.parcelize.ranges / InstantIntervalParceler InstantIntervalParceler object InstantIntervalParceler : Parceler<InstantInterval> Functions Name Summary create fun create(parcel: Parcel ): InstantInterval write fun InstantInterval.write(parcel: Parcel , flags: Int ): Unit","title":"Index"},{"location":"api/parcelize/io.islandtime.extensions.parcelize.ranges/-instant-interval-parceler/#instantintervalparceler","text":"object InstantIntervalParceler : Parceler<InstantInterval>","title":"InstantIntervalParceler"},{"location":"api/parcelize/io.islandtime.extensions.parcelize.ranges/-instant-interval-parceler/#functions","text":"Name Summary create fun create(parcel: Parcel ): InstantInterval write fun InstantInterval.write(parcel: Parcel , flags: Int ): Unit","title":"Functions"},{"location":"api/parcelize/io.islandtime.extensions.parcelize.ranges/-instant-interval-parceler/create/","text":"parcelize / io.islandtime.extensions.parcelize.ranges / InstantIntervalParceler / create create fun create(parcel: Parcel ): InstantInterval","title":"Create"},{"location":"api/parcelize/io.islandtime.extensions.parcelize.ranges/-instant-interval-parceler/create/#create","text":"fun create(parcel: Parcel ): InstantInterval","title":"create"},{"location":"api/parcelize/io.islandtime.extensions.parcelize.ranges/-instant-interval-parceler/write/","text":"parcelize / io.islandtime.extensions.parcelize.ranges / InstantIntervalParceler / write write fun InstantInterval.write(parcel: Parcel , flags: Int ): Unit","title":"Write"},{"location":"api/parcelize/io.islandtime.extensions.parcelize.ranges/-instant-interval-parceler/write/#write","text":"fun InstantInterval.write(parcel: Parcel , flags: Int ): Unit","title":"write"},{"location":"api/parcelize/io.islandtime.extensions.parcelize.ranges/-offset-date-time-interval-parceler/","text":"parcelize / io.islandtime.extensions.parcelize.ranges / OffsetDateTimeIntervalParceler OffsetDateTimeIntervalParceler object OffsetDateTimeIntervalParceler : Parceler<OffsetDateTimeInterval> Functions Name Summary create fun create(parcel: Parcel ): OffsetDateTimeInterval write fun OffsetDateTimeInterval.write(parcel: Parcel , flags: Int ): Unit","title":"Index"},{"location":"api/parcelize/io.islandtime.extensions.parcelize.ranges/-offset-date-time-interval-parceler/#offsetdatetimeintervalparceler","text":"object OffsetDateTimeIntervalParceler : Parceler<OffsetDateTimeInterval>","title":"OffsetDateTimeIntervalParceler"},{"location":"api/parcelize/io.islandtime.extensions.parcelize.ranges/-offset-date-time-interval-parceler/#functions","text":"Name Summary create fun create(parcel: Parcel ): OffsetDateTimeInterval write fun OffsetDateTimeInterval.write(parcel: Parcel , flags: Int ): Unit","title":"Functions"},{"location":"api/parcelize/io.islandtime.extensions.parcelize.ranges/-offset-date-time-interval-parceler/create/","text":"parcelize / io.islandtime.extensions.parcelize.ranges / OffsetDateTimeIntervalParceler / create create fun create(parcel: Parcel ): OffsetDateTimeInterval","title":"Create"},{"location":"api/parcelize/io.islandtime.extensions.parcelize.ranges/-offset-date-time-interval-parceler/create/#create","text":"fun create(parcel: Parcel ): OffsetDateTimeInterval","title":"create"},{"location":"api/parcelize/io.islandtime.extensions.parcelize.ranges/-offset-date-time-interval-parceler/write/","text":"parcelize / io.islandtime.extensions.parcelize.ranges / OffsetDateTimeIntervalParceler / write write fun OffsetDateTimeInterval.write(parcel: Parcel , flags: Int ): Unit","title":"Write"},{"location":"api/parcelize/io.islandtime.extensions.parcelize.ranges/-offset-date-time-interval-parceler/write/#write","text":"fun OffsetDateTimeInterval.write(parcel: Parcel , flags: Int ): Unit","title":"write"},{"location":"api/parcelize/io.islandtime.extensions.parcelize.ranges/-zoned-date-time-interval-parceler/","text":"parcelize / io.islandtime.extensions.parcelize.ranges / ZonedDateTimeIntervalParceler ZonedDateTimeIntervalParceler object ZonedDateTimeIntervalParceler : Parceler<ZonedDateTimeInterval> Functions Name Summary create fun create(parcel: Parcel ): ZonedDateTimeInterval write fun ZonedDateTimeInterval.write(parcel: Parcel , flags: Int ): Unit","title":"Index"},{"location":"api/parcelize/io.islandtime.extensions.parcelize.ranges/-zoned-date-time-interval-parceler/#zoneddatetimeintervalparceler","text":"object ZonedDateTimeIntervalParceler : Parceler<ZonedDateTimeInterval>","title":"ZonedDateTimeIntervalParceler"},{"location":"api/parcelize/io.islandtime.extensions.parcelize.ranges/-zoned-date-time-interval-parceler/#functions","text":"Name Summary create fun create(parcel: Parcel ): ZonedDateTimeInterval write fun ZonedDateTimeInterval.write(parcel: Parcel , flags: Int ): Unit","title":"Functions"},{"location":"api/parcelize/io.islandtime.extensions.parcelize.ranges/-zoned-date-time-interval-parceler/create/","text":"parcelize / io.islandtime.extensions.parcelize.ranges / ZonedDateTimeIntervalParceler / create create fun create(parcel: Parcel ): ZonedDateTimeInterval","title":"Create"},{"location":"api/parcelize/io.islandtime.extensions.parcelize.ranges/-zoned-date-time-interval-parceler/create/#create","text":"fun create(parcel: Parcel ): ZonedDateTimeInterval","title":"create"},{"location":"api/parcelize/io.islandtime.extensions.parcelize.ranges/-zoned-date-time-interval-parceler/write/","text":"parcelize / io.islandtime.extensions.parcelize.ranges / ZonedDateTimeIntervalParceler / write write fun ZonedDateTimeInterval.write(parcel: Parcel , flags: Int ): Unit","title":"Write"},{"location":"api/parcelize/io.islandtime.extensions.parcelize.ranges/-zoned-date-time-interval-parceler/write/#write","text":"fun ZonedDateTimeInterval.write(parcel: Parcel , flags: Int ): Unit","title":"write"},{"location":"api/serialization/","text":"serialization Packages Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) io.islandtime.extensions.serialization (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) io.islandtime.extensions.serialization.measures (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) io.islandtime.extensions.serialization.ranges Index All Types","title":"serialization-extensions"},{"location":"api/serialization/#packages","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) io.islandtime.extensions.serialization (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) io.islandtime.extensions.serialization.measures (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) io.islandtime.extensions.serialization.ranges","title":"Packages"},{"location":"api/serialization/#index","text":"All Types","title":"Index"},{"location":"api/serialization/alltypes/","text":"All Types Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) io.islandtime.extensions.serialization.ranges.DateRangeSerializer |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) io.islandtime.extensions.serialization.DateSerializer |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) io.islandtime.extensions.serialization.ranges.DateTimeIntervalSerializer |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) io.islandtime.extensions.serialization.DateTimeSerializer |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) io.islandtime.extensions.serialization.measures.DurationSerializer |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) io.islandtime.extensions.serialization.ranges.InstantIntervalSerializer |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) io.islandtime.extensions.serialization.InstantSerializer |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) io.islandtime.extensions.serialization.ranges.OffsetDateTimeIntervalSerializer |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) io.islandtime.extensions.serialization.OffsetDateTimeSerializer |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) io.islandtime.extensions.serialization.OffsetTimeSerializer |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) io.islandtime.extensions.serialization.measures.PeriodSerializer |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) io.islandtime.extensions.serialization.TimeSerializer |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) io.islandtime.extensions.serialization.TimeZoneSerializer |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) io.islandtime.extensions.serialization.YearMonthSerializer |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) io.islandtime.extensions.serialization.ranges.ZonedDateTimeIntervalSerializer |(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) io.islandtime.extensions.serialization.ZonedDateTimeSerializer","title":"Index"},{"location":"api/serialization/alltypes/#all-types","text":"Name Summary (iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86)","title":"All Types"},{"location":"api/serialization/alltypes/#ioislandtimeextensionsserializationrangesdaterangeserializer","text":"|(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86)","title":"io.islandtime.extensions.serialization.ranges.DateRangeSerializer"},{"location":"api/serialization/alltypes/#ioislandtimeextensionsserializationdateserializer","text":"|(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86)","title":"io.islandtime.extensions.serialization.DateSerializer"},{"location":"api/serialization/alltypes/#ioislandtimeextensionsserializationrangesdatetimeintervalserializer","text":"|(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86)","title":"io.islandtime.extensions.serialization.ranges.DateTimeIntervalSerializer"},{"location":"api/serialization/alltypes/#ioislandtimeextensionsserializationdatetimeserializer","text":"|(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86)","title":"io.islandtime.extensions.serialization.DateTimeSerializer"},{"location":"api/serialization/alltypes/#ioislandtimeextensionsserializationmeasuresdurationserializer","text":"|(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86)","title":"io.islandtime.extensions.serialization.measures.DurationSerializer"},{"location":"api/serialization/alltypes/#ioislandtimeextensionsserializationrangesinstantintervalserializer","text":"|(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86)","title":"io.islandtime.extensions.serialization.ranges.InstantIntervalSerializer"},{"location":"api/serialization/alltypes/#ioislandtimeextensionsserializationinstantserializer","text":"|(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86)","title":"io.islandtime.extensions.serialization.InstantSerializer"},{"location":"api/serialization/alltypes/#ioislandtimeextensionsserializationrangesoffsetdatetimeintervalserializer","text":"|(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86)","title":"io.islandtime.extensions.serialization.ranges.OffsetDateTimeIntervalSerializer"},{"location":"api/serialization/alltypes/#ioislandtimeextensionsserializationoffsetdatetimeserializer","text":"|(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86)","title":"io.islandtime.extensions.serialization.OffsetDateTimeSerializer"},{"location":"api/serialization/alltypes/#ioislandtimeextensionsserializationoffsettimeserializer","text":"|(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86)","title":"io.islandtime.extensions.serialization.OffsetTimeSerializer"},{"location":"api/serialization/alltypes/#ioislandtimeextensionsserializationmeasuresperiodserializer","text":"|(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86)","title":"io.islandtime.extensions.serialization.measures.PeriodSerializer"},{"location":"api/serialization/alltypes/#ioislandtimeextensionsserializationtimeserializer","text":"|(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86)","title":"io.islandtime.extensions.serialization.TimeSerializer"},{"location":"api/serialization/alltypes/#ioislandtimeextensionsserializationtimezoneserializer","text":"|(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86)","title":"io.islandtime.extensions.serialization.TimeZoneSerializer"},{"location":"api/serialization/alltypes/#ioislandtimeextensionsserializationyearmonthserializer","text":"|(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86)","title":"io.islandtime.extensions.serialization.YearMonthSerializer"},{"location":"api/serialization/alltypes/#ioislandtimeextensionsserializationrangeszoneddatetimeintervalserializer","text":"|(iosArm64, iosX64, jvm, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86)","title":"io.islandtime.extensions.serialization.ranges.ZonedDateTimeIntervalSerializer"},{"location":"api/serialization/alltypes/#ioislandtimeextensionsserializationzoneddatetimeserializer","text":"","title":"io.islandtime.extensions.serialization.ZonedDateTimeSerializer"},{"location":"api/serialization/io.islandtime.extensions.serialization/","text":"serialization / io.islandtime.extensions.serialization Package io.islandtime.extensions.serialization Types Name Summary DateSerializer (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) object DateSerializer (jvm) object DateSerializer : KSerializer<Date> DateTimeSerializer (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) object DateTimeSerializer (jvm) object DateTimeSerializer : KSerializer<DateTime> InstantSerializer (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) object InstantSerializer (jvm) object InstantSerializer : KSerializer<Instant> OffsetDateTimeSerializer (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) object OffsetDateTimeSerializer (jvm) object OffsetDateTimeSerializer : KSerializer<OffsetDateTime> OffsetTimeSerializer (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) object OffsetTimeSerializer (jvm) object OffsetTimeSerializer : KSerializer<OffsetTime> TimeSerializer (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) object TimeSerializer (jvm) object TimeSerializer : KSerializer<Time> TimeZoneSerializer (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) object TimeZoneSerializer (jvm) object TimeZoneSerializer : KSerializer<TimeZone> YearMonthSerializer (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) object YearMonthSerializer (jvm) object YearMonthSerializer : KSerializer<YearMonth> ZonedDateTimeSerializer (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) object ZonedDateTimeSerializer (jvm) object ZonedDateTimeSerializer : KSerializer<ZonedDateTime>","title":"Index"},{"location":"api/serialization/io.islandtime.extensions.serialization/#package-ioislandtimeextensionsserialization","text":"","title":"Package io.islandtime.extensions.serialization"},{"location":"api/serialization/io.islandtime.extensions.serialization/#types","text":"Name Summary DateSerializer (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) object DateSerializer (jvm) object DateSerializer : KSerializer<Date> DateTimeSerializer (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) object DateTimeSerializer (jvm) object DateTimeSerializer : KSerializer<DateTime> InstantSerializer (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) object InstantSerializer (jvm) object InstantSerializer : KSerializer<Instant> OffsetDateTimeSerializer (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) object OffsetDateTimeSerializer (jvm) object OffsetDateTimeSerializer : KSerializer<OffsetDateTime> OffsetTimeSerializer (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) object OffsetTimeSerializer (jvm) object OffsetTimeSerializer : KSerializer<OffsetTime> TimeSerializer (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) object TimeSerializer (jvm) object TimeSerializer : KSerializer<Time> TimeZoneSerializer (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) object TimeZoneSerializer (jvm) object TimeZoneSerializer : KSerializer<TimeZone> YearMonthSerializer (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) object YearMonthSerializer (jvm) object YearMonthSerializer : KSerializer<YearMonth> ZonedDateTimeSerializer (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) object ZonedDateTimeSerializer (jvm) object ZonedDateTimeSerializer : KSerializer<ZonedDateTime>","title":"Types"},{"location":"api/serialization/io.islandtime.extensions.serialization/-date-serializer/","text":"serialization / io.islandtime.extensions.serialization / DateSerializer DateSerializer (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) object DateSerializer (jvm) object DateSerializer : KSerializer<Date> Properties Name Summary descriptor (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val descriptor: <ERROR CLASS> (jvm) val descriptor: SerialDescriptor Functions Name Summary deserialize (jvm) fun deserialize(decoder: Decoder): Date (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun deserialize(decoder: <ERROR CLASS>): <ERROR CLASS> serialize (jvm) fun serialize(encoder: Encoder, value: Date): Unit (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun serialize(encoder: <ERROR CLASS>, value: <ERROR CLASS>): Unit","title":"Index"},{"location":"api/serialization/io.islandtime.extensions.serialization/-date-serializer/#dateserializer","text":"(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) object DateSerializer (jvm) object DateSerializer : KSerializer<Date>","title":"DateSerializer"},{"location":"api/serialization/io.islandtime.extensions.serialization/-date-serializer/#properties","text":"Name Summary descriptor (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val descriptor: <ERROR CLASS> (jvm) val descriptor: SerialDescriptor","title":"Properties"},{"location":"api/serialization/io.islandtime.extensions.serialization/-date-serializer/#functions","text":"Name Summary deserialize (jvm) fun deserialize(decoder: Decoder): Date (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun deserialize(decoder: <ERROR CLASS>): <ERROR CLASS> serialize (jvm) fun serialize(encoder: Encoder, value: Date): Unit (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun serialize(encoder: <ERROR CLASS>, value: <ERROR CLASS>): Unit","title":"Functions"},{"location":"api/serialization/io.islandtime.extensions.serialization/-date-serializer/descriptor/","text":"serialization / io.islandtime.extensions.serialization / DateSerializer / descriptor descriptor (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val descriptor: <ERROR CLASS> (jvm) val descriptor: SerialDescriptor","title":"Descriptor"},{"location":"api/serialization/io.islandtime.extensions.serialization/-date-serializer/descriptor/#descriptor","text":"(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val descriptor: <ERROR CLASS> (jvm) val descriptor: SerialDescriptor","title":"descriptor"},{"location":"api/serialization/io.islandtime.extensions.serialization/-date-serializer/deserialize/","text":"serialization / io.islandtime.extensions.serialization / DateSerializer / deserialize deserialize (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun deserialize(decoder: <ERROR CLASS>): <ERROR CLASS> (jvm) fun deserialize(decoder: Decoder): Date","title":"Deserialize"},{"location":"api/serialization/io.islandtime.extensions.serialization/-date-serializer/deserialize/#deserialize","text":"(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun deserialize(decoder: <ERROR CLASS>): <ERROR CLASS> (jvm) fun deserialize(decoder: Decoder): Date","title":"deserialize"},{"location":"api/serialization/io.islandtime.extensions.serialization/-date-serializer/serialize/","text":"serialization / io.islandtime.extensions.serialization / DateSerializer / serialize serialize (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun serialize(encoder: <ERROR CLASS>, value: <ERROR CLASS>): Unit (jvm) fun serialize(encoder: Encoder, value: Date): Unit","title":"Serialize"},{"location":"api/serialization/io.islandtime.extensions.serialization/-date-serializer/serialize/#serialize","text":"(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun serialize(encoder: <ERROR CLASS>, value: <ERROR CLASS>): Unit (jvm) fun serialize(encoder: Encoder, value: Date): Unit","title":"serialize"},{"location":"api/serialization/io.islandtime.extensions.serialization/-date-time-serializer/","text":"serialization / io.islandtime.extensions.serialization / DateTimeSerializer DateTimeSerializer (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) object DateTimeSerializer (jvm) object DateTimeSerializer : KSerializer<DateTime> Properties Name Summary descriptor (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val descriptor: <ERROR CLASS> (jvm) val descriptor: SerialDescriptor Functions Name Summary deserialize (jvm) fun deserialize(decoder: Decoder): DateTime (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun deserialize(decoder: <ERROR CLASS>): <ERROR CLASS> serialize (jvm) fun serialize(encoder: Encoder, value: DateTime): Unit (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun serialize(encoder: <ERROR CLASS>, value: <ERROR CLASS>): Unit","title":"Index"},{"location":"api/serialization/io.islandtime.extensions.serialization/-date-time-serializer/#datetimeserializer","text":"(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) object DateTimeSerializer (jvm) object DateTimeSerializer : KSerializer<DateTime>","title":"DateTimeSerializer"},{"location":"api/serialization/io.islandtime.extensions.serialization/-date-time-serializer/#properties","text":"Name Summary descriptor (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val descriptor: <ERROR CLASS> (jvm) val descriptor: SerialDescriptor","title":"Properties"},{"location":"api/serialization/io.islandtime.extensions.serialization/-date-time-serializer/#functions","text":"Name Summary deserialize (jvm) fun deserialize(decoder: Decoder): DateTime (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun deserialize(decoder: <ERROR CLASS>): <ERROR CLASS> serialize (jvm) fun serialize(encoder: Encoder, value: DateTime): Unit (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun serialize(encoder: <ERROR CLASS>, value: <ERROR CLASS>): Unit","title":"Functions"},{"location":"api/serialization/io.islandtime.extensions.serialization/-date-time-serializer/descriptor/","text":"serialization / io.islandtime.extensions.serialization / DateTimeSerializer / descriptor descriptor (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val descriptor: <ERROR CLASS> (jvm) val descriptor: SerialDescriptor","title":"Descriptor"},{"location":"api/serialization/io.islandtime.extensions.serialization/-date-time-serializer/descriptor/#descriptor","text":"(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val descriptor: <ERROR CLASS> (jvm) val descriptor: SerialDescriptor","title":"descriptor"},{"location":"api/serialization/io.islandtime.extensions.serialization/-date-time-serializer/deserialize/","text":"serialization / io.islandtime.extensions.serialization / DateTimeSerializer / deserialize deserialize (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun deserialize(decoder: <ERROR CLASS>): <ERROR CLASS> (jvm) fun deserialize(decoder: Decoder): DateTime","title":"Deserialize"},{"location":"api/serialization/io.islandtime.extensions.serialization/-date-time-serializer/deserialize/#deserialize","text":"(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun deserialize(decoder: <ERROR CLASS>): <ERROR CLASS> (jvm) fun deserialize(decoder: Decoder): DateTime","title":"deserialize"},{"location":"api/serialization/io.islandtime.extensions.serialization/-date-time-serializer/serialize/","text":"serialization / io.islandtime.extensions.serialization / DateTimeSerializer / serialize serialize (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun serialize(encoder: <ERROR CLASS>, value: <ERROR CLASS>): Unit (jvm) fun serialize(encoder: Encoder, value: DateTime): Unit","title":"Serialize"},{"location":"api/serialization/io.islandtime.extensions.serialization/-date-time-serializer/serialize/#serialize","text":"(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun serialize(encoder: <ERROR CLASS>, value: <ERROR CLASS>): Unit (jvm) fun serialize(encoder: Encoder, value: DateTime): Unit","title":"serialize"},{"location":"api/serialization/io.islandtime.extensions.serialization/-instant-serializer/","text":"serialization / io.islandtime.extensions.serialization / InstantSerializer InstantSerializer (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) object InstantSerializer (jvm) object InstantSerializer : KSerializer<Instant> Properties Name Summary descriptor (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val descriptor: <ERROR CLASS> (jvm) val descriptor: SerialDescriptor Functions Name Summary deserialize (jvm) fun deserialize(decoder: Decoder): Instant (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun deserialize(decoder: <ERROR CLASS>): <ERROR CLASS> serialize (jvm) fun serialize(encoder: Encoder, value: Instant): Unit (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun serialize(encoder: <ERROR CLASS>, value: <ERROR CLASS>): Unit","title":"Index"},{"location":"api/serialization/io.islandtime.extensions.serialization/-instant-serializer/#instantserializer","text":"(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) object InstantSerializer (jvm) object InstantSerializer : KSerializer<Instant>","title":"InstantSerializer"},{"location":"api/serialization/io.islandtime.extensions.serialization/-instant-serializer/#properties","text":"Name Summary descriptor (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val descriptor: <ERROR CLASS> (jvm) val descriptor: SerialDescriptor","title":"Properties"},{"location":"api/serialization/io.islandtime.extensions.serialization/-instant-serializer/#functions","text":"Name Summary deserialize (jvm) fun deserialize(decoder: Decoder): Instant (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun deserialize(decoder: <ERROR CLASS>): <ERROR CLASS> serialize (jvm) fun serialize(encoder: Encoder, value: Instant): Unit (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun serialize(encoder: <ERROR CLASS>, value: <ERROR CLASS>): Unit","title":"Functions"},{"location":"api/serialization/io.islandtime.extensions.serialization/-instant-serializer/descriptor/","text":"serialization / io.islandtime.extensions.serialization / InstantSerializer / descriptor descriptor (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val descriptor: <ERROR CLASS> (jvm) val descriptor: SerialDescriptor","title":"Descriptor"},{"location":"api/serialization/io.islandtime.extensions.serialization/-instant-serializer/descriptor/#descriptor","text":"(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val descriptor: <ERROR CLASS> (jvm) val descriptor: SerialDescriptor","title":"descriptor"},{"location":"api/serialization/io.islandtime.extensions.serialization/-instant-serializer/deserialize/","text":"serialization / io.islandtime.extensions.serialization / InstantSerializer / deserialize deserialize (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun deserialize(decoder: <ERROR CLASS>): <ERROR CLASS> (jvm) fun deserialize(decoder: Decoder): Instant","title":"Deserialize"},{"location":"api/serialization/io.islandtime.extensions.serialization/-instant-serializer/deserialize/#deserialize","text":"(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun deserialize(decoder: <ERROR CLASS>): <ERROR CLASS> (jvm) fun deserialize(decoder: Decoder): Instant","title":"deserialize"},{"location":"api/serialization/io.islandtime.extensions.serialization/-instant-serializer/serialize/","text":"serialization / io.islandtime.extensions.serialization / InstantSerializer / serialize serialize (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun serialize(encoder: <ERROR CLASS>, value: <ERROR CLASS>): Unit (jvm) fun serialize(encoder: Encoder, value: Instant): Unit","title":"Serialize"},{"location":"api/serialization/io.islandtime.extensions.serialization/-instant-serializer/serialize/#serialize","text":"(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun serialize(encoder: <ERROR CLASS>, value: <ERROR CLASS>): Unit (jvm) fun serialize(encoder: Encoder, value: Instant): Unit","title":"serialize"},{"location":"api/serialization/io.islandtime.extensions.serialization/-offset-date-time-serializer/","text":"serialization / io.islandtime.extensions.serialization / OffsetDateTimeSerializer OffsetDateTimeSerializer (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) object OffsetDateTimeSerializer (jvm) object OffsetDateTimeSerializer : KSerializer<OffsetDateTime> Properties Name Summary descriptor (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val descriptor: <ERROR CLASS> (jvm) val descriptor: SerialDescriptor Functions Name Summary deserialize (jvm) fun deserialize(decoder: Decoder): OffsetDateTime (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun deserialize(decoder: <ERROR CLASS>): <ERROR CLASS> serialize (jvm) fun serialize(encoder: Encoder, value: OffsetDateTime): Unit (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun serialize(encoder: <ERROR CLASS>, value: <ERROR CLASS>): Unit","title":"Index"},{"location":"api/serialization/io.islandtime.extensions.serialization/-offset-date-time-serializer/#offsetdatetimeserializer","text":"(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) object OffsetDateTimeSerializer (jvm) object OffsetDateTimeSerializer : KSerializer<OffsetDateTime>","title":"OffsetDateTimeSerializer"},{"location":"api/serialization/io.islandtime.extensions.serialization/-offset-date-time-serializer/#properties","text":"Name Summary descriptor (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val descriptor: <ERROR CLASS> (jvm) val descriptor: SerialDescriptor","title":"Properties"},{"location":"api/serialization/io.islandtime.extensions.serialization/-offset-date-time-serializer/#functions","text":"Name Summary deserialize (jvm) fun deserialize(decoder: Decoder): OffsetDateTime (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun deserialize(decoder: <ERROR CLASS>): <ERROR CLASS> serialize (jvm) fun serialize(encoder: Encoder, value: OffsetDateTime): Unit (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun serialize(encoder: <ERROR CLASS>, value: <ERROR CLASS>): Unit","title":"Functions"},{"location":"api/serialization/io.islandtime.extensions.serialization/-offset-date-time-serializer/descriptor/","text":"serialization / io.islandtime.extensions.serialization / OffsetDateTimeSerializer / descriptor descriptor (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val descriptor: <ERROR CLASS> (jvm) val descriptor: SerialDescriptor","title":"Descriptor"},{"location":"api/serialization/io.islandtime.extensions.serialization/-offset-date-time-serializer/descriptor/#descriptor","text":"(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val descriptor: <ERROR CLASS> (jvm) val descriptor: SerialDescriptor","title":"descriptor"},{"location":"api/serialization/io.islandtime.extensions.serialization/-offset-date-time-serializer/deserialize/","text":"serialization / io.islandtime.extensions.serialization / OffsetDateTimeSerializer / deserialize deserialize (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun deserialize(decoder: <ERROR CLASS>): <ERROR CLASS> (jvm) fun deserialize(decoder: Decoder): OffsetDateTime","title":"Deserialize"},{"location":"api/serialization/io.islandtime.extensions.serialization/-offset-date-time-serializer/deserialize/#deserialize","text":"(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun deserialize(decoder: <ERROR CLASS>): <ERROR CLASS> (jvm) fun deserialize(decoder: Decoder): OffsetDateTime","title":"deserialize"},{"location":"api/serialization/io.islandtime.extensions.serialization/-offset-date-time-serializer/serialize/","text":"serialization / io.islandtime.extensions.serialization / OffsetDateTimeSerializer / serialize serialize (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun serialize(encoder: <ERROR CLASS>, value: <ERROR CLASS>): Unit (jvm) fun serialize(encoder: Encoder, value: OffsetDateTime): Unit","title":"Serialize"},{"location":"api/serialization/io.islandtime.extensions.serialization/-offset-date-time-serializer/serialize/#serialize","text":"(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun serialize(encoder: <ERROR CLASS>, value: <ERROR CLASS>): Unit (jvm) fun serialize(encoder: Encoder, value: OffsetDateTime): Unit","title":"serialize"},{"location":"api/serialization/io.islandtime.extensions.serialization/-offset-time-serializer/","text":"serialization / io.islandtime.extensions.serialization / OffsetTimeSerializer OffsetTimeSerializer (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) object OffsetTimeSerializer (jvm) object OffsetTimeSerializer : KSerializer<OffsetTime> Properties Name Summary descriptor (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val descriptor: <ERROR CLASS> (jvm) val descriptor: SerialDescriptor Functions Name Summary deserialize (jvm) fun deserialize(decoder: Decoder): OffsetTime (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun deserialize(decoder: <ERROR CLASS>): <ERROR CLASS> serialize (jvm) fun serialize(encoder: Encoder, value: OffsetTime): Unit (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun serialize(encoder: <ERROR CLASS>, value: <ERROR CLASS>): Unit","title":"Index"},{"location":"api/serialization/io.islandtime.extensions.serialization/-offset-time-serializer/#offsettimeserializer","text":"(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) object OffsetTimeSerializer (jvm) object OffsetTimeSerializer : KSerializer<OffsetTime>","title":"OffsetTimeSerializer"},{"location":"api/serialization/io.islandtime.extensions.serialization/-offset-time-serializer/#properties","text":"Name Summary descriptor (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val descriptor: <ERROR CLASS> (jvm) val descriptor: SerialDescriptor","title":"Properties"},{"location":"api/serialization/io.islandtime.extensions.serialization/-offset-time-serializer/#functions","text":"Name Summary deserialize (jvm) fun deserialize(decoder: Decoder): OffsetTime (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun deserialize(decoder: <ERROR CLASS>): <ERROR CLASS> serialize (jvm) fun serialize(encoder: Encoder, value: OffsetTime): Unit (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun serialize(encoder: <ERROR CLASS>, value: <ERROR CLASS>): Unit","title":"Functions"},{"location":"api/serialization/io.islandtime.extensions.serialization/-offset-time-serializer/descriptor/","text":"serialization / io.islandtime.extensions.serialization / OffsetTimeSerializer / descriptor descriptor (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val descriptor: <ERROR CLASS> (jvm) val descriptor: SerialDescriptor","title":"Descriptor"},{"location":"api/serialization/io.islandtime.extensions.serialization/-offset-time-serializer/descriptor/#descriptor","text":"(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val descriptor: <ERROR CLASS> (jvm) val descriptor: SerialDescriptor","title":"descriptor"},{"location":"api/serialization/io.islandtime.extensions.serialization/-offset-time-serializer/deserialize/","text":"serialization / io.islandtime.extensions.serialization / OffsetTimeSerializer / deserialize deserialize (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun deserialize(decoder: <ERROR CLASS>): <ERROR CLASS> (jvm) fun deserialize(decoder: Decoder): OffsetTime","title":"Deserialize"},{"location":"api/serialization/io.islandtime.extensions.serialization/-offset-time-serializer/deserialize/#deserialize","text":"(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun deserialize(decoder: <ERROR CLASS>): <ERROR CLASS> (jvm) fun deserialize(decoder: Decoder): OffsetTime","title":"deserialize"},{"location":"api/serialization/io.islandtime.extensions.serialization/-offset-time-serializer/serialize/","text":"serialization / io.islandtime.extensions.serialization / OffsetTimeSerializer / serialize serialize (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun serialize(encoder: <ERROR CLASS>, value: <ERROR CLASS>): Unit (jvm) fun serialize(encoder: Encoder, value: OffsetTime): Unit","title":"Serialize"},{"location":"api/serialization/io.islandtime.extensions.serialization/-offset-time-serializer/serialize/#serialize","text":"(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun serialize(encoder: <ERROR CLASS>, value: <ERROR CLASS>): Unit (jvm) fun serialize(encoder: Encoder, value: OffsetTime): Unit","title":"serialize"},{"location":"api/serialization/io.islandtime.extensions.serialization/-time-serializer/","text":"serialization / io.islandtime.extensions.serialization / TimeSerializer TimeSerializer (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) object TimeSerializer (jvm) object TimeSerializer : KSerializer<Time> Properties Name Summary descriptor (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val descriptor: <ERROR CLASS> (jvm) val descriptor: SerialDescriptor Functions Name Summary deserialize (jvm) fun deserialize(decoder: Decoder): Time (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun deserialize(decoder: <ERROR CLASS>): <ERROR CLASS> serialize (jvm) fun serialize(encoder: Encoder, value: Time): Unit (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun serialize(encoder: <ERROR CLASS>, value: <ERROR CLASS>): Unit","title":"Index"},{"location":"api/serialization/io.islandtime.extensions.serialization/-time-serializer/#timeserializer","text":"(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) object TimeSerializer (jvm) object TimeSerializer : KSerializer<Time>","title":"TimeSerializer"},{"location":"api/serialization/io.islandtime.extensions.serialization/-time-serializer/#properties","text":"Name Summary descriptor (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val descriptor: <ERROR CLASS> (jvm) val descriptor: SerialDescriptor","title":"Properties"},{"location":"api/serialization/io.islandtime.extensions.serialization/-time-serializer/#functions","text":"Name Summary deserialize (jvm) fun deserialize(decoder: Decoder): Time (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun deserialize(decoder: <ERROR CLASS>): <ERROR CLASS> serialize (jvm) fun serialize(encoder: Encoder, value: Time): Unit (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun serialize(encoder: <ERROR CLASS>, value: <ERROR CLASS>): Unit","title":"Functions"},{"location":"api/serialization/io.islandtime.extensions.serialization/-time-serializer/descriptor/","text":"serialization / io.islandtime.extensions.serialization / TimeSerializer / descriptor descriptor (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val descriptor: <ERROR CLASS> (jvm) val descriptor: SerialDescriptor","title":"Descriptor"},{"location":"api/serialization/io.islandtime.extensions.serialization/-time-serializer/descriptor/#descriptor","text":"(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val descriptor: <ERROR CLASS> (jvm) val descriptor: SerialDescriptor","title":"descriptor"},{"location":"api/serialization/io.islandtime.extensions.serialization/-time-serializer/deserialize/","text":"serialization / io.islandtime.extensions.serialization / TimeSerializer / deserialize deserialize (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun deserialize(decoder: <ERROR CLASS>): <ERROR CLASS> (jvm) fun deserialize(decoder: Decoder): Time","title":"Deserialize"},{"location":"api/serialization/io.islandtime.extensions.serialization/-time-serializer/deserialize/#deserialize","text":"(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun deserialize(decoder: <ERROR CLASS>): <ERROR CLASS> (jvm) fun deserialize(decoder: Decoder): Time","title":"deserialize"},{"location":"api/serialization/io.islandtime.extensions.serialization/-time-serializer/serialize/","text":"serialization / io.islandtime.extensions.serialization / TimeSerializer / serialize serialize (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun serialize(encoder: <ERROR CLASS>, value: <ERROR CLASS>): Unit (jvm) fun serialize(encoder: Encoder, value: Time): Unit","title":"Serialize"},{"location":"api/serialization/io.islandtime.extensions.serialization/-time-serializer/serialize/#serialize","text":"(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun serialize(encoder: <ERROR CLASS>, value: <ERROR CLASS>): Unit (jvm) fun serialize(encoder: Encoder, value: Time): Unit","title":"serialize"},{"location":"api/serialization/io.islandtime.extensions.serialization/-time-zone-serializer/","text":"serialization / io.islandtime.extensions.serialization / TimeZoneSerializer TimeZoneSerializer (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) object TimeZoneSerializer (jvm) object TimeZoneSerializer : KSerializer<TimeZone> Properties Name Summary descriptor (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val descriptor: <ERROR CLASS> (jvm) val descriptor: SerialDescriptor Functions Name Summary deserialize (jvm) fun deserialize(decoder: Decoder): TimeZone (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun deserialize(decoder: <ERROR CLASS>): <ERROR CLASS> serialize (jvm) fun serialize(encoder: Encoder, value: TimeZone): Unit (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun serialize(encoder: <ERROR CLASS>, value: <ERROR CLASS>): Unit","title":"Index"},{"location":"api/serialization/io.islandtime.extensions.serialization/-time-zone-serializer/#timezoneserializer","text":"(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) object TimeZoneSerializer (jvm) object TimeZoneSerializer : KSerializer<TimeZone>","title":"TimeZoneSerializer"},{"location":"api/serialization/io.islandtime.extensions.serialization/-time-zone-serializer/#properties","text":"Name Summary descriptor (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val descriptor: <ERROR CLASS> (jvm) val descriptor: SerialDescriptor","title":"Properties"},{"location":"api/serialization/io.islandtime.extensions.serialization/-time-zone-serializer/#functions","text":"Name Summary deserialize (jvm) fun deserialize(decoder: Decoder): TimeZone (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun deserialize(decoder: <ERROR CLASS>): <ERROR CLASS> serialize (jvm) fun serialize(encoder: Encoder, value: TimeZone): Unit (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun serialize(encoder: <ERROR CLASS>, value: <ERROR CLASS>): Unit","title":"Functions"},{"location":"api/serialization/io.islandtime.extensions.serialization/-time-zone-serializer/descriptor/","text":"serialization / io.islandtime.extensions.serialization / TimeZoneSerializer / descriptor descriptor (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val descriptor: <ERROR CLASS> (jvm) val descriptor: SerialDescriptor","title":"Descriptor"},{"location":"api/serialization/io.islandtime.extensions.serialization/-time-zone-serializer/descriptor/#descriptor","text":"(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val descriptor: <ERROR CLASS> (jvm) val descriptor: SerialDescriptor","title":"descriptor"},{"location":"api/serialization/io.islandtime.extensions.serialization/-time-zone-serializer/deserialize/","text":"serialization / io.islandtime.extensions.serialization / TimeZoneSerializer / deserialize deserialize (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun deserialize(decoder: <ERROR CLASS>): <ERROR CLASS> (jvm) fun deserialize(decoder: Decoder): TimeZone","title":"Deserialize"},{"location":"api/serialization/io.islandtime.extensions.serialization/-time-zone-serializer/deserialize/#deserialize","text":"(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun deserialize(decoder: <ERROR CLASS>): <ERROR CLASS> (jvm) fun deserialize(decoder: Decoder): TimeZone","title":"deserialize"},{"location":"api/serialization/io.islandtime.extensions.serialization/-time-zone-serializer/serialize/","text":"serialization / io.islandtime.extensions.serialization / TimeZoneSerializer / serialize serialize (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun serialize(encoder: <ERROR CLASS>, value: <ERROR CLASS>): Unit (jvm) fun serialize(encoder: Encoder, value: TimeZone): Unit","title":"Serialize"},{"location":"api/serialization/io.islandtime.extensions.serialization/-time-zone-serializer/serialize/#serialize","text":"(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun serialize(encoder: <ERROR CLASS>, value: <ERROR CLASS>): Unit (jvm) fun serialize(encoder: Encoder, value: TimeZone): Unit","title":"serialize"},{"location":"api/serialization/io.islandtime.extensions.serialization/-year-month-serializer/","text":"serialization / io.islandtime.extensions.serialization / YearMonthSerializer YearMonthSerializer (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) object YearMonthSerializer (jvm) object YearMonthSerializer : KSerializer<YearMonth> Properties Name Summary descriptor (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val descriptor: <ERROR CLASS> (jvm) val descriptor: SerialDescriptor Functions Name Summary deserialize (jvm) fun deserialize(decoder: Decoder): YearMonth (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun deserialize(decoder: <ERROR CLASS>): <ERROR CLASS> serialize (jvm) fun serialize(encoder: Encoder, value: YearMonth): Unit (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun serialize(encoder: <ERROR CLASS>, value: <ERROR CLASS>): Unit","title":"Index"},{"location":"api/serialization/io.islandtime.extensions.serialization/-year-month-serializer/#yearmonthserializer","text":"(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) object YearMonthSerializer (jvm) object YearMonthSerializer : KSerializer<YearMonth>","title":"YearMonthSerializer"},{"location":"api/serialization/io.islandtime.extensions.serialization/-year-month-serializer/#properties","text":"Name Summary descriptor (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val descriptor: <ERROR CLASS> (jvm) val descriptor: SerialDescriptor","title":"Properties"},{"location":"api/serialization/io.islandtime.extensions.serialization/-year-month-serializer/#functions","text":"Name Summary deserialize (jvm) fun deserialize(decoder: Decoder): YearMonth (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun deserialize(decoder: <ERROR CLASS>): <ERROR CLASS> serialize (jvm) fun serialize(encoder: Encoder, value: YearMonth): Unit (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun serialize(encoder: <ERROR CLASS>, value: <ERROR CLASS>): Unit","title":"Functions"},{"location":"api/serialization/io.islandtime.extensions.serialization/-year-month-serializer/descriptor/","text":"serialization / io.islandtime.extensions.serialization / YearMonthSerializer / descriptor descriptor (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val descriptor: <ERROR CLASS> (jvm) val descriptor: SerialDescriptor","title":"Descriptor"},{"location":"api/serialization/io.islandtime.extensions.serialization/-year-month-serializer/descriptor/#descriptor","text":"(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val descriptor: <ERROR CLASS> (jvm) val descriptor: SerialDescriptor","title":"descriptor"},{"location":"api/serialization/io.islandtime.extensions.serialization/-year-month-serializer/deserialize/","text":"serialization / io.islandtime.extensions.serialization / YearMonthSerializer / deserialize deserialize (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun deserialize(decoder: <ERROR CLASS>): <ERROR CLASS> (jvm) fun deserialize(decoder: Decoder): YearMonth","title":"Deserialize"},{"location":"api/serialization/io.islandtime.extensions.serialization/-year-month-serializer/deserialize/#deserialize","text":"(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun deserialize(decoder: <ERROR CLASS>): <ERROR CLASS> (jvm) fun deserialize(decoder: Decoder): YearMonth","title":"deserialize"},{"location":"api/serialization/io.islandtime.extensions.serialization/-year-month-serializer/serialize/","text":"serialization / io.islandtime.extensions.serialization / YearMonthSerializer / serialize serialize (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun serialize(encoder: <ERROR CLASS>, value: <ERROR CLASS>): Unit (jvm) fun serialize(encoder: Encoder, value: YearMonth): Unit","title":"Serialize"},{"location":"api/serialization/io.islandtime.extensions.serialization/-year-month-serializer/serialize/#serialize","text":"(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun serialize(encoder: <ERROR CLASS>, value: <ERROR CLASS>): Unit (jvm) fun serialize(encoder: Encoder, value: YearMonth): Unit","title":"serialize"},{"location":"api/serialization/io.islandtime.extensions.serialization/-zoned-date-time-serializer/","text":"serialization / io.islandtime.extensions.serialization / ZonedDateTimeSerializer ZonedDateTimeSerializer (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) object ZonedDateTimeSerializer (jvm) object ZonedDateTimeSerializer : KSerializer<ZonedDateTime> Properties Name Summary descriptor (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val descriptor: <ERROR CLASS> (jvm) val descriptor: SerialDescriptor Functions Name Summary deserialize (jvm) fun deserialize(decoder: Decoder): ZonedDateTime (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun deserialize(decoder: <ERROR CLASS>): <ERROR CLASS> serialize (jvm) fun serialize(encoder: Encoder, value: ZonedDateTime): Unit (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun serialize(encoder: <ERROR CLASS>, value: <ERROR CLASS>): Unit","title":"Index"},{"location":"api/serialization/io.islandtime.extensions.serialization/-zoned-date-time-serializer/#zoneddatetimeserializer","text":"(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) object ZonedDateTimeSerializer (jvm) object ZonedDateTimeSerializer : KSerializer<ZonedDateTime>","title":"ZonedDateTimeSerializer"},{"location":"api/serialization/io.islandtime.extensions.serialization/-zoned-date-time-serializer/#properties","text":"Name Summary descriptor (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val descriptor: <ERROR CLASS> (jvm) val descriptor: SerialDescriptor","title":"Properties"},{"location":"api/serialization/io.islandtime.extensions.serialization/-zoned-date-time-serializer/#functions","text":"Name Summary deserialize (jvm) fun deserialize(decoder: Decoder): ZonedDateTime (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun deserialize(decoder: <ERROR CLASS>): <ERROR CLASS> serialize (jvm) fun serialize(encoder: Encoder, value: ZonedDateTime): Unit (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun serialize(encoder: <ERROR CLASS>, value: <ERROR CLASS>): Unit","title":"Functions"},{"location":"api/serialization/io.islandtime.extensions.serialization/-zoned-date-time-serializer/descriptor/","text":"serialization / io.islandtime.extensions.serialization / ZonedDateTimeSerializer / descriptor descriptor (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val descriptor: <ERROR CLASS> (jvm) val descriptor: SerialDescriptor","title":"Descriptor"},{"location":"api/serialization/io.islandtime.extensions.serialization/-zoned-date-time-serializer/descriptor/#descriptor","text":"(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val descriptor: <ERROR CLASS> (jvm) val descriptor: SerialDescriptor","title":"descriptor"},{"location":"api/serialization/io.islandtime.extensions.serialization/-zoned-date-time-serializer/deserialize/","text":"serialization / io.islandtime.extensions.serialization / ZonedDateTimeSerializer / deserialize deserialize (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun deserialize(decoder: <ERROR CLASS>): <ERROR CLASS> (jvm) fun deserialize(decoder: Decoder): ZonedDateTime","title":"Deserialize"},{"location":"api/serialization/io.islandtime.extensions.serialization/-zoned-date-time-serializer/deserialize/#deserialize","text":"(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun deserialize(decoder: <ERROR CLASS>): <ERROR CLASS> (jvm) fun deserialize(decoder: Decoder): ZonedDateTime","title":"deserialize"},{"location":"api/serialization/io.islandtime.extensions.serialization/-zoned-date-time-serializer/serialize/","text":"serialization / io.islandtime.extensions.serialization / ZonedDateTimeSerializer / serialize serialize (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun serialize(encoder: <ERROR CLASS>, value: <ERROR CLASS>): Unit (jvm) fun serialize(encoder: Encoder, value: ZonedDateTime): Unit","title":"Serialize"},{"location":"api/serialization/io.islandtime.extensions.serialization/-zoned-date-time-serializer/serialize/#serialize","text":"(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun serialize(encoder: <ERROR CLASS>, value: <ERROR CLASS>): Unit (jvm) fun serialize(encoder: Encoder, value: ZonedDateTime): Unit","title":"serialize"},{"location":"api/serialization/io.islandtime.extensions.serialization.measures/","text":"serialization / io.islandtime.extensions.serialization.measures Package io.islandtime.extensions.serialization.measures Types Name Summary DurationSerializer (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) object DurationSerializer (jvm) object DurationSerializer : KSerializer<Duration> PeriodSerializer (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) object PeriodSerializer (jvm) object PeriodSerializer : KSerializer<Period>","title":"Index"},{"location":"api/serialization/io.islandtime.extensions.serialization.measures/#package-ioislandtimeextensionsserializationmeasures","text":"","title":"Package io.islandtime.extensions.serialization.measures"},{"location":"api/serialization/io.islandtime.extensions.serialization.measures/#types","text":"Name Summary DurationSerializer (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) object DurationSerializer (jvm) object DurationSerializer : KSerializer<Duration> PeriodSerializer (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) object PeriodSerializer (jvm) object PeriodSerializer : KSerializer<Period>","title":"Types"},{"location":"api/serialization/io.islandtime.extensions.serialization.measures/-duration-serializer/","text":"serialization / io.islandtime.extensions.serialization.measures / DurationSerializer DurationSerializer (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) object DurationSerializer (jvm) object DurationSerializer : KSerializer<Duration> Properties Name Summary descriptor (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val descriptor: <ERROR CLASS> (jvm) val descriptor: SerialDescriptor Functions Name Summary deserialize (jvm) fun deserialize(decoder: Decoder): Duration (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun deserialize(decoder: <ERROR CLASS>): <ERROR CLASS> serialize (jvm) fun serialize(encoder: Encoder, value: Duration): Unit (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun serialize(encoder: <ERROR CLASS>, value: <ERROR CLASS>): Unit","title":"Index"},{"location":"api/serialization/io.islandtime.extensions.serialization.measures/-duration-serializer/#durationserializer","text":"(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) object DurationSerializer (jvm) object DurationSerializer : KSerializer<Duration>","title":"DurationSerializer"},{"location":"api/serialization/io.islandtime.extensions.serialization.measures/-duration-serializer/#properties","text":"Name Summary descriptor (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val descriptor: <ERROR CLASS> (jvm) val descriptor: SerialDescriptor","title":"Properties"},{"location":"api/serialization/io.islandtime.extensions.serialization.measures/-duration-serializer/#functions","text":"Name Summary deserialize (jvm) fun deserialize(decoder: Decoder): Duration (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun deserialize(decoder: <ERROR CLASS>): <ERROR CLASS> serialize (jvm) fun serialize(encoder: Encoder, value: Duration): Unit (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun serialize(encoder: <ERROR CLASS>, value: <ERROR CLASS>): Unit","title":"Functions"},{"location":"api/serialization/io.islandtime.extensions.serialization.measures/-duration-serializer/descriptor/","text":"serialization / io.islandtime.extensions.serialization.measures / DurationSerializer / descriptor descriptor (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val descriptor: <ERROR CLASS> (jvm) val descriptor: SerialDescriptor","title":"Descriptor"},{"location":"api/serialization/io.islandtime.extensions.serialization.measures/-duration-serializer/descriptor/#descriptor","text":"(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val descriptor: <ERROR CLASS> (jvm) val descriptor: SerialDescriptor","title":"descriptor"},{"location":"api/serialization/io.islandtime.extensions.serialization.measures/-duration-serializer/deserialize/","text":"serialization / io.islandtime.extensions.serialization.measures / DurationSerializer / deserialize deserialize (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun deserialize(decoder: <ERROR CLASS>): <ERROR CLASS> (jvm) fun deserialize(decoder: Decoder): Duration","title":"Deserialize"},{"location":"api/serialization/io.islandtime.extensions.serialization.measures/-duration-serializer/deserialize/#deserialize","text":"(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun deserialize(decoder: <ERROR CLASS>): <ERROR CLASS> (jvm) fun deserialize(decoder: Decoder): Duration","title":"deserialize"},{"location":"api/serialization/io.islandtime.extensions.serialization.measures/-duration-serializer/serialize/","text":"serialization / io.islandtime.extensions.serialization.measures / DurationSerializer / serialize serialize (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun serialize(encoder: <ERROR CLASS>, value: <ERROR CLASS>): Unit (jvm) fun serialize(encoder: Encoder, value: Duration): Unit","title":"Serialize"},{"location":"api/serialization/io.islandtime.extensions.serialization.measures/-duration-serializer/serialize/#serialize","text":"(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun serialize(encoder: <ERROR CLASS>, value: <ERROR CLASS>): Unit (jvm) fun serialize(encoder: Encoder, value: Duration): Unit","title":"serialize"},{"location":"api/serialization/io.islandtime.extensions.serialization.measures/-period-serializer/","text":"serialization / io.islandtime.extensions.serialization.measures / PeriodSerializer PeriodSerializer (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) object PeriodSerializer (jvm) object PeriodSerializer : KSerializer<Period> Properties Name Summary descriptor (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val descriptor: <ERROR CLASS> (jvm) val descriptor: SerialDescriptor Functions Name Summary deserialize (jvm) fun deserialize(decoder: Decoder): Period (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun deserialize(decoder: <ERROR CLASS>): <ERROR CLASS> serialize (jvm) fun serialize(encoder: Encoder, value: Period): Unit (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun serialize(encoder: <ERROR CLASS>, value: <ERROR CLASS>): Unit","title":"Index"},{"location":"api/serialization/io.islandtime.extensions.serialization.measures/-period-serializer/#periodserializer","text":"(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) object PeriodSerializer (jvm) object PeriodSerializer : KSerializer<Period>","title":"PeriodSerializer"},{"location":"api/serialization/io.islandtime.extensions.serialization.measures/-period-serializer/#properties","text":"Name Summary descriptor (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val descriptor: <ERROR CLASS> (jvm) val descriptor: SerialDescriptor","title":"Properties"},{"location":"api/serialization/io.islandtime.extensions.serialization.measures/-period-serializer/#functions","text":"Name Summary deserialize (jvm) fun deserialize(decoder: Decoder): Period (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun deserialize(decoder: <ERROR CLASS>): <ERROR CLASS> serialize (jvm) fun serialize(encoder: Encoder, value: Period): Unit (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun serialize(encoder: <ERROR CLASS>, value: <ERROR CLASS>): Unit","title":"Functions"},{"location":"api/serialization/io.islandtime.extensions.serialization.measures/-period-serializer/descriptor/","text":"serialization / io.islandtime.extensions.serialization.measures / PeriodSerializer / descriptor descriptor (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val descriptor: <ERROR CLASS> (jvm) val descriptor: SerialDescriptor","title":"Descriptor"},{"location":"api/serialization/io.islandtime.extensions.serialization.measures/-period-serializer/descriptor/#descriptor","text":"(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val descriptor: <ERROR CLASS> (jvm) val descriptor: SerialDescriptor","title":"descriptor"},{"location":"api/serialization/io.islandtime.extensions.serialization.measures/-period-serializer/deserialize/","text":"serialization / io.islandtime.extensions.serialization.measures / PeriodSerializer / deserialize deserialize (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun deserialize(decoder: <ERROR CLASS>): <ERROR CLASS> (jvm) fun deserialize(decoder: Decoder): Period","title":"Deserialize"},{"location":"api/serialization/io.islandtime.extensions.serialization.measures/-period-serializer/deserialize/#deserialize","text":"(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun deserialize(decoder: <ERROR CLASS>): <ERROR CLASS> (jvm) fun deserialize(decoder: Decoder): Period","title":"deserialize"},{"location":"api/serialization/io.islandtime.extensions.serialization.measures/-period-serializer/serialize/","text":"serialization / io.islandtime.extensions.serialization.measures / PeriodSerializer / serialize serialize (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun serialize(encoder: <ERROR CLASS>, value: <ERROR CLASS>): Unit (jvm) fun serialize(encoder: Encoder, value: Period): Unit","title":"Serialize"},{"location":"api/serialization/io.islandtime.extensions.serialization.measures/-period-serializer/serialize/#serialize","text":"(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun serialize(encoder: <ERROR CLASS>, value: <ERROR CLASS>): Unit (jvm) fun serialize(encoder: Encoder, value: Period): Unit","title":"serialize"},{"location":"api/serialization/io.islandtime.extensions.serialization.ranges/","text":"serialization / io.islandtime.extensions.serialization.ranges Package io.islandtime.extensions.serialization.ranges Types Name Summary DateRangeSerializer (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) object DateRangeSerializer (jvm) object DateRangeSerializer : KSerializer<DateRange> DateTimeIntervalSerializer (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) object DateTimeIntervalSerializer (jvm) object DateTimeIntervalSerializer : KSerializer<DateTimeInterval> InstantIntervalSerializer (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) object InstantIntervalSerializer (jvm) object InstantIntervalSerializer : KSerializer<InstantInterval> OffsetDateTimeIntervalSerializer (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) object OffsetDateTimeIntervalSerializer (jvm) object OffsetDateTimeIntervalSerializer : KSerializer<OffsetDateTimeInterval> ZonedDateTimeIntervalSerializer (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) object ZonedDateTimeIntervalSerializer (jvm) object ZonedDateTimeIntervalSerializer : KSerializer<ZonedDateTimeInterval>","title":"Index"},{"location":"api/serialization/io.islandtime.extensions.serialization.ranges/#package-ioislandtimeextensionsserializationranges","text":"","title":"Package io.islandtime.extensions.serialization.ranges"},{"location":"api/serialization/io.islandtime.extensions.serialization.ranges/#types","text":"Name Summary DateRangeSerializer (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) object DateRangeSerializer (jvm) object DateRangeSerializer : KSerializer<DateRange> DateTimeIntervalSerializer (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) object DateTimeIntervalSerializer (jvm) object DateTimeIntervalSerializer : KSerializer<DateTimeInterval> InstantIntervalSerializer (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) object InstantIntervalSerializer (jvm) object InstantIntervalSerializer : KSerializer<InstantInterval> OffsetDateTimeIntervalSerializer (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) object OffsetDateTimeIntervalSerializer (jvm) object OffsetDateTimeIntervalSerializer : KSerializer<OffsetDateTimeInterval> ZonedDateTimeIntervalSerializer (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) object ZonedDateTimeIntervalSerializer (jvm) object ZonedDateTimeIntervalSerializer : KSerializer<ZonedDateTimeInterval>","title":"Types"},{"location":"api/serialization/io.islandtime.extensions.serialization.ranges/-date-range-serializer/","text":"serialization / io.islandtime.extensions.serialization.ranges / DateRangeSerializer DateRangeSerializer (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) object DateRangeSerializer (jvm) object DateRangeSerializer : KSerializer<DateRange> Properties Name Summary descriptor (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val descriptor: <ERROR CLASS> (jvm) val descriptor: SerialDescriptor Functions Name Summary deserialize (jvm) fun deserialize(decoder: Decoder): DateRange (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun deserialize(decoder: <ERROR CLASS>): <ERROR CLASS> serialize (jvm) fun serialize(encoder: Encoder, value: DateRange): Unit (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun serialize(encoder: <ERROR CLASS>, value: <ERROR CLASS>): Unit","title":"Index"},{"location":"api/serialization/io.islandtime.extensions.serialization.ranges/-date-range-serializer/#daterangeserializer","text":"(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) object DateRangeSerializer (jvm) object DateRangeSerializer : KSerializer<DateRange>","title":"DateRangeSerializer"},{"location":"api/serialization/io.islandtime.extensions.serialization.ranges/-date-range-serializer/#properties","text":"Name Summary descriptor (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val descriptor: <ERROR CLASS> (jvm) val descriptor: SerialDescriptor","title":"Properties"},{"location":"api/serialization/io.islandtime.extensions.serialization.ranges/-date-range-serializer/#functions","text":"Name Summary deserialize (jvm) fun deserialize(decoder: Decoder): DateRange (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun deserialize(decoder: <ERROR CLASS>): <ERROR CLASS> serialize (jvm) fun serialize(encoder: Encoder, value: DateRange): Unit (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun serialize(encoder: <ERROR CLASS>, value: <ERROR CLASS>): Unit","title":"Functions"},{"location":"api/serialization/io.islandtime.extensions.serialization.ranges/-date-range-serializer/descriptor/","text":"serialization / io.islandtime.extensions.serialization.ranges / DateRangeSerializer / descriptor descriptor (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val descriptor: <ERROR CLASS> (jvm) val descriptor: SerialDescriptor","title":"Descriptor"},{"location":"api/serialization/io.islandtime.extensions.serialization.ranges/-date-range-serializer/descriptor/#descriptor","text":"(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val descriptor: <ERROR CLASS> (jvm) val descriptor: SerialDescriptor","title":"descriptor"},{"location":"api/serialization/io.islandtime.extensions.serialization.ranges/-date-range-serializer/deserialize/","text":"serialization / io.islandtime.extensions.serialization.ranges / DateRangeSerializer / deserialize deserialize (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun deserialize(decoder: <ERROR CLASS>): <ERROR CLASS> (jvm) fun deserialize(decoder: Decoder): DateRange","title":"Deserialize"},{"location":"api/serialization/io.islandtime.extensions.serialization.ranges/-date-range-serializer/deserialize/#deserialize","text":"(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun deserialize(decoder: <ERROR CLASS>): <ERROR CLASS> (jvm) fun deserialize(decoder: Decoder): DateRange","title":"deserialize"},{"location":"api/serialization/io.islandtime.extensions.serialization.ranges/-date-range-serializer/serialize/","text":"serialization / io.islandtime.extensions.serialization.ranges / DateRangeSerializer / serialize serialize (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun serialize(encoder: <ERROR CLASS>, value: <ERROR CLASS>): Unit (jvm) fun serialize(encoder: Encoder, value: DateRange): Unit","title":"Serialize"},{"location":"api/serialization/io.islandtime.extensions.serialization.ranges/-date-range-serializer/serialize/#serialize","text":"(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun serialize(encoder: <ERROR CLASS>, value: <ERROR CLASS>): Unit (jvm) fun serialize(encoder: Encoder, value: DateRange): Unit","title":"serialize"},{"location":"api/serialization/io.islandtime.extensions.serialization.ranges/-date-time-interval-serializer/","text":"serialization / io.islandtime.extensions.serialization.ranges / DateTimeIntervalSerializer DateTimeIntervalSerializer (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) object DateTimeIntervalSerializer (jvm) object DateTimeIntervalSerializer : KSerializer<DateTimeInterval> Properties Name Summary descriptor (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val descriptor: <ERROR CLASS> (jvm) val descriptor: SerialDescriptor Functions Name Summary deserialize (jvm) fun deserialize(decoder: Decoder): DateTimeInterval (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun deserialize(decoder: <ERROR CLASS>): <ERROR CLASS> serialize (jvm) fun serialize(encoder: Encoder, value: DateTimeInterval): Unit (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun serialize(encoder: <ERROR CLASS>, value: <ERROR CLASS>): Unit","title":"Index"},{"location":"api/serialization/io.islandtime.extensions.serialization.ranges/-date-time-interval-serializer/#datetimeintervalserializer","text":"(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) object DateTimeIntervalSerializer (jvm) object DateTimeIntervalSerializer : KSerializer<DateTimeInterval>","title":"DateTimeIntervalSerializer"},{"location":"api/serialization/io.islandtime.extensions.serialization.ranges/-date-time-interval-serializer/#properties","text":"Name Summary descriptor (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val descriptor: <ERROR CLASS> (jvm) val descriptor: SerialDescriptor","title":"Properties"},{"location":"api/serialization/io.islandtime.extensions.serialization.ranges/-date-time-interval-serializer/#functions","text":"Name Summary deserialize (jvm) fun deserialize(decoder: Decoder): DateTimeInterval (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun deserialize(decoder: <ERROR CLASS>): <ERROR CLASS> serialize (jvm) fun serialize(encoder: Encoder, value: DateTimeInterval): Unit (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun serialize(encoder: <ERROR CLASS>, value: <ERROR CLASS>): Unit","title":"Functions"},{"location":"api/serialization/io.islandtime.extensions.serialization.ranges/-date-time-interval-serializer/descriptor/","text":"serialization / io.islandtime.extensions.serialization.ranges / DateTimeIntervalSerializer / descriptor descriptor (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val descriptor: <ERROR CLASS> (jvm) val descriptor: SerialDescriptor","title":"Descriptor"},{"location":"api/serialization/io.islandtime.extensions.serialization.ranges/-date-time-interval-serializer/descriptor/#descriptor","text":"(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val descriptor: <ERROR CLASS> (jvm) val descriptor: SerialDescriptor","title":"descriptor"},{"location":"api/serialization/io.islandtime.extensions.serialization.ranges/-date-time-interval-serializer/deserialize/","text":"serialization / io.islandtime.extensions.serialization.ranges / DateTimeIntervalSerializer / deserialize deserialize (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun deserialize(decoder: <ERROR CLASS>): <ERROR CLASS> (jvm) fun deserialize(decoder: Decoder): DateTimeInterval","title":"Deserialize"},{"location":"api/serialization/io.islandtime.extensions.serialization.ranges/-date-time-interval-serializer/deserialize/#deserialize","text":"(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun deserialize(decoder: <ERROR CLASS>): <ERROR CLASS> (jvm) fun deserialize(decoder: Decoder): DateTimeInterval","title":"deserialize"},{"location":"api/serialization/io.islandtime.extensions.serialization.ranges/-date-time-interval-serializer/serialize/","text":"serialization / io.islandtime.extensions.serialization.ranges / DateTimeIntervalSerializer / serialize serialize (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun serialize(encoder: <ERROR CLASS>, value: <ERROR CLASS>): Unit (jvm) fun serialize(encoder: Encoder, value: DateTimeInterval): Unit","title":"Serialize"},{"location":"api/serialization/io.islandtime.extensions.serialization.ranges/-date-time-interval-serializer/serialize/#serialize","text":"(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun serialize(encoder: <ERROR CLASS>, value: <ERROR CLASS>): Unit (jvm) fun serialize(encoder: Encoder, value: DateTimeInterval): Unit","title":"serialize"},{"location":"api/serialization/io.islandtime.extensions.serialization.ranges/-instant-interval-serializer/","text":"serialization / io.islandtime.extensions.serialization.ranges / InstantIntervalSerializer InstantIntervalSerializer (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) object InstantIntervalSerializer (jvm) object InstantIntervalSerializer : KSerializer<InstantInterval> Properties Name Summary descriptor (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val descriptor: <ERROR CLASS> (jvm) val descriptor: SerialDescriptor Functions Name Summary deserialize (jvm) fun deserialize(decoder: Decoder): InstantInterval (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun deserialize(decoder: <ERROR CLASS>): <ERROR CLASS> serialize (jvm) fun serialize(encoder: Encoder, value: InstantInterval): Unit (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun serialize(encoder: <ERROR CLASS>, value: <ERROR CLASS>): Unit","title":"Index"},{"location":"api/serialization/io.islandtime.extensions.serialization.ranges/-instant-interval-serializer/#instantintervalserializer","text":"(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) object InstantIntervalSerializer (jvm) object InstantIntervalSerializer : KSerializer<InstantInterval>","title":"InstantIntervalSerializer"},{"location":"api/serialization/io.islandtime.extensions.serialization.ranges/-instant-interval-serializer/#properties","text":"Name Summary descriptor (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val descriptor: <ERROR CLASS> (jvm) val descriptor: SerialDescriptor","title":"Properties"},{"location":"api/serialization/io.islandtime.extensions.serialization.ranges/-instant-interval-serializer/#functions","text":"Name Summary deserialize (jvm) fun deserialize(decoder: Decoder): InstantInterval (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun deserialize(decoder: <ERROR CLASS>): <ERROR CLASS> serialize (jvm) fun serialize(encoder: Encoder, value: InstantInterval): Unit (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun serialize(encoder: <ERROR CLASS>, value: <ERROR CLASS>): Unit","title":"Functions"},{"location":"api/serialization/io.islandtime.extensions.serialization.ranges/-instant-interval-serializer/descriptor/","text":"serialization / io.islandtime.extensions.serialization.ranges / InstantIntervalSerializer / descriptor descriptor (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val descriptor: <ERROR CLASS> (jvm) val descriptor: SerialDescriptor","title":"Descriptor"},{"location":"api/serialization/io.islandtime.extensions.serialization.ranges/-instant-interval-serializer/descriptor/#descriptor","text":"(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val descriptor: <ERROR CLASS> (jvm) val descriptor: SerialDescriptor","title":"descriptor"},{"location":"api/serialization/io.islandtime.extensions.serialization.ranges/-instant-interval-serializer/deserialize/","text":"serialization / io.islandtime.extensions.serialization.ranges / InstantIntervalSerializer / deserialize deserialize (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun deserialize(decoder: <ERROR CLASS>): <ERROR CLASS> (jvm) fun deserialize(decoder: Decoder): InstantInterval","title":"Deserialize"},{"location":"api/serialization/io.islandtime.extensions.serialization.ranges/-instant-interval-serializer/deserialize/#deserialize","text":"(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun deserialize(decoder: <ERROR CLASS>): <ERROR CLASS> (jvm) fun deserialize(decoder: Decoder): InstantInterval","title":"deserialize"},{"location":"api/serialization/io.islandtime.extensions.serialization.ranges/-instant-interval-serializer/serialize/","text":"serialization / io.islandtime.extensions.serialization.ranges / InstantIntervalSerializer / serialize serialize (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun serialize(encoder: <ERROR CLASS>, value: <ERROR CLASS>): Unit (jvm) fun serialize(encoder: Encoder, value: InstantInterval): Unit","title":"Serialize"},{"location":"api/serialization/io.islandtime.extensions.serialization.ranges/-instant-interval-serializer/serialize/#serialize","text":"(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun serialize(encoder: <ERROR CLASS>, value: <ERROR CLASS>): Unit (jvm) fun serialize(encoder: Encoder, value: InstantInterval): Unit","title":"serialize"},{"location":"api/serialization/io.islandtime.extensions.serialization.ranges/-offset-date-time-interval-serializer/","text":"serialization / io.islandtime.extensions.serialization.ranges / OffsetDateTimeIntervalSerializer OffsetDateTimeIntervalSerializer (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) object OffsetDateTimeIntervalSerializer (jvm) object OffsetDateTimeIntervalSerializer : KSerializer<OffsetDateTimeInterval> Properties Name Summary descriptor (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val descriptor: <ERROR CLASS> (jvm) val descriptor: SerialDescriptor Functions Name Summary deserialize (jvm) fun deserialize(decoder: Decoder): OffsetDateTimeInterval (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun deserialize(decoder: <ERROR CLASS>): <ERROR CLASS> serialize (jvm) fun serialize(encoder: Encoder, value: OffsetDateTimeInterval): Unit (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun serialize(encoder: <ERROR CLASS>, value: <ERROR CLASS>): Unit","title":"Index"},{"location":"api/serialization/io.islandtime.extensions.serialization.ranges/-offset-date-time-interval-serializer/#offsetdatetimeintervalserializer","text":"(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) object OffsetDateTimeIntervalSerializer (jvm) object OffsetDateTimeIntervalSerializer : KSerializer<OffsetDateTimeInterval>","title":"OffsetDateTimeIntervalSerializer"},{"location":"api/serialization/io.islandtime.extensions.serialization.ranges/-offset-date-time-interval-serializer/#properties","text":"Name Summary descriptor (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val descriptor: <ERROR CLASS> (jvm) val descriptor: SerialDescriptor","title":"Properties"},{"location":"api/serialization/io.islandtime.extensions.serialization.ranges/-offset-date-time-interval-serializer/#functions","text":"Name Summary deserialize (jvm) fun deserialize(decoder: Decoder): OffsetDateTimeInterval (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun deserialize(decoder: <ERROR CLASS>): <ERROR CLASS> serialize (jvm) fun serialize(encoder: Encoder, value: OffsetDateTimeInterval): Unit (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun serialize(encoder: <ERROR CLASS>, value: <ERROR CLASS>): Unit","title":"Functions"},{"location":"api/serialization/io.islandtime.extensions.serialization.ranges/-offset-date-time-interval-serializer/descriptor/","text":"serialization / io.islandtime.extensions.serialization.ranges / OffsetDateTimeIntervalSerializer / descriptor descriptor (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val descriptor: <ERROR CLASS> (jvm) val descriptor: SerialDescriptor","title":"Descriptor"},{"location":"api/serialization/io.islandtime.extensions.serialization.ranges/-offset-date-time-interval-serializer/descriptor/#descriptor","text":"(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val descriptor: <ERROR CLASS> (jvm) val descriptor: SerialDescriptor","title":"descriptor"},{"location":"api/serialization/io.islandtime.extensions.serialization.ranges/-offset-date-time-interval-serializer/deserialize/","text":"serialization / io.islandtime.extensions.serialization.ranges / OffsetDateTimeIntervalSerializer / deserialize deserialize (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun deserialize(decoder: <ERROR CLASS>): <ERROR CLASS> (jvm) fun deserialize(decoder: Decoder): OffsetDateTimeInterval","title":"Deserialize"},{"location":"api/serialization/io.islandtime.extensions.serialization.ranges/-offset-date-time-interval-serializer/deserialize/#deserialize","text":"(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun deserialize(decoder: <ERROR CLASS>): <ERROR CLASS> (jvm) fun deserialize(decoder: Decoder): OffsetDateTimeInterval","title":"deserialize"},{"location":"api/serialization/io.islandtime.extensions.serialization.ranges/-offset-date-time-interval-serializer/serialize/","text":"serialization / io.islandtime.extensions.serialization.ranges / OffsetDateTimeIntervalSerializer / serialize serialize (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun serialize(encoder: <ERROR CLASS>, value: <ERROR CLASS>): Unit (jvm) fun serialize(encoder: Encoder, value: OffsetDateTimeInterval): Unit","title":"Serialize"},{"location":"api/serialization/io.islandtime.extensions.serialization.ranges/-offset-date-time-interval-serializer/serialize/#serialize","text":"(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun serialize(encoder: <ERROR CLASS>, value: <ERROR CLASS>): Unit (jvm) fun serialize(encoder: Encoder, value: OffsetDateTimeInterval): Unit","title":"serialize"},{"location":"api/serialization/io.islandtime.extensions.serialization.ranges/-zoned-date-time-interval-serializer/","text":"serialization / io.islandtime.extensions.serialization.ranges / ZonedDateTimeIntervalSerializer ZonedDateTimeIntervalSerializer (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) object ZonedDateTimeIntervalSerializer (jvm) object ZonedDateTimeIntervalSerializer : KSerializer<ZonedDateTimeInterval> Properties Name Summary descriptor (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val descriptor: <ERROR CLASS> (jvm) val descriptor: SerialDescriptor Functions Name Summary deserialize (jvm) fun deserialize(decoder: Decoder): ZonedDateTimeInterval (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun deserialize(decoder: <ERROR CLASS>): <ERROR CLASS> serialize (jvm) fun serialize(encoder: Encoder, value: ZonedDateTimeInterval): Unit (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun serialize(encoder: <ERROR CLASS>, value: <ERROR CLASS>): Unit","title":"Index"},{"location":"api/serialization/io.islandtime.extensions.serialization.ranges/-zoned-date-time-interval-serializer/#zoneddatetimeintervalserializer","text":"(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) object ZonedDateTimeIntervalSerializer (jvm) object ZonedDateTimeIntervalSerializer : KSerializer<ZonedDateTimeInterval>","title":"ZonedDateTimeIntervalSerializer"},{"location":"api/serialization/io.islandtime.extensions.serialization.ranges/-zoned-date-time-interval-serializer/#properties","text":"Name Summary descriptor (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val descriptor: <ERROR CLASS> (jvm) val descriptor: SerialDescriptor","title":"Properties"},{"location":"api/serialization/io.islandtime.extensions.serialization.ranges/-zoned-date-time-interval-serializer/#functions","text":"Name Summary deserialize (jvm) fun deserialize(decoder: Decoder): ZonedDateTimeInterval (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun deserialize(decoder: <ERROR CLASS>): <ERROR CLASS> serialize (jvm) fun serialize(encoder: Encoder, value: ZonedDateTimeInterval): Unit (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun serialize(encoder: <ERROR CLASS>, value: <ERROR CLASS>): Unit","title":"Functions"},{"location":"api/serialization/io.islandtime.extensions.serialization.ranges/-zoned-date-time-interval-serializer/descriptor/","text":"serialization / io.islandtime.extensions.serialization.ranges / ZonedDateTimeIntervalSerializer / descriptor descriptor (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val descriptor: <ERROR CLASS> (jvm) val descriptor: SerialDescriptor","title":"Descriptor"},{"location":"api/serialization/io.islandtime.extensions.serialization.ranges/-zoned-date-time-interval-serializer/descriptor/#descriptor","text":"(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) val descriptor: <ERROR CLASS> (jvm) val descriptor: SerialDescriptor","title":"descriptor"},{"location":"api/serialization/io.islandtime.extensions.serialization.ranges/-zoned-date-time-interval-serializer/deserialize/","text":"serialization / io.islandtime.extensions.serialization.ranges / ZonedDateTimeIntervalSerializer / deserialize deserialize (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun deserialize(decoder: <ERROR CLASS>): <ERROR CLASS> (jvm) fun deserialize(decoder: Decoder): ZonedDateTimeInterval","title":"Deserialize"},{"location":"api/serialization/io.islandtime.extensions.serialization.ranges/-zoned-date-time-interval-serializer/deserialize/#deserialize","text":"(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun deserialize(decoder: <ERROR CLASS>): <ERROR CLASS> (jvm) fun deserialize(decoder: Decoder): ZonedDateTimeInterval","title":"deserialize"},{"location":"api/serialization/io.islandtime.extensions.serialization.ranges/-zoned-date-time-interval-serializer/serialize/","text":"serialization / io.islandtime.extensions.serialization.ranges / ZonedDateTimeIntervalSerializer / serialize serialize (iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun serialize(encoder: <ERROR CLASS>, value: <ERROR CLASS>): Unit (jvm) fun serialize(encoder: Encoder, value: ZonedDateTimeInterval): Unit","title":"Serialize"},{"location":"api/serialization/io.islandtime.extensions.serialization.ranges/-zoned-date-time-interval-serializer/serialize/#serialize","text":"(iosArm64, iosX64, macosX64, tvosArm64, tvosX64, watchosArm64, watchosX86) fun serialize(encoder: <ERROR CLASS>, value: <ERROR CLASS>): Unit (jvm) fun serialize(encoder: Encoder, value: ZonedDateTimeInterval): Unit","title":"serialize"},{"location":"api/threetenabp/","text":"threetenabp Packages Name Summary io.islandtime.extensions.threetenabp Index All Types","title":"threetenabp-extensions"},{"location":"api/threetenabp/#packages","text":"Name Summary io.islandtime.extensions.threetenabp","title":"Packages"},{"location":"api/threetenabp/#index","text":"All Types","title":"Index"},{"location":"api/threetenabp/alltypes/","text":"All Types Name Summary io.islandtime.extensions.threetenabp.AndroidThreeTenProvider A time zone rules provider that draws from the DB packaged with ThreeTenABP. | (extensions in package io.islandtime.extensions.threetenabp) io.islandtime.Date | (extensions in package io.islandtime.extensions.threetenabp) io.islandtime.DateTime | (extensions in package io.islandtime.extensions.threetenabp) org.threeten.bp.Duration | (extensions in package io.islandtime.extensions.threetenabp) io.islandtime.measures.Duration | (extensions in package io.islandtime.extensions.threetenabp) org.threeten.bp.Instant | (extensions in package io.islandtime.extensions.threetenabp) io.islandtime.Instant | (extensions in package io.islandtime.extensions.threetenabp) io.islandtime.measures.IntCenturies | (extensions in package io.islandtime.extensions.threetenabp) io.islandtime.measures.IntDays | (extensions in package io.islandtime.extensions.threetenabp) io.islandtime.measures.IntDecades | (extensions in package io.islandtime.extensions.threetenabp) io.islandtime.measures.IntHours | (extensions in package io.islandtime.extensions.threetenabp) io.islandtime.measures.IntMicroseconds | (extensions in package io.islandtime.extensions.threetenabp) io.islandtime.measures.IntMilliseconds | (extensions in package io.islandtime.extensions.threetenabp) io.islandtime.measures.IntMinutes | (extensions in package io.islandtime.extensions.threetenabp) io.islandtime.measures.IntMonths | (extensions in package io.islandtime.extensions.threetenabp) io.islandtime.measures.IntNanoseconds | (extensions in package io.islandtime.extensions.threetenabp) io.islandtime.measures.IntSeconds | (extensions in package io.islandtime.extensions.threetenabp) io.islandtime.measures.IntWeeks | (extensions in package io.islandtime.extensions.threetenabp) io.islandtime.measures.IntYears | (extensions in package io.islandtime.extensions.threetenabp) org.threeten.bp.LocalDate | (extensions in package io.islandtime.extensions.threetenabp) org.threeten.bp.LocalDateTime | (extensions in package io.islandtime.extensions.threetenabp) org.threeten.bp.LocalTime | (extensions in package io.islandtime.extensions.threetenabp) io.islandtime.measures.LongCenturies | (extensions in package io.islandtime.extensions.threetenabp) io.islandtime.measures.LongDays | (extensions in package io.islandtime.extensions.threetenabp) io.islandtime.measures.LongDecades | (extensions in package io.islandtime.extensions.threetenabp) io.islandtime.measures.LongHours | (extensions in package io.islandtime.extensions.threetenabp) io.islandtime.measures.LongMicroseconds | (extensions in package io.islandtime.extensions.threetenabp) io.islandtime.measures.LongMilliseconds | (extensions in package io.islandtime.extensions.threetenabp) io.islandtime.measures.LongMinutes | (extensions in package io.islandtime.extensions.threetenabp) io.islandtime.measures.LongMonths | (extensions in package io.islandtime.extensions.threetenabp) io.islandtime.measures.LongNanoseconds | (extensions in package io.islandtime.extensions.threetenabp) io.islandtime.measures.LongSeconds | (extensions in package io.islandtime.extensions.threetenabp) io.islandtime.measures.LongWeeks | (extensions in package io.islandtime.extensions.threetenabp) io.islandtime.measures.LongYears | (extensions in package io.islandtime.extensions.threetenabp) org.threeten.bp.OffsetDateTime | (extensions in package io.islandtime.extensions.threetenabp) io.islandtime.OffsetDateTime | (extensions in package io.islandtime.extensions.threetenabp) org.threeten.bp.OffsetTime | (extensions in package io.islandtime.extensions.threetenabp) io.islandtime.OffsetTime | (extensions in package io.islandtime.extensions.threetenabp) org.threeten.bp.Period | (extensions in package io.islandtime.extensions.threetenabp) io.islandtime.measures.Period | (extensions in package io.islandtime.extensions.threetenabp) io.islandtime.Time | (extensions in package io.islandtime.extensions.threetenabp) io.islandtime.TimeZone | (extensions in package io.islandtime.extensions.threetenabp) io.islandtime.UtcOffset | (extensions in package io.islandtime.extensions.threetenabp) org.threeten.bp.Year | (extensions in package io.islandtime.extensions.threetenabp) io.islandtime.Year | (extensions in package io.islandtime.extensions.threetenabp) org.threeten.bp.YearMonth | (extensions in package io.islandtime.extensions.threetenabp) io.islandtime.YearMonth | (extensions in package io.islandtime.extensions.threetenabp) org.threeten.bp.ZonedDateTime | (extensions in package io.islandtime.extensions.threetenabp) io.islandtime.ZonedDateTime | (extensions in package io.islandtime.extensions.threetenabp) org.threeten.bp.ZoneId | (extensions in package io.islandtime.extensions.threetenabp) org.threeten.bp.ZoneOffset","title":"Index"},{"location":"api/threetenabp/alltypes/#all-types","text":"Name Summary","title":"All Types"},{"location":"api/threetenabp/alltypes/#ioislandtimeextensionsthreetenabpandroidthreetenprovider","text":"A time zone rules provider that draws from the DB packaged with ThreeTenABP. | (extensions in package io.islandtime.extensions.threetenabp)","title":"io.islandtime.extensions.threetenabp.AndroidThreeTenProvider"},{"location":"api/threetenabp/alltypes/#ioislandtimedate","text":"| (extensions in package io.islandtime.extensions.threetenabp)","title":"io.islandtime.Date"},{"location":"api/threetenabp/alltypes/#ioislandtimedatetime","text":"| (extensions in package io.islandtime.extensions.threetenabp)","title":"io.islandtime.DateTime"},{"location":"api/threetenabp/alltypes/#orgthreetenbpduration","text":"| (extensions in package io.islandtime.extensions.threetenabp)","title":"org.threeten.bp.Duration"},{"location":"api/threetenabp/alltypes/#ioislandtimemeasuresduration","text":"| (extensions in package io.islandtime.extensions.threetenabp)","title":"io.islandtime.measures.Duration"},{"location":"api/threetenabp/alltypes/#orgthreetenbpinstant","text":"| (extensions in package io.islandtime.extensions.threetenabp)","title":"org.threeten.bp.Instant"},{"location":"api/threetenabp/alltypes/#ioislandtimeinstant","text":"| (extensions in package io.islandtime.extensions.threetenabp)","title":"io.islandtime.Instant"},{"location":"api/threetenabp/alltypes/#ioislandtimemeasuresintcenturies","text":"| (extensions in package io.islandtime.extensions.threetenabp)","title":"io.islandtime.measures.IntCenturies"},{"location":"api/threetenabp/alltypes/#ioislandtimemeasuresintdays","text":"| (extensions in package io.islandtime.extensions.threetenabp)","title":"io.islandtime.measures.IntDays"},{"location":"api/threetenabp/alltypes/#ioislandtimemeasuresintdecades","text":"| (extensions in package io.islandtime.extensions.threetenabp)","title":"io.islandtime.measures.IntDecades"},{"location":"api/threetenabp/alltypes/#ioislandtimemeasuresinthours","text":"| (extensions in package io.islandtime.extensions.threetenabp)","title":"io.islandtime.measures.IntHours"},{"location":"api/threetenabp/alltypes/#ioislandtimemeasuresintmicroseconds","text":"| (extensions in package io.islandtime.extensions.threetenabp)","title":"io.islandtime.measures.IntMicroseconds"},{"location":"api/threetenabp/alltypes/#ioislandtimemeasuresintmilliseconds","text":"| (extensions in package io.islandtime.extensions.threetenabp)","title":"io.islandtime.measures.IntMilliseconds"},{"location":"api/threetenabp/alltypes/#ioislandtimemeasuresintminutes","text":"| (extensions in package io.islandtime.extensions.threetenabp)","title":"io.islandtime.measures.IntMinutes"},{"location":"api/threetenabp/alltypes/#ioislandtimemeasuresintmonths","text":"| (extensions in package io.islandtime.extensions.threetenabp)","title":"io.islandtime.measures.IntMonths"},{"location":"api/threetenabp/alltypes/#ioislandtimemeasuresintnanoseconds","text":"| (extensions in package io.islandtime.extensions.threetenabp)","title":"io.islandtime.measures.IntNanoseconds"},{"location":"api/threetenabp/alltypes/#ioislandtimemeasuresintseconds","text":"| (extensions in package io.islandtime.extensions.threetenabp)","title":"io.islandtime.measures.IntSeconds"},{"location":"api/threetenabp/alltypes/#ioislandtimemeasuresintweeks","text":"| (extensions in package io.islandtime.extensions.threetenabp)","title":"io.islandtime.measures.IntWeeks"},{"location":"api/threetenabp/alltypes/#ioislandtimemeasuresintyears","text":"| (extensions in package io.islandtime.extensions.threetenabp)","title":"io.islandtime.measures.IntYears"},{"location":"api/threetenabp/alltypes/#orgthreetenbplocaldate","text":"| (extensions in package io.islandtime.extensions.threetenabp)","title":"org.threeten.bp.LocalDate"},{"location":"api/threetenabp/alltypes/#orgthreetenbplocaldatetime","text":"| (extensions in package io.islandtime.extensions.threetenabp)","title":"org.threeten.bp.LocalDateTime"},{"location":"api/threetenabp/alltypes/#orgthreetenbplocaltime","text":"| (extensions in package io.islandtime.extensions.threetenabp)","title":"org.threeten.bp.LocalTime"},{"location":"api/threetenabp/alltypes/#ioislandtimemeasureslongcenturies","text":"| (extensions in package io.islandtime.extensions.threetenabp)","title":"io.islandtime.measures.LongCenturies"},{"location":"api/threetenabp/alltypes/#ioislandtimemeasureslongdays","text":"| (extensions in package io.islandtime.extensions.threetenabp)","title":"io.islandtime.measures.LongDays"},{"location":"api/threetenabp/alltypes/#ioislandtimemeasureslongdecades","text":"| (extensions in package io.islandtime.extensions.threetenabp)","title":"io.islandtime.measures.LongDecades"},{"location":"api/threetenabp/alltypes/#ioislandtimemeasureslonghours","text":"| (extensions in package io.islandtime.extensions.threetenabp)","title":"io.islandtime.measures.LongHours"},{"location":"api/threetenabp/alltypes/#ioislandtimemeasureslongmicroseconds","text":"| (extensions in package io.islandtime.extensions.threetenabp)","title":"io.islandtime.measures.LongMicroseconds"},{"location":"api/threetenabp/alltypes/#ioislandtimemeasureslongmilliseconds","text":"| (extensions in package io.islandtime.extensions.threetenabp)","title":"io.islandtime.measures.LongMilliseconds"},{"location":"api/threetenabp/alltypes/#ioislandtimemeasureslongminutes","text":"| (extensions in package io.islandtime.extensions.threetenabp)","title":"io.islandtime.measures.LongMinutes"},{"location":"api/threetenabp/alltypes/#ioislandtimemeasureslongmonths","text":"| (extensions in package io.islandtime.extensions.threetenabp)","title":"io.islandtime.measures.LongMonths"},{"location":"api/threetenabp/alltypes/#ioislandtimemeasureslongnanoseconds","text":"| (extensions in package io.islandtime.extensions.threetenabp)","title":"io.islandtime.measures.LongNanoseconds"},{"location":"api/threetenabp/alltypes/#ioislandtimemeasureslongseconds","text":"| (extensions in package io.islandtime.extensions.threetenabp)","title":"io.islandtime.measures.LongSeconds"},{"location":"api/threetenabp/alltypes/#ioislandtimemeasureslongweeks","text":"| (extensions in package io.islandtime.extensions.threetenabp)","title":"io.islandtime.measures.LongWeeks"},{"location":"api/threetenabp/alltypes/#ioislandtimemeasureslongyears","text":"| (extensions in package io.islandtime.extensions.threetenabp)","title":"io.islandtime.measures.LongYears"},{"location":"api/threetenabp/alltypes/#orgthreetenbpoffsetdatetime","text":"| (extensions in package io.islandtime.extensions.threetenabp)","title":"org.threeten.bp.OffsetDateTime"},{"location":"api/threetenabp/alltypes/#ioislandtimeoffsetdatetime","text":"| (extensions in package io.islandtime.extensions.threetenabp)","title":"io.islandtime.OffsetDateTime"},{"location":"api/threetenabp/alltypes/#orgthreetenbpoffsettime","text":"| (extensions in package io.islandtime.extensions.threetenabp)","title":"org.threeten.bp.OffsetTime"},{"location":"api/threetenabp/alltypes/#ioislandtimeoffsettime","text":"| (extensions in package io.islandtime.extensions.threetenabp)","title":"io.islandtime.OffsetTime"},{"location":"api/threetenabp/alltypes/#orgthreetenbpperiod","text":"| (extensions in package io.islandtime.extensions.threetenabp)","title":"org.threeten.bp.Period"},{"location":"api/threetenabp/alltypes/#ioislandtimemeasuresperiod","text":"| (extensions in package io.islandtime.extensions.threetenabp)","title":"io.islandtime.measures.Period"},{"location":"api/threetenabp/alltypes/#ioislandtimetime","text":"| (extensions in package io.islandtime.extensions.threetenabp)","title":"io.islandtime.Time"},{"location":"api/threetenabp/alltypes/#ioislandtimetimezone","text":"| (extensions in package io.islandtime.extensions.threetenabp)","title":"io.islandtime.TimeZone"},{"location":"api/threetenabp/alltypes/#ioislandtimeutcoffset","text":"| (extensions in package io.islandtime.extensions.threetenabp)","title":"io.islandtime.UtcOffset"},{"location":"api/threetenabp/alltypes/#orgthreetenbpyear","text":"| (extensions in package io.islandtime.extensions.threetenabp)","title":"org.threeten.bp.Year"},{"location":"api/threetenabp/alltypes/#ioislandtimeyear","text":"| (extensions in package io.islandtime.extensions.threetenabp)","title":"io.islandtime.Year"},{"location":"api/threetenabp/alltypes/#orgthreetenbpyearmonth","text":"| (extensions in package io.islandtime.extensions.threetenabp)","title":"org.threeten.bp.YearMonth"},{"location":"api/threetenabp/alltypes/#ioislandtimeyearmonth","text":"| (extensions in package io.islandtime.extensions.threetenabp)","title":"io.islandtime.YearMonth"},{"location":"api/threetenabp/alltypes/#orgthreetenbpzoneddatetime","text":"| (extensions in package io.islandtime.extensions.threetenabp)","title":"org.threeten.bp.ZonedDateTime"},{"location":"api/threetenabp/alltypes/#ioislandtimezoneddatetime","text":"| (extensions in package io.islandtime.extensions.threetenabp)","title":"io.islandtime.ZonedDateTime"},{"location":"api/threetenabp/alltypes/#orgthreetenbpzoneid","text":"| (extensions in package io.islandtime.extensions.threetenabp)","title":"org.threeten.bp.ZoneId"},{"location":"api/threetenabp/alltypes/#orgthreetenbpzoneoffset","text":"","title":"org.threeten.bp.ZoneOffset"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/","text":"threetenabp / io.islandtime.extensions.threetenabp Package io.islandtime.extensions.threetenabp Types Name Summary AndroidThreeTenProvider A time zone rules provider that draws from the DB packaged with ThreeTenABP. class AndroidThreeTenProvider : TimeZoneRulesProvider Extensions for External Classes Name Summary io.islandtime.Date io.islandtime.DateTime io.islandtime.Instant io.islandtime.measures.Duration io.islandtime.measures.IntCenturies io.islandtime.measures.IntDays io.islandtime.measures.IntDecades io.islandtime.measures.IntHours io.islandtime.measures.IntMicroseconds io.islandtime.measures.IntMilliseconds io.islandtime.measures.IntMinutes io.islandtime.measures.IntMonths io.islandtime.measures.IntNanoseconds io.islandtime.measures.IntSeconds io.islandtime.measures.IntWeeks io.islandtime.measures.IntYears io.islandtime.measures.LongCenturies io.islandtime.measures.LongDays io.islandtime.measures.LongDecades io.islandtime.measures.LongHours io.islandtime.measures.LongMicroseconds io.islandtime.measures.LongMilliseconds io.islandtime.measures.LongMinutes io.islandtime.measures.LongMonths io.islandtime.measures.LongNanoseconds io.islandtime.measures.LongSeconds io.islandtime.measures.LongWeeks io.islandtime.measures.LongYears io.islandtime.measures.Period io.islandtime.OffsetDateTime io.islandtime.OffsetTime io.islandtime.Time io.islandtime.TimeZone io.islandtime.UtcOffset io.islandtime.Year io.islandtime.YearMonth io.islandtime.ZonedDateTime org.threeten.bp.Duration org.threeten.bp.Instant org.threeten.bp.LocalDate org.threeten.bp.LocalDateTime org.threeten.bp.LocalTime org.threeten.bp.OffsetDateTime org.threeten.bp.OffsetTime org.threeten.bp.Period org.threeten.bp.Year org.threeten.bp.YearMonth org.threeten.bp.ZonedDateTime org.threeten.bp.ZoneId org.threeten.bp.ZoneOffset","title":"Index"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/#package-ioislandtimeextensionsthreetenabp","text":"","title":"Package io.islandtime.extensions.threetenabp"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/#types","text":"Name Summary AndroidThreeTenProvider A time zone rules provider that draws from the DB packaged with ThreeTenABP. class AndroidThreeTenProvider : TimeZoneRulesProvider","title":"Types"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/#extensions-for-external-classes","text":"Name Summary io.islandtime.Date io.islandtime.DateTime io.islandtime.Instant io.islandtime.measures.Duration io.islandtime.measures.IntCenturies io.islandtime.measures.IntDays io.islandtime.measures.IntDecades io.islandtime.measures.IntHours io.islandtime.measures.IntMicroseconds io.islandtime.measures.IntMilliseconds io.islandtime.measures.IntMinutes io.islandtime.measures.IntMonths io.islandtime.measures.IntNanoseconds io.islandtime.measures.IntSeconds io.islandtime.measures.IntWeeks io.islandtime.measures.IntYears io.islandtime.measures.LongCenturies io.islandtime.measures.LongDays io.islandtime.measures.LongDecades io.islandtime.measures.LongHours io.islandtime.measures.LongMicroseconds io.islandtime.measures.LongMilliseconds io.islandtime.measures.LongMinutes io.islandtime.measures.LongMonths io.islandtime.measures.LongNanoseconds io.islandtime.measures.LongSeconds io.islandtime.measures.LongWeeks io.islandtime.measures.LongYears io.islandtime.measures.Period io.islandtime.OffsetDateTime io.islandtime.OffsetTime io.islandtime.Time io.islandtime.TimeZone io.islandtime.UtcOffset io.islandtime.Year io.islandtime.YearMonth io.islandtime.ZonedDateTime org.threeten.bp.Duration org.threeten.bp.Instant org.threeten.bp.LocalDate org.threeten.bp.LocalDateTime org.threeten.bp.LocalTime org.threeten.bp.OffsetDateTime org.threeten.bp.OffsetTime org.threeten.bp.Period org.threeten.bp.Year org.threeten.bp.YearMonth org.threeten.bp.ZonedDateTime org.threeten.bp.ZoneId org.threeten.bp.ZoneOffset","title":"Extensions for External Classes"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/-android-three-ten-provider/","text":"threetenabp / io.islandtime.extensions.threetenabp / AndroidThreeTenProvider AndroidThreeTenProvider class AndroidThreeTenProvider : TimeZoneRulesProvider A time zone rules provider that draws from the DB packaged with ThreeTenABP. Constructors Name Summary <init> AndroidThreeTenProvider(context: Context ) AndroidThreeTenProvider(application: Application ) A time zone rules provider that draws from the DB packaged with ThreeTenABP. AndroidThreeTenProvider(context: Context , assetPath: String ) Properties Name Summary availableRegionIds val availableRegionIds: Set < String > databaseVersion val databaseVersion: String Functions Name Summary hasRulesFor fun hasRulesFor(regionId: String ): Boolean rulesFor fun rulesFor(regionId: String ): TimeZoneRules","title":"Index"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/-android-three-ten-provider/#androidthreetenprovider","text":"class AndroidThreeTenProvider : TimeZoneRulesProvider A time zone rules provider that draws from the DB packaged with ThreeTenABP.","title":"AndroidThreeTenProvider"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/-android-three-ten-provider/#constructors","text":"Name Summary <init> AndroidThreeTenProvider(context: Context ) AndroidThreeTenProvider(application: Application ) A time zone rules provider that draws from the DB packaged with ThreeTenABP. AndroidThreeTenProvider(context: Context , assetPath: String )","title":"Constructors"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/-android-three-ten-provider/#properties","text":"Name Summary availableRegionIds val availableRegionIds: Set < String > databaseVersion val databaseVersion: String","title":"Properties"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/-android-three-ten-provider/#functions","text":"Name Summary hasRulesFor fun hasRulesFor(regionId: String ): Boolean rulesFor fun rulesFor(regionId: String ): TimeZoneRules","title":"Functions"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/-android-three-ten-provider/-init-/","text":"threetenabp / io.islandtime.extensions.threetenabp / AndroidThreeTenProvider / <init> <init> AndroidThreeTenProvider(context: Context ) AndroidThreeTenProvider(application: Application )``AndroidThreeTenProvider(context: Context , assetPath: String ) A time zone rules provider that draws from the DB packaged with ThreeTenABP.","title":" init "},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/-android-three-ten-provider/-init-/#init","text":"AndroidThreeTenProvider(context: Context ) AndroidThreeTenProvider(application: Application )``AndroidThreeTenProvider(context: Context , assetPath: String ) A time zone rules provider that draws from the DB packaged with ThreeTenABP.","title":"&lt;init&gt;"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/-android-three-ten-provider/available-region-ids/","text":"threetenabp / io.islandtime.extensions.threetenabp / AndroidThreeTenProvider / availableRegionIds availableRegionIds val availableRegionIds: Set < String >","title":"Available region ids"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/-android-three-ten-provider/available-region-ids/#availableregionids","text":"val availableRegionIds: Set < String >","title":"availableRegionIds"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/-android-three-ten-provider/database-version/","text":"threetenabp / io.islandtime.extensions.threetenabp / AndroidThreeTenProvider / databaseVersion databaseVersion val databaseVersion: String","title":"Database version"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/-android-three-ten-provider/database-version/#databaseversion","text":"val databaseVersion: String","title":"databaseVersion"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/-android-three-ten-provider/has-rules-for/","text":"threetenabp / io.islandtime.extensions.threetenabp / AndroidThreeTenProvider / hasRulesFor hasRulesFor fun hasRulesFor(regionId: String ): Boolean","title":"Has rules for"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/-android-three-ten-provider/has-rules-for/#hasrulesfor","text":"fun hasRulesFor(regionId: String ): Boolean","title":"hasRulesFor"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/-android-three-ten-provider/rules-for/","text":"threetenabp / io.islandtime.extensions.threetenabp / AndroidThreeTenProvider / rulesFor rulesFor fun rulesFor(regionId: String ): TimeZoneRules","title":"Rules for"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/-android-three-ten-provider/rules-for/#rulesfor","text":"fun rulesFor(regionId: String ): TimeZoneRules","title":"rulesFor"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.-date/","text":"threetenabp / io.islandtime.extensions.threetenabp / io.islandtime.Date Extensions for io.islandtime.Date Name Summary toJavaLocalDate Convert to an equivalent Java LocalDate . fun Date.toJavaLocalDate(): LocalDate","title":"Index"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.-date/#extensions-for-ioislandtimedate","text":"Name Summary toJavaLocalDate Convert to an equivalent Java LocalDate . fun Date.toJavaLocalDate(): LocalDate","title":"Extensions for io.islandtime.Date"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.-date/to-java-local-date/","text":"threetenabp / io.islandtime.extensions.threetenabp / io.islandtime.Date / toJavaLocalDate toJavaLocalDate fun Date.toJavaLocalDate(): LocalDate Convert to an equivalent Java LocalDate .","title":"To java local date"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.-date/to-java-local-date/#tojavalocaldate","text":"fun Date.toJavaLocalDate(): LocalDate Convert to an equivalent Java LocalDate .","title":"toJavaLocalDate"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.-date-time/","text":"threetenabp / io.islandtime.extensions.threetenabp / io.islandtime.DateTime Extensions for io.islandtime.DateTime Name Summary toJavaLocalDateTime Convert to an equivalent Java LocalDateTime . fun DateTime.toJavaLocalDateTime(): LocalDateTime","title":"Index"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.-date-time/#extensions-for-ioislandtimedatetime","text":"Name Summary toJavaLocalDateTime Convert to an equivalent Java LocalDateTime . fun DateTime.toJavaLocalDateTime(): LocalDateTime","title":"Extensions for io.islandtime.DateTime"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.-date-time/to-java-local-date-time/","text":"threetenabp / io.islandtime.extensions.threetenabp / io.islandtime.DateTime / toJavaLocalDateTime toJavaLocalDateTime fun DateTime.toJavaLocalDateTime(): LocalDateTime Convert to an equivalent Java LocalDateTime .","title":"To java local date time"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.-date-time/to-java-local-date-time/#tojavalocaldatetime","text":"fun DateTime.toJavaLocalDateTime(): LocalDateTime Convert to an equivalent Java LocalDateTime .","title":"toJavaLocalDateTime"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.-instant/","text":"threetenabp / io.islandtime.extensions.threetenabp / io.islandtime.Instant Extensions for io.islandtime.Instant Name Summary toJavaInstant Convert to an equivalent Java Instant . fun Instant.toJavaInstant(): Instant","title":"Index"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.-instant/#extensions-for-ioislandtimeinstant","text":"Name Summary toJavaInstant Convert to an equivalent Java Instant . fun Instant.toJavaInstant(): Instant","title":"Extensions for io.islandtime.Instant"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.-instant/to-java-instant/","text":"threetenabp / io.islandtime.extensions.threetenabp / io.islandtime.Instant / toJavaInstant toJavaInstant fun Instant.toJavaInstant(): Instant Convert to an equivalent Java Instant .","title":"To java instant"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.-instant/to-java-instant/#tojavainstant","text":"fun Instant.toJavaInstant(): Instant Convert to an equivalent Java Instant .","title":"toJavaInstant"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.-offset-date-time/","text":"threetenabp / io.islandtime.extensions.threetenabp / io.islandtime.OffsetDateTime Extensions for io.islandtime.OffsetDateTime Name Summary toJavaOffsetDateTime Convert to an equivalent Java OffsetDateTime . fun OffsetDateTime.toJavaOffsetDateTime(): OffsetDateTime","title":"Index"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.-offset-date-time/#extensions-for-ioislandtimeoffsetdatetime","text":"Name Summary toJavaOffsetDateTime Convert to an equivalent Java OffsetDateTime . fun OffsetDateTime.toJavaOffsetDateTime(): OffsetDateTime","title":"Extensions for io.islandtime.OffsetDateTime"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.-offset-date-time/to-java-offset-date-time/","text":"threetenabp / io.islandtime.extensions.threetenabp / io.islandtime.OffsetDateTime / toJavaOffsetDateTime toJavaOffsetDateTime fun OffsetDateTime.toJavaOffsetDateTime(): OffsetDateTime Convert to an equivalent Java OffsetDateTime .","title":"To java offset date time"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.-offset-date-time/to-java-offset-date-time/#tojavaoffsetdatetime","text":"fun OffsetDateTime.toJavaOffsetDateTime(): OffsetDateTime Convert to an equivalent Java OffsetDateTime .","title":"toJavaOffsetDateTime"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.-offset-time/","text":"threetenabp / io.islandtime.extensions.threetenabp / io.islandtime.OffsetTime Extensions for io.islandtime.OffsetTime Name Summary toJavaOffsetTime Convert to an equivalent Java OffsetTime . fun OffsetTime.toJavaOffsetTime(): OffsetTime","title":"Index"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.-offset-time/#extensions-for-ioislandtimeoffsettime","text":"Name Summary toJavaOffsetTime Convert to an equivalent Java OffsetTime . fun OffsetTime.toJavaOffsetTime(): OffsetTime","title":"Extensions for io.islandtime.OffsetTime"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.-offset-time/to-java-offset-time/","text":"threetenabp / io.islandtime.extensions.threetenabp / io.islandtime.OffsetTime / toJavaOffsetTime toJavaOffsetTime fun OffsetTime.toJavaOffsetTime(): OffsetTime Convert to an equivalent Java OffsetTime .","title":"To java offset time"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.-offset-time/to-java-offset-time/#tojavaoffsettime","text":"fun OffsetTime.toJavaOffsetTime(): OffsetTime Convert to an equivalent Java OffsetTime .","title":"toJavaOffsetTime"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.-time/","text":"threetenabp / io.islandtime.extensions.threetenabp / io.islandtime.Time Extensions for io.islandtime.Time Name Summary toJavaLocalTime Convert to an equivalent Java LocalTime . fun Time.toJavaLocalTime(): LocalTime","title":"Index"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.-time/#extensions-for-ioislandtimetime","text":"Name Summary toJavaLocalTime Convert to an equivalent Java LocalTime . fun Time.toJavaLocalTime(): LocalTime","title":"Extensions for io.islandtime.Time"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.-time/to-java-local-time/","text":"threetenabp / io.islandtime.extensions.threetenabp / io.islandtime.Time / toJavaLocalTime toJavaLocalTime fun Time.toJavaLocalTime(): LocalTime Convert to an equivalent Java LocalTime .","title":"To java local time"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.-time/to-java-local-time/#tojavalocaltime","text":"fun Time.toJavaLocalTime(): LocalTime Convert to an equivalent Java LocalTime .","title":"toJavaLocalTime"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.-time-zone/","text":"threetenabp / io.islandtime.extensions.threetenabp / io.islandtime.TimeZone Extensions for io.islandtime.TimeZone Name Summary toJavaZoneId Convert to an equivalent Java ZoneId . fun TimeZone.toJavaZoneId(): ZoneId","title":"Index"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.-time-zone/#extensions-for-ioislandtimetimezone","text":"Name Summary toJavaZoneId Convert to an equivalent Java ZoneId . fun TimeZone.toJavaZoneId(): ZoneId","title":"Extensions for io.islandtime.TimeZone"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.-time-zone/to-java-zone-id/","text":"threetenabp / io.islandtime.extensions.threetenabp / io.islandtime.TimeZone / toJavaZoneId toJavaZoneId fun TimeZone.toJavaZoneId(): ZoneId Convert to an equivalent Java ZoneId .","title":"To java zone id"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.-time-zone/to-java-zone-id/#tojavazoneid","text":"fun TimeZone.toJavaZoneId(): ZoneId Convert to an equivalent Java ZoneId .","title":"toJavaZoneId"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.-utc-offset/","text":"threetenabp / io.islandtime.extensions.threetenabp / io.islandtime.UtcOffset Extensions for io.islandtime.UtcOffset Name Summary toJavaZoneOffset Convert to an equivalent Java ZoneOffset . fun UtcOffset.toJavaZoneOffset(): ZoneOffset","title":"Index"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.-utc-offset/#extensions-for-ioislandtimeutcoffset","text":"Name Summary toJavaZoneOffset Convert to an equivalent Java ZoneOffset . fun UtcOffset.toJavaZoneOffset(): ZoneOffset","title":"Extensions for io.islandtime.UtcOffset"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.-utc-offset/to-java-zone-offset/","text":"threetenabp / io.islandtime.extensions.threetenabp / io.islandtime.UtcOffset / toJavaZoneOffset toJavaZoneOffset fun UtcOffset.toJavaZoneOffset(): ZoneOffset Convert to an equivalent Java ZoneOffset .","title":"To java zone offset"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.-utc-offset/to-java-zone-offset/#tojavazoneoffset","text":"fun UtcOffset.toJavaZoneOffset(): ZoneOffset Convert to an equivalent Java ZoneOffset .","title":"toJavaZoneOffset"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.-year/","text":"threetenabp / io.islandtime.extensions.threetenabp / io.islandtime.Year Extensions for io.islandtime.Year Name Summary toJavaYear Convert to an equivalent Java Year . fun Year.toJavaYear(): Year","title":"Index"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.-year/#extensions-for-ioislandtimeyear","text":"Name Summary toJavaYear Convert to an equivalent Java Year . fun Year.toJavaYear(): Year","title":"Extensions for io.islandtime.Year"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.-year/to-java-year/","text":"threetenabp / io.islandtime.extensions.threetenabp / io.islandtime.Year / toJavaYear toJavaYear fun Year.toJavaYear(): Year Convert to an equivalent Java Year .","title":"To java year"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.-year/to-java-year/#tojavayear","text":"fun Year.toJavaYear(): Year Convert to an equivalent Java Year .","title":"toJavaYear"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.-year-month/","text":"threetenabp / io.islandtime.extensions.threetenabp / io.islandtime.YearMonth Extensions for io.islandtime.YearMonth Name Summary toJavaYearMonth Convert to an equivalent Java YearMonth . fun YearMonth.toJavaYearMonth(): YearMonth","title":"Index"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.-year-month/#extensions-for-ioislandtimeyearmonth","text":"Name Summary toJavaYearMonth Convert to an equivalent Java YearMonth . fun YearMonth.toJavaYearMonth(): YearMonth","title":"Extensions for io.islandtime.YearMonth"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.-year-month/to-java-year-month/","text":"threetenabp / io.islandtime.extensions.threetenabp / io.islandtime.YearMonth / toJavaYearMonth toJavaYearMonth fun YearMonth.toJavaYearMonth(): YearMonth Convert to an equivalent Java YearMonth .","title":"To java year month"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.-year-month/to-java-year-month/#tojavayearmonth","text":"fun YearMonth.toJavaYearMonth(): YearMonth Convert to an equivalent Java YearMonth .","title":"toJavaYearMonth"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.-zoned-date-time/","text":"threetenabp / io.islandtime.extensions.threetenabp / io.islandtime.ZonedDateTime Extensions for io.islandtime.ZonedDateTime Name Summary toJavaZonedDateTime Convert to an equivalent Java ZonedDateTime . fun ZonedDateTime.toJavaZonedDateTime(): ZonedDateTime","title":"Index"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.-zoned-date-time/#extensions-for-ioislandtimezoneddatetime","text":"Name Summary toJavaZonedDateTime Convert to an equivalent Java ZonedDateTime . fun ZonedDateTime.toJavaZonedDateTime(): ZonedDateTime","title":"Extensions for io.islandtime.ZonedDateTime"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.-zoned-date-time/to-java-zoned-date-time/","text":"threetenabp / io.islandtime.extensions.threetenabp / io.islandtime.ZonedDateTime / toJavaZonedDateTime toJavaZonedDateTime fun ZonedDateTime.toJavaZonedDateTime(): ZonedDateTime Convert to an equivalent Java ZonedDateTime .","title":"To java zoned date time"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.-zoned-date-time/to-java-zoned-date-time/#tojavazoneddatetime","text":"fun ZonedDateTime.toJavaZonedDateTime(): ZonedDateTime Convert to an equivalent Java ZonedDateTime .","title":"toJavaZonedDateTime"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.measures.-duration/","text":"threetenabp / io.islandtime.extensions.threetenabp / io.islandtime.measures.Duration Extensions for io.islandtime.measures.Duration Name Summary toJavaDuration Convert to an equivalent Java Duration . fun Duration.toJavaDuration(): Duration","title":"Index"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.measures.-duration/#extensions-for-ioislandtimemeasuresduration","text":"Name Summary toJavaDuration Convert to an equivalent Java Duration . fun Duration.toJavaDuration(): Duration","title":"Extensions for io.islandtime.measures.Duration"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.measures.-duration/to-java-duration/","text":"threetenabp / io.islandtime.extensions.threetenabp / io.islandtime.measures.Duration / toJavaDuration toJavaDuration fun Duration.toJavaDuration(): Duration Convert to an equivalent Java Duration .","title":"To java duration"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.measures.-duration/to-java-duration/#tojavaduration","text":"fun Duration.toJavaDuration(): Duration Convert to an equivalent Java Duration .","title":"toJavaDuration"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.measures.-int-centuries/","text":"threetenabp / io.islandtime.extensions.threetenabp / io.islandtime.measures.IntCenturies Extensions for io.islandtime.measures.IntCenturies Name Summary toJavaPeriod Convert to an equivalent Java Period . fun IntCenturies.toJavaPeriod(): Period","title":"Index"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.measures.-int-centuries/#extensions-for-ioislandtimemeasuresintcenturies","text":"Name Summary toJavaPeriod Convert to an equivalent Java Period . fun IntCenturies.toJavaPeriod(): Period","title":"Extensions for io.islandtime.measures.IntCenturies"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.measures.-int-centuries/to-java-period/","text":"threetenabp / io.islandtime.extensions.threetenabp / io.islandtime.measures.IntCenturies / toJavaPeriod toJavaPeriod fun IntCenturies.toJavaPeriod(): Period Convert to an equivalent Java Period .","title":"To java period"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.measures.-int-centuries/to-java-period/#tojavaperiod","text":"fun IntCenturies.toJavaPeriod(): Period Convert to an equivalent Java Period .","title":"toJavaPeriod"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.measures.-int-days/","text":"threetenabp / io.islandtime.extensions.threetenabp / io.islandtime.measures.IntDays Extensions for io.islandtime.measures.IntDays Name Summary toJavaDuration Convert to an equivalent Java Duration . fun IntDays.toJavaDuration(): Duration toJavaPeriod Convert to an equivalent Java Period . fun IntDays.toJavaPeriod(): Period","title":"Index"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.measures.-int-days/#extensions-for-ioislandtimemeasuresintdays","text":"Name Summary toJavaDuration Convert to an equivalent Java Duration . fun IntDays.toJavaDuration(): Duration toJavaPeriod Convert to an equivalent Java Period . fun IntDays.toJavaPeriod(): Period","title":"Extensions for io.islandtime.measures.IntDays"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.measures.-int-days/to-java-duration/","text":"threetenabp / io.islandtime.extensions.threetenabp / io.islandtime.measures.IntDays / toJavaDuration toJavaDuration fun IntDays.toJavaDuration(): Duration Convert to an equivalent Java Duration .","title":"To java duration"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.measures.-int-days/to-java-duration/#tojavaduration","text":"fun IntDays.toJavaDuration(): Duration Convert to an equivalent Java Duration .","title":"toJavaDuration"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.measures.-int-days/to-java-period/","text":"threetenabp / io.islandtime.extensions.threetenabp / io.islandtime.measures.IntDays / toJavaPeriod toJavaPeriod fun IntDays.toJavaPeriod(): Period Convert to an equivalent Java Period .","title":"To java period"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.measures.-int-days/to-java-period/#tojavaperiod","text":"fun IntDays.toJavaPeriod(): Period Convert to an equivalent Java Period .","title":"toJavaPeriod"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.measures.-int-decades/","text":"threetenabp / io.islandtime.extensions.threetenabp / io.islandtime.measures.IntDecades Extensions for io.islandtime.measures.IntDecades Name Summary toJavaPeriod Convert to an equivalent Java Period . fun IntDecades.toJavaPeriod(): Period","title":"Index"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.measures.-int-decades/#extensions-for-ioislandtimemeasuresintdecades","text":"Name Summary toJavaPeriod Convert to an equivalent Java Period . fun IntDecades.toJavaPeriod(): Period","title":"Extensions for io.islandtime.measures.IntDecades"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.measures.-int-decades/to-java-period/","text":"threetenabp / io.islandtime.extensions.threetenabp / io.islandtime.measures.IntDecades / toJavaPeriod toJavaPeriod fun IntDecades.toJavaPeriod(): Period Convert to an equivalent Java Period .","title":"To java period"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.measures.-int-decades/to-java-period/#tojavaperiod","text":"fun IntDecades.toJavaPeriod(): Period Convert to an equivalent Java Period .","title":"toJavaPeriod"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.measures.-int-hours/","text":"threetenabp / io.islandtime.extensions.threetenabp / io.islandtime.measures.IntHours Extensions for io.islandtime.measures.IntHours Name Summary toJavaDuration Convert to an equivalent Java Duration . fun IntHours.toJavaDuration(): Duration","title":"Index"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.measures.-int-hours/#extensions-for-ioislandtimemeasuresinthours","text":"Name Summary toJavaDuration Convert to an equivalent Java Duration . fun IntHours.toJavaDuration(): Duration","title":"Extensions for io.islandtime.measures.IntHours"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.measures.-int-hours/to-java-duration/","text":"threetenabp / io.islandtime.extensions.threetenabp / io.islandtime.measures.IntHours / toJavaDuration toJavaDuration fun IntHours.toJavaDuration(): Duration Convert to an equivalent Java Duration .","title":"To java duration"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.measures.-int-hours/to-java-duration/#tojavaduration","text":"fun IntHours.toJavaDuration(): Duration Convert to an equivalent Java Duration .","title":"toJavaDuration"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.measures.-int-microseconds/","text":"threetenabp / io.islandtime.extensions.threetenabp / io.islandtime.measures.IntMicroseconds Extensions for io.islandtime.measures.IntMicroseconds Name Summary toJavaDuration Convert to an equivalent Java Duration . fun IntMicroseconds.toJavaDuration(): Duration","title":"Index"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.measures.-int-microseconds/#extensions-for-ioislandtimemeasuresintmicroseconds","text":"Name Summary toJavaDuration Convert to an equivalent Java Duration . fun IntMicroseconds.toJavaDuration(): Duration","title":"Extensions for io.islandtime.measures.IntMicroseconds"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.measures.-int-microseconds/to-java-duration/","text":"threetenabp / io.islandtime.extensions.threetenabp / io.islandtime.measures.IntMicroseconds / toJavaDuration toJavaDuration fun IntMicroseconds.toJavaDuration(): Duration Convert to an equivalent Java Duration .","title":"To java duration"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.measures.-int-microseconds/to-java-duration/#tojavaduration","text":"fun IntMicroseconds.toJavaDuration(): Duration Convert to an equivalent Java Duration .","title":"toJavaDuration"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.measures.-int-milliseconds/","text":"threetenabp / io.islandtime.extensions.threetenabp / io.islandtime.measures.IntMilliseconds Extensions for io.islandtime.measures.IntMilliseconds Name Summary toJavaDuration Convert to an equivalent Java Duration . fun IntMilliseconds.toJavaDuration(): Duration","title":"Index"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.measures.-int-milliseconds/#extensions-for-ioislandtimemeasuresintmilliseconds","text":"Name Summary toJavaDuration Convert to an equivalent Java Duration . fun IntMilliseconds.toJavaDuration(): Duration","title":"Extensions for io.islandtime.measures.IntMilliseconds"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.measures.-int-milliseconds/to-java-duration/","text":"threetenabp / io.islandtime.extensions.threetenabp / io.islandtime.measures.IntMilliseconds / toJavaDuration toJavaDuration fun IntMilliseconds.toJavaDuration(): Duration Convert to an equivalent Java Duration .","title":"To java duration"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.measures.-int-milliseconds/to-java-duration/#tojavaduration","text":"fun IntMilliseconds.toJavaDuration(): Duration Convert to an equivalent Java Duration .","title":"toJavaDuration"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.measures.-int-minutes/","text":"threetenabp / io.islandtime.extensions.threetenabp / io.islandtime.measures.IntMinutes Extensions for io.islandtime.measures.IntMinutes Name Summary toJavaDuration Convert to an equivalent Java Duration . fun IntMinutes.toJavaDuration(): Duration","title":"Index"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.measures.-int-minutes/#extensions-for-ioislandtimemeasuresintminutes","text":"Name Summary toJavaDuration Convert to an equivalent Java Duration . fun IntMinutes.toJavaDuration(): Duration","title":"Extensions for io.islandtime.measures.IntMinutes"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.measures.-int-minutes/to-java-duration/","text":"threetenabp / io.islandtime.extensions.threetenabp / io.islandtime.measures.IntMinutes / toJavaDuration toJavaDuration fun IntMinutes.toJavaDuration(): Duration Convert to an equivalent Java Duration .","title":"To java duration"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.measures.-int-minutes/to-java-duration/#tojavaduration","text":"fun IntMinutes.toJavaDuration(): Duration Convert to an equivalent Java Duration .","title":"toJavaDuration"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.measures.-int-months/","text":"threetenabp / io.islandtime.extensions.threetenabp / io.islandtime.measures.IntMonths Extensions for io.islandtime.measures.IntMonths Name Summary toJavaPeriod Convert to an equivalent Java Period . fun IntMonths.toJavaPeriod(): Period","title":"Index"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.measures.-int-months/#extensions-for-ioislandtimemeasuresintmonths","text":"Name Summary toJavaPeriod Convert to an equivalent Java Period . fun IntMonths.toJavaPeriod(): Period","title":"Extensions for io.islandtime.measures.IntMonths"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.measures.-int-months/to-java-period/","text":"threetenabp / io.islandtime.extensions.threetenabp / io.islandtime.measures.IntMonths / toJavaPeriod toJavaPeriod fun IntMonths.toJavaPeriod(): Period Convert to an equivalent Java Period .","title":"To java period"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.measures.-int-months/to-java-period/#tojavaperiod","text":"fun IntMonths.toJavaPeriod(): Period Convert to an equivalent Java Period .","title":"toJavaPeriod"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.measures.-int-nanoseconds/","text":"threetenabp / io.islandtime.extensions.threetenabp / io.islandtime.measures.IntNanoseconds Extensions for io.islandtime.measures.IntNanoseconds Name Summary toJavaDuration Convert to an equivalent Java Duration . fun IntNanoseconds.toJavaDuration(): Duration","title":"Index"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.measures.-int-nanoseconds/#extensions-for-ioislandtimemeasuresintnanoseconds","text":"Name Summary toJavaDuration Convert to an equivalent Java Duration . fun IntNanoseconds.toJavaDuration(): Duration","title":"Extensions for io.islandtime.measures.IntNanoseconds"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.measures.-int-nanoseconds/to-java-duration/","text":"threetenabp / io.islandtime.extensions.threetenabp / io.islandtime.measures.IntNanoseconds / toJavaDuration toJavaDuration fun IntNanoseconds.toJavaDuration(): Duration Convert to an equivalent Java Duration .","title":"To java duration"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.measures.-int-nanoseconds/to-java-duration/#tojavaduration","text":"fun IntNanoseconds.toJavaDuration(): Duration Convert to an equivalent Java Duration .","title":"toJavaDuration"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.measures.-int-seconds/","text":"threetenabp / io.islandtime.extensions.threetenabp / io.islandtime.measures.IntSeconds Extensions for io.islandtime.measures.IntSeconds Name Summary toJavaDuration Convert to an equivalent Java Duration . fun IntSeconds.toJavaDuration(): Duration","title":"Index"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.measures.-int-seconds/#extensions-for-ioislandtimemeasuresintseconds","text":"Name Summary toJavaDuration Convert to an equivalent Java Duration . fun IntSeconds.toJavaDuration(): Duration","title":"Extensions for io.islandtime.measures.IntSeconds"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.measures.-int-seconds/to-java-duration/","text":"threetenabp / io.islandtime.extensions.threetenabp / io.islandtime.measures.IntSeconds / toJavaDuration toJavaDuration fun IntSeconds.toJavaDuration(): Duration Convert to an equivalent Java Duration .","title":"To java duration"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.measures.-int-seconds/to-java-duration/#tojavaduration","text":"fun IntSeconds.toJavaDuration(): Duration Convert to an equivalent Java Duration .","title":"toJavaDuration"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.measures.-int-weeks/","text":"threetenabp / io.islandtime.extensions.threetenabp / io.islandtime.measures.IntWeeks Extensions for io.islandtime.measures.IntWeeks Name Summary toJavaPeriod Convert to an equivalent Java Period . fun IntWeeks.toJavaPeriod(): Period","title":"Index"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.measures.-int-weeks/#extensions-for-ioislandtimemeasuresintweeks","text":"Name Summary toJavaPeriod Convert to an equivalent Java Period . fun IntWeeks.toJavaPeriod(): Period","title":"Extensions for io.islandtime.measures.IntWeeks"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.measures.-int-weeks/to-java-period/","text":"threetenabp / io.islandtime.extensions.threetenabp / io.islandtime.measures.IntWeeks / toJavaPeriod toJavaPeriod fun IntWeeks.toJavaPeriod(): Period Convert to an equivalent Java Period .","title":"To java period"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.measures.-int-weeks/to-java-period/#tojavaperiod","text":"fun IntWeeks.toJavaPeriod(): Period Convert to an equivalent Java Period .","title":"toJavaPeriod"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.measures.-int-years/","text":"threetenabp / io.islandtime.extensions.threetenabp / io.islandtime.measures.IntYears Extensions for io.islandtime.measures.IntYears Name Summary toJavaPeriod Convert to an equivalent Java Period . fun IntYears.toJavaPeriod(): Period","title":"Index"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.measures.-int-years/#extensions-for-ioislandtimemeasuresintyears","text":"Name Summary toJavaPeriod Convert to an equivalent Java Period . fun IntYears.toJavaPeriod(): Period","title":"Extensions for io.islandtime.measures.IntYears"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.measures.-int-years/to-java-period/","text":"threetenabp / io.islandtime.extensions.threetenabp / io.islandtime.measures.IntYears / toJavaPeriod toJavaPeriod fun IntYears.toJavaPeriod(): Period Convert to an equivalent Java Period .","title":"To java period"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.measures.-int-years/to-java-period/#tojavaperiod","text":"fun IntYears.toJavaPeriod(): Period Convert to an equivalent Java Period .","title":"toJavaPeriod"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.measures.-long-centuries/","text":"threetenabp / io.islandtime.extensions.threetenabp / io.islandtime.measures.LongCenturies Extensions for io.islandtime.measures.LongCenturies Name Summary toJavaPeriod Convert to an equivalent Java Period . fun LongCenturies.toJavaPeriod(): Period","title":"Index"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.measures.-long-centuries/#extensions-for-ioislandtimemeasureslongcenturies","text":"Name Summary toJavaPeriod Convert to an equivalent Java Period . fun LongCenturies.toJavaPeriod(): Period","title":"Extensions for io.islandtime.measures.LongCenturies"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.measures.-long-centuries/to-java-period/","text":"threetenabp / io.islandtime.extensions.threetenabp / io.islandtime.measures.LongCenturies / toJavaPeriod toJavaPeriod fun LongCenturies.toJavaPeriod(): Period Convert to an equivalent Java Period .","title":"To java period"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.measures.-long-centuries/to-java-period/#tojavaperiod","text":"fun LongCenturies.toJavaPeriod(): Period Convert to an equivalent Java Period .","title":"toJavaPeriod"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.measures.-long-days/","text":"threetenabp / io.islandtime.extensions.threetenabp / io.islandtime.measures.LongDays Extensions for io.islandtime.measures.LongDays Name Summary toJavaDuration Convert to an equivalent Java Duration . fun LongDays.toJavaDuration(): Duration toJavaPeriod Convert to an equivalent Java Period . fun LongDays.toJavaPeriod(): Period","title":"Index"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.measures.-long-days/#extensions-for-ioislandtimemeasureslongdays","text":"Name Summary toJavaDuration Convert to an equivalent Java Duration . fun LongDays.toJavaDuration(): Duration toJavaPeriod Convert to an equivalent Java Period . fun LongDays.toJavaPeriod(): Period","title":"Extensions for io.islandtime.measures.LongDays"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.measures.-long-days/to-java-duration/","text":"threetenabp / io.islandtime.extensions.threetenabp / io.islandtime.measures.LongDays / toJavaDuration toJavaDuration fun LongDays.toJavaDuration(): Duration Convert to an equivalent Java Duration .","title":"To java duration"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.measures.-long-days/to-java-duration/#tojavaduration","text":"fun LongDays.toJavaDuration(): Duration Convert to an equivalent Java Duration .","title":"toJavaDuration"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.measures.-long-days/to-java-period/","text":"threetenabp / io.islandtime.extensions.threetenabp / io.islandtime.measures.LongDays / toJavaPeriod toJavaPeriod fun LongDays.toJavaPeriod(): Period Convert to an equivalent Java Period .","title":"To java period"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.measures.-long-days/to-java-period/#tojavaperiod","text":"fun LongDays.toJavaPeriod(): Period Convert to an equivalent Java Period .","title":"toJavaPeriod"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.measures.-long-decades/","text":"threetenabp / io.islandtime.extensions.threetenabp / io.islandtime.measures.LongDecades Extensions for io.islandtime.measures.LongDecades Name Summary toJavaPeriod Convert to an equivalent Java Period . fun LongDecades.toJavaPeriod(): Period","title":"Index"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.measures.-long-decades/#extensions-for-ioislandtimemeasureslongdecades","text":"Name Summary toJavaPeriod Convert to an equivalent Java Period . fun LongDecades.toJavaPeriod(): Period","title":"Extensions for io.islandtime.measures.LongDecades"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.measures.-long-decades/to-java-period/","text":"threetenabp / io.islandtime.extensions.threetenabp / io.islandtime.measures.LongDecades / toJavaPeriod toJavaPeriod fun LongDecades.toJavaPeriod(): Period Convert to an equivalent Java Period .","title":"To java period"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.measures.-long-decades/to-java-period/#tojavaperiod","text":"fun LongDecades.toJavaPeriod(): Period Convert to an equivalent Java Period .","title":"toJavaPeriod"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.measures.-long-hours/","text":"threetenabp / io.islandtime.extensions.threetenabp / io.islandtime.measures.LongHours Extensions for io.islandtime.measures.LongHours Name Summary toJavaDuration Convert to an equivalent Java Duration . fun LongHours.toJavaDuration(): Duration","title":"Index"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.measures.-long-hours/#extensions-for-ioislandtimemeasureslonghours","text":"Name Summary toJavaDuration Convert to an equivalent Java Duration . fun LongHours.toJavaDuration(): Duration","title":"Extensions for io.islandtime.measures.LongHours"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.measures.-long-hours/to-java-duration/","text":"threetenabp / io.islandtime.extensions.threetenabp / io.islandtime.measures.LongHours / toJavaDuration toJavaDuration fun LongHours.toJavaDuration(): Duration Convert to an equivalent Java Duration .","title":"To java duration"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.measures.-long-hours/to-java-duration/#tojavaduration","text":"fun LongHours.toJavaDuration(): Duration Convert to an equivalent Java Duration .","title":"toJavaDuration"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.measures.-long-microseconds/","text":"threetenabp / io.islandtime.extensions.threetenabp / io.islandtime.measures.LongMicroseconds Extensions for io.islandtime.measures.LongMicroseconds Name Summary toJavaDuration Convert to an equivalent Java Duration . fun LongMicroseconds.toJavaDuration(): Duration","title":"Index"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.measures.-long-microseconds/#extensions-for-ioislandtimemeasureslongmicroseconds","text":"Name Summary toJavaDuration Convert to an equivalent Java Duration . fun LongMicroseconds.toJavaDuration(): Duration","title":"Extensions for io.islandtime.measures.LongMicroseconds"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.measures.-long-microseconds/to-java-duration/","text":"threetenabp / io.islandtime.extensions.threetenabp / io.islandtime.measures.LongMicroseconds / toJavaDuration toJavaDuration fun LongMicroseconds.toJavaDuration(): Duration Convert to an equivalent Java Duration .","title":"To java duration"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.measures.-long-microseconds/to-java-duration/#tojavaduration","text":"fun LongMicroseconds.toJavaDuration(): Duration Convert to an equivalent Java Duration .","title":"toJavaDuration"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.measures.-long-milliseconds/","text":"threetenabp / io.islandtime.extensions.threetenabp / io.islandtime.measures.LongMilliseconds Extensions for io.islandtime.measures.LongMilliseconds Name Summary toJavaDuration Convert to an equivalent Java Duration . fun LongMilliseconds.toJavaDuration(): Duration","title":"Index"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.measures.-long-milliseconds/#extensions-for-ioislandtimemeasureslongmilliseconds","text":"Name Summary toJavaDuration Convert to an equivalent Java Duration . fun LongMilliseconds.toJavaDuration(): Duration","title":"Extensions for io.islandtime.measures.LongMilliseconds"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.measures.-long-milliseconds/to-java-duration/","text":"threetenabp / io.islandtime.extensions.threetenabp / io.islandtime.measures.LongMilliseconds / toJavaDuration toJavaDuration fun LongMilliseconds.toJavaDuration(): Duration Convert to an equivalent Java Duration .","title":"To java duration"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.measures.-long-milliseconds/to-java-duration/#tojavaduration","text":"fun LongMilliseconds.toJavaDuration(): Duration Convert to an equivalent Java Duration .","title":"toJavaDuration"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.measures.-long-minutes/","text":"threetenabp / io.islandtime.extensions.threetenabp / io.islandtime.measures.LongMinutes Extensions for io.islandtime.measures.LongMinutes Name Summary toJavaDuration Convert to an equivalent Java Duration . fun LongMinutes.toJavaDuration(): Duration","title":"Index"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.measures.-long-minutes/#extensions-for-ioislandtimemeasureslongminutes","text":"Name Summary toJavaDuration Convert to an equivalent Java Duration . fun LongMinutes.toJavaDuration(): Duration","title":"Extensions for io.islandtime.measures.LongMinutes"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.measures.-long-minutes/to-java-duration/","text":"threetenabp / io.islandtime.extensions.threetenabp / io.islandtime.measures.LongMinutes / toJavaDuration toJavaDuration fun LongMinutes.toJavaDuration(): Duration Convert to an equivalent Java Duration .","title":"To java duration"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.measures.-long-minutes/to-java-duration/#tojavaduration","text":"fun LongMinutes.toJavaDuration(): Duration Convert to an equivalent Java Duration .","title":"toJavaDuration"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.measures.-long-months/","text":"threetenabp / io.islandtime.extensions.threetenabp / io.islandtime.measures.LongMonths Extensions for io.islandtime.measures.LongMonths Name Summary toJavaPeriod Convert to an equivalent Java Period . fun LongMonths.toJavaPeriod(): Period","title":"Index"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.measures.-long-months/#extensions-for-ioislandtimemeasureslongmonths","text":"Name Summary toJavaPeriod Convert to an equivalent Java Period . fun LongMonths.toJavaPeriod(): Period","title":"Extensions for io.islandtime.measures.LongMonths"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.measures.-long-months/to-java-period/","text":"threetenabp / io.islandtime.extensions.threetenabp / io.islandtime.measures.LongMonths / toJavaPeriod toJavaPeriod fun LongMonths.toJavaPeriod(): Period Convert to an equivalent Java Period .","title":"To java period"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.measures.-long-months/to-java-period/#tojavaperiod","text":"fun LongMonths.toJavaPeriod(): Period Convert to an equivalent Java Period .","title":"toJavaPeriod"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.measures.-long-nanoseconds/","text":"threetenabp / io.islandtime.extensions.threetenabp / io.islandtime.measures.LongNanoseconds Extensions for io.islandtime.measures.LongNanoseconds Name Summary toJavaDuration Convert to an equivalent Java Duration . fun LongNanoseconds.toJavaDuration(): Duration","title":"Index"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.measures.-long-nanoseconds/#extensions-for-ioislandtimemeasureslongnanoseconds","text":"Name Summary toJavaDuration Convert to an equivalent Java Duration . fun LongNanoseconds.toJavaDuration(): Duration","title":"Extensions for io.islandtime.measures.LongNanoseconds"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.measures.-long-nanoseconds/to-java-duration/","text":"threetenabp / io.islandtime.extensions.threetenabp / io.islandtime.measures.LongNanoseconds / toJavaDuration toJavaDuration fun LongNanoseconds.toJavaDuration(): Duration Convert to an equivalent Java Duration .","title":"To java duration"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.measures.-long-nanoseconds/to-java-duration/#tojavaduration","text":"fun LongNanoseconds.toJavaDuration(): Duration Convert to an equivalent Java Duration .","title":"toJavaDuration"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.measures.-long-seconds/","text":"threetenabp / io.islandtime.extensions.threetenabp / io.islandtime.measures.LongSeconds Extensions for io.islandtime.measures.LongSeconds Name Summary toJavaDuration Convert to an equivalent Java Duration . fun LongSeconds.toJavaDuration(): Duration","title":"Index"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.measures.-long-seconds/#extensions-for-ioislandtimemeasureslongseconds","text":"Name Summary toJavaDuration Convert to an equivalent Java Duration . fun LongSeconds.toJavaDuration(): Duration","title":"Extensions for io.islandtime.measures.LongSeconds"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.measures.-long-seconds/to-java-duration/","text":"threetenabp / io.islandtime.extensions.threetenabp / io.islandtime.measures.LongSeconds / toJavaDuration toJavaDuration fun LongSeconds.toJavaDuration(): Duration Convert to an equivalent Java Duration .","title":"To java duration"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.measures.-long-seconds/to-java-duration/#tojavaduration","text":"fun LongSeconds.toJavaDuration(): Duration Convert to an equivalent Java Duration .","title":"toJavaDuration"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.measures.-long-weeks/","text":"threetenabp / io.islandtime.extensions.threetenabp / io.islandtime.measures.LongWeeks Extensions for io.islandtime.measures.LongWeeks Name Summary toJavaPeriod Convert to an equivalent Java Period . fun LongWeeks.toJavaPeriod(): Period","title":"Index"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.measures.-long-weeks/#extensions-for-ioislandtimemeasureslongweeks","text":"Name Summary toJavaPeriod Convert to an equivalent Java Period . fun LongWeeks.toJavaPeriod(): Period","title":"Extensions for io.islandtime.measures.LongWeeks"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.measures.-long-weeks/to-java-period/","text":"threetenabp / io.islandtime.extensions.threetenabp / io.islandtime.measures.LongWeeks / toJavaPeriod toJavaPeriod fun LongWeeks.toJavaPeriod(): Period Convert to an equivalent Java Period .","title":"To java period"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.measures.-long-weeks/to-java-period/#tojavaperiod","text":"fun LongWeeks.toJavaPeriod(): Period Convert to an equivalent Java Period .","title":"toJavaPeriod"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.measures.-long-years/","text":"threetenabp / io.islandtime.extensions.threetenabp / io.islandtime.measures.LongYears Extensions for io.islandtime.measures.LongYears Name Summary toJavaPeriod Convert to an equivalent Java Period . fun LongYears.toJavaPeriod(): Period","title":"Index"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.measures.-long-years/#extensions-for-ioislandtimemeasureslongyears","text":"Name Summary toJavaPeriod Convert to an equivalent Java Period . fun LongYears.toJavaPeriod(): Period","title":"Extensions for io.islandtime.measures.LongYears"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.measures.-long-years/to-java-period/","text":"threetenabp / io.islandtime.extensions.threetenabp / io.islandtime.measures.LongYears / toJavaPeriod toJavaPeriod fun LongYears.toJavaPeriod(): Period Convert to an equivalent Java Period .","title":"To java period"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.measures.-long-years/to-java-period/#tojavaperiod","text":"fun LongYears.toJavaPeriod(): Period Convert to an equivalent Java Period .","title":"toJavaPeriod"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.measures.-period/","text":"threetenabp / io.islandtime.extensions.threetenabp / io.islandtime.measures.Period Extensions for io.islandtime.measures.Period Name Summary toJavaPeriod Convert to an equivalent Java Period . fun Period.toJavaPeriod(): Period","title":"Index"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.measures.-period/#extensions-for-ioislandtimemeasuresperiod","text":"Name Summary toJavaPeriod Convert to an equivalent Java Period . fun Period.toJavaPeriod(): Period","title":"Extensions for io.islandtime.measures.Period"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.measures.-period/to-java-period/","text":"threetenabp / io.islandtime.extensions.threetenabp / io.islandtime.measures.Period / toJavaPeriod toJavaPeriod fun Period.toJavaPeriod(): Period Convert to an equivalent Java Period .","title":"To java period"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/io.islandtime.measures.-period/to-java-period/#tojavaperiod","text":"fun Period.toJavaPeriod(): Period Convert to an equivalent Java Period .","title":"toJavaPeriod"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/org.threeten.bp.-duration/","text":"threetenabp / io.islandtime.extensions.threetenabp / org.threeten.bp.Duration Extensions for org.threeten.bp.Duration Name Summary toIslandDuration Convert to an equivalent Island Time Duration . fun Duration.toIslandDuration(): Duration","title":"Index"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/org.threeten.bp.-duration/#extensions-for-orgthreetenbpduration","text":"Name Summary toIslandDuration Convert to an equivalent Island Time Duration . fun Duration.toIslandDuration(): Duration","title":"Extensions for org.threeten.bp.Duration"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/org.threeten.bp.-duration/to-island-duration/","text":"threetenabp / io.islandtime.extensions.threetenabp / org.threeten.bp.Duration / toIslandDuration toIslandDuration fun Duration.toIslandDuration(): Duration Convert to an equivalent Island Time Duration .","title":"To island duration"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/org.threeten.bp.-duration/to-island-duration/#toislandduration","text":"fun Duration.toIslandDuration(): Duration Convert to an equivalent Island Time Duration .","title":"toIslandDuration"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/org.threeten.bp.-instant/","text":"threetenabp / io.islandtime.extensions.threetenabp / org.threeten.bp.Instant Extensions for org.threeten.bp.Instant Name Summary toIslandInstant Convert to an equivalent Island Time Instant . fun Instant.toIslandInstant(): Instant","title":"Index"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/org.threeten.bp.-instant/#extensions-for-orgthreetenbpinstant","text":"Name Summary toIslandInstant Convert to an equivalent Island Time Instant . fun Instant.toIslandInstant(): Instant","title":"Extensions for org.threeten.bp.Instant"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/org.threeten.bp.-instant/to-island-instant/","text":"threetenabp / io.islandtime.extensions.threetenabp / org.threeten.bp.Instant / toIslandInstant toIslandInstant fun Instant.toIslandInstant(): Instant Convert to an equivalent Island Time Instant .","title":"To island instant"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/org.threeten.bp.-instant/to-island-instant/#toislandinstant","text":"fun Instant.toIslandInstant(): Instant Convert to an equivalent Island Time Instant .","title":"toIslandInstant"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/org.threeten.bp.-local-date/","text":"threetenabp / io.islandtime.extensions.threetenabp / org.threeten.bp.LocalDate Extensions for org.threeten.bp.LocalDate Name Summary toIslandDate Convert to an equivalent Island Time Date . fun LocalDate.toIslandDate(): Date","title":"Index"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/org.threeten.bp.-local-date/#extensions-for-orgthreetenbplocaldate","text":"Name Summary toIslandDate Convert to an equivalent Island Time Date . fun LocalDate.toIslandDate(): Date","title":"Extensions for org.threeten.bp.LocalDate"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/org.threeten.bp.-local-date/to-island-date/","text":"threetenabp / io.islandtime.extensions.threetenabp / org.threeten.bp.LocalDate / toIslandDate toIslandDate fun LocalDate.toIslandDate(): Date Convert to an equivalent Island Time Date .","title":"To island date"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/org.threeten.bp.-local-date/to-island-date/#toislanddate","text":"fun LocalDate.toIslandDate(): Date Convert to an equivalent Island Time Date .","title":"toIslandDate"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/org.threeten.bp.-local-date-time/","text":"threetenabp / io.islandtime.extensions.threetenabp / org.threeten.bp.LocalDateTime Extensions for org.threeten.bp.LocalDateTime Name Summary toIslandDateTime Convert to an equivalent Island Time DateTime . fun LocalDateTime.toIslandDateTime(): DateTime","title":"Index"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/org.threeten.bp.-local-date-time/#extensions-for-orgthreetenbplocaldatetime","text":"Name Summary toIslandDateTime Convert to an equivalent Island Time DateTime . fun LocalDateTime.toIslandDateTime(): DateTime","title":"Extensions for org.threeten.bp.LocalDateTime"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/org.threeten.bp.-local-date-time/to-island-date-time/","text":"threetenabp / io.islandtime.extensions.threetenabp / org.threeten.bp.LocalDateTime / toIslandDateTime toIslandDateTime fun LocalDateTime.toIslandDateTime(): DateTime Convert to an equivalent Island Time DateTime .","title":"To island date time"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/org.threeten.bp.-local-date-time/to-island-date-time/#toislanddatetime","text":"fun LocalDateTime.toIslandDateTime(): DateTime Convert to an equivalent Island Time DateTime .","title":"toIslandDateTime"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/org.threeten.bp.-local-time/","text":"threetenabp / io.islandtime.extensions.threetenabp / org.threeten.bp.LocalTime Extensions for org.threeten.bp.LocalTime Name Summary toIslandTime Convert to an equivalent Island Time Time . fun LocalTime.toIslandTime(): Time","title":"Index"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/org.threeten.bp.-local-time/#extensions-for-orgthreetenbplocaltime","text":"Name Summary toIslandTime Convert to an equivalent Island Time Time . fun LocalTime.toIslandTime(): Time","title":"Extensions for org.threeten.bp.LocalTime"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/org.threeten.bp.-local-time/to-island-time/","text":"threetenabp / io.islandtime.extensions.threetenabp / org.threeten.bp.LocalTime / toIslandTime toIslandTime fun LocalTime.toIslandTime(): Time Convert to an equivalent Island Time Time .","title":"To island time"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/org.threeten.bp.-local-time/to-island-time/#toislandtime","text":"fun LocalTime.toIslandTime(): Time Convert to an equivalent Island Time Time .","title":"toIslandTime"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/org.threeten.bp.-offset-date-time/","text":"threetenabp / io.islandtime.extensions.threetenabp / org.threeten.bp.OffsetDateTime Extensions for org.threeten.bp.OffsetDateTime Name Summary toIslandOffsetDateTime Convert to an equivalent Island Time OffsetDateTime . fun OffsetDateTime.toIslandOffsetDateTime(): OffsetDateTime","title":"Index"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/org.threeten.bp.-offset-date-time/#extensions-for-orgthreetenbpoffsetdatetime","text":"Name Summary toIslandOffsetDateTime Convert to an equivalent Island Time OffsetDateTime . fun OffsetDateTime.toIslandOffsetDateTime(): OffsetDateTime","title":"Extensions for org.threeten.bp.OffsetDateTime"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/org.threeten.bp.-offset-date-time/to-island-offset-date-time/","text":"threetenabp / io.islandtime.extensions.threetenabp / org.threeten.bp.OffsetDateTime / toIslandOffsetDateTime toIslandOffsetDateTime fun OffsetDateTime.toIslandOffsetDateTime(): OffsetDateTime Convert to an equivalent Island Time OffsetDateTime .","title":"To island offset date time"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/org.threeten.bp.-offset-date-time/to-island-offset-date-time/#toislandoffsetdatetime","text":"fun OffsetDateTime.toIslandOffsetDateTime(): OffsetDateTime Convert to an equivalent Island Time OffsetDateTime .","title":"toIslandOffsetDateTime"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/org.threeten.bp.-offset-time/","text":"threetenabp / io.islandtime.extensions.threetenabp / org.threeten.bp.OffsetTime Extensions for org.threeten.bp.OffsetTime Name Summary toIslandOffsetTime Convert to an equivalent Island Time OffsetTime . fun OffsetTime.toIslandOffsetTime(): OffsetTime","title":"Index"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/org.threeten.bp.-offset-time/#extensions-for-orgthreetenbpoffsettime","text":"Name Summary toIslandOffsetTime Convert to an equivalent Island Time OffsetTime . fun OffsetTime.toIslandOffsetTime(): OffsetTime","title":"Extensions for org.threeten.bp.OffsetTime"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/org.threeten.bp.-offset-time/to-island-offset-time/","text":"threetenabp / io.islandtime.extensions.threetenabp / org.threeten.bp.OffsetTime / toIslandOffsetTime toIslandOffsetTime fun OffsetTime.toIslandOffsetTime(): OffsetTime Convert to an equivalent Island Time OffsetTime .","title":"To island offset time"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/org.threeten.bp.-offset-time/to-island-offset-time/#toislandoffsettime","text":"fun OffsetTime.toIslandOffsetTime(): OffsetTime Convert to an equivalent Island Time OffsetTime .","title":"toIslandOffsetTime"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/org.threeten.bp.-period/","text":"threetenabp / io.islandtime.extensions.threetenabp / org.threeten.bp.Period Extensions for org.threeten.bp.Period Name Summary toIslandPeriod Convert to an equivalent Island Time Period . fun Period.toIslandPeriod(): Period","title":"Index"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/org.threeten.bp.-period/#extensions-for-orgthreetenbpperiod","text":"Name Summary toIslandPeriod Convert to an equivalent Island Time Period . fun Period.toIslandPeriod(): Period","title":"Extensions for org.threeten.bp.Period"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/org.threeten.bp.-period/to-island-period/","text":"threetenabp / io.islandtime.extensions.threetenabp / org.threeten.bp.Period / toIslandPeriod toIslandPeriod fun Period.toIslandPeriod(): Period Convert to an equivalent Island Time Period .","title":"To island period"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/org.threeten.bp.-period/to-island-period/#toislandperiod","text":"fun Period.toIslandPeriod(): Period Convert to an equivalent Island Time Period .","title":"toIslandPeriod"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/org.threeten.bp.-year/","text":"threetenabp / io.islandtime.extensions.threetenabp / org.threeten.bp.Year Extensions for org.threeten.bp.Year Name Summary toIslandYear Convert to an equivalent Island Time Year . fun Year.toIslandYear(): Year","title":"Index"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/org.threeten.bp.-year/#extensions-for-orgthreetenbpyear","text":"Name Summary toIslandYear Convert to an equivalent Island Time Year . fun Year.toIslandYear(): Year","title":"Extensions for org.threeten.bp.Year"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/org.threeten.bp.-year/to-island-year/","text":"threetenabp / io.islandtime.extensions.threetenabp / org.threeten.bp.Year / toIslandYear toIslandYear fun Year.toIslandYear(): Year Convert to an equivalent Island Time Year .","title":"To island year"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/org.threeten.bp.-year/to-island-year/#toislandyear","text":"fun Year.toIslandYear(): Year Convert to an equivalent Island Time Year .","title":"toIslandYear"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/org.threeten.bp.-year-month/","text":"threetenabp / io.islandtime.extensions.threetenabp / org.threeten.bp.YearMonth Extensions for org.threeten.bp.YearMonth Name Summary toIslandYearMonth Convert to an equivalent Island Time YearMonth . fun YearMonth.toIslandYearMonth(): YearMonth","title":"Index"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/org.threeten.bp.-year-month/#extensions-for-orgthreetenbpyearmonth","text":"Name Summary toIslandYearMonth Convert to an equivalent Island Time YearMonth . fun YearMonth.toIslandYearMonth(): YearMonth","title":"Extensions for org.threeten.bp.YearMonth"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/org.threeten.bp.-year-month/to-island-year-month/","text":"threetenabp / io.islandtime.extensions.threetenabp / org.threeten.bp.YearMonth / toIslandYearMonth toIslandYearMonth fun YearMonth.toIslandYearMonth(): YearMonth Convert to an equivalent Island Time YearMonth .","title":"To island year month"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/org.threeten.bp.-year-month/to-island-year-month/#toislandyearmonth","text":"fun YearMonth.toIslandYearMonth(): YearMonth Convert to an equivalent Island Time YearMonth .","title":"toIslandYearMonth"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/org.threeten.bp.-zone-id/","text":"threetenabp / io.islandtime.extensions.threetenabp / org.threeten.bp.ZoneId Extensions for org.threeten.bp.ZoneId Name Summary toIslandTimeZone Convert to an equivalent Island Time TimeZone . fun ZoneId.toIslandTimeZone(): TimeZone","title":"Index"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/org.threeten.bp.-zone-id/#extensions-for-orgthreetenbpzoneid","text":"Name Summary toIslandTimeZone Convert to an equivalent Island Time TimeZone . fun ZoneId.toIslandTimeZone(): TimeZone","title":"Extensions for org.threeten.bp.ZoneId"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/org.threeten.bp.-zone-id/to-island-time-zone/","text":"threetenabp / io.islandtime.extensions.threetenabp / org.threeten.bp.ZoneId / toIslandTimeZone toIslandTimeZone fun ZoneId.toIslandTimeZone(): TimeZone Convert to an equivalent Island Time TimeZone .","title":"To island time zone"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/org.threeten.bp.-zone-id/to-island-time-zone/#toislandtimezone","text":"fun ZoneId.toIslandTimeZone(): TimeZone Convert to an equivalent Island Time TimeZone .","title":"toIslandTimeZone"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/org.threeten.bp.-zone-offset/","text":"threetenabp / io.islandtime.extensions.threetenabp / org.threeten.bp.ZoneOffset Extensions for org.threeten.bp.ZoneOffset Name Summary toIslandUtcOffset Convert to an equivalent Island Time UtcOffset . fun ZoneOffset.toIslandUtcOffset(): UtcOffset","title":"Index"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/org.threeten.bp.-zone-offset/#extensions-for-orgthreetenbpzoneoffset","text":"Name Summary toIslandUtcOffset Convert to an equivalent Island Time UtcOffset . fun ZoneOffset.toIslandUtcOffset(): UtcOffset","title":"Extensions for org.threeten.bp.ZoneOffset"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/org.threeten.bp.-zone-offset/to-island-utc-offset/","text":"threetenabp / io.islandtime.extensions.threetenabp / org.threeten.bp.ZoneOffset / toIslandUtcOffset toIslandUtcOffset fun ZoneOffset.toIslandUtcOffset(): UtcOffset Convert to an equivalent Island Time UtcOffset .","title":"To island utc offset"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/org.threeten.bp.-zone-offset/to-island-utc-offset/#toislandutcoffset","text":"fun ZoneOffset.toIslandUtcOffset(): UtcOffset Convert to an equivalent Island Time UtcOffset .","title":"toIslandUtcOffset"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/org.threeten.bp.-zoned-date-time/","text":"threetenabp / io.islandtime.extensions.threetenabp / org.threeten.bp.ZonedDateTime Extensions for org.threeten.bp.ZonedDateTime Name Summary toIslandZonedDateTime Convert to an equivalent Island Time ZonedDateTime . fun ZonedDateTime.toIslandZonedDateTime(): ZonedDateTime","title":"Index"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/org.threeten.bp.-zoned-date-time/#extensions-for-orgthreetenbpzoneddatetime","text":"Name Summary toIslandZonedDateTime Convert to an equivalent Island Time ZonedDateTime . fun ZonedDateTime.toIslandZonedDateTime(): ZonedDateTime","title":"Extensions for org.threeten.bp.ZonedDateTime"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/org.threeten.bp.-zoned-date-time/to-island-zoned-date-time/","text":"threetenabp / io.islandtime.extensions.threetenabp / org.threeten.bp.ZonedDateTime / toIslandZonedDateTime toIslandZonedDateTime fun ZonedDateTime.toIslandZonedDateTime(): ZonedDateTime Convert to an equivalent Island Time ZonedDateTime .","title":"To island zoned date time"},{"location":"api/threetenabp/io.islandtime.extensions.threetenabp/org.threeten.bp.-zoned-date-time/to-island-zoned-date-time/#toislandzoneddatetime","text":"fun ZonedDateTime.toIslandZonedDateTime(): ZonedDateTime Convert to an equivalent Island Time ZonedDateTime .","title":"toIslandZonedDateTime"},{"location":"basics/dates-and-times/","text":"Dates and Times Island Time has a wide array of different date-time classes, each tailored to its own set of use cases. These classes model the date and timekeeping system defined in ISO-8601 , the international standard for the exchange of dates and times. The ISO standard applies the present-day Gregorian calendar proleptically , which is to say, even to the time period before it was adopted . Date Representations Class Precision Example ISO Representation Date day 2020-02-15 YearMonth month 2020-02 Year year 2020 The Date class represents a date in an ambiguous region. It could be in New York City. It could be in Tokyo. The instants in time that define the start and end of a Date can only be determined in the context of a particular time zone -- hence the ambiguous part. // Get the current date in the local time zone of the system val today = Date . now () // Create a date from components val leapDay = Date ( 2020 , Month . February , 29 ) // Parse a date from ISO string representation val cincoDeMayo = \"2020-05-05\" . toDate () It's also possible to represent a date with reduced precision. For example, a YearMonth could be used to represent a credit card expiration date containing just a year and month. // Create a year-month from a year and month val expiration = YearMonth ( year , month ) // A year-month can also be built using the \"at\" operator val yearMonth : YearMonth = Year ( 2020 ) at Month . AUGUST Time of Day The Time class can be used to represent a time of the day in an ambiguous region. Unlike Date , there are no classes with reduced precision -- a Time is always precise to the nanosecond. // Get the current time in the local time zone of the system val currentTime = Time . now () // Create a time from components val time = Time ( 13 , 59 , 59 , 999 _999_999 ) // Destructure a time back into components val ( hour , minute , second , nanosecond ) = time Combined Date and Time of Day A DateTime combines a Date and Time , allowing you to represent both in a single data structure, still in an ambiguous region. // Create a date-time from individual date and time components val dateTime = DateTime ( 2020 , Month . JANUARY , 21 , 1 , 0 ) // Destructure a date-time val ( date , time ) = dateTime val date = Date ( 2019 , Month . MARCH , 15 ) // The \"at\" operator can also be used to create a date-time val anotherDateTime : DateTime = date at Time . NOON // Or you could get the date-time at midnight from a date val startOfDay : DateTime = date . startOfDay There's no guarantee that a particular DateTime will exist in every time zone and it could even exist twice, all thanks to the fun that is daylight savings time. We'll get into that more shortly, but it's important to keep this in mind since constructing or manipulating a DateTime directly can lead to subtle bugs. Instants in Time The classes we've looked at so far model dates and times in an ambiguous region, but often we want to unambiguously capture an instant in time. There are actually three different classes in Island Time that can do this, each serving a different purpose. Class Description Instant A timestamp ZonedDateTime A date and time of day in a particular time zone OffsetDateTime A date and time of day with fixed UTC offset An Instant is simply a number of seconds and nanoseconds that have elpased since the Unix epoch ( 1970-01-01T00:00Z ), ignoring leap seconds. There's no concept of \"date\" without conversion to one of the other types. Practically speaking, this is the class you should use when you don't care about the local time and just want a UTC timestamp. data class DogDto ( val name : String , val breed : String , // Capture the current system time val creationTime : Instant = Instant . now () ) To capture an instant along with the local time, you have two options -- OffsetDateTime and ZonedDateTime . Both store a date-time with an offset from UTC, however, ZonedDateTime is also aware of time zone rules, which is an important distinction. UtcOffset vs. TimeZone In Island Time, a UtcOffset is just a number of seconds that a local time must be adjusted forward or backward by to be equivalent to UTC. A TimeZone defines the rules used to determine the UTC offset. Time zones fall into two categories -- region-based ( TimeZone.Region ) and fixed offset ( TimeZone.FixedOffset ). Region-based zones have identifiers, such as \"America/New_York\" or \"Europe/London\", that correspond to entries in the IANA Time Zone Database . Fixed offset zones have a fixed UTC offset. While region-based zones are generally preferrable, a suitable one may not exist in all situations and sometimes you just want a fixed offset. ZonedDateTime vs. OffsetDateTime Most platforms nowadays draw their understanding of time zones from the IANA Time Zone Database , but time zones and their rules change all the time and different systems might have different versions of the database or only a subset of it available. This makes persistance and serialization of ZonedDateTime troublesome since there's the possibility that when it gets read later, the zone can't be found or its rules have changed, thus altering the local date and time. Using OffsetDateTime guarantees that you won't get an exception and the value you save will be the value that's read later, making it well-suited for this particular use case. More often than not though, you should use ZonedDateTime since it will handle daylight savings transitions correctly when doing calendrical calculations. You just might want to consider converting to an OffsetDateTime when you persist or serialize your data. val date = Date ( 2020 , Month . MARCH , 8 ) val time = Time ( 2 , 30 ) val zone = TimeZone ( \"America/New_York\" ) // 2:00 on March 8 marks the beginning of daylight savings time on the east // coast of the United States, so 2:30 doesn't exist. The time is automatically // adjusted by an hour to 3:30. val zonedDateTime = date at time at zone println ( zonedDateTime ) // Output: 2020-03-08T03:30-04:00 [America/New_York] // If we subtract an hour, the offset will revert to that of standard time println ( zonedDateTime - 1. hours ) // Output: 2020-03-08T01:30-05:00 [America/New_York] // It's easy to convert a ZonedDateTime to an OffsetDateTime println ( zonedDateTime . asOffsetDateTime ()) // Output: 2020-03-08T03:30-04:00 // It's also possible to change the time zone such that it uses a fixed offset // instead of \"America/New_York\", making it functionally equivalent to an // OffsetDateTime. println ( zonedDateTime . withFixedOffsetZone ()) // Output: 2020-03-08T03:30-04:00 // Or change the zone while preserving the captured instant println ( zonedDateTime . adjustedTo ( TimeZone ( \"America/Los_Angeles\" ))) // Output: 2020-03-07T23:30-08:00 Patterns and Operators Throughout Island Time's date-time primitives, you'll find a set of patterns that remain relatively constant as well as a number of operators that simplify common tasks. The at operator The at infix function can be used to build up date-time primitives from \"smaller\" pieces. For example, we can create a DateTime by combining a Date and a Time`. val dateTime = Date . now () at Time . NOON We can then turn that into a ZonedDateTime by combining it with a TimeZone . val zonedDateTime = dateTime at TimeZone . systemDefault () copy() Similar to Kotlin's data classes, each date-time primitive has a copy() method available, making it easy to create a copy while changing any number of properties. val dateTime = DateTime . now (). copy ( dayOfMonth = 15 ) val dateTimeAtMidnight = dateTime . copy ( time = Time . MIDNIGHT ) Arithmetic A duration of time can be added or subtracted from a date-time primitive. Which units are supported will vary depending on whether the primitive is date-based, time-based, or both. val tomorrow = Date . now () + 1. days val yesterday = Date . now () - 1. days val tenSecondsLater = Instant . now () + 10. seconds When working with ZonedDateTime , adding a day-based period of time may cross a daylight savings time transition, in which case, adding 1.days may not be the same as adding 24.hours . ISO representation Any date-time primitive can be converted to an appropriate ISO string format by simply calling toString() . To convert a string into a date-time primitive, use the appropriate conversion function, such as String.toDate() or String.toInstant() . val date = Date . now () val isoString : String = date . toString val dateFromString : Date = isoString . toDate () By default, Island Time reads and writes using ISO-8601 extended format, which is most common. Predefined parsers are also available that can read the less common basic format -- or both basic and extended. val basicDateString = \"20200305\" val date = basicDateString . toDate ( DateTimeParsers . Iso . Basic . DATE ) Start and end of time periods Relative to any date-based primitive, it's possible to get the start or end of a given period, be it the year, month, week, or day. val date = Date . now () val startOfYear = date . startOfYear val endOfYear = date . endOfYear val startOfMonth = date . startOfMonth val startOfDay : DateTime = date . startOfDay When it comes to weeks, we need to consider which day represents the start of the week. According to the ISO standard, that's Monday. However, depending on the locale, that may be on Sunday or Saturday instead. WeekSettings and Locale can be used to provide control over this. // Start of ISO week (Monday start) val isoStart = Date . now (). startOfWeek // Start of week using Sunday as start val sundayStart = Date . now (). startOfWeek ( WeekSettings . SUNDAY_START ) // Respect the user's system settings (usually, most appropriate) val systemStart = Date . now (). startOfWeek ( WeekSettings . systemDefault ()) // Use the default associated with a particular locale val localeStart = Date . now (). startOfWeek ( explicitLocale ) Previous or next day of week To get, say, the previous Tuesday from a particular date-time, you can do something like this: val now = ZonedDateTime . now () // Get the Tuesday before \"now\" at the same time of day val nowOnTuesday = now . previous ( TUESDAY ) // Get the Tuesday before \"now\" or \"now\" if it already falls on a Tuesday val nowOnTuesdayOrSame = now . previousOrSame ( TUESDAY ) Similarly, you can use next() or nextOrSame() to get the next day of the week relative to the current date. val today = Date . now () val nextWednesday = today . next ( WEDNESDAY ) val nextWednesdayOrToday = today . nextOrSame ( WEDNESDAY ) Rounding A time or date-time can be rounded up, down, or half-up to the precision of a particular unit or increment. val dateTime = DateTime . now () // Output: 2020-06-30T06:32:14.168 // Round half-up to the nearest minute val roundedToMinute = dateTime . roundedTo ( MINUTES ) // Output: 2020-06-30T06:32 // Round half-up to the nearest 15 minutes val roundedToNearest15Mins = dateTime . roundedToNearest ( 15. minutes ) // Output: 2020-06-30T06:30 // Round up to the nearest hour val roundedUpToHour = dateTime . roundedUpTo ( HOURS ) // Output: 2020-06-30T07:00 // Round down to the nearest hour val roundedDownToHour = dateTime . truncatedTo ( HOURS ) // Output: 2020-06-30T06:00 // Round down to the nearest 100 milliseconds val roundedDownTo100Millis = dateTime . roundedDownToNearest ( 100. milliseconds ) // Output: 2020-06-30T06:32:14.1","title":"Dates and Times"},{"location":"basics/dates-and-times/#dates-and-times","text":"Island Time has a wide array of different date-time classes, each tailored to its own set of use cases. These classes model the date and timekeeping system defined in ISO-8601 , the international standard for the exchange of dates and times. The ISO standard applies the present-day Gregorian calendar proleptically , which is to say, even to the time period before it was adopted .","title":"Dates and Times"},{"location":"basics/dates-and-times/#date-representations","text":"Class Precision Example ISO Representation Date day 2020-02-15 YearMonth month 2020-02 Year year 2020 The Date class represents a date in an ambiguous region. It could be in New York City. It could be in Tokyo. The instants in time that define the start and end of a Date can only be determined in the context of a particular time zone -- hence the ambiguous part. // Get the current date in the local time zone of the system val today = Date . now () // Create a date from components val leapDay = Date ( 2020 , Month . February , 29 ) // Parse a date from ISO string representation val cincoDeMayo = \"2020-05-05\" . toDate () It's also possible to represent a date with reduced precision. For example, a YearMonth could be used to represent a credit card expiration date containing just a year and month. // Create a year-month from a year and month val expiration = YearMonth ( year , month ) // A year-month can also be built using the \"at\" operator val yearMonth : YearMonth = Year ( 2020 ) at Month . AUGUST","title":"Date Representations"},{"location":"basics/dates-and-times/#time-of-day","text":"The Time class can be used to represent a time of the day in an ambiguous region. Unlike Date , there are no classes with reduced precision -- a Time is always precise to the nanosecond. // Get the current time in the local time zone of the system val currentTime = Time . now () // Create a time from components val time = Time ( 13 , 59 , 59 , 999 _999_999 ) // Destructure a time back into components val ( hour , minute , second , nanosecond ) = time","title":"Time of Day"},{"location":"basics/dates-and-times/#combined-date-and-time-of-day","text":"A DateTime combines a Date and Time , allowing you to represent both in a single data structure, still in an ambiguous region. // Create a date-time from individual date and time components val dateTime = DateTime ( 2020 , Month . JANUARY , 21 , 1 , 0 ) // Destructure a date-time val ( date , time ) = dateTime val date = Date ( 2019 , Month . MARCH , 15 ) // The \"at\" operator can also be used to create a date-time val anotherDateTime : DateTime = date at Time . NOON // Or you could get the date-time at midnight from a date val startOfDay : DateTime = date . startOfDay There's no guarantee that a particular DateTime will exist in every time zone and it could even exist twice, all thanks to the fun that is daylight savings time. We'll get into that more shortly, but it's important to keep this in mind since constructing or manipulating a DateTime directly can lead to subtle bugs.","title":"Combined Date and Time of Day"},{"location":"basics/dates-and-times/#instants-in-time","text":"The classes we've looked at so far model dates and times in an ambiguous region, but often we want to unambiguously capture an instant in time. There are actually three different classes in Island Time that can do this, each serving a different purpose. Class Description Instant A timestamp ZonedDateTime A date and time of day in a particular time zone OffsetDateTime A date and time of day with fixed UTC offset An Instant is simply a number of seconds and nanoseconds that have elpased since the Unix epoch ( 1970-01-01T00:00Z ), ignoring leap seconds. There's no concept of \"date\" without conversion to one of the other types. Practically speaking, this is the class you should use when you don't care about the local time and just want a UTC timestamp. data class DogDto ( val name : String , val breed : String , // Capture the current system time val creationTime : Instant = Instant . now () ) To capture an instant along with the local time, you have two options -- OffsetDateTime and ZonedDateTime . Both store a date-time with an offset from UTC, however, ZonedDateTime is also aware of time zone rules, which is an important distinction.","title":"Instants in Time"},{"location":"basics/dates-and-times/#utcoffset-vs-timezone","text":"In Island Time, a UtcOffset is just a number of seconds that a local time must be adjusted forward or backward by to be equivalent to UTC. A TimeZone defines the rules used to determine the UTC offset. Time zones fall into two categories -- region-based ( TimeZone.Region ) and fixed offset ( TimeZone.FixedOffset ). Region-based zones have identifiers, such as \"America/New_York\" or \"Europe/London\", that correspond to entries in the IANA Time Zone Database . Fixed offset zones have a fixed UTC offset. While region-based zones are generally preferrable, a suitable one may not exist in all situations and sometimes you just want a fixed offset.","title":"UtcOffset vs. TimeZone"},{"location":"basics/dates-and-times/#zoneddatetime-vs-offsetdatetime","text":"Most platforms nowadays draw their understanding of time zones from the IANA Time Zone Database , but time zones and their rules change all the time and different systems might have different versions of the database or only a subset of it available. This makes persistance and serialization of ZonedDateTime troublesome since there's the possibility that when it gets read later, the zone can't be found or its rules have changed, thus altering the local date and time. Using OffsetDateTime guarantees that you won't get an exception and the value you save will be the value that's read later, making it well-suited for this particular use case. More often than not though, you should use ZonedDateTime since it will handle daylight savings transitions correctly when doing calendrical calculations. You just might want to consider converting to an OffsetDateTime when you persist or serialize your data. val date = Date ( 2020 , Month . MARCH , 8 ) val time = Time ( 2 , 30 ) val zone = TimeZone ( \"America/New_York\" ) // 2:00 on March 8 marks the beginning of daylight savings time on the east // coast of the United States, so 2:30 doesn't exist. The time is automatically // adjusted by an hour to 3:30. val zonedDateTime = date at time at zone println ( zonedDateTime ) // Output: 2020-03-08T03:30-04:00 [America/New_York] // If we subtract an hour, the offset will revert to that of standard time println ( zonedDateTime - 1. hours ) // Output: 2020-03-08T01:30-05:00 [America/New_York] // It's easy to convert a ZonedDateTime to an OffsetDateTime println ( zonedDateTime . asOffsetDateTime ()) // Output: 2020-03-08T03:30-04:00 // It's also possible to change the time zone such that it uses a fixed offset // instead of \"America/New_York\", making it functionally equivalent to an // OffsetDateTime. println ( zonedDateTime . withFixedOffsetZone ()) // Output: 2020-03-08T03:30-04:00 // Or change the zone while preserving the captured instant println ( zonedDateTime . adjustedTo ( TimeZone ( \"America/Los_Angeles\" ))) // Output: 2020-03-07T23:30-08:00","title":"ZonedDateTime vs. OffsetDateTime"},{"location":"basics/dates-and-times/#patterns-and-operators","text":"Throughout Island Time's date-time primitives, you'll find a set of patterns that remain relatively constant as well as a number of operators that simplify common tasks.","title":"Patterns and Operators"},{"location":"basics/dates-and-times/#the-at-operator","text":"The at infix function can be used to build up date-time primitives from \"smaller\" pieces. For example, we can create a DateTime by combining a Date and a Time`. val dateTime = Date . now () at Time . NOON We can then turn that into a ZonedDateTime by combining it with a TimeZone . val zonedDateTime = dateTime at TimeZone . systemDefault ()","title":"The at operator"},{"location":"basics/dates-and-times/#copy","text":"Similar to Kotlin's data classes, each date-time primitive has a copy() method available, making it easy to create a copy while changing any number of properties. val dateTime = DateTime . now (). copy ( dayOfMonth = 15 ) val dateTimeAtMidnight = dateTime . copy ( time = Time . MIDNIGHT )","title":"copy()"},{"location":"basics/dates-and-times/#arithmetic","text":"A duration of time can be added or subtracted from a date-time primitive. Which units are supported will vary depending on whether the primitive is date-based, time-based, or both. val tomorrow = Date . now () + 1. days val yesterday = Date . now () - 1. days val tenSecondsLater = Instant . now () + 10. seconds When working with ZonedDateTime , adding a day-based period of time may cross a daylight savings time transition, in which case, adding 1.days may not be the same as adding 24.hours .","title":"Arithmetic"},{"location":"basics/dates-and-times/#iso-representation","text":"Any date-time primitive can be converted to an appropriate ISO string format by simply calling toString() . To convert a string into a date-time primitive, use the appropriate conversion function, such as String.toDate() or String.toInstant() . val date = Date . now () val isoString : String = date . toString val dateFromString : Date = isoString . toDate () By default, Island Time reads and writes using ISO-8601 extended format, which is most common. Predefined parsers are also available that can read the less common basic format -- or both basic and extended. val basicDateString = \"20200305\" val date = basicDateString . toDate ( DateTimeParsers . Iso . Basic . DATE )","title":"ISO representation"},{"location":"basics/dates-and-times/#start-and-end-of-time-periods","text":"Relative to any date-based primitive, it's possible to get the start or end of a given period, be it the year, month, week, or day. val date = Date . now () val startOfYear = date . startOfYear val endOfYear = date . endOfYear val startOfMonth = date . startOfMonth val startOfDay : DateTime = date . startOfDay When it comes to weeks, we need to consider which day represents the start of the week. According to the ISO standard, that's Monday. However, depending on the locale, that may be on Sunday or Saturday instead. WeekSettings and Locale can be used to provide control over this. // Start of ISO week (Monday start) val isoStart = Date . now (). startOfWeek // Start of week using Sunday as start val sundayStart = Date . now (). startOfWeek ( WeekSettings . SUNDAY_START ) // Respect the user's system settings (usually, most appropriate) val systemStart = Date . now (). startOfWeek ( WeekSettings . systemDefault ()) // Use the default associated with a particular locale val localeStart = Date . now (). startOfWeek ( explicitLocale )","title":"Start and end of time periods"},{"location":"basics/dates-and-times/#previous-or-next-day-of-week","text":"To get, say, the previous Tuesday from a particular date-time, you can do something like this: val now = ZonedDateTime . now () // Get the Tuesday before \"now\" at the same time of day val nowOnTuesday = now . previous ( TUESDAY ) // Get the Tuesday before \"now\" or \"now\" if it already falls on a Tuesday val nowOnTuesdayOrSame = now . previousOrSame ( TUESDAY ) Similarly, you can use next() or nextOrSame() to get the next day of the week relative to the current date. val today = Date . now () val nextWednesday = today . next ( WEDNESDAY ) val nextWednesdayOrToday = today . nextOrSame ( WEDNESDAY )","title":"Previous or next day of week"},{"location":"basics/dates-and-times/#rounding","text":"A time or date-time can be rounded up, down, or half-up to the precision of a particular unit or increment. val dateTime = DateTime . now () // Output: 2020-06-30T06:32:14.168 // Round half-up to the nearest minute val roundedToMinute = dateTime . roundedTo ( MINUTES ) // Output: 2020-06-30T06:32 // Round half-up to the nearest 15 minutes val roundedToNearest15Mins = dateTime . roundedToNearest ( 15. minutes ) // Output: 2020-06-30T06:30 // Round up to the nearest hour val roundedUpToHour = dateTime . roundedUpTo ( HOURS ) // Output: 2020-06-30T07:00 // Round down to the nearest hour val roundedDownToHour = dateTime . truncatedTo ( HOURS ) // Output: 2020-06-30T06:00 // Round down to the nearest 100 milliseconds val roundedDownTo100Millis = dateTime . roundedDownToNearest ( 100. milliseconds ) // Output: 2020-06-30T06:32:14.1","title":"Rounding"},{"location":"basics/durations/","text":"Durations In Island Time, durations are fully type-safe. The use of durations in terms of a single unit is encouraged where possible. Date-based periods in terms of multiple units and long time-based durations are also available. Single Unit Durations Island Time provides inline classes representing each individual duration unit, backed by either a Long or Int -- such as IntYears , IntHours , or LongNanoseconds . This allows the precision of each quantity to be maintained, avoids ambiguitity regarding the meaning of a day (ie. conceptual vs. 24 hours), and is quite efficient as well. When adding or subtracting quantities in mixed units, precision is increased automatically as needed. For example: // The minimum necessary unit granularity is preserved when // combining different units val totalSeconds : IntSeconds = 5. hours + 30. minutes + 1. seconds // Math with Int values on sub-second units forces a lengthing // to Long due to overflow potential val nanoseconds : LongNanoseconds = 5. seconds + 1. nanoseconds A quantity in one unit can be broken down into parts in terms of \"bigger\" units using the toComponents() method. 61. minutes . toComponents { hours : IntHours , minutes : IntMinutes -> println ( hours ) // PT1H println ( minutes ) // PT1M } Or converted to another unit: val hours : IntHours = 60. minutes . inHours You can also get the duration between two date-times in terms of any given unit. val hours = hoursBetween ( firstDateTime , secondDateTime ) val absHours = hours . absoluteValue // hours may be negative Duration The Duration class can be used to represent time-based durations that are potentially very large at nanosecond precision. In most cases, it's probably unnecessary to use and single unit durations will be perfectly satisfactory, but you can be assured that overflow won't happen when expressing any duration that fits within the supported time scale. A single unit duration can be converted to a Duration like so: val duration : Duration = 5. seconds . asDuration () To construct a Duration from seconds and nanoseconds in a single step, you can use durationOf() . val duration : Duration = durationOf ( 5. seconds , 100. nanoseconds ) The methods and operators available to Duration are mostly the same as those on the single unit durations. val duration : Duration = durationBetween ( firstDateTime , secondDateTime ) val minutes : LongMinutes = duration . inMinutes Period A Period is a date-based measurement of time consisting of a number of years, months, and days. The code below shows some of things that you can do with it. val period : Period = periodOf ( 5. years , 13. months , 10. days ) // Convert months to years where appropriate val normalizedPeriod = period . normalized () // 6.years, 1.months, 10.days // Units can be added or subtracted val modifiedPeriod = period - 1. years - 15. days // 5.years, 1.months, (-5).days // Or inverted val invertedPeriod = - period // (-5).years, (-13).months, (-10).days // The period can also be destructured val ( years , months , days ) = period // We can also get the period between two dates val periodBetweenDates = periodBetween ( date1 , date2 ) ISO Representation Similar to date-times, calling toString() on any duration will return an ISO representation, such as PT23H12M or P0D . String.toDuration() or String.toPeriod() can be used to convert an ISO duration string into an object of the corresponding type. val period = periodOf ( 5. years , 13. months , (- 10 ). days ) val isoString = period . toString () // P5Y13M-10D val readPeriod = isoString . toPeriod () Currently, there's no way to represent a full ISO duration consisting of both date and time components and it's not possible to parse a string directly to a single duration unit. Some changes in this area are planned for the future.","title":"Durations"},{"location":"basics/durations/#durations","text":"In Island Time, durations are fully type-safe. The use of durations in terms of a single unit is encouraged where possible. Date-based periods in terms of multiple units and long time-based durations are also available.","title":"Durations"},{"location":"basics/durations/#single-unit-durations","text":"Island Time provides inline classes representing each individual duration unit, backed by either a Long or Int -- such as IntYears , IntHours , or LongNanoseconds . This allows the precision of each quantity to be maintained, avoids ambiguitity regarding the meaning of a day (ie. conceptual vs. 24 hours), and is quite efficient as well. When adding or subtracting quantities in mixed units, precision is increased automatically as needed. For example: // The minimum necessary unit granularity is preserved when // combining different units val totalSeconds : IntSeconds = 5. hours + 30. minutes + 1. seconds // Math with Int values on sub-second units forces a lengthing // to Long due to overflow potential val nanoseconds : LongNanoseconds = 5. seconds + 1. nanoseconds A quantity in one unit can be broken down into parts in terms of \"bigger\" units using the toComponents() method. 61. minutes . toComponents { hours : IntHours , minutes : IntMinutes -> println ( hours ) // PT1H println ( minutes ) // PT1M } Or converted to another unit: val hours : IntHours = 60. minutes . inHours You can also get the duration between two date-times in terms of any given unit. val hours = hoursBetween ( firstDateTime , secondDateTime ) val absHours = hours . absoluteValue // hours may be negative","title":"Single Unit Durations"},{"location":"basics/durations/#duration","text":"The Duration class can be used to represent time-based durations that are potentially very large at nanosecond precision. In most cases, it's probably unnecessary to use and single unit durations will be perfectly satisfactory, but you can be assured that overflow won't happen when expressing any duration that fits within the supported time scale. A single unit duration can be converted to a Duration like so: val duration : Duration = 5. seconds . asDuration () To construct a Duration from seconds and nanoseconds in a single step, you can use durationOf() . val duration : Duration = durationOf ( 5. seconds , 100. nanoseconds ) The methods and operators available to Duration are mostly the same as those on the single unit durations. val duration : Duration = durationBetween ( firstDateTime , secondDateTime ) val minutes : LongMinutes = duration . inMinutes","title":"Duration"},{"location":"basics/durations/#period","text":"A Period is a date-based measurement of time consisting of a number of years, months, and days. The code below shows some of things that you can do with it. val period : Period = periodOf ( 5. years , 13. months , 10. days ) // Convert months to years where appropriate val normalizedPeriod = period . normalized () // 6.years, 1.months, 10.days // Units can be added or subtracted val modifiedPeriod = period - 1. years - 15. days // 5.years, 1.months, (-5).days // Or inverted val invertedPeriod = - period // (-5).years, (-13).months, (-10).days // The period can also be destructured val ( years , months , days ) = period // We can also get the period between two dates val periodBetweenDates = periodBetween ( date1 , date2 )","title":"Period"},{"location":"basics/durations/#iso-representation","text":"Similar to date-times, calling toString() on any duration will return an ISO representation, such as PT23H12M or P0D . String.toDuration() or String.toPeriod() can be used to convert an ISO duration string into an object of the corresponding type. val period = periodOf ( 5. years , 13. months , (- 10 ). days ) val isoString = period . toString () // P5Y13M-10D val readPeriod = isoString . toPeriod () Currently, there's no way to represent a full ISO duration consisting of both date and time components and it's not possible to parse a string directly to a single duration unit. Some changes in this area are planned for the future.","title":"ISO Representation"},{"location":"basics/general-design/","text":"General Design Being heavily inspired by the java.time library, Island Time tends to follow many of the same design principles. Immutability All of the date-time primitives are immutable and thread-safe. Operations that manipulate a date, time, duration, or interval will always return a new object. Precision Island Time uses integer rather than floating-point values, offering a fixed nanosecond precision across the entire supported time scale. This avoids any surprises that might emerge from the use of floating-point arithmetic and the reduction in precision that occurs when representing larger durations. Overflow Handling When working with dates and times, overflow is almost never a behavior that you want. See Y2k or Time formatting and storage bugs . Island Time uses checked arithmetic throughout to detect overflow and throw exceptions rather than failing silently. Type-Safety In general, Island Time tries to prevent non-sensical operations at compile time rather than runtime. To that end, you'll find that there are a lot more classes than there are in a number of other date-time libraries.","title":"General Design"},{"location":"basics/general-design/#general-design","text":"Being heavily inspired by the java.time library, Island Time tends to follow many of the same design principles.","title":"General Design"},{"location":"basics/general-design/#immutability","text":"All of the date-time primitives are immutable and thread-safe. Operations that manipulate a date, time, duration, or interval will always return a new object.","title":"Immutability"},{"location":"basics/general-design/#precision","text":"Island Time uses integer rather than floating-point values, offering a fixed nanosecond precision across the entire supported time scale. This avoids any surprises that might emerge from the use of floating-point arithmetic and the reduction in precision that occurs when representing larger durations.","title":"Precision"},{"location":"basics/general-design/#overflow-handling","text":"When working with dates and times, overflow is almost never a behavior that you want. See Y2k or Time formatting and storage bugs . Island Time uses checked arithmetic throughout to detect overflow and throw exceptions rather than failing silently.","title":"Overflow Handling"},{"location":"basics/general-design/#type-safety","text":"In general, Island Time tries to prevent non-sensical operations at compile time rather than runtime. To that end, you'll find that there are a lot more classes than there are in a number of other date-time libraries.","title":"Type-Safety"},{"location":"basics/interop/","text":"Interop In a Kotlin Multiplatform project, it's often necessary to interoperate with code using platform libraries directly. Island Time provides a number of conversion operators to simplify this. Java Time Library Island Time's classes map very closely to those in java.time , making it pretty easy to go back and forth between them. val javaLocalDate = java . time . LocalDate . now () // Convert a Java LocalDate to Island Time Date val islandDate = javaLocalDate . toIslandDate () // Convert an Island Time Date back to a Java LocalDate val backToJavaLocalDate = islandDate . toJavaLocalDate () The pattern above can be applied for the majority of the date-time and duration classes. For durations, it's also possible to convert any of Island Time's single unit durations directly to a Java Duration . val javaDuration : java . time . Duration = 30. minutes . toJavaDuration () Apple Foundation Classes We can map between some of the Island Time types and the date-time types provided in Apple's Foundation API, such as NSDate , NSDateComponents , and NSTimeZone . Keep in mind that NSDate and NSTimeInterval are based around floating-point numbers, so conversion can result in lost precision sometimes. // NSDate is a timestamp, just like Instant val islandInstant = Instant . now () val nsDate = islandInstant . toNSDate () val islandInstantAgain = nsDate . toIslandInstant () // NSDateComponents separates out the calendar/time components, roughly modeling // Date, DateTime, ZonedDateTime, et all val zonedDateTime = ZonedDateTime . now () val nsDateComponents = zonedDateTime . toNSDateComponents () val zonedDateTimeAgain = nsDateComponents . toIslandZonedDateTimeOrNull () // Convert from IntMinutes to NSTimeInterval val nsTimeInterval = 5. minutes . toNSTimeInterval () kotlin.time The Kotlin Standard Library has an experimental Duration type of its own, which you can convert to and from Island Time durations. Kotlin's Duration is based on a floating-point number, so keep in mind that conversion can be lossy. import kotlin.time.seconds as kotlinSeconds // Convert from Island Time IntMinutes to Kotlin Duration val kotlinDuration : kotlin . time . Duration = 30. minutes . toKotlinDuration () // Convert from Kotlin Duration to Island Time Duration val islandDuration : Duration = 30. kotlinSeconds . toIslandDuration ()","title":"Interop"},{"location":"basics/interop/#interop","text":"In a Kotlin Multiplatform project, it's often necessary to interoperate with code using platform libraries directly. Island Time provides a number of conversion operators to simplify this.","title":"Interop"},{"location":"basics/interop/#java-time-library","text":"Island Time's classes map very closely to those in java.time , making it pretty easy to go back and forth between them. val javaLocalDate = java . time . LocalDate . now () // Convert a Java LocalDate to Island Time Date val islandDate = javaLocalDate . toIslandDate () // Convert an Island Time Date back to a Java LocalDate val backToJavaLocalDate = islandDate . toJavaLocalDate () The pattern above can be applied for the majority of the date-time and duration classes. For durations, it's also possible to convert any of Island Time's single unit durations directly to a Java Duration . val javaDuration : java . time . Duration = 30. minutes . toJavaDuration ()","title":"Java Time Library"},{"location":"basics/interop/#apple-foundation-classes","text":"We can map between some of the Island Time types and the date-time types provided in Apple's Foundation API, such as NSDate , NSDateComponents , and NSTimeZone . Keep in mind that NSDate and NSTimeInterval are based around floating-point numbers, so conversion can result in lost precision sometimes. // NSDate is a timestamp, just like Instant val islandInstant = Instant . now () val nsDate = islandInstant . toNSDate () val islandInstantAgain = nsDate . toIslandInstant () // NSDateComponents separates out the calendar/time components, roughly modeling // Date, DateTime, ZonedDateTime, et all val zonedDateTime = ZonedDateTime . now () val nsDateComponents = zonedDateTime . toNSDateComponents () val zonedDateTimeAgain = nsDateComponents . toIslandZonedDateTimeOrNull () // Convert from IntMinutes to NSTimeInterval val nsTimeInterval = 5. minutes . toNSTimeInterval ()","title":"Apple Foundation Classes"},{"location":"basics/interop/#kotlintime","text":"The Kotlin Standard Library has an experimental Duration type of its own, which you can convert to and from Island Time durations. Kotlin's Duration is based on a floating-point number, so keep in mind that conversion can be lossy. import kotlin.time.seconds as kotlinSeconds // Convert from Island Time IntMinutes to Kotlin Duration val kotlinDuration : kotlin . time . Duration = 30. minutes . toKotlinDuration () // Convert from Kotlin Duration to Island Time Duration val islandDuration : Duration = 30. kotlinSeconds . toIslandDuration ()","title":"kotlin.time"},{"location":"basics/parsing/","text":"Parsing Predefined Parsers Out of the box, Island Time can parse the most common ISO-8601 formats for dates, times, durations, and time intervals. The set of included parsers can be found in DateTimeParsers . Custom Parsers In an ideal world, non-ISO formats wouldn\u2019t exist, but sometimes they do and you need to parse them. To support that, you can define custom parsers using a DSL. // Define a custom parser val customParser = dateTimeParser { monthNumber () anyOf ({ + '/' }, { + '-' }) dayOfMonth () optional { anyOf ({ + '/' }, { + '-' }) year () } } // Parse a date using it try { val date = \"3/17/2020\" . toDate ( customParser ) } catch ( e : DateTimeException ) { // ... } When dealing with ranges and intervals, you'll need to define a \"grouped\" parser, which can handle multiple results. val customGroupedParser = groupedDateTimeParser { group { childParser ( customParser ) } + \"--\" group { childParser ( customParser ) } } val dateRange = \"3/17/2020--4/5/2020\" . toDateRange ( customGroupedParser )","title":"Parsing"},{"location":"basics/parsing/#parsing","text":"","title":"Parsing"},{"location":"basics/parsing/#predefined-parsers","text":"Out of the box, Island Time can parse the most common ISO-8601 formats for dates, times, durations, and time intervals. The set of included parsers can be found in DateTimeParsers .","title":"Predefined Parsers"},{"location":"basics/parsing/#custom-parsers","text":"In an ideal world, non-ISO formats wouldn\u2019t exist, but sometimes they do and you need to parse them. To support that, you can define custom parsers using a DSL. // Define a custom parser val customParser = dateTimeParser { monthNumber () anyOf ({ + '/' }, { + '-' }) dayOfMonth () optional { anyOf ({ + '/' }, { + '-' }) year () } } // Parse a date using it try { val date = \"3/17/2020\" . toDate ( customParser ) } catch ( e : DateTimeException ) { // ... } When dealing with ranges and intervals, you'll need to define a \"grouped\" parser, which can handle multiple results. val customGroupedParser = groupedDateTimeParser { group { childParser ( customParser ) } + \"--\" group { childParser ( customParser ) } } val dateRange = \"3/17/2020--4/5/2020\" . toDateRange ( customGroupedParser )","title":"Custom Parsers"},{"location":"basics/time-intervals/","text":"Time Intervals Kotlin offers first class support for ranges and Island Time takes full advantage of that, allowing you to model date ranges and time intervals in a way that feels natural. Nomenclature: \"Ranges\" vs. \"Intervals\" In Island Time, \"ranges\" are inclusive, implementing Kotlin's ClosedRange , while \"intervals\" are half-open with an exclusive end. When representing time-based intervals, precision differences (ie. millisecond vs nanosecond) can make an inclusive end troublesome to work with, so while you can create an interval from a closed range, it'll be stored, read, and written with an exclusive end. DateRange A range of dates can be represented by a DateRange , which is also a progression , allowing you to iterate over each day in the range. Using a custom step , you can iterate with an increment of any number of days, weeks, months, or years. You can also use until and downTo just like you can with Kotlin's built-in types. val clock : Clock = SystemClock () val today : Date = Date . now ( clock ) // Create a date range val dateRange : DateRange = today - 1. months .. today // Iterate over each day in the range for ( date in dateRange ) { val startOfDay : ZonedDateTime = date . startOfDayAt ( clock . zone ) val endOfDay : ZonedDateTime = date . endOfDayAt ( clock . zone ) // ... } // Step by months instead of days for ( date in today until today + 1. years step 1. months ) { // ... } Additional operations are also supported, such as random() and the ability to get the length of the range in terms of whatever unit you'd like. // Pick a random date val randomDate = ( today .. today + 1. months ). random () // Get the total number of days val totalDays : LongDays = ( today until today + 6. months ). lengthInDays // Get the Period represented by the range val period : Period = ( today .. today + 1. months ). asPeriod () Time-Based Intervals Each of the date-time classes has a corresponding interval class. Class Example ISO Representation DateTimeInterval 2020-04-15T10:00/2020-04-15T13:00 InstantInterval 2020-04-15T10:00Z/2020-04-15T13:00Z OffsetDateTimeInterval 2020-03-09T14:00-05:00/2020-03-10T17:00-04:00 ZonedDateTimeInterval 2020-04-15T10:00-04:00[America/New_York]/2020-04-15T21:30+01:00[Europe/London] Inclusivity within a time interval is based on the instants defined by the start and end points (ie. timeline order, not natural order), which is in an important consideration for OffsetDateTimeInterval and ZonedDateTimeInterval , where there may be differing offsets. Iterating over time intervals Only InstantInterval allows iteration, though the other types can be converted easily. val now : ZonedDateTime = ZonedDateTime . now () val zonedDateTimeInterval : ZonedDateTimeInterval = now until now + 1. weeks val instantInterval : InstantInterval = zonedDateTimeInterval . asInstantInterval () Unlike with date ranges, the step is necessary to create a progression. val now = Instant . now () val then = now + 1. hours for ( instant in now until then step 1. seconds ) { // ... } Unbounded and Empty Intervals A range or interval may be unbounded on one or both ends -- or empty. The MIN and MAX sentinels can be used to indicate the \"far past\" or \"far future\". val partiallyBoundedDateRange = \"2020-04-12/..\" . toDateRange () assertFalse { partiallyBoundedDateRange . isBounded () } // Most operations are not valid on unbounded ranges assertFailsWith < UnsupportedOperationException > { partiallyBoundedDateRange . lengthInYears } // Range containing every representable date val completelyUnbounded = DateRange . UNBOUNDED // Range containing no dates val emptyDateRange = DateRange . EMPTY \"Unbounded\" vs. \"Open\" In ISO-8601, an \"unbounded\" interval is referred to as an \"open\" interval. This conflicts with the mathematical meaning of \"open\" though (ie. end points that are exclusive rather than inclusive), so we avoid using that terminology. ISO Representation As with all of the other types in Island Time, calling toString() on an interval will return an ISO represention, which can be converted back to the appropriate interval type using methods like String.toDateRange() . val firstDate = Date ( 2020 , MARCH , 1 ) val secondDate = Date ( 2020 , MAY , 13 ) val dateRange : DateRange = firstDate .. secondDate val isoDateRangeString = dateRange . toString () // Output: 2020-03-01/2020-05-13 val readDateRange = isoDateRangeString . toDateRange () val zone = TimeZone ( \"America/New_York\" ) val zonedInterval : ZonedDateTimeInterval = dateRange . toZonedDateTimeIntervalAt ( zone ) val isoZonedIntervalString = instantInterval . toString () // Output: 2020-03-01T00:00-05:00[America/New_York]/2020-05-13T23:59:59.999999999-04:00[America/New_York] val readZonedInterval = isoZonedIntervalString . toZonedDateTimeInterval () By default, Island Time parses only ISO-8601 extended format, but predefined parsers are also available that can read the less common basic format -- or either format.","title":"Time Intervals"},{"location":"basics/time-intervals/#time-intervals","text":"Kotlin offers first class support for ranges and Island Time takes full advantage of that, allowing you to model date ranges and time intervals in a way that feels natural.","title":"Time Intervals"},{"location":"basics/time-intervals/#nomenclature-ranges-vs-intervals","text":"In Island Time, \"ranges\" are inclusive, implementing Kotlin's ClosedRange , while \"intervals\" are half-open with an exclusive end. When representing time-based intervals, precision differences (ie. millisecond vs nanosecond) can make an inclusive end troublesome to work with, so while you can create an interval from a closed range, it'll be stored, read, and written with an exclusive end.","title":"Nomenclature: \"Ranges\" vs. \"Intervals\""},{"location":"basics/time-intervals/#daterange","text":"A range of dates can be represented by a DateRange , which is also a progression , allowing you to iterate over each day in the range. Using a custom step , you can iterate with an increment of any number of days, weeks, months, or years. You can also use until and downTo just like you can with Kotlin's built-in types. val clock : Clock = SystemClock () val today : Date = Date . now ( clock ) // Create a date range val dateRange : DateRange = today - 1. months .. today // Iterate over each day in the range for ( date in dateRange ) { val startOfDay : ZonedDateTime = date . startOfDayAt ( clock . zone ) val endOfDay : ZonedDateTime = date . endOfDayAt ( clock . zone ) // ... } // Step by months instead of days for ( date in today until today + 1. years step 1. months ) { // ... } Additional operations are also supported, such as random() and the ability to get the length of the range in terms of whatever unit you'd like. // Pick a random date val randomDate = ( today .. today + 1. months ). random () // Get the total number of days val totalDays : LongDays = ( today until today + 6. months ). lengthInDays // Get the Period represented by the range val period : Period = ( today .. today + 1. months ). asPeriod ()","title":"DateRange"},{"location":"basics/time-intervals/#time-based-intervals","text":"Each of the date-time classes has a corresponding interval class. Class Example ISO Representation DateTimeInterval 2020-04-15T10:00/2020-04-15T13:00 InstantInterval 2020-04-15T10:00Z/2020-04-15T13:00Z OffsetDateTimeInterval 2020-03-09T14:00-05:00/2020-03-10T17:00-04:00 ZonedDateTimeInterval 2020-04-15T10:00-04:00[America/New_York]/2020-04-15T21:30+01:00[Europe/London] Inclusivity within a time interval is based on the instants defined by the start and end points (ie. timeline order, not natural order), which is in an important consideration for OffsetDateTimeInterval and ZonedDateTimeInterval , where there may be differing offsets.","title":"Time-Based Intervals"},{"location":"basics/time-intervals/#iterating-over-time-intervals","text":"Only InstantInterval allows iteration, though the other types can be converted easily. val now : ZonedDateTime = ZonedDateTime . now () val zonedDateTimeInterval : ZonedDateTimeInterval = now until now + 1. weeks val instantInterval : InstantInterval = zonedDateTimeInterval . asInstantInterval () Unlike with date ranges, the step is necessary to create a progression. val now = Instant . now () val then = now + 1. hours for ( instant in now until then step 1. seconds ) { // ... }","title":"Iterating over time intervals"},{"location":"basics/time-intervals/#unbounded-and-empty-intervals","text":"A range or interval may be unbounded on one or both ends -- or empty. The MIN and MAX sentinels can be used to indicate the \"far past\" or \"far future\". val partiallyBoundedDateRange = \"2020-04-12/..\" . toDateRange () assertFalse { partiallyBoundedDateRange . isBounded () } // Most operations are not valid on unbounded ranges assertFailsWith < UnsupportedOperationException > { partiallyBoundedDateRange . lengthInYears } // Range containing every representable date val completelyUnbounded = DateRange . UNBOUNDED // Range containing no dates val emptyDateRange = DateRange . EMPTY \"Unbounded\" vs. \"Open\" In ISO-8601, an \"unbounded\" interval is referred to as an \"open\" interval. This conflicts with the mathematical meaning of \"open\" though (ie. end points that are exclusive rather than inclusive), so we avoid using that terminology.","title":"Unbounded and Empty Intervals"},{"location":"basics/time-intervals/#iso-representation","text":"As with all of the other types in Island Time, calling toString() on an interval will return an ISO represention, which can be converted back to the appropriate interval type using methods like String.toDateRange() . val firstDate = Date ( 2020 , MARCH , 1 ) val secondDate = Date ( 2020 , MAY , 13 ) val dateRange : DateRange = firstDate .. secondDate val isoDateRangeString = dateRange . toString () // Output: 2020-03-01/2020-05-13 val readDateRange = isoDateRangeString . toDateRange () val zone = TimeZone ( \"America/New_York\" ) val zonedInterval : ZonedDateTimeInterval = dateRange . toZonedDateTimeIntervalAt ( zone ) val isoZonedIntervalString = instantInterval . toString () // Output: 2020-03-01T00:00-05:00[America/New_York]/2020-05-13T23:59:59.999999999-04:00[America/New_York] val readZonedInterval = isoZonedIntervalString . toZonedDateTimeInterval () By default, Island Time parses only ISO-8601 extended format, but predefined parsers are also available that can read the less common basic format -- or either format.","title":"ISO Representation"},{"location":"extensions/parcelize/","text":"@Parcelize The parcelize-extensions artifact provides a set of parcelers for use with the Parcelable implementation generator in the Kotlin Android Extensions. Gradle Setup Groovy dependencies { implementation \"io.islandtime:parcelize-extensions:1.2.2\" } Kotlin dependencies { implementation ( \"io.islandtime:parcelize-extensions:1.2.2\" ) } Usage Custom parcelers are available for each of Island Time's date-time primitives, durations, and intervals, allowing you to use them within Parcelable classes. @Parcelize @TypeParceler < Date , DateParceler >() data class MyParcelable ( val name : String , val date : Date ) : Parcelable In the above example, DateParceler is used to generate a class containing a non-nullable Date . You could make the Date nullable instead by using NullableDateParceler . @Parcelize @TypeParceler < Date ?, NullableDateParceler >() data class MyParcelableWithNull ( val name : String , val date : Date ? ) : Parcelable See the Parcelize Extensions API documention for the full list of available parcelers.","title":"Parcelize"},{"location":"extensions/parcelize/#parcelize","text":"The parcelize-extensions artifact provides a set of parcelers for use with the Parcelable implementation generator in the Kotlin Android Extensions.","title":"@Parcelize"},{"location":"extensions/parcelize/#gradle-setup","text":"Groovy dependencies { implementation \"io.islandtime:parcelize-extensions:1.2.2\" } Kotlin dependencies { implementation ( \"io.islandtime:parcelize-extensions:1.2.2\" ) }","title":"Gradle Setup"},{"location":"extensions/parcelize/#usage","text":"Custom parcelers are available for each of Island Time's date-time primitives, durations, and intervals, allowing you to use them within Parcelable classes. @Parcelize @TypeParceler < Date , DateParceler >() data class MyParcelable ( val name : String , val date : Date ) : Parcelable In the above example, DateParceler is used to generate a class containing a non-nullable Date . You could make the Date nullable instead by using NullableDateParceler . @Parcelize @TypeParceler < Date ?, NullableDateParceler >() data class MyParcelableWithNull ( val name : String , val date : Date ? ) : Parcelable See the Parcelize Extensions API documention for the full list of available parcelers.","title":"Usage"},{"location":"extensions/serialization/","text":"Serialization Island Time provides an artifact containing custom serializers for use with Kotlin Serialization . These can be used to convert dates, times, durations, and intervals into ISO-compatible strings, which work well with JSON. Gradle Setup Add the following dependency to your project's Gradle script: Groovy dependencies { implementation \"io.islandtime:serialization-extensions:1.2.2\" } Kotlin dependencies { implementation ( \"io.islandtime:serialization-extensions:1.2.2\" ) } Note Island Time publishes Gradle Module Metadata for all multiplatform artifacts. The listed \"common\" artifacts may be used in the dependency block of any target, common or platform-specific. Serializing to JSON For example purposes, let's assume we have a data structure describing an event that we'd like to serialize. @Serializable data class EventDto ( val name : String , @Serializable ( with = DateRangeSerializer :: class ) val dateRange : DateRange , @Serializable ( with = InstantSerializer :: class ) val createdAt : Instant ) By using the @Serializable annotation, we instruct the Kotlin Serialization plugin to generate a serializer for the EventDto class. Island Time's DateRange and Instant classes are not serializable out of the box, so we explicitly specify the serializers provided by Island Time. Now, we can serialize the EventDto class to JSON with the following code: fun writeToJson ( val event : EventDto ): String { val json = Json ( JsonConfiguration . Stable . copy ( prettyPrint = true )) return json . stringify ( EventDto . serializer (), event ) } Example output might look something like this: { \"name\" : \"KotlinConf 2019\" , \"dateRange\" : \"2019-12-04/2012-12-06\" , \"createdAt\" : \"2020-03-14T14:19:03.478Z\" } For more information on how to use Kotlin Serialization, consult the GitHub page . Binary Formats At the present time, there are no serializers tuned specifically for binary formats. If you have a use case that requires that, feel free to raise an issue .","title":"Serialization"},{"location":"extensions/serialization/#serialization","text":"Island Time provides an artifact containing custom serializers for use with Kotlin Serialization . These can be used to convert dates, times, durations, and intervals into ISO-compatible strings, which work well with JSON.","title":"Serialization"},{"location":"extensions/serialization/#gradle-setup","text":"Add the following dependency to your project's Gradle script: Groovy dependencies { implementation \"io.islandtime:serialization-extensions:1.2.2\" } Kotlin dependencies { implementation ( \"io.islandtime:serialization-extensions:1.2.2\" ) } Note Island Time publishes Gradle Module Metadata for all multiplatform artifacts. The listed \"common\" artifacts may be used in the dependency block of any target, common or platform-specific.","title":"Gradle Setup"},{"location":"extensions/serialization/#serializing-to-json","text":"For example purposes, let's assume we have a data structure describing an event that we'd like to serialize. @Serializable data class EventDto ( val name : String , @Serializable ( with = DateRangeSerializer :: class ) val dateRange : DateRange , @Serializable ( with = InstantSerializer :: class ) val createdAt : Instant ) By using the @Serializable annotation, we instruct the Kotlin Serialization plugin to generate a serializer for the EventDto class. Island Time's DateRange and Instant classes are not serializable out of the box, so we explicitly specify the serializers provided by Island Time. Now, we can serialize the EventDto class to JSON with the following code: fun writeToJson ( val event : EventDto ): String { val json = Json ( JsonConfiguration . Stable . copy ( prettyPrint = true )) return json . stringify ( EventDto . serializer (), event ) } Example output might look something like this: { \"name\" : \"KotlinConf 2019\" , \"dateRange\" : \"2019-12-04/2012-12-06\" , \"createdAt\" : \"2020-03-14T14:19:03.478Z\" } For more information on how to use Kotlin Serialization, consult the GitHub page .","title":"Serializing to JSON"},{"location":"extensions/serialization/#binary-formats","text":"At the present time, there are no serializers tuned specifically for binary formats. If you have a use case that requires that, feel free to raise an issue .","title":"Binary Formats"},{"location":"extensions/threetenabp/","text":"ThreeTen Android Backport Island Time normally depends on the java.time API to access time zone database information, but this is only available in Android API level 26 and above. While Android Studio 4.0's core library desugaring will alleviate this problem soon, in the interim, the threetenabp-extensions artifact provides support for using the Android JSR-310 Backport instead. Gradle Setup Add the following Android-only dependency to your project's Gradle script: Groovy dependencies { implementation \"io.islandtime:threetenabp-extensions:1.2.2\" } Kotlin dependencies { implementation ( \"io.islandtime:threetenabp-extensions:1.2.2\" ) } Initialization You need to initialize Island Time with the AndroidThreeTenProvider before using any of the library's functionality. Generally, you'll want to do this during Application.onCreate() . // Note that it isn't necessary to call AndroidThreeTen.init() separately IslandTime . initialize { timeZoneRulesProvider = AndroidThreeTenProvider ( context ) } Island Time can only be initialized once. Subsequent attempts to initialize it will throw an exception. This is intended to alert you to potentially undesirable behavior as a result of late initialization or attempts to use different providers in different places. In a test environment though, this can sometimes be problematic, so you may explciitly restore Island Time to an unitialized state using the reset() function: IslandTime . reset () // It's now safe to initialize Island Time again For more information, see Custom Providers . Additional Extensions In addition to the time zone database provider, there is also a set of extension methods allowing you to convert between Island Time types and equivalent Java types in the org.threeten.bp namespace. Consult the API docs for more details.","title":"ThreeTen Android Backport"},{"location":"extensions/threetenabp/#threeten-android-backport","text":"Island Time normally depends on the java.time API to access time zone database information, but this is only available in Android API level 26 and above. While Android Studio 4.0's core library desugaring will alleviate this problem soon, in the interim, the threetenabp-extensions artifact provides support for using the Android JSR-310 Backport instead.","title":"ThreeTen Android Backport"},{"location":"extensions/threetenabp/#gradle-setup","text":"Add the following Android-only dependency to your project's Gradle script: Groovy dependencies { implementation \"io.islandtime:threetenabp-extensions:1.2.2\" } Kotlin dependencies { implementation ( \"io.islandtime:threetenabp-extensions:1.2.2\" ) }","title":"Gradle Setup"},{"location":"extensions/threetenabp/#initialization","text":"You need to initialize Island Time with the AndroidThreeTenProvider before using any of the library's functionality. Generally, you'll want to do this during Application.onCreate() . // Note that it isn't necessary to call AndroidThreeTen.init() separately IslandTime . initialize { timeZoneRulesProvider = AndroidThreeTenProvider ( context ) } Island Time can only be initialized once. Subsequent attempts to initialize it will throw an exception. This is intended to alert you to potentially undesirable behavior as a result of late initialization or attempts to use different providers in different places. In a test environment though, this can sometimes be problematic, so you may explciitly restore Island Time to an unitialized state using the reset() function: IslandTime . reset () // It's now safe to initialize Island Time again For more information, see Custom Providers .","title":"Initialization"},{"location":"extensions/threetenabp/#additional-extensions","text":"In addition to the time zone database provider, there is also a set of extension methods allowing you to convert between Island Time types and equivalent Java types in the org.threeten.bp namespace. Consult the API docs for more details.","title":"Additional Extensions"}]}